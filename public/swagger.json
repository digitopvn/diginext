{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ResponseData": {
				"properties": {
					"status": {
						"type": "number",
						"enum": [0, 1],
						"description": "1 = succeed | 0 = failed"
					},
					"data": {},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Error/warning messages"
					}
				},
				"required": ["status", "data", "messages"],
				"type": "object",
				"additionalProperties": false
			},
			"IGetQueryParams": {
				"properties": {
					"populate": {
						"type": "string",
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`"
					},
					"select": {
						"type": "string"
					},
					"order": {
						"type": "string",
						"example": "-updatedAt,-createdAt"
					},
					"raw": {
						"type": "boolean",
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"default": "false"
					},
					"page": {
						"type": "number",
						"format": "double"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"skip": {
						"type": "number",
						"format": "double"
					},
					"id": {
						"type": "string",
						"description": "Find one item by `{ObjectID}`"
					},
					"_id": {
						"type": "string"
					},
					"search": {
						"type": "boolean",
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"default": "true"
					},
					"download": {
						"type": "boolean",
						"description": "If `true`, return the excel binary file to download.",
						"default": "false"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GitProviderType": {
				"type": "string",
				"enum": ["bitbucket", "github", "gitlab"]
			},
			"AppGitInfo": {
				"properties": {
					"repoSSH": {
						"type": "string",
						"description": "`REQUIRES`\n---\nA SSH URI of the source code repository"
					},
					"repoURL": {
						"type": "string",
						"description": "OPTIONAL\n---\nA SSH URI of the source code repository"
					},
					"provider": {
						"$ref": "#/components/schemas/GitProviderType",
						"description": "OPTIONAL\n---\nGit provider's type: `github`, `bitbucket`, `gitlab`"
					}
				},
				"required": ["repoSSH"],
				"type": "object",
				"additionalProperties": false
			},
			"ObjectID": {
				"description": "Create a new ObjectID instance.",
				"properties": {
					"generationTime": {
						"type": "number",
						"format": "double",
						"description": "The generation time of this ObjectId instance."
					}
				},
				"required": ["generationTime"],
				"type": "object",
				"additionalProperties": false
			},
			"ProviderInfo": {
				"properties": {
					"name": {
						"type": "string"
					},
					"user_id": {
						"type": "string"
					},
					"access_token": {
						"type": "string"
					}
				},
				"required": ["name"],
				"type": "object",
				"additionalProperties": false
			},
			"AccessTokenInfo": {
				"properties": {
					"access_token": {
						"type": "string"
					},
					"expiredTimestamp": {
						"type": "number",
						"format": "double"
					},
					"expiredDate": {
						"type": "string",
						"format": "date-time"
					},
					"expiredDateGTM7": {
						"type": "string"
					}
				},
				"required": ["access_token", "expiredTimestamp", "expiredDate", "expiredDateGTM7"],
				"type": "object",
				"additionalProperties": false
			},
			"IRoutePermission": {
				"type": "string",
				"enum": ["full", "own", "create", "read", "update", "delete"]
			},
			"IRouteScope": {
				"type": "string",
				"enum": ["all", "workspace", "team", "project", "app"]
			},
			"RoleRoute": {
				"properties": {
					"route": {
						"type": "string",
						"description": "Route path"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/IRoutePermission"
						},
						"type": "array",
						"default": "[\"full\"]"
					},
					"scope": {
						"$ref": "#/components/schemas/IRouteScope",
						"description": "(TBC)"
					}
				},
				"required": ["route", "permissions"],
				"type": "object",
				"additionalProperties": false
			},
			"User": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string",
						"description": "User name"
					},
					"username": {
						"type": "string",
						"description": "Unique username of a user\nThis equavilent with \"slug\""
					},
					"type": {
						"type": "string",
						"description": "Service Account is also a User with unexpired access token."
					},
					"email": {
						"type": "string",
						"description": "User email address"
					},
					"verified": {
						"type": "boolean",
						"description": "Is this user's email or phone verified?"
					},
					"image": {
						"type": "string",
						"description": "User profile picture URL"
					},
					"providers": {
						"items": {
							"$ref": "#/components/schemas/ProviderInfo"
						},
						"type": "array",
						"description": "List of Cloud Providers which this user can access to"
					},
					"password": {
						"type": "string",
						"description": "User password (hashed)"
					},
					"token": {
						"$ref": "#/components/schemas/AccessTokenInfo",
						"description": "User token"
					},
					"roles": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/Role"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "User's roles (should be filtered by \"workspace\")"
					},
					"teams": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/Team"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "User's team IDs which this user is a member"
					},
					"workspaces": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/ObjectId"
								},
								{
									"$ref": "#/components/schemas/Workspace"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "List of workspace IDs which this user is a member"
					},
					"activeWorkspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/ObjectId"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "Active workspace of a user"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"KubeEnvironmentVariable": {
				"properties": {
					"name": {
						"type": "string"
					},
					"value": {
						"type": "string"
					}
				},
				"required": ["name", "value"],
				"type": "object",
				"additionalProperties": false
			},
			"ObjectId": {
				"type": "string",
				"description": "A class representation of the BSON ObjectId type."
			},
			"ResourceQuotaSize": {
				"type": "string",
				"enum": ["none", "1x", "2x", "3x", "4x", "5x", "6x", "7x", "8x", "9x", "10x"]
			},
			"SslType": {
				"type": "string",
				"enum": ["none", "letsencrypt", "custom"],
				"default": "\"letsencrypt\""
			},
			"DeployEnvironment": {
				"description": "A deployment's environment of the application.",
				"properties": {
					"imageURL": {
						"type": "string",
						"description": "Image URI of this app on the Container Registry.\n- Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`\n- If you build from the source code, don't specify `tag` at the end! (eg. `latest`, `beta`,...)"
					},
					"namespace": {
						"type": "string",
						"description": "Destination namespace name"
					},
					"registry": {
						"type": "string",
						"description": "Container registry slug"
					},
					"provider": {
						"type": "string",
						"description": "Cloud provider's short name"
					},
					"cluster": {
						"type": "string",
						"description": "Cluster's short name"
					},
					"project": {
						"type": "string",
						"description": "[Google Cloud] PROJECT_ID",
						"deprecated": true
					},
					"region": {
						"type": "string",
						"description": "[Google Cloud] Region",
						"deprecated": true
					},
					"zone": {
						"type": "string",
						"description": "[Google Cloud] Zone",
						"deprecated": true
					},
					"size": {
						"$ref": "#/components/schemas/ResourceQuotaSize",
						"description": "Container quota resources"
					},
					"shouldInherit": {
						"type": "boolean",
						"description": "Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment",
						"default": "true"
					},
					"redirect": {
						"type": "boolean",
						"description": "Set to `false` if you don't want to redirect all the secondary domains to the primary domain.",
						"default": "true"
					},
					"replicas": {
						"type": "number",
						"format": "double",
						"description": "Container's scaling replicas",
						"default": "1"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "Container's port"
					},
					"basePath": {
						"type": "string",
						"description": "Application base path in the endpoint URL",
						"default": "\"/\""
					},
					"domains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of application's domains"
					},
					"cdn": {
						"type": "boolean",
						"description": "Flag to enable CDN for this application",
						"default": "false;"
					},
					"ssl": {
						"$ref": "#/components/schemas/SslType",
						"description": "SSL Certificate Issuer"
					},
					"tlsSecret": {
						"type": "string",
						"description": "Secret name to hold the key of SSL, will be automatically generated.\nOnly need to specify when using \"custom\" SSL (which is the SSL from third-party issuer)"
					},
					"ingress": {
						"type": "string",
						"description": "Kubernetes Ingress Class"
					},
					"cliVersion": {
						"type": "string",
						"description": "The CLI version"
					},
					"namespaceYaml": {
						"type": "string",
						"description": "Content of namespace YAML file"
					},
					"deploymentYaml": {
						"type": "string",
						"description": "Content of deployment YAML file"
					},
					"prereleaseDeploymentYaml": {
						"type": "string",
						"description": "Content of prerelease deployment YAML file"
					},
					"prereleaseUrl": {
						"type": "string",
						"description": "Prerelease endpoint URL"
					},
					"envVars": {
						"items": {
							"$ref": "#/components/schemas/KubeEnvironmentVariable"
						},
						"type": "array",
						"description": "Collection array of environment variables"
					},
					"createdBy": {
						"type": "string",
						"description": "User name of the first person who deploy on this environment."
					},
					"lastUpdatedBy": {
						"type": "string",
						"description": "User name of the last person who deploy or update this environment."
					},
					"creator": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectId"
							},
							{
								"$ref": "#/components/schemas/User"
							}
						],
						"description": "ID of the creator"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time",
						"description": "Update time"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Project": {
				"description": "Projects",
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"apiKey": {
						"type": "string"
					},
					"clientId": {
						"type": "string"
					},
					"clientSecret": {
						"type": "string"
					},
					"createdBy": {
						"type": "string"
					},
					"lastUpdatedBy": {
						"type": "string"
					},
					"latestBuild": {
						"type": "string"
					},
					"appSlugs": {
						"type": "string"
					},
					"apps": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/App"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "List of App IDs"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Workspace": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Workspace slug: auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string",
						"description": "Workspace name"
					},
					"public": {
						"type": "boolean",
						"description": "Is this a `public` workspace that anyone can join, otherwise it's a `private` workspace that needs approval on joining request."
					},
					"image": {
						"type": "string",
						"description": "Workspace profile picture"
					},
					"domain": {
						"type": "string",
						"description": "Workspace domain name"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"App": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string",
						"description": "OPTIONAL\n---\nImage URI of this app on the Container Registry (without `TAG`).\n- Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`\n- **Don't** specify `tag` at the end! (eg. `latest`, `beta`,...)",
						"example": "asia.gcr.io/my-workspace/my-project/my-app"
					},
					"createdBy": {
						"type": "string"
					},
					"lastUpdatedBy": {
						"type": "string"
					},
					"git": {
						"$ref": "#/components/schemas/AppGitInfo"
					},
					"framework": {
						"properties": {
							"repoSSH": {
								"type": "string"
							},
							"repoURL": {
								"type": "string"
							},
							"slug": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"environment": {
						"properties": {},
						"additionalProperties": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/DeployEnvironment"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "object",
						"deprecated": true
					},
					"deployEnvironment": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/DeployEnvironment"
						},
						"type": "object"
					},
					"latestBuild": {
						"type": "string"
					},
					"projectSlug": {
						"type": "string"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "Owner ID of the app"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "Project ID of the app"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "Workspace ID of the app"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Role": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"routes": {
						"items": {
							"$ref": "#/components/schemas/RoleRoute"
						},
						"type": "array"
					},
					"type": {
						"type": "string",
						"description": "One of:\n- undefined | \"custom\": custom role\n- \"admin\": default super admin role\n- \"member\": default member role\n- \"moderator\": default moderator role"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"required": ["name", "routes"],
				"type": "object",
				"additionalProperties": false
			},
			"Team": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GitProvider": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"host": {
						"type": "string"
					},
					"gitWorkspace": {
						"type": "string"
					},
					"repo": {
						"properties": {
							"sshPrefix": {
								"type": "string"
							},
							"url": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"type": {
						"$ref": "#/components/schemas/GitProviderType"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Framework": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"host": {
						"type": "string"
					},
					"gitProvider": {
						"$ref": "#/components/schemas/GitProviderType",
						"description": "Git provider name"
					},
					"isPrivate": {
						"type": "boolean",
						"description": "Git repository access privacy"
					},
					"git": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/GitProvider"
							}
						],
						"description": "ID of the Git Provider"
					},
					"repoURL": {
						"type": "string"
					},
					"repoSSH": {
						"type": "string"
					},
					"mainBranch": {
						"type": "string"
					},
					"downloads": {
						"type": "number",
						"format": "double",
						"description": "Number of downloads"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AppInputSchema": {
				"properties": {
					"name": {
						"type": "string",
						"description": "`REQUIRES`\n---\nApp's name"
					},
					"project": {
						"type": "string",
						"description": "`REQUIRES`\n---\nApp's name"
					},
					"git": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/AppGitInfo"
							}
						],
						"description": "`REQUIRES`\n---\nA SSH URI of the source code repository or a detail information of this repository"
					},
					"framework": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"$ref": "#/components/schemas/Framework"
							}
						],
						"description": "OPTIONAL\n---\nFramework's ID or slug or {Framework} instance"
					}
				},
				"required": ["name", "project", "git"],
				"type": "object",
				"additionalProperties": false
			},
			"IPostQueryParams": {
				"properties": {
					"populate": {
						"type": "string",
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`"
					},
					"select": {
						"type": "string"
					},
					"order": {
						"type": "string",
						"example": "-updatedAt,-createdAt"
					},
					"raw": {
						"type": "boolean",
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"default": "false"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_App.Exclude_keyofApp.keyofHiddenBodyKeys__": {
				"properties": {
					"git": {
						"$ref": "#/components/schemas/AppGitInfo"
					},
					"framework": {
						"properties": {
							"repoSSH": {
								"type": "string"
							},
							"repoURL": {
								"type": "string"
							},
							"slug": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "Project ID of the app"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string",
						"description": "OPTIONAL\n---\nImage URI of this app on the Container Registry (without `TAG`).\n- Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`\n- **Don't** specify `tag` at the end! (eg. `latest`, `beta`,...)",
						"example": "asia.gcr.io/my-workspace/my-project/my-app"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"createdBy": {
						"type": "string"
					},
					"lastUpdatedBy": {
						"type": "string"
					},
					"environment": {
						"properties": {},
						"additionalProperties": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/DeployEnvironment"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "object",
						"deprecated": true
					},
					"deployEnvironment": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/DeployEnvironment"
						},
						"type": "object"
					},
					"latestBuild": {
						"type": "string"
					},
					"projectSlug": {
						"type": "string"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_App.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_App.Exclude_keyofApp.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"IPatchQueryParams": {
				"properties": {
					"populate": {
						"type": "string",
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`"
					},
					"select": {
						"type": "string"
					},
					"order": {
						"type": "string",
						"example": "-updatedAt,-createdAt"
					},
					"raw": {
						"type": "boolean",
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"default": "false"
					},
					"_id": {
						"type": "string",
						"description": "Find one item by `{ObjectID}`"
					},
					"slug": {
						"type": "string",
						"description": "Find one item by slug"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IDeleteQueryParams": {
				"properties": {
					"id": {
						"type": "string",
						"description": "Delete one item by `{ObjectID}`"
					},
					"slug": {
						"type": "string",
						"description": "Delete one item by `{slug}`"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ClientDeployEnvironmentConfig": {
				"properties": {
					"imageURL": {
						"type": "string",
						"description": "Image URI of this app on the Container Registry.\n- Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`\n- If you build from the source code, don't specify `tag` at the end! (eg. `latest`, `beta`,...)"
					},
					"namespace": {
						"type": "string",
						"description": "Destination namespace name"
					},
					"registry": {
						"type": "string",
						"description": "Container registry slug"
					},
					"provider": {
						"type": "string",
						"description": "Cloud provider's short name"
					},
					"cluster": {
						"type": "string",
						"description": "Cluster's short name"
					},
					"project": {
						"type": "string",
						"description": "[Google Cloud] PROJECT_ID",
						"deprecated": true
					},
					"region": {
						"type": "string",
						"description": "[Google Cloud] Region",
						"deprecated": true
					},
					"zone": {
						"type": "string",
						"description": "[Google Cloud] Zone",
						"deprecated": true
					},
					"size": {
						"$ref": "#/components/schemas/ResourceQuotaSize",
						"description": "Container quota resources"
					},
					"shouldInherit": {
						"type": "boolean",
						"description": "Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment",
						"default": "true"
					},
					"redirect": {
						"type": "boolean",
						"description": "Set to `false` if you don't want to redirect all the secondary domains to the primary domain.",
						"default": "true"
					},
					"replicas": {
						"type": "number",
						"format": "double",
						"description": "Container's scaling replicas",
						"default": "1"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "Container's port"
					},
					"basePath": {
						"type": "string",
						"description": "Application base path in the endpoint URL",
						"default": "\"/\""
					},
					"domains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "List of application's domains"
					},
					"cdn": {
						"type": "boolean",
						"description": "Flag to enable CDN for this application",
						"default": "false;"
					},
					"ssl": {
						"$ref": "#/components/schemas/SslType",
						"description": "SSL Certificate Issuer"
					},
					"tlsSecret": {
						"type": "string",
						"description": "Secret name to hold the key of SSL, will be automatically generated.\nOnly need to specify when using \"custom\" SSL (which is the SSL from third-party issuer)"
					},
					"ingress": {
						"type": "string",
						"description": "Kubernetes Ingress Class"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AppConfig": {
				"properties": {
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string"
					},
					"owner": {
						"type": "string"
					},
					"workspace": {
						"type": "string"
					},
					"cliVersion": {
						"type": "string"
					},
					"project": {
						"type": "string"
					},
					"framework": {
						"properties": {
							"version": {
								"type": "string"
							},
							"repoSSH": {
								"type": "string"
							},
							"slug": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"git": {
						"properties": {
							"repoSSH": {
								"type": "string"
							},
							"repoURL": {
								"type": "string"
							},
							"provider": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"environment": {
						"properties": {},
						"additionalProperties": {
							"$ref": "#/components/schemas/ClientDeployEnvironmentConfig"
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"DeployEnvironmentData": {
				"properties": {
					"registry": {
						"type": "string",
						"description": "`REQUIRES`\n---\nContainer registry's slug"
					},
					"cluster": {
						"type": "string",
						"description": "`REQUIRES`\n---\nCluster's short name"
					},
					"port": {
						"type": "number",
						"format": "double",
						"description": "`REQUIRES`\n---\nContainer's port"
					},
					"imageURL": {
						"type": "string",
						"description": "`REQUIRES`\n---\nImage URI of this app on the Container Registry (without `TAG`).\n- Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`\n- **Don't** specify `tag` at the end! (eg. `latest`, `beta`,...)",
						"example": "asia.gcr.io/my-workspace/my-project/my-app",
						"default": "<registry-image-base-url>/<project-slug>/<app-name-slug>"
					},
					"replicas": {
						"type": "number",
						"format": "double",
						"description": "OPTIONAL\n---\nContainer's scaling replicas",
						"default": "1"
					},
					"namespace": {
						"type": "string",
						"description": "OPTIONAL\n---\nDestination namespace name, will be generated automatically by `<project-slug>-<env>` if not specified."
					},
					"size": {
						"$ref": "#/components/schemas/ResourceQuotaSize",
						"description": "OPTIONAL\n---\nContainer quota resources"
					},
					"shouldInherit": {
						"type": "boolean",
						"description": "OPTIONAL\n---\nSet to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment",
						"default": "true"
					},
					"redirect": {
						"type": "boolean",
						"description": "OPTIONAL\n---\nSet to `false` if you don't want to redirect all the secondary domains to the primary domain.",
						"default": "true"
					},
					"useGeneratedDomain": {
						"type": "boolean",
						"description": "OPTIONAL\n---\nSet `true` if you want to use a generated domain for this deploy environment.",
						"default": "false"
					},
					"domains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "OPTIONAL\n---\nList of application's domains.",
						"default": "[]"
					},
					"cdn": {
						"type": "boolean",
						"description": "OPTIONAL\n---\nFlag to enable CDN for this application",
						"default": "false"
					},
					"ssl": {
						"$ref": "#/components/schemas/SslType",
						"description": "OPTIONAL\n---\nSelect your SSL Certificate Issuer, one of:\n- `letenscrypt`\n- `custom`\n- `none`"
					},
					"tlsSecret": {
						"type": "string",
						"description": "OPTIONAL\n---\nSecret name to hold the key of SSL, will be automatically generated with the primary domain.\nOnly need to specify when using \"custom\" SSL (which is the SSL from third-party issuer)"
					},
					"ingress": {
						"type": "string",
						"description": "OPTIONAL\n---\nKubernetes Ingress Class",
						"default": "nginx"
					}
				},
				"required": ["registry", "cluster", "port", "imageURL"],
				"type": "object",
				"additionalProperties": false
			},
			"CreateEnvVarsDto": {
				"properties": {
					"slug": {
						"type": "string",
						"description": "App slug"
					},
					"env": {
						"type": "string",
						"description": "Deploy environment name"
					},
					"envVars": {
						"type": "string",
						"description": "Array of variables to be created on deploy environment in JSON format"
					}
				},
				"required": ["slug", "env", "envVars"],
				"type": "object",
				"additionalProperties": false
			},
			"BuildStatus": {
				"type": "string",
				"enum": ["start", "building", "failed", "success"]
			},
			"RegistryProviderType": {
				"type": "string",
				"enum": ["gcloud", "digitalocean", "dockerhub"]
			},
			"ContainerRegistry": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"isVerified": {
						"type": "boolean"
					},
					"host": {
						"type": "string",
						"description": "The host (domain) of your container registry which you are using."
					},
					"imageBaseURL": {
						"type": "string",
						"description": "Base URL of the image, usually is the registry host URI combines with something else.\n- This will be used to combine with your project/app image path."
					},
					"provider": {
						"$ref": "#/components/schemas/RegistryProviderType",
						"description": "Provider's \"shortName\""
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials ti access services on this cloud provider\n- Apply for: Google Cloud, AWS,...\n- For example: Kubernetes Clusters, Single Sign-On,..."
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API access token to use services on this cloud provider\n- Apply for: Digital Ocean"
					},
					"imagePullSecret": {
						"properties": {
							"value": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Build": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"tag": {
						"type": "string",
						"description": "Image tag is also \"buildNumber\""
					},
					"startTime": {
						"type": "string",
						"format": "date-time",
						"description": "Build start time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time",
						"description": "Build end time"
					},
					"duration": {
						"type": "number",
						"format": "double",
						"description": "Build duration in miliseconds"
					},
					"env": {
						"type": "string",
						"description": "Build for which deploy environment\n- **[OPTIONAL] SHOULD NOT rely on this!**\n- A build should be able to used for any deploy environments."
					},
					"branch": {
						"type": "string",
						"description": "Build from which git branch"
					},
					"cliVersion": {
						"type": "string"
					},
					"createdBy": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/BuildStatus"
					},
					"projectSlug": {
						"type": "string"
					},
					"appSlug": {
						"type": "string"
					},
					"logs": {
						"type": "string"
					},
					"registry": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/ContainerRegistry"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the container registry"
					},
					"app": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/App"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the app"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Build.Exclude_keyofBuild.keyofHiddenBodyKeys__": {
				"properties": {
					"app": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/App"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the app"
					},
					"registry": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/ContainerRegistry"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the container registry"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"createdBy": {
						"type": "string"
					},
					"projectSlug": {
						"type": "string"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"env": {
						"type": "string",
						"description": "Build for which deploy environment\n- **[OPTIONAL] SHOULD NOT rely on this!**\n- A build should be able to used for any deploy environments."
					},
					"appSlug": {
						"type": "string"
					},
					"tag": {
						"type": "string",
						"description": "Image tag is also \"buildNumber\""
					},
					"startTime": {
						"type": "string",
						"format": "date-time",
						"description": "Build start time"
					},
					"endTime": {
						"type": "string",
						"format": "date-time",
						"description": "Build end time"
					},
					"duration": {
						"type": "number",
						"format": "double",
						"description": "Build duration in miliseconds"
					},
					"branch": {
						"type": "string",
						"description": "Build from which git branch"
					},
					"cliVersion": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/BuildStatus"
					},
					"logs": {
						"type": "string"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Build.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Build.Exclude_keyofBuild.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"BuildData": {
				"$ref": "#/components/schemas/Omit_Build.keyofHiddenBodyKeys_"
			},
			"StartBuildParams": {
				"properties": {
					"isDebugging": {
						"type": "boolean",
						"default": "false"
					},
					"cliVersion": {
						"type": "string",
						"description": "Diginext CLI version of client user"
					},
					"buildDir": {
						"type": "string",
						"description": "Path to the source code directory\n* [OPTIONAL] Only apply for CLI command, has no effects on API call"
					},
					"env": {
						"type": "string",
						"description": "Select the deploy environment to build image, in this case, this info is using for selecting \"Dockerfile\"\nof specific deploy environment only, for example: \"Dockerfile.dev\" or \"Dockerfile.prod\",\nif you don't specify \"env\", a default \"Dockerfile\" will be selected.\n- **[OPTIONAL] SHOULD NOT rely on this!**\n- A build should be able to used for any deploy environments."
					},
					"registrySlug": {
						"type": "string",
						"description": "Slug of the Container Registry"
					},
					"user": {
						"$ref": "#/components/schemas/User",
						"description": "{User} instance of the author\n- `If passing \"user\", no need to pass \"userId\" and vice versa.`"
					},
					"userId": {
						"type": "string",
						"description": "ID of the author\n- `If passing \"userId\", no need to pass \"user\" and vice versa.`"
					},
					"gitBranch": {
						"type": "string",
						"description": "Select a git branch to pull source code & build"
					},
					"buildNumber": {
						"type": "string",
						"description": "Build number is also an container image's tag"
					},
					"appSlug": {
						"type": "string",
						"description": "App's slug"
					}
				},
				"required": ["registrySlug", "gitBranch", "buildNumber", "appSlug"],
				"type": "object"
			},
			"CloudProviderType": {
				"type": "string",
				"enum": ["custom", "gcloud", "digitalocean"]
			},
			"Cluster": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Cluster slug"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string",
						"description": "Cluster name"
					},
					"isVerified": {
						"type": "boolean",
						"description": "Is cluster verified"
					},
					"shortName": {
						"type": "string",
						"description": "A cluster name on the cloud provider\n- This is **NOT** a cluster name in `kubeconfig`"
					},
					"contextName": {
						"type": "string",
						"description": "Cluster context name (to access via `kubectl context`)"
					},
					"provider": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/CloudProvider"
							}
						],
						"description": "Cloud provider of this cluster"
					},
					"providerShortName": {
						"$ref": "#/components/schemas/CloudProviderType",
						"description": "Short name of the cloud provider"
					},
					"zone": {
						"type": "string",
						"description": "Cloud zone of this cluster"
					},
					"region": {
						"type": "string",
						"description": "Cloud region of this cluster"
					},
					"projectID": {
						"type": "string",
						"description": "[GOOGLE ONLY] Project ID of this cluster"
					},
					"primaryDomain": {
						"type": "string",
						"description": "#### `REQUIRES`\n---\nThe PRIMARY domain of this cluster"
					},
					"primaryIP": {
						"type": "string",
						"description": "The PRIMARY IP ADDRESS of this cluster"
					},
					"domains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Alternative domains or project's domains of this cluster"
					},
					"kubeConfig": {
						"type": "string",
						"description": "The KUBECONFIG data to access to this cluster"
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials to access this cluster"
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API ACCESS TOKEN to access this cluster"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CloudProvider": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string",
						"description": "Cloud provider name"
					},
					"shortName": {
						"$ref": "#/components/schemas/CloudProviderType",
						"description": "Cloud provider short name, without spacing & special characters"
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API access token to use services on this cloud provider\n- Apply for: Digital Ocean"
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials ti access services on this cloud provider\n- Apply for: Google Cloud, AWS,...\n- For example: Kubernetes Clusters, Single Sign-On,..."
					},
					"clusters": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Cluster"
								},
								"type": "array"
							}
						],
						"description": "List of available clusters on this provider"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Cluster.Exclude_keyofCluster.keyofHiddenBodyKeys__": {
				"properties": {
					"provider": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/CloudProvider"
							}
						],
						"description": "Cloud provider of this cluster"
					},
					"name": {
						"type": "string",
						"description": "Cluster name"
					},
					"slug": {
						"type": "string",
						"description": "Cluster slug"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"isVerified": {
						"type": "boolean",
						"description": "Is cluster verified"
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials to access this cluster"
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API ACCESS TOKEN to access this cluster"
					},
					"shortName": {
						"type": "string",
						"description": "A cluster name on the cloud provider\n- This is **NOT** a cluster name in `kubeconfig`"
					},
					"contextName": {
						"type": "string",
						"description": "Cluster context name (to access via `kubectl context`)"
					},
					"providerShortName": {
						"$ref": "#/components/schemas/CloudProviderType",
						"description": "Short name of the cloud provider"
					},
					"zone": {
						"type": "string",
						"description": "Cloud zone of this cluster"
					},
					"region": {
						"type": "string",
						"description": "Cloud region of this cluster"
					},
					"projectID": {
						"type": "string",
						"description": "[GOOGLE ONLY] Project ID of this cluster"
					},
					"primaryDomain": {
						"type": "string",
						"description": "#### `REQUIRES`\n---\nThe PRIMARY domain of this cluster"
					},
					"primaryIP": {
						"type": "string",
						"description": "The PRIMARY IP ADDRESS of this cluster"
					},
					"domains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Alternative domains or project's domains of this cluster"
					},
					"kubeConfig": {
						"type": "string",
						"description": "The KUBECONFIG data to access to this cluster"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Cluster.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Cluster.Exclude_keyofCluster.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"InputOptions": {
				"properties": {
					"prodDomains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"deprecated": true
					},
					"stagingDomains": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"deprecated": true
					},
					"outputPath": {
						"description": "Output path (include directory path + file name).",
						"example": "/path/to/output.file",
						"default": "\"string\""
					},
					"outputName": {
						"description": "Output file name.",
						"example": "output.txt",
						"default": "\"string\""
					},
					"outputDir": {
						"description": "Output directory location.",
						"example": "/path/to/output/",
						"default": "\"string\""
					},
					"output": {
						"type": "string",
						"description": "Output type: `string`, `json`, `yaml`.",
						"default": "\"string\""
					},
					"providerProject": {
						"type": "string",
						"description": "`PROJECT_ID` trên provider (GCP hoặc DO)"
					},
					"gitBranch": {
						"type": "string",
						"description": "Specify a git branch"
					},
					"gitProvider": {
						"$ref": "#/components/schemas/GitProviderType",
						"description": "Git provider type"
					},
					"registry": {
						"type": "string",
						"description": "Container Registry's slug"
					},
					"provider": {
						"type": "string",
						"description": "Cloud provider",
						"default": "\"custom\""
					},
					"region": {
						"type": "string",
						"description": "[GOOGLE CLOUD] Specify a region of your cluster"
					},
					"zone": {
						"type": "string",
						"description": "[GOOGLE CLOUD] Specify a zone of your cluster"
					},
					"cluster": {
						"type": "string",
						"description": "Cluster's short name. For deploy to specific cluster."
					},
					"appSlug": {
						"type": "string",
						"description": "Slug of an {App} instance"
					},
					"appId": {
						"type": "string",
						"description": "ID of an {App} instance"
					},
					"app": {
						"$ref": "#/components/schemas/App",
						"description": "Specify an {App} instance"
					},
					"size": {
						"$ref": "#/components/schemas/ResourceQuotaSize"
					},
					"buildId": {
						"type": "string"
					},
					"imageURL": {
						"type": "string"
					},
					"buildImage": {
						"type": "string"
					},
					"buildNumber": {
						"type": "string"
					},
					"buildDir": {
						"type": "string"
					},
					"redirect": {
						"type": "boolean",
						"default": "false"
					},
					"printSuccess": {
						"type": "boolean",
						"default": "false"
					},
					"domain": {
						"type": "string",
						"description": "Application's domain",
						"example": "myapp.example.com"
					},
					"namespace": {
						"type": "string",
						"description": "Kubernetes namespace"
					},
					"remoteURL": {
						"type": "string"
					},
					"projectName": {
						"type": "string",
						"description": "{Project} name"
					},
					"projectSlug": {
						"type": "string",
						"description": "{Project} slug"
					},
					"projectId": {
						"type": "string",
						"description": "ID of the {Project}\n- [WARN] This is NOT a {PROJECT_ID} of Google Cloud platform!"
					},
					"project": {
						"$ref": "#/components/schemas/Project",
						"description": "Project"
					},
					"replicas": {
						"type": "number",
						"format": "double"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"deployYaml": {
						"type": "string",
						"description": "Content of the deployment yaml (Namespace, Ingress, Service, Deploy,...)"
					},
					"shouldUseFreshDeploy": {
						"type": "boolean",
						"description": "! Should deploy app from a fresh namespace\n## [WARNING]\n- **With this flag enabled, the server will wipe out all current deployments within the target namespace, then deploy your app completely from scratch!**\n- Use at your own risk, make sure you understand what you're doing, double check the namespace before deploying to avoid accidently take down other apps."
					},
					"shouldApply": {
						"type": "boolean",
						"description": "Should apply something"
					},
					"shouldCreate": {
						"type": "boolean",
						"description": "Should create something"
					},
					"shouldEnableCDN": {
						"type": "boolean",
						"description": "[Use when deploying an app] Should enable CDN for this app",
						"default": "false"
					},
					"shouldUploadDotenv": {
						"type": "boolean",
						"description": "[Use when deploying an app] Force upload local DOTENV file to deployed environment.",
						"default": "false"
					},
					"shouldClose": {
						"type": "boolean",
						"default": "true"
					},
					"shouldInstallPackage": {
						"type": "boolean",
						"description": "Should install NPM packages locally after creating new project",
						"default": "true"
					},
					"shouldUpdatePipeline": {
						"type": "boolean",
						"deprecated": true
					},
					"shouldInherit": {
						"type": "boolean",
						"default": "true"
					},
					"shouldMerge": {
						"type": "boolean",
						"default": "false"
					},
					"shouldUseTemplate": {
						"type": "boolean",
						"default": "false"
					},
					"shouldGenerate": {
						"type": "boolean",
						"default": "false"
					},
					"shouldCompress": {
						"type": "boolean",
						"default": "false"
					},
					"shouldUseGit": {
						"type": "boolean",
						"description": "Enable GIT when create new or initialize app",
						"default": "true"
					},
					"shouldUpdateCli": {
						"type": "boolean",
						"description": "Should update CLI version before running the command",
						"default": "false"
					},
					"shouldShowVersion": {
						"type": "boolean",
						"default": "false"
					},
					"shouldShowHelp": {
						"type": "boolean",
						"default": "false"
					},
					"shouldShowInputOptions": {
						"type": "boolean",
						"default": "false\nShould show input options while executing the command [for DEBUGGING]"
					},
					"skipCreatingDirectory": {
						"type": "boolean",
						"description": "Should skip creating new directory while creating project",
						"default": "false"
					},
					"ssl": {
						"type": "boolean",
						"default": "true"
					},
					"optimize": {
						"type": "boolean",
						"description": "Should compress the files"
					},
					"isCanary": {
						"type": "boolean",
						"default": "false"
					},
					"production": {
						"type": "boolean"
					},
					"isProd": {
						"type": "boolean",
						"default": "false"
					},
					"isStaging": {
						"type": "boolean",
						"default": "false"
					},
					"isDev": {
						"type": "boolean",
						"default": "true"
					},
					"env": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": ["dev", "prod", "staging"]
							}
						],
						"description": "Specify environment code:\n- One of: `dev, prod, staging,...`",
						"default": "\"dev\""
					},
					"fifthAction": {
						"type": "string"
					},
					"fourAction": {
						"type": "string"
					},
					"thirdAction": {
						"type": "string"
					},
					"secondAction": {
						"type": "string"
					},
					"action": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"type": "string",
								"enum": [
									"new",
									"init",
									"auth",
									"gcloud",
									"digitalocean",
									"upgrade",
									"update",
									"cdn",
									"help",
									"git",
									"db",
									"pipeline",
									"deploy",
									"build",
									"analytics",
									"test-build",
									"release",
									"down",
									"free"
								]
							}
						]
					},
					"overwrite": {
						"type": "boolean",
						"default": "false"
					},
					"frameworkVersion": {
						"type": "string",
						"description": "Version of the framework"
					},
					"framework": {
						"$ref": "#/components/schemas/Framework",
						"description": "Framework"
					},
					"SOCKET_ROOM": {
						"type": "string"
					},
					"remoteSSH": {
						"type": "string"
					},
					"code": {
						"type": "string"
					},
					"repoSlug": {
						"type": "string"
					},
					"repoURL": {
						"type": "string"
					},
					"targetDirectory": {
						"type": "string",
						"description": "Location where the CLI command point to."
					},
					"host": {
						"type": "string"
					},
					"url": {
						"type": "string"
					},
					"path": {
						"type": "string"
					},
					"filePath": {
						"type": "string"
					},
					"value": {
						"type": "string"
					},
					"data": {
						"type": "string"
					},
					"key": {
						"type": "string"
					},
					"input": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					},
					"token": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "{App} slug"
					},
					"name": {
						"type": "string",
						"description": "Target's name"
					},
					"workspaceId": {
						"type": "string"
					},
					"workspace": {
						"$ref": "#/components/schemas/Workspace"
					},
					"userId": {
						"type": "string"
					},
					"username": {
						"type": "string",
						"description": "Ownership"
					},
					"version": {
						"type": "string",
						"description": "Version string"
					},
					"isLocal": {
						"type": "boolean",
						"description": "Define if the command was executed on local machine or server machine"
					},
					"statistics": {
						"properties": {
							"endTime": {
								"type": "string",
								"format": "date-time"
							},
							"startTime": {
								"type": "string",
								"format": "date-time"
							},
							"author": {
								"type": "string"
							}
						},
						"type": "object",
						"description": "Tracking information"
					},
					"tail": {
						"type": "boolean",
						"description": "Print the logs and keep watching until the end"
					},
					"isTail": {
						"type": "boolean",
						"description": "Follow the output logs until the command is finished."
					},
					"isDebugging": {
						"type": "boolean",
						"description": "For testing purpose"
					}
				},
				"type": "object",
				"description": "Các giá trị đầu vào của CLI"
			},
			"DeployBuildInput": {
				"properties": {
					"shouldUseFreshDeploy": {
						"type": "boolean",
						"description": "[DANGER]\n---\nShould delete old deployment and deploy a new one from scratch",
						"default": "false"
					},
					"author": {
						"type": "string",
						"description": "User ID of the author"
					},
					"env": {
						"type": "string",
						"description": "Deploy environment"
					}
				},
				"required": ["author", "env"],
				"type": "object"
			},
			"Release": {
				"properties": {
					"_id": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"type": "string"
							}
						]
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"metadata": {
						"description": "Auto-generated by entity's columns\nEntity's metadata without unicode characters"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"deletedAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"cliVersion": {
						"type": "string"
					},
					"env": {
						"type": "string",
						"description": "Targeted environment."
					},
					"envVars": {
						"items": {
							"$ref": "#/components/schemas/KubeEnvironmentVariable"
						},
						"type": "array",
						"description": "Environment variables"
					},
					"prereleaseEnvironment": {
						"anyOf": [
							{
								"items": {},
								"type": "array"
							},
							{
								"type": "string"
							}
						],
						"description": "ONLY PRE-RELEASE - Environment variables"
					},
					"diginext": {
						"description": "Old \"diginext.json\""
					},
					"appConfig": {
						"$ref": "#/components/schemas/AppConfig"
					},
					"namespace": {
						"type": "string"
					},
					"prodYaml": {
						"type": "string"
					},
					"preYaml": {
						"type": "string"
					},
					"prereleaseUrl": {
						"type": "string"
					},
					"productionUrl": {
						"type": "string"
					},
					"deploymentYaml": {
						"type": "string",
						"description": "Deployment YAML"
					},
					"endpoint": {
						"type": "string",
						"description": "Release endpoint (development/.../production URL)"
					},
					"createdBy": {
						"type": "string"
					},
					"branch": {
						"type": "string"
					},
					"provider": {
						"type": "string"
					},
					"cluster": {
						"type": "string",
						"description": "Short name of the targeted cluster to deploy to."
					},
					"projectSlug": {
						"type": "string"
					},
					"appSlug": {
						"type": "string"
					},
					"providerProjectId": {
						"type": "string"
					},
					"buildStatus": {
						"$ref": "#/components/schemas/BuildStatus"
					},
					"build": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Build"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the build"
					},
					"app": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/App"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the app"
					},
					"owner": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/User"
							},
							{
								"type": "string"
							}
						],
						"description": "User ID of the owner"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"workspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the workspace"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"KubeNamespace": {
				"properties": {
					"apiVersion": {
						"type": "string"
					},
					"kind": {
						"type": "string",
						"enum": ["Namespace"],
						"nullable": false
					},
					"metadata": {
						"properties": {
							"creationTimestamp": {
								"type": "string"
							},
							"labels": {
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							},
							"namespace": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"required": ["labels"],
						"type": "object"
					},
					"spec": {
						"properties": {
							"finalizers": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						},
						"type": "object"
					},
					"status": {
						"properties": {
							"phase": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IResourceQuota": {
				"properties": {
					"limits": {
						"properties": {
							"memory": {
								"type": "string"
							},
							"cpu": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"requests": {
						"properties": {
							"memory": {
								"type": "string"
							},
							"cpu": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"KubeDeployment": {
				"properties": {
					"apiVersion": {
						"type": "string"
					},
					"kind": {
						"type": "string"
					},
					"metadata": {
						"properties": {
							"labels": {
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							},
							"namespace": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"required": ["labels"],
						"type": "object"
					},
					"spec": {
						"properties": {
							"template": {
								"properties": {
									"spec": {
										"properties": {
											"imagePullSecrets": {
												"items": {
													"properties": {
														"name": {
															"type": "string"
														}
													},
													"type": "object"
												},
												"type": "array"
											},
											"containers": {
												"items": {
													"properties": {
														"env": {
															"items": {
																"properties": {
																	"value": {},
																	"name": {
																		"type": "string"
																	}
																},
																"type": "object"
															},
															"type": "array"
														},
														"resources": {
															"$ref": "#/components/schemas/IResourceQuota"
														},
														"ports": {
															"items": {
																"properties": {
																	"containerPort": {
																		"type": "number",
																		"format": "double"
																	}
																},
																"type": "object"
															},
															"type": "array"
														},
														"image": {
															"type": "string"
														},
														"name": {
															"type": "string"
														}
													},
													"type": "object"
												},
												"type": "array"
											}
										},
										"type": "object"
									},
									"metadata": {
										"properties": {
											"labels": {
												"properties": {
													"project": {
														"type": "string"
													},
													"app": {
														"type": "string"
													},
													"owner": {
														"type": "string"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							},
							"selector": {
								"properties": {
									"matchLabels": {
										"properties": {
											"app": {
												"type": "string"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							},
							"replicas": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					},
					"status": {
						"properties": {
							"updatedReplicas": {
								"type": "number",
								"format": "double"
							},
							"replicas": {
								"type": "number",
								"format": "double"
							},
							"readyReplicas": {
								"type": "number",
								"format": "double"
							},
							"observedGeneration": {
								"type": "number",
								"format": "double"
							},
							"conditions": {
								"items": {
									"properties": {
										"type": {
											"type": "string"
										},
										"status": {
											"type": "string"
										},
										"reason": {
											"type": "string"
										},
										"message": {
											"type": "string"
										},
										"lastUpdateTime": {
											"type": "string"
										},
										"lastTransitionTime": {
											"type": "string"
										}
									},
									"type": "object"
								},
								"type": "array"
							},
							"availableReplicas": {
								"type": "number",
								"format": "double"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"GenerateDeploymentResult": {
				"properties": {
					"prereleaseUrl": {
						"type": "string"
					},
					"endpoint": {
						"type": "string"
					},
					"IMAGE_NAME": {
						"type": "string"
					},
					"BUILD_NUMBER": {
						"type": "string"
					},
					"prereleaseDeploymentContent": {
						"type": "string"
					},
					"prereleaseYamlObject": {
						"items": {},
						"type": "array"
					},
					"deploymentCfg": {
						"$ref": "#/components/schemas/KubeDeployment"
					},
					"deploymentContent": {
						"type": "string"
					},
					"namespaceObject": {
						"$ref": "#/components/schemas/KubeNamespace"
					},
					"namespaceContent": {
						"type": "string"
					}
				},
				"required": [
					"prereleaseUrl",
					"endpoint",
					"IMAGE_NAME",
					"BUILD_NUMBER",
					"prereleaseDeploymentContent",
					"prereleaseYamlObject",
					"deploymentCfg",
					"deploymentContent",
					"namespaceObject",
					"namespaceContent"
				],
				"type": "object"
			},
			"Pick_Framework.Exclude_keyofFramework.keyofHiddenBodyKeys__": {
				"properties": {
					"git": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/GitProvider"
							}
						],
						"description": "ID of the Git Provider"
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"host": {
						"type": "string"
					},
					"gitProvider": {
						"$ref": "#/components/schemas/GitProviderType",
						"description": "Git provider name"
					},
					"isPrivate": {
						"type": "boolean",
						"description": "Git repository access privacy"
					},
					"repoURL": {
						"type": "string"
					},
					"repoSSH": {
						"type": "string"
					},
					"mainBranch": {
						"type": "string"
					},
					"downloads": {
						"type": "number",
						"format": "double",
						"description": "Number of downloads"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Framework.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Framework.Exclude_keyofFramework.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_GitProvider.Exclude_keyofGitProvider.keyofHiddenBodyKeys__": {
				"properties": {
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"type": {
						"$ref": "#/components/schemas/GitProviderType"
					},
					"host": {
						"type": "string"
					},
					"gitWorkspace": {
						"type": "string"
					},
					"repo": {
						"properties": {
							"sshPrefix": {
								"type": "string"
							},
							"url": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_GitProvider.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_GitProvider.Exclude_keyofGitProvider.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_Project.Exclude_keyofProject.keyofHiddenBodyKeys__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"createdBy": {
						"type": "string"
					},
					"lastUpdatedBy": {
						"type": "string"
					},
					"latestBuild": {
						"type": "string"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"apiKey": {
						"type": "string"
					},
					"clientId": {
						"type": "string"
					},
					"clientSecret": {
						"type": "string"
					},
					"appSlugs": {
						"type": "string"
					},
					"apps": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/App"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "List of App IDs"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Project.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Project.Exclude_keyofProject.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"ProjectInputSchema": {
				"$ref": "#/components/schemas/Omit_Project.keyofHiddenBodyKeys_"
			},
			"Pick_CloudProvider.Exclude_keyofCloudProvider.keyofHiddenBodyKeys__": {
				"properties": {
					"name": {
						"type": "string",
						"description": "Cloud provider name"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials ti access services on this cloud provider\n- Apply for: Google Cloud, AWS,...\n- For example: Kubernetes Clusters, Single Sign-On,..."
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API access token to use services on this cloud provider\n- Apply for: Digital Ocean"
					},
					"shortName": {
						"$ref": "#/components/schemas/CloudProviderType",
						"description": "Cloud provider short name, without spacing & special characters"
					},
					"clusters": {
						"anyOf": [
							{
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							{
								"items": {
									"$ref": "#/components/schemas/Cluster"
								},
								"type": "array"
							}
						],
						"description": "List of available clusters on this provider"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_CloudProvider.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_CloudProvider.Exclude_keyofCloudProvider.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_ContainerRegistry.Exclude_keyofContainerRegistry.keyofHiddenBodyKeys__": {
				"properties": {
					"provider": {
						"$ref": "#/components/schemas/RegistryProviderType",
						"description": "Provider's \"shortName\""
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"isVerified": {
						"type": "boolean"
					},
					"host": {
						"type": "string",
						"description": "The host (domain) of your container registry which you are using."
					},
					"imageBaseURL": {
						"type": "string",
						"description": "Base URL of the image, usually is the registry host URI combines with something else.\n- This will be used to combine with your project/app image path."
					},
					"serviceAccount": {
						"type": "string",
						"description": "Content of the Service Account credentials ti access services on this cloud provider\n- Apply for: Google Cloud, AWS,...\n- For example: Kubernetes Clusters, Single Sign-On,..."
					},
					"apiAccessToken": {
						"type": "string",
						"description": "Content of the API access token to use services on this cloud provider\n- Apply for: Digital Ocean"
					},
					"imagePullSecret": {
						"properties": {
							"value": {
								"type": "string"
							},
							"name": {
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ContainerRegistry.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_ContainerRegistry.Exclude_keyofContainerRegistry.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"MaskedContainerRegistry": {
				"$ref": "#/components/schemas/Omit_ContainerRegistry.keyofHiddenBodyKeys_"
			},
			"Pick_Release.Exclude_keyofRelease.keyofHiddenBodyKeys__": {
				"properties": {
					"app": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/App"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the app"
					},
					"build": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Build"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the build"
					},
					"provider": {
						"type": "string"
					},
					"cluster": {
						"type": "string",
						"description": "Short name of the targeted cluster to deploy to."
					},
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"createdBy": {
						"type": "string"
					},
					"projectSlug": {
						"type": "string"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"env": {
						"type": "string",
						"description": "Targeted environment."
					},
					"appSlug": {
						"type": "string"
					},
					"namespace": {
						"type": "string"
					},
					"branch": {
						"type": "string"
					},
					"cliVersion": {
						"type": "string"
					},
					"envVars": {
						"items": {
							"$ref": "#/components/schemas/KubeEnvironmentVariable"
						},
						"type": "array",
						"description": "Environment variables"
					},
					"prereleaseEnvironment": {
						"anyOf": [
							{
								"items": {},
								"type": "array"
							},
							{
								"type": "string"
							}
						],
						"description": "ONLY PRE-RELEASE - Environment variables"
					},
					"diginext": {
						"description": "Old \"diginext.json\""
					},
					"appConfig": {
						"$ref": "#/components/schemas/AppConfig"
					},
					"prodYaml": {
						"type": "string"
					},
					"preYaml": {
						"type": "string"
					},
					"prereleaseUrl": {
						"type": "string"
					},
					"productionUrl": {
						"type": "string"
					},
					"deploymentYaml": {
						"type": "string",
						"description": "Deployment YAML"
					},
					"endpoint": {
						"type": "string",
						"description": "Release endpoint (development/.../production URL)"
					},
					"providerProjectId": {
						"type": "string"
					},
					"buildStatus": {
						"$ref": "#/components/schemas/BuildStatus"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Release.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Release.Exclude_keyofRelease.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"Pick_Role.Exclude_keyofRole.keyofHiddenBodyKeys__": {
				"properties": {
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"type": {
						"type": "string",
						"description": "One of:\n- undefined | \"custom\": custom role\n- \"admin\": default super admin role\n- \"member\": default member role\n- \"moderator\": default moderator role"
					},
					"routes": {
						"items": {
							"$ref": "#/components/schemas/RoleRoute"
						},
						"type": "array"
					}
				},
				"required": ["name", "routes"],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Role.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Role.Exclude_keyofRole.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"RoleDto": {
				"$ref": "#/components/schemas/Omit_Role.keyofHiddenBodyKeys_"
			},
			"Pick_User.Exclude_keyofUser.keyofHiddenBodyKeys__": {
				"properties": {
					"name": {
						"type": "string",
						"description": "User name"
					},
					"image": {
						"type": "string",
						"description": "User profile picture URL"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"type": {
						"type": "string",
						"description": "Service Account is also a User with unexpired access token."
					},
					"username": {
						"type": "string",
						"description": "Unique username of a user\nThis equavilent with \"slug\""
					},
					"email": {
						"type": "string",
						"description": "User email address"
					},
					"verified": {
						"type": "boolean",
						"description": "Is this user's email or phone verified?"
					},
					"providers": {
						"items": {
							"$ref": "#/components/schemas/ProviderInfo"
						},
						"type": "array",
						"description": "List of Cloud Providers which this user can access to"
					},
					"password": {
						"type": "string",
						"description": "User password (hashed)"
					},
					"token": {
						"$ref": "#/components/schemas/AccessTokenInfo",
						"description": "User token"
					},
					"roles": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/Role"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "User's roles (should be filtered by \"workspace\")"
					},
					"teams": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/Team"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "User's team IDs which this user is a member"
					},
					"workspaces": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/ObjectID"
								},
								{
									"$ref": "#/components/schemas/ObjectId"
								},
								{
									"$ref": "#/components/schemas/Workspace"
								},
								{
									"type": "string"
								}
							]
						},
						"type": "array",
						"description": "List of workspace IDs which this user is a member"
					},
					"activeWorkspace": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/ObjectId"
							},
							{
								"$ref": "#/components/schemas/Workspace"
							},
							{
								"type": "string"
							}
						],
						"description": "Active workspace of a user"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"JoinWorkspaceBody": {
				"properties": {
					"userId": {
						"type": "string"
					},
					"workspace": {
						"type": "string"
					}
				},
				"required": ["userId", "workspace"],
				"type": "object",
				"additionalProperties": false
			},
			"Pick_Team.Exclude_keyofTeam.keyofHiddenBodyKeys__": {
				"properties": {
					"project": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/ObjectID"
							},
							{
								"$ref": "#/components/schemas/Project"
							},
							{
								"type": "string"
							}
						],
						"description": "ID of the project"
					},
					"name": {
						"type": "string"
					},
					"image": {
						"type": "string"
					},
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					}
				},
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Team.keyofHiddenBodyKeys_": {
				"$ref": "#/components/schemas/Pick_Team.Exclude_keyofTeam.keyofHiddenBodyKeys__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"WorkspaceInputData": {
				"properties": {
					"slug": {
						"type": "string",
						"description": "Auto-generated by \"name\" column"
					},
					"active": {
						"type": "boolean",
						"description": "Auto-generated by \"name\" column"
					},
					"name": {
						"type": "string",
						"description": "Name of the workspace."
					},
					"owner": {
						"type": "string",
						"description": "User ID of the owner"
					},
					"public": {
						"type": "boolean",
						"description": "Set privacy mode for this workspace",
						"default": "true"
					}
				},
				"required": ["name", "owner"],
				"type": "object",
				"additionalProperties": false
			},
			"AddUserBody": {
				"properties": {
					"userId": {
						"type": "string"
					},
					"workspaceId": {
						"type": "string"
					},
					"roleId": {
						"type": "string"
					}
				},
				"required": ["userId", "workspaceId"],
				"type": "object",
				"additionalProperties": false
			},
			"ApiUserAndServiceAccountQueries": {
				"properties": {
					"populate": {
						"type": "string",
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`"
					},
					"select": {
						"type": "string"
					},
					"order": {
						"type": "string",
						"example": "-updatedAt,-createdAt"
					},
					"raw": {
						"type": "boolean",
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"default": "false"
					},
					"page": {
						"type": "number",
						"format": "double"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"limit": {
						"type": "number",
						"format": "double"
					},
					"skip": {
						"type": "number",
						"format": "double"
					},
					"id": {
						"type": "string",
						"description": "Find one item by `{ObjectID}`"
					},
					"_id": {
						"type": "string"
					},
					"search": {
						"type": "boolean",
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"default": "true"
					},
					"download": {
						"type": "boolean",
						"description": "If `true`, return the excel binary file to download.",
						"default": "false"
					},
					"workspace": {
						"type": "string",
						"description": "Workspace ID or slug"
					}
				},
				"required": ["workspace"],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "API_ACCESS_TOKEN",
				"in": "header"
			},
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "@topgroup/diginext",
		"version": "2.8.6",
		"description": "A BUILD SERVER & CLI to deploy apps to any Kubernetes clusters.",
		"license": {
			"name": "GPL"
		},
		"contact": {
			"name": "TOP GROUP (a.k.a Digitop)",
			"email": "dev@wearetopgroup.com",
			"url": "https://github.com/digitopvn/diginext"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/app": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AppInputSchema"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Find one item by slug",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_App.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/app/config": {
			"get": {
				"operationId": "GetAppConfig",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"messages": {
											"items": {},
											"type": "array"
										},
										"data": {
											"$ref": "#/components/schemas/AppConfig"
										},
										"status": {
											"type": "number",
											"format": "double"
										}
									},
									"required": ["messages", "data", "status"],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/app/environment": {
			"get": {
				"operationId": "GetDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"description": "Create new deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Deploy environment name",
						"in": "query",
						"name": "env",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "App slug",
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"description": "Create new deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"deployEnvironmentData": {
										"$ref": "#/components/schemas/DeployEnvironmentData",
										"description": "`REQUIRES`\n---\nDeploy environment configuration"
									},
									"env": {
										"type": "string",
										"description": "`REQUIRES`\n---\nDeploy environment name",
										"default": "dev"
									},
									"appSlug": {
										"type": "string",
										"description": "`REQUIRES`\n---\nApp slug"
									}
								},
								"required": ["deployEnvironmentData", "env", "appSlug"],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/App"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Delete a deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": false,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"env": {
										"type": "string",
										"description": "Short name of deploy environment"
									},
									"slug": {
										"type": "string",
										"description": "App's slug (no need `id` or `_id` if using `slug`)"
									},
									"id": {
										"type": "string",
										"description": "[alias] App's ID (no need `slug` if using `id` or `_id`)"
									},
									"_id": {
										"type": "string",
										"description": "App's ID (no need `slug` if using `id` or `_id`)"
									}
								},
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/app/environment/variables": {
			"get": {
				"operationId": "GetEnvVarsOnDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"messages": {
													"items": {},
													"type": "array"
												},
												"data": {
													"items": {
														"$ref": "#/components/schemas/KubeEnvironmentVariable"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "data", "status"],
											"type": "object"
										},
										{
											"properties": {
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Get list of variables on the deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "env",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateEnvVarsOnDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"messages": {
													"items": {},
													"type": "array"
												},
												"data": {
													"items": {
														"$ref": "#/components/schemas/KubeEnvironmentVariable"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "data", "status"],
											"type": "object"
										},
										{
											"properties": {
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Create new variables on the deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateEnvVarsDto"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "UpdateSingleEnvVarOnDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"messages": {
													"items": {},
													"type": "array"
												},
												"data": {
													"items": {
														"$ref": "#/components/schemas/KubeEnvironmentVariable"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "data", "status"],
											"type": "object"
										},
										{
											"properties": {
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Update a variable on the deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"envVar": {
										"$ref": "#/components/schemas/KubeEnvironmentVariable",
										"description": "A variables to be created on deploy environment"
									},
									"env": {
										"type": "string",
										"description": "Deploy environment name"
									},
									"slug": {
										"type": "string",
										"description": "App slug"
									}
								},
								"required": ["envVar", "env", "slug"],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteEnvVarsOnDeployEnvironment",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"messages": {
													"items": {},
													"type": "array"
												},
												"data": {
													"items": {
														"$ref": "#/components/schemas/KubeEnvironmentVariable"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "data", "status"],
											"type": "object"
										},
										{
											"properties": {
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Update a variable on the deploy environment of the application.",
				"tags": ["App"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"env": {
										"type": "string",
										"description": "Deploy environment name"
									},
									"slug": {
										"type": "string",
										"description": "App slug"
									}
								},
								"required": ["env", "slug"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/build": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Build"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Build"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/Build"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BuildData"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Build"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BuildData"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/build/logs": {
			"get": {
				"operationId": "GetLogs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"type": "string"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/build/start": {
			"post": {
				"operationId": "StartBuild",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"description": "Create a new {Build} instance, then start building container image.",
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/StartBuildParams"
							}
						}
					}
				}
			}
		},
		"/build/stop": {
			"patch": {
				"operationId": "StopBuild",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/Build"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Build"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"slug": {
										"type": "string"
									}
								},
								"required": ["slug"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/cluster": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Cluster"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Cluster"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cluster"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Cluster"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Cluster.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Cluster"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Cluster.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cluster"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/cluster/connect": {
			"get": {
				"operationId": "Connect",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Cluster"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/deploy": {
			"post": {
				"operationId": "DeployFromSource",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "### [DEPRECATED SOON]\n#### Use `buildAndDeploy()` instead.\nBuild container image first, then deploy that build to target deploy environment.",
				"tags": ["Deploy"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"options": {
										"$ref": "#/components/schemas/InputOptions"
									}
								},
								"required": ["options"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/deploy/build-first": {
			"post": {
				"operationId": "BuildAndDeploy",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"logURL": {
															"type": "string"
														}
													},
													"required": ["logURL"],
													"type": "object"
												},
												"status": {
													"type": "number",
													"format": "double"
												},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"required": ["data", "status", "messages"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Build container image first, then deploy that build to target deploy environment.\n- `Alias of \"/api/v1/deploy/from-source\"`",
				"tags": ["Deploy"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"deployParams": {
										"$ref": "#/components/schemas/DeployBuildInput"
									},
									"buildParams": {
										"$ref": "#/components/schemas/StartBuildParams"
									}
								},
								"required": ["deployParams", "buildParams"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/deploy/from-source": {
			"post": {
				"operationId": "BuildFromSourceAndDeploy",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"logURL": {
															"type": "string"
														}
													},
													"required": ["logURL"],
													"type": "object"
												},
												"status": {
													"type": "number",
													"format": "double"
												},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"required": ["data", "status", "messages"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Build container image first, then deploy that build to target deploy environment.\n- `Alias of \"/api/v1/deploy/build-first\"`",
				"tags": ["Deploy"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"deployParams": {
										"$ref": "#/components/schemas/DeployBuildInput"
									},
									"buildParams": {
										"$ref": "#/components/schemas/StartBuildParams"
									}
								},
								"required": ["deployParams", "buildParams"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/deploy/from-build": {
			"post": {
				"operationId": "DeployFromBuild",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {},
												"messages": {
													"items": {
														"type": "string"
													},
													"type": "array"
												},
												"status": {
													"type": "number",
													"format": "double"
												}
											},
											"required": ["messages", "status"],
											"type": "object"
										},
										{
											"properties": {
												"data": {
													"properties": {
														"deployment": {
															"$ref": "#/components/schemas/GenerateDeploymentResult"
														},
														"release": {
															"$ref": "#/components/schemas/Release"
														},
														"build": {
															"$ref": "#/components/schemas/Build"
														}
													},
													"required": ["deployment", "release", "build"],
													"type": "object"
												},
												"status": {
													"type": "number",
													"format": "double"
												},
												"messages": {
													"items": {},
													"type": "array"
												}
											},
											"required": ["data", "status", "messages"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Deploy"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"allOf": [
									{
										"properties": {
											"buildSlug": {
												"type": "string",
												"description": "Build's slug"
											}
										},
										"required": ["buildSlug"],
										"type": "object"
									},
									{
										"$ref": "#/components/schemas/DeployBuildInput"
									}
								]
							}
						}
					}
				}
			}
		},
		"/framework": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Framework"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Framework"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Framework"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/Framework"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Framework"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Framework.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Framework"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Framework"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Framework.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Framework"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/git": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/GitProvider"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/GitProvider"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/GitProvider"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_GitProvider.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/GitProvider"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_GitProvider.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/git/ssh/public-key": {
			"get": {
				"operationId": "GetPublicKey",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			}
		},
		"/git/ssh/create": {
			"post": {
				"operationId": "CreateKeysSSH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"publicKey": {
										"type": "string"
									},
									"privateKey": {
										"type": "string"
									}
								},
								"required": ["publicKey", "privateKey"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/git/ssh/generate": {
			"post": {
				"operationId": "GenerateSSH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"publicKey": {
													"type": "string"
												}
											},
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/git/ssh/verify": {
			"post": {
				"operationId": "VerifySSH",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Git Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "provider",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/project": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Project"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Project"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/Project"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProjectInputSchema"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Project"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProjectInputSchema"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Project"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/project/with-apps": {
			"get": {
				"operationId": "GetProjectsAndApps",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/Project"
													},
													"type": "array"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Project"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			}
		},
		"/provider": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/CloudProvider"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/CloudProvider"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cloud Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/CloudProvider"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cloud Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_CloudProvider.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/CloudProvider"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cloud Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_CloudProvider.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Cloud Provider"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/registry": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/ContainerRegistry"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/ContainerRegistry"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Container Registry"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Container Registry"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/MaskedContainerRegistry"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Container Registry"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_ContainerRegistry.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Container Registry"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/registry/connect": {
			"get": {
				"operationId": "Connect",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"data": {},
										"messages": {
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										"status": {
											"type": "number",
											"format": "double"
										}
									},
									"required": ["data", "messages", "status"],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": ["Container Registry"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "slug",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/release": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Release"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Release"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/Release"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Release.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Release"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Release.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/release/from-build": {
			"post": {
				"operationId": "CreateFromBuild",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"env": {
										"type": "string"
									},
									"build": {
										"type": "string"
									}
								},
								"required": ["env", "build"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/release/rollout": {
			"patch": {
				"operationId": "Rollout",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/Release"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "string"
									}
								},
								"required": ["id"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/release/preview": {
			"patch": {
				"operationId": "PreviewPrerelease",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/Release"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Release"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "string"
									}
								},
								"required": ["id"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/role": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Role"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Role"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Role"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Role"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RoleDto"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Role"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Role"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RoleDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Role"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/role/assign": {
			"post": {
				"operationId": "Assign",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Role"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"roleId": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									}
								},
								"required": ["roleId", "userId"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/service_account": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/User"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/User"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Service Account"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/User"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Service Account"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/User"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Service Account"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Service Account"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/service_account/join-workspace": {
			"patch": {
				"operationId": "JoinWorkspace",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/User"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Service Account"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/JoinWorkspaceBody"
							}
						}
					}
				}
			}
		},
		"/team": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Team"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Team"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Team"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/Team"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Team"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Team.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Team"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Team"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_Team.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Team"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/user": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/User"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/User"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/User"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/User"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/user/join-workspace": {
			"patch": {
				"operationId": "JoinWorkspace",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/User"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["User"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/JoinWorkspaceBody"
							}
						}
					}
				}
			}
		},
		"/workspace": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/Workspace"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/Workspace"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Workspace"],
				"security": [],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WorkspaceInputData"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/Workspace"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WorkspaceInputData"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/workspace/add-user": {
			"patch": {
				"operationId": "AddUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"items": {
														"$ref": "#/components/schemas/User"
													},
													"type": "array"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddUserBody"
							}
						}
					}
				}
			}
		},
		"/workspace/service-account": {
			"get": {
				"operationId": "GetServiceAccounts",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"description": "======================= SERVICE ACCOUNT ======================",
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"description": "Workspace ID or slug",
						"in": "query",
						"name": "workspace",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/workspace/api-user": {
			"get": {
				"operationId": "GetApiKeyUsers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseData"
								}
							}
						}
					}
				},
				"description": "======================= API KEY USER ACCOUNT ======================",
				"tags": ["Workspace"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"description": "Workspace ID or slug",
						"in": "query",
						"name": "workspace",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api_key": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"anyOf": [
																{
																	"$ref": "#/components/schemas/User"
																},
																{
																	"items": {
																		"$ref": "#/components/schemas/User"
																	},
																	"type": "array"
																}
															]
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["API Key"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "size",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Find one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "_id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Mark this request as search (return the similar results based on the filter query params)",
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"default": "true",
							"type": "boolean"
						}
					},
					{
						"description": "If `true`, return the excel binary file to download.",
						"in": "query",
						"name": "download",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				]
			},
			"post": {
				"operationId": "Create",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"$ref": "#/components/schemas/User"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["API Key"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"items": {
																"$ref": "#/components/schemas/User"
															},
															"type": "array"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["API Key"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Fields to populate, seperated by commas, for example: `owner,workspace`",
						"in": "query",
						"name": "populate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "select",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": false,
						"schema": {
							"type": "string"
						},
						"example": "-updatedAt,-createdAt"
					},
					{
						"description": "Disable the default `{$set: body}` of \"update\" query & update `{body}` directly to the items",
						"in": "query",
						"name": "raw",
						"required": false,
						"schema": {
							"default": "false",
							"type": "boolean"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Omit_User.keyofHiddenBodyKeys_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"allOf": [
												{
													"$ref": "#/components/schemas/ResponseData"
												},
												{
													"properties": {
														"data": {
															"properties": {
																"n": {
																	"type": "number",
																	"format": "double"
																},
																"ok": {
																	"type": "number",
																	"format": "double"
																}
															},
															"type": "object"
														}
													},
													"required": ["data"],
													"type": "object"
												}
											]
										}
									]
								}
							}
						}
					}
				},
				"tags": ["API Key"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Delete one item by `{ObjectID}`",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Delete one item by `{slug}`",
						"in": "query",
						"name": "slug",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api_key/join-workspace": {
			"patch": {
				"operationId": "JoinWorkspace",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ResponseData"
										},
										{
											"properties": {
												"data": {
													"$ref": "#/components/schemas/User"
												}
											},
											"required": ["data"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"tags": ["API Key"],
				"security": [
					{
						"api_key": []
					},
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/JoinWorkspaceBody"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/api/v1"
		}
	]
}
