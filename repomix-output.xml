This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: public
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
__tests__/
  core/
    initial-data.ts
    system-status.ts
  flows/
    test-flow-1.ts
  wip/
    updateBranchProtech.ts
  helpers.ts
  index.test.ts
.github/
  ISSUE_TEMPLATE/
    bug_report.md
    feature_request.md
    propose_change.md
  workflows/
    release.yml
    test.yml
.husky/
  commit-msg
  pre-commit
docs/
  config.md
  deployment-strategy-v2.excalidraw
  diginext_logo_black_purple.svg
  diginext_logo_white_purple.svg
  diginext_logo_white.svg
  diginext_logo.svg
  diginext-deploy-button.svg
  docs.md
  readme-tbu.md
  why-podman.md
podman/
  containers/
    registries.conf.d/
      shortnames.conf
    containers.conf
    registries.conf
    storage.conf
  cleanup.sh
scripts/
  github-actions/
    deploy.yml
    docker-build-push.yml
  gpt/
    01-node-install.sh
    02-yarn-install.sh
    03-gcloud-install.sh
    04-gke-auth-plugin-install.sh
    05-doctl-install.sh
    06-docker-install.sh
    k3s-install.sh
  k8s/
    dx-deployment.yaml
  custom_rsa.sh
  k3s-install.sh
  microk8s-install.sh
  set_env
  startup-dev.sh
  startup.sh
src/
  build/
    system.ts
  config/
    config.ts
    const.ts
  controllers/
    ApiKeyUserController.ts
    AppController.ts
    AskAiController.ts
    BaseController.ts
    BuildController.ts
    CloudDatabaseBackupController.ts
    CloudDatabaseController.ts
    CloudProviderController.ts
    CloudStorageController.ts
    ClusterController.ts
    ContainerRegistryController.ts
    CronjobController.ts
    DeployController.ts
    DeployEnvironmentController.ts
    DomainController.ts
    EnvVarController.ts
    FrameworkController.ts
    GitProviderController.ts
    MediaController.ts
    MonitorController.ts
    NotificationController.ts
    ProjectController.ts
    ReleaseController.ts
    RoleController.ts
    RouteController.ts
    ServiceAccountController.ts
    StatsController.ts
    TeamController.ts
    UserController.ts
    UtilityController.ts
    WebhookController.ts
    WorkspaceController.ts
  entities/
    Activity.ts
    ApiKeyAccount.ts
    App.ts
    Base.ts
    Build.ts
    CloudDatabase.ts
    CloudDatabaseBackup.ts
    CloudProvider.ts
    CloudStorage.ts
    Cluster.ts
    ContainerRegistry.ts
    Cronjob.ts
    EnvVar.ts
    Framework.ts
    GitProvider.ts
    index.ts
    Media.ts
    Notification.ts
    Project.ts
    Release.ts
    Role.ts
    Route.ts
    ServiceAccount.ts
    SystemLog.ts
    Team.ts
    User.ts
    UserToken.ts
    Webhook.ts
    Workspace.ts
  interfaces/
    bitbucket/
      BitbucketOrg.ts
      BitbucketProject.ts
      BitbucketRepoBranch.ts
      BitbucketRepository.ts
      BitbucketUser.ts
      index.ts
    github/
      GithubOrg.ts
      GithubRepoBranch.ts
      GithubRepository.ts
      GithubUser.ts
      index.ts
    AppConfig.ts
    AppInterfaces.ts
    DeployEnvironment.ts
    DeployEnvironmentVolume.ts
    DockerResourceTypes.ts
    DomainRecord.ts
    EnvironmentVariable.ts
    GoogleServiceAccount.ts
    IKube.ts
    index.ts
    InputOptions.ts
    IPermission.ts
    IQuery.ts
    KubeConfig.ts
    KubeDeployment.ts
    KubeIngress.ts
    KubeIngressClass.ts
    KubeNamespace.ts
    KubeNode.ts
    KubePod.ts
    KubeRegistrySecret.ts
    KubeSecret.ts
    KubeService.ts
    KubeStatefulSet.ts
    KubeVolumes.ts
    MonitoringQuery.ts
    PackageConfig.ts
    ResponseData.ts
    SystemTypes.ts
  middlewares/
    activity-log.ts
    auth-api-key.ts
    auth-jwt.ts
    auth-rate-limit.ts
    auth-swagger.ts
    authenticate.ts
    authorize.ts
    failSafeHandler.ts
    process-api-request.ts
    register-controller.ts
    route404.ts
  migration/
    delete-permanent-soft-deleted-items.ts
    migrate-all-clusters.ts
    migrate-all-frameworks.ts
    migrate-all-git-providers.ts
    migrate-all-records.ts
    migrate-all-releases.ts
    migrate-all-roles.ts
    migrate-all-sa-and-api-key.ts
    migrate-all-user-types.ts
    migrate-all-users.ts
    migrate-app-environment.ts
    migrate-service-account.ts
    migrate-user-workspaces.ts
    seed-initial-clusters.ts
  modules/
    ai/
      exec-ai.ts
      openrouter-api.ts
    analytics/
      analytics.service.ts
      index.ts
    api/
      DB.ts
      fetchApi.ts
      index.ts
    apps/
      app-helper.ts
      ask-project-and-app.ts
      create-empty-app-dir.ts
      create-or-select-app.ts
      create-or-select-project.ts
      get-app-environment.ts
      index.ts
      init-app.ts
      new-app-by-form.ts
      new-app.ts
      search-apps.ts
      search-projects.ts
      selectApp.ts
      selectProject.ts
      transferRepo.ts
      update-config.ts
      update-git-config.ts
      view-logs.ts
    bitbucket/
      createPullRequest.ts
      index.ts
      permissions.ts
      pipelines.ts
      promptForAuthOptions.ts
    build/
      ask-for-domain.ts
      build-and-deploy.ts
      build.ts
      create-release-from-app.ts
      create-release-from-build.ts
      exec-build.ts
      generate-build-tag.ts
      index.ts
      query-build.ts
      request-build.ts
      send-log-message.ts
      start-build-and-run.ts
      start-build.ts
      update-build-status.ts
      update-release-status.ts
    builder/
      docker.ts
      index.ts
      podman.ts
    capture/
      export-pdf.ts
      screenshot.ts
    cdn/
      ask-for-storage.ts
      cdn.service.ts
      index.ts
    cli/
      account.ts
      get-server-info.ts
      index.ts
      parse-cli-options.ts
      show-cli-info.ts
      update-cli.ts
    cluster/
      ask-for-cluster.ts
      cli-cluster.ts
    cronjob/
      calculate-next-run-at.ts
      cancel-job.ts
      find-and-run-job.ts
      index.ts
      run-job.ts
      schedule.ts
    db/
      ask-databases.ts
      index.ts
      mongo.ts
      mysql.ts
      pg.ts
    deploy/
      utils/
        deploy-checker.ts
        deploy-cleaner.ts
        deploy-error-handler.ts
        deploy-helper.ts
        deploy-preparator.ts
        deploy-scaler.ts
        deploy-yaml-processor.ts
        index.ts
      ask-ai-generate-dockerfile.ts
      ask-deploy-environment-info.ts
      create-build-slug.ts
      deploy-build-v2.ts
      deploy-build.ts
      deploy-release.ts
      deploy-rollout-v3.ts
      deploy-rollout.ts
      dotenv-download.ts
      dotenv-exec.ts
      dotenv-upload.ts
      exec-rollout.ts
      exec-takedown.ts
      fetch-deployment.ts
      generate-deployment-name.ts
      generate-deployment-v2.ts
      generate-deployment.ts
      generate-domain.ts
      index.ts
      mark-long-build-release-as-failed.ts
      mark-release-as-active.ts
      parse-options-to-app-config.ts
      promote-deploy-environment.ts
      query-release.ts
      request-deploy.ts
    diginext/
      dx-api.ts
      dx-ask-ai.ts
      dx-domain.ts
      dx-email.ts
      dx-package.ts
      dx-subscription.ts
      dx-user.ts
      dx-workspace.ts
      index.ts
    domains/
      execDomain.ts
      index.ts
    frameworks/
      github-trends.ts
    git/
      ask-for-git-provider.ts
      git-interfaces.ts
      git-provider-api.ts
      git-utils.ts
      github.ts
      index.ts
      initalizeAndCreateDefaultBranches.ts
      updateBranchProtection.ts
      updateRepoSetting.ts
    k8s/
      ask-for-deployment.ts
      ask-for-image.ts
      ask-for-namespace.ts
      ask-for-new-value.ts
      ask-for-target-prop.ts
      cluster-auth.ts
      image-pull-secret.ts
      index.ts
      kube-config.ts
      kube-deploy.ts
      kube-metrics.ts
      kubectl-cli.ts
      kubectl.ts
      stack-check.ts
      stack-install.ts
    passports/
      bearerStrategy.ts
      googleStrategy.ts
      index.ts
      jwtStrategy.ts
    pipeline/
      index.ts
      pipeline.service.ts
    project/
      create-project.ts
      execInitProject.ts
      frameworks.ts
      index.ts
      printInformation.ts
      setupGitIgnore.ts
    providers/
      custom.ts
      digitalocean.ts
      gcloud.ts
      index.ts
    registry/
      add-container-registry.ts
      ask-connect-registry.ts
      ask-for-registry.ts
      connect-registry.ts
      ContainerRegistrySecretOptions.ts
      docker-registry.ts
      index.ts
    server/
      index.ts
      startup-scripts.ts
    snippets/
      createNewPage.ts
      generateSnippet.ts
    storages/
      aws-storage.ts
      google-storage.ts
      storage-helper.ts
      storage-types.ts
    workspace/
      check-quota.ts
    AppDatabase.ts
    framework.ts
    test-command.ts
  plugins/
    cli-md/
      index.ts
    cloud-storage/
      helper.ts
      index.ts
      storage-upload.ts
      types.ts
    string/
      code-block.ts
      contain.ts
      count.ts
      extract.ts
      format.ts
      humanize.ts
      index.ts
      random.ts
      slug.ts
    array.ts
    controller-parser.ts
    detect-language.ts
    detect-version.ts
    env-var.ts
    freeup.ts
    fs-extra.ts
    gcs.ts
    generate-unique-string.ts
    image.ts
    import-esm.ts
    index.ts
    is-own.ts
    k8s-helper.ts
    log-stream.ts
    logger.ts
    mask-sensitive-info.ts
    mongodb.ts
    monorepo.ts
    number.ts
    object.ts
    os.ts
    ownership-utils.ts
    params.ts
    parse-request-filter.ts
    preprocess-input-data.ts
    slug.ts
    traverse.ts
    user-utils.ts
    utils.ts
  routes/
    api/
      v1/
        api_key.ts
        app.ts
        ask-ai.ts
        basic-auth.ts
        build.ts
        cluster.ts
        cronjob.ts
        database-backup.ts
        database.ts
        deploy-environment.ts
        deploy.ts
        domain.ts
        framework.ts
        git.ts
        index.ts
        media.ts
        monitor.ts
        notification.ts
        project.ts
        provider.ts
        registry.ts
        release.ts
        role.ts
        route.ts
        service_account.ts
        stats.ts
        storage.ts
        team.ts
        user.ts
        utility.ts
        webhook.ts
        workspace.ts
      index.ts
    auth/
      google/
        index.ts
      logout.ts
      profile.ts
      refresh.ts
    routes.ts
  seeds/
    index.ts
    seed-all-routes.ts
    seed-api-key.ts
    seed-clusters.ts
    seed-frameworks.ts
    seed-projects.ts
    seed-roles.ts
    seed-service-account.ts
    seed-system.ts
  services/
    ActivityService.ts
    AIService.ts
    ApiKeyUserService.ts
    AppService.ts
    BaseService.ts
    BuildService.ts
    CloudDatabaseBackupService.ts
    CloudDatabaseService.ts
    CloudProviderService.ts
    CloudStorageService.ts
    ClusterService.ts
    ContainerRegistryService.ts
    CronjobService.ts
    DeployEnvironmentService.ts
    DeployService.ts
    EnvVarService.ts
    FrameworkService.ts
    GitProviderService.ts
    index.ts
    MediaService.ts
    MonitorDeploymentService.ts
    MonitorIngressService.ts
    MonitorNamespaceService.ts
    MonitorPodService.ts
    MonitorSecretService.ts
    MonitorService.ts
    MonitorServiceService.ts
    MonitorStatefulSetService.ts
    NotificationService.ts
    ProjectService.ts
    ReleaseService.ts
    RoleService.ts
    RouteService.ts
    ServiceAccountService.ts
    SystemLogService.ts
    TeamService.ts
    UserService.ts
    UserTokenService.ts
    WebhookService.ts
    WorkspaceService.ts
  views/
    index.html
  app.config.ts
  index.ts
  server.ts
templates/
  cert-manager/
    cluster-issuer.yaml
  diginext/
    .env
    deployment.yml
    Dockerfile
    Dockerfile.staging
    gitignore.txt
  express/
    .env
    Dockerfile
  monorepo/
    Dockerfile
    Dockerfile.diginest
    Dockerfile.diginext
  nextjs/
    ts/
      0.1/
        components/
          blank.txt
          page-name.txt
          pixi.txt
          three.txt
        modules/
          pixi.txt
          three.txt
        pages/
          blank.txt
          page-name.txt
  nginx-conf/
    nginx.conf
  nodejs/
    .env
    Dockerfile
  static/
    docker-compose.yml
    Dockerfile
    index.html
    nginx.conf
  .env
  github-action-template.yaml
  gitignore.txt
  namespace.yaml
  patch_remove_dev1_ingress.json
  readme-template.md
.babelrc.js
.dependency-cruiser.js
.dockerignore
.env.example
.eslintignore
.eslintrc
.gitignore
.npmignore
.prettierignore
.prettierrc.json
CHANGELOG.md
CODE_OF_CONDUCT.md
commitlint.config.js
CONTRIBUTING.md
deployment.docker.example.yaml
deployment.podman.example.yaml
DEVELOPER.md
diginext.code-workspace
docker-compose.dev.example.yaml
docker-compose.example.yaml
docker-compose.mongo.example.yaml
docker-compose.mongors.example.yaml
docker-compose.podman.dev.example.yaml
docker-compose.podman.example.yaml
Dockerfile
Dockerfile.base
Dockerfile.dev
Dockerfile.prerelease
FAQ.md
jest.config.js
LICENSE
lint-staged.config.js
package.json
readme.md
skaffold.yaml
tsconfig.jest.json
tsconfig.json
tsoa.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="__tests__/core/initial-data.ts">
import { providerSvc } from "../helpers";
⋮----
export function checkInitialData()
</file>

<file path="__tests__/core/system-status.ts">
import axios from "axios";
import { Config } from "@/app.config";
⋮----
export function checkSystemStatus()
</file>

<file path="__tests__/wip/updateBranchProtech.ts">
// import updateBranchProtection from "@/modules/git/updateBranchProtection";
// import updateRepoSetting from "@/modules/git/updateRepoSetting";
// import axios from "axios";
// const dotenv = require("dotenv").config({ path: ".env.test" });
// const _env = dotenv.parsed ? dotenv.parsed : {};
⋮----
// function getRepoName(url: string): string | null {
// 	// Regular expression to match the GitHub repository pattern
// 	// This regex assumes the standard GitHub URL format: https://github.com/username/reponame
// 	const regex = /https:\/\/github\.com\/[^\/]+\/([^\/]+)/;
⋮----
// 	// Matching the URL against the regex
// 	const match = url.match(regex);
⋮----
// 	// Returning the repository name if a match is found
// 	return match ? match[1] : null;
// }
⋮----
// function getRepoOwner(url: string): string | null {
// 	// Regular expression to match the GitHub repository pattern
// 	// This regex assumes the standard GitHub URL format: https://github.com/username/reponame
// 	const regex = /https:\/\/github\.com\/([^\/]+)\/[^\/]+/;
⋮----
// 	// Matching the URL against the regex
// 	const match = url.match(regex);
⋮----
// 	// Returning the owner's username if a match is found
// 	return match ? match[1] : null;
// }
⋮----
// it("updateBranchProtech.test.ts", async () => {
// 	const token = _env.GITHUB_TOKEN;
// 	console.log("token :>> ", token);
// 	if (!token) throw new Error("NO GITHUB_TOKEN");
⋮----
// 	let maxPage = 3;
// 	for (let k = 1; k <= 3; k++) {
// 		const res = await axios({
// 			method: "get",
// 			url: `https://api.github.com/search/repositories?q=user:digitopvn&per_page=100&page=${k}`,
// 			headers: {
// 				Accept: "application/vnd.github+json",
// 				Authorization: `token ${token}`,
// 				//
// 			},
// 		});
⋮----
// 		const { total_count, items } = (res as any)?.data;
// 		maxPage = Math.ceil(total_count / 100);
// 		const list = items.filter((x) => x.private);
⋮----
// 		for (let i = 0; i < list.length; i++) {
// 			const element = list[i];
⋮----
// 			const option: any = {
// 				// options.app.git
// 				app: { git: { provider: "github" } },
// 				git: {
// 					org: getRepoOwner(element.html_url),
// 					access_token: token,
// 				} as any,
// 				repoSlug: getRepoName(element.html_url),
// 				defaultBranch: element.default_branch,
// 			};
⋮----
// 			console.log("element.html_url :>> ", element.html_url);
// 			// const ress = await updateBranchProtection(option);
// 			const ress = await updateRepoSetting(option);
// 		}
// 	}
// }, 1000000);
⋮----
// nothing, just because Jest will not work without exporting something
</file>

<file path="__tests__/helpers.ts">
import { IUser, UserDto, IWorkspace, WorkspaceDto, IRole } from "../src/entities";
import { wait, waitUntil } from "@/plugins/utils";
import AppDatabase from "../src/modules/AppDatabase";
import { extractAccessTokenInfo, generateJWT } from "../src/modules/passports/jwtStrategy";
import { isServerReady, server, socketIO } from "../src/server";
import jwt from "jsonwebtoken";
⋮----
import AppController from "../src/controllers/AppController";
import BuildController from "../src/controllers/BuildController";
import CloudDatabaseController from "../src/controllers/CloudDatabaseController";
import CloudProviderController from "../src/controllers/CloudProviderController";
import ClusterController from "../src/controllers/ClusterController";
import CronjobController from "../src/controllers/CronjobController";
import ContainerRegistryController from "../src/controllers/ContainerRegistryController";
import FrameworkController from "../src/controllers/FrameworkController";
import GitProviderController from "../src/controllers/GitProviderController";
import ProjectController from "../src/controllers/ProjectController";
import ReleaseController from "../src/controllers/ReleaseController";
import RoleController from "../src/controllers/RoleController";
import TeamController from "../src/controllers/TeamController";
import UserController from "../src/controllers/UserController";
import ApiKeyUserController from "../src/controllers/ApiKeyUserController";
import ServiceAccountController from "../src/controllers/ServiceAccountController";
import WorkspaceController from "../src/controllers/WorkspaceController";
import WebhookController from "../src/controllers/WebhookController";
import NotificationController from "../src/controllers/NotificationController";
⋮----
import { isEmpty } from "lodash";
import { MongoDB } from "../src/plugins/mongodb";
import mongoose from "mongoose";
import chalk from "chalk";
import { Config } from "../src/app.config";
import { randomInt } from "crypto";
import { makeSlug } from "../src/plugins/slug";
import { AppRequest } from "@/interfaces/SystemTypes";
import { Options, execaCommand } from "execa";
import { CLI_CONFIG_DIR } from "@/config/const";
import path from "path";
import { existsSync, mkdirSync } from "fs";
import CloudDatabaseBackupController from "@/controllers/CloudDatabaseBackupController";
import { DeployEnvironmentService } from "@/services";
import { fetchApi } from "@/modules/api";
⋮----
// for API testing...
⋮----
// for directly interact with the database...
⋮----
// current logged in user
⋮----
export async function setupStartTestEnvironment()
⋮----
// drop the test database
⋮----
// wait until the server is completely READY...
⋮----
export async function setupEndTestEnvironment()
⋮----
// drop the test database
⋮----
// disconnect the database, socket & server
⋮----
export const createUser = async (data: UserDto) =>
⋮----
export const createFakeUser = async (
	id: number = randomInt(1000000),
	options: { method: "jwt" | "basic"; email?: string; workspace?: string } = { method: "jwt" }
) =>
⋮----
export const getCurrentUser = async () =>
⋮----
// reload user data
⋮----
export const createWorkspace = async (ownerId: string, name: string, isPublic = true, options?:
⋮----
// hobby
// dx_key: "0fc5c0bac0647eabb70f955f7ec03332c13b0170d1ce0984184700a85c0e2007",
// self-hosted
⋮----
// const workspace = workspaceRes.data as IWorkspace;
⋮----
// reload current user
⋮----
// assign user & workspace to controllers:
⋮----
// special case (service that has no controllers)
⋮----
export const loginUser = async (userId: string, workspaceId?: string) =>
⋮----
// set active workspace to this user:
⋮----
// set default roles if this user doesn't have one
⋮----
// update token to db:
⋮----
// assign user & workspace to controllers:
⋮----
// special case (service that has no controllers)
⋮----
export type DxOptions = { onProgress?: (msg: string) => void; isDebugging?: boolean; cwd?: string };
⋮----
export const dxCmd = async (command: string, options?: DxOptions) =>
⋮----
// console.log(result);
⋮----
/**
 * Closes testing connections if they are connected.
 */
// export function closeTestingConnections(connections: DataSource[]) {
// 	return Promise.all(connections.map((connection) => (connection && connection.isInitialized ? connection.close() : undefined)));
// }
⋮----
/**
 * Reloads all databases for all given connections.
 */
// export function reloadTestingDatabases(connections: DataSource[]) {
// 	return Promise.all(connections.map((connection) => connection.synchronize(true)));
// }
</file>

<file path="__tests__/index.test.ts">
import { setupEndTestEnvironment, setupStartTestEnvironment } from "./helpers";
import { checkInitialData } from "./core/initial-data";
import { checkSystemStatus } from "./core/system-status";
import { testFlow1 } from "./flows/test-flow-1";
⋮----
// Start
⋮----
// 1. System
⋮----
// 2. Check initial data
⋮----
// 3. Flow 1: all core features
⋮----
// End
⋮----
// nothing, just because Jest will not work without exporting something
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: "[BUG]"
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. 
2. 
3. 
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, please run the command with `--debug` flag and add screenshots of the logs to help explain your problem & easy of investigation.

**Your environment:**
 - OS: [e.g. Windows, macOS]
 - Node version [e.g. 16.16.0]

**Additional context**
Add any other context about the problem here.

**Are you willing to resolve this issue by submitting a Pull Request?**
- [ ] Yes, I have time & I know how to start
- [ ] Yes, I have time & I don't know where to start
- [ ] No, I don't have time & I'm willing to donate for a quick fix
- [ ] No, I don't have time & I'm ok to wait for the community
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: ''
labels: ''
assignees: ''

---

**Is your feature request related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".github/ISSUE_TEMPLATE/propose_change.md">
---
name: Proposing a Change
about: Suggest a change for this project
title: ''
labels: ''
assignees: ''

---

**Is your proposal related to a problem? Please describe.**
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
A clear and concise description of any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.
</file>

<file path=".husky/commit-msg">
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

npx --no -- commitlint --edit $1
</file>

<file path=".husky/pre-commit">
#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Disable concurent to run `check-types` after ESLint in lint-staged
npx lint-staged --allow-empty --concurrent false
</file>

<file path="docs/config.md">
# CLI Configuration - Command Usage

Store & modify **Diginext CLI** config on your local machine.

## Examples

View current configuration:
```
diginext config get
```

View current cloud provider
```
diginext config provider current
```

## Usage

- View current CLI configuration

    ```
    diginext config get
    ```

    Output as JSON: `diginext config get -o json`
    _

- Cloud provider:

    List all providers
    ```
    diginext config provider ls
    diginext config provider list
    ```

    Add new provider (is the same with `diginext <provider-name> auth [...options]`)

    Get current provider: `diginext config provider current`
    _

- Git provider:

    List all providers
    ```
    diginext config git ls
    diginext config git list
    ```

    Add new provider 
    ```
    diginext config git auth <github|bitbucket|gitlab>
    ```

    Get current provider
    ```
    diginext config git current
    ```
    _

- Database:

    List all available databases
    ```
    diginext config db ls
    diginext config db list
    diginext config database ls
    diginext config database list
    ```

    Add new database:
    `diginext config db add --name=<NAME> --host=<HOST> --user=<USER> --pass=<PASS> --port=<PORT>`
    _

More documentation: 
-
`diginext --help` or `dx -h`
</file>

<file path="docs/deployment-strategy-v2.excalidraw">
{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "type": "rectangle",
      "version": 447,
      "versionNonce": 83022452,
      "index": "a0",
      "isDeleted": false,
      "id": "pFek0NNXf8D_3jgtkKekn",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 550.1543444930289,
      "y": 440.3486845469953,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 1368.5137226025706,
      "height": 931.0979002340858,
      "seed": 1492602813,
      "groupIds": [
        "mHNBZM_DqblHTTEqLR3aR"
      ],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 367,
      "versionNonce": 1885592692,
      "index": "a1",
      "isDeleted": false,
      "id": "KRvTLByZJYtkA1e7YFJub",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1767.2229845910765,
      "y": 467.80804736209166,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 119.03988647460938,
      "height": 25,
      "seed": 748155699,
      "groupIds": [
        "mHNBZM_DqblHTTEqLR3aR"
      ],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Deploy Build",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Deploy Build",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1120,
      "versionNonce": 827876340,
      "index": "a2",
      "isDeleted": false,
      "id": "iXBXwvNpvMPBPUA3YbEGj",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 860.253437039588,
      "y": 29.83406082095192,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 366.5130028477618,
      "height": 94.44140625000009,
      "seed": 316895763,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "cD6p9RObXieIAHLKsR2RW"
        },
        {
          "id": "UEodBS-2gK1n8pVPUOskH",
          "type": "arrow"
        },
        {
          "id": "EQi6SnoohjJOrcg-pyYir",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1447,
      "versionNonce": 497898700,
      "index": "a3",
      "isDeleted": false,
      "id": "cD6p9RObXieIAHLKsR2RW",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 912.9800617544845,
      "y": 64.55476394595198,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 261.05975341796875,
      "height": 25,
      "seed": 1208570643,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Docker: build & push image",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "iXBXwvNpvMPBPUA3YbEGj",
      "originalText": "Docker: build & push image",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1123,
      "versionNonce": 772785524,
      "index": "a4",
      "isDeleted": false,
      "id": "IFVcxmp3djOw-yPEOeaBh",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 849.3027343750001,
      "y": 480.146484375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#96f2d7",
      "width": 398.6210937499998,
      "height": 89.68359375000006,
      "seed": 1485929117,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "S8H1HKlkNo9plTzIRLCEM"
        },
        {
          "id": "SzpyHK_CDCZ8rdBXGrmRQ",
          "type": "arrow"
        },
        {
          "id": "Kbs2qbOZTyAGYwvOMyUTP",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1483,
      "versionNonce": 1578642932,
      "index": "a5",
      "isDeleted": false,
      "id": "S8H1HKlkNo9plTzIRLCEM",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 891.7033996582031,
      "y": 512.48828125,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 313.81976318359375,
      "height": 25,
      "seed": 690102013,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Generate deployment YAML (v2)",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "IFVcxmp3djOw-yPEOeaBh",
      "originalText": "Generate deployment YAML (v2)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1258,
      "versionNonce": 811529972,
      "index": "a6",
      "isDeleted": false,
      "id": "PM2YUnZdqOxKSffuZgjoU",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 856.0878906249999,
      "y": 670.865234375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 391.9882812500002,
      "height": 82.96484375000006,
      "seed": 1548055709,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "KaV9cTwyF-flxgWoB40nk"
        },
        {
          "id": "SzpyHK_CDCZ8rdBXGrmRQ",
          "type": "arrow"
        },
        {
          "id": "xpszKO5rjVgwY7q-fXe8E",
          "type": "arrow"
        },
        {
          "id": "mInyUCts-Kve7EBLBocja",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1643,
      "versionNonce": 1363204940,
      "index": "a7",
      "isDeleted": false,
      "id": "KaV9cTwyF-flxgWoB40nk",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 941.6421203613281,
      "y": 699.84765625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 220.87982177734375,
      "height": 25,
      "seed": 1212602621,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Clean up V1 deployment",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "PM2YUnZdqOxKSffuZgjoU",
      "originalText": "Clean up V1 deployment",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 2034,
      "versionNonce": 1422653556,
      "index": "a8",
      "isDeleted": false,
      "id": "SzpyHK_CDCZ8rdBXGrmRQ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1047.7389644108475,
      "y": 572.453125,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 1.3331948318900686,
      "height": 88.8125,
      "seed": 89631635,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "IFVcxmp3djOw-yPEOeaBh",
        "gap": 2.623046875,
        "focus": 0.0008188134075662985
      },
      "endBinding": {
        "elementId": "PM2YUnZdqOxKSffuZgjoU",
        "gap": 9.599609375,
        "focus": -0.03276968178132062
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          -1.3331948318900686,
          88.8125
        ]
      ]
    },
    {
      "type": "rectangle",
      "version": 1470,
      "versionNonce": 677705932,
      "index": "a9",
      "isDeleted": false,
      "id": "rxfGrrM9OFh_WK1N-g-re",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 860.4082031249998,
      "y": 850.619140625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 381.05859375000034,
      "height": 79.75390625000014,
      "seed": 1979587667,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "lwD9AndDJOj3Wz1d-qTv2"
        },
        {
          "id": "xpszKO5rjVgwY7q-fXe8E",
          "type": "arrow"
        },
        {
          "id": "BoAk9XG17fFdDRfPrS9gr",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1919,
      "versionNonce": 71716724,
      "index": "aA",
      "isDeleted": false,
      "id": "lwD9AndDJOj3Wz1d-qTv2",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 953.8375854492188,
      "y": 877.9960937500001,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 194.1998291015625,
      "height": 25,
      "seed": 1329404403,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Apply V2 deployment",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "rxfGrrM9OFh_WK1N-g-re",
      "originalText": "Apply V2 deployment",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 2102,
      "versionNonce": 1835269964,
      "index": "aB",
      "isDeleted": false,
      "id": "xpszKO5rjVgwY7q-fXe8E",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1046.7995728322583,
      "y": 754.830078125,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 0.12510461562624187,
      "height": 89.572265625,
      "seed": 982720189,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "PM2YUnZdqOxKSffuZgjoU",
        "gap": 1,
        "focus": 0.026821994726760886
      },
      "endBinding": {
        "elementId": "rxfGrrM9OFh_WK1N-g-re",
        "gap": 6.216796875,
        "focus": -0.020717496461597304
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          0.12510461562624187,
          89.572265625
        ]
      ]
    },
    {
      "type": "text",
      "version": 108,
      "versionNonce": 94343628,
      "index": "aC",
      "isDeleted": false,
      "id": "9llgl66QOViJRWsAHKSH8",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1350.08203125,
      "y": 695.5,
      "strokeColor": "#f08c00",
      "backgroundColor": "#e9ecef",
      "width": 93.39991760253906,
      "height": 25,
      "seed": 1744321853,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [
        {
          "id": "mInyUCts-Kve7EBLBocja",
          "type": "arrow"
        }
      ],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Downtime!",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Downtime!",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 95,
      "versionNonce": 2042508748,
      "index": "aD",
      "isDeleted": false,
      "id": "mInyUCts-Kve7EBLBocja",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1256.30078125,
      "y": 712.65234375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 84.23046875,
      "height": 1.87109375,
      "seed": 785052147,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "PM2YUnZdqOxKSffuZgjoU",
        "focus": 0.10561946535972078,
        "gap": 8.224609374999943
      },
      "endBinding": {
        "elementId": "9llgl66QOViJRWsAHKSH8",
        "focus": -0.11314567354470788,
        "gap": 9.55078125
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          84.23046875,
          -1.87109375
        ]
      ]
    },
    {
      "type": "rectangle",
      "version": 1562,
      "versionNonce": 818011380,
      "index": "aE",
      "isDeleted": false,
      "id": "hGpbtbMrZkrX0KhH8w4_-",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 865.0917968749998,
      "y": 1014.021484375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 381.05859375000034,
      "height": 79.75390625000014,
      "seed": 1021386611,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "ksmgbepYajVNNS2TKfrYx"
        },
        {
          "id": "Mhvo4RrJYt5DeK8GQDxjF",
          "type": "arrow"
        },
        {
          "id": "_xbbgBL23OX3MeOmC-C_n",
          "type": "arrow"
        },
        {
          "id": "BoAk9XG17fFdDRfPrS9gr",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 2037,
      "versionNonce": 1395933428,
      "index": "aF",
      "isDeleted": false,
      "id": "ksmgbepYajVNNS2TKfrYx",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 912.0712280273438,
      "y": 1041.3984375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 287.0997314453125,
      "height": 25,
      "seed": 1158854931,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Check new deployment status",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "hGpbtbMrZkrX0KhH8w4_-",
      "originalText": "Check new deployment status",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 180,
      "versionNonce": 1508079692,
      "index": "aG",
      "isDeleted": false,
      "id": "aMkcaoX1LFjO3_KLtIzPu",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1281.4510285266433,
      "y": 1042.15625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 556.299560546875,
      "height": 25,
      "seed": 1172144371,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Select new pod by label -> status != CrashLoopBackOff",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Select new pod by label -> status != CrashLoopBackOff",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1696,
      "versionNonce": 1772892876,
      "index": "aH",
      "isDeleted": false,
      "id": "cecndoJAdWSeAg-GQ7AzV",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 623.8417968749998,
      "y": 1224.912109375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 381.05859375000034,
      "height": 79.75390625000014,
      "seed": 435748595,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "bL6CzpST4gUso9XPnl8MR"
        },
        {
          "id": "Mhvo4RrJYt5DeK8GQDxjF",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 2174,
      "versionNonce": 1114112628,
      "index": "aI",
      "isDeleted": false,
      "id": "bL6CzpST4gUso9XPnl8MR",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 670.8212280273438,
      "y": 1252.2890625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 287.0997314453125,
      "height": 25,
      "seed": 50505875,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Check new deployment status",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "cecndoJAdWSeAg-GQ7AzV",
      "originalText": "Check new deployment status",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1598,
      "versionNonce": 900987212,
      "index": "aJ",
      "isDeleted": false,
      "id": "eGdCgsI7hA55XEgPzTKZQ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1087.177734375,
      "y": 1224.423828125,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 381.05859375000034,
      "height": 79.75390625000014,
      "seed": 437701789,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "Vsa1wMSk3SIrx9vFUA5qk"
        },
        {
          "id": "_xbbgBL23OX3MeOmC-C_n",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 2075,
      "versionNonce": 2045152972,
      "index": "aK",
      "isDeleted": false,
      "id": "Vsa1wMSk3SIrx9vFUA5qk",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1134.157165527344,
      "y": 1251.80078125,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 287.0997314453125,
      "height": 25,
      "seed": 1915564285,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Check new deployment status",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "eGdCgsI7hA55XEgPzTKZQ",
      "originalText": "Check new deployment status",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 315,
      "versionNonce": 1778315212,
      "index": "aL",
      "isDeleted": false,
      "id": "Mhvo4RrJYt5DeK8GQDxjF",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1050.16796875,
      "y": 1096.99609375,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 241.57421875,
      "height": 122.41015625,
      "seed": 1443788435,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [
        {
          "type": "text",
          "id": "aI-2w1paEKLUQNS1HzP_T"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "hGpbtbMrZkrX0KhH8w4_-",
        "focus": -0.2956601275362488,
        "gap": 3.2207031249998863
      },
      "endBinding": {
        "elementId": "cecndoJAdWSeAg-GQ7AzV",
        "focus": -0.3541247569917986,
        "gap": 5.505859374999886
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          -241.57421875,
          122.41015625
        ]
      ]
    },
    {
      "type": "text",
      "version": 21,
      "versionNonce": 1755812852,
      "index": "aM",
      "isDeleted": false,
      "id": "aI-2w1paEKLUQNS1HzP_T",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 891.1008758544922,
      "y": 1145.701171875,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 76.55996704101562,
      "height": 25,
      "seed": 388783123,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "FAILED",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "Mhvo4RrJYt5DeK8GQDxjF",
      "originalText": "FAILED",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 192,
      "versionNonce": 1990661708,
      "index": "aN",
      "isDeleted": false,
      "id": "_xbbgBL23OX3MeOmC-C_n",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1050.9765625,
      "y": 1095.1015625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 238.5078125,
      "height": 128,
      "seed": 1427827005,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [
        {
          "type": "text",
          "id": "5K3Gs0SEuLkfGY_343W6H"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "hGpbtbMrZkrX0KhH8w4_-",
        "focus": 0.3074384163311254,
        "gap": 1.3261718749998863
      },
      "endBinding": {
        "elementId": "eGdCgsI7hA55XEgPzTKZQ",
        "focus": 0.33434410678726384,
        "gap": 1.3222656249998863
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          238.5078125,
          128
        ]
      ]
    },
    {
      "type": "text",
      "version": 14,
      "versionNonce": 105043276,
      "index": "aO",
      "isDeleted": false,
      "id": "5K3Gs0SEuLkfGY_343W6H",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1137.1904830932617,
      "y": 1146.6015625,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 66.07997131347656,
      "height": 25,
      "seed": 1999534035,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "READY",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "_xbbgBL23OX3MeOmC-C_n",
      "originalText": "READY",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 60,
      "versionNonce": 948333772,
      "index": "aP",
      "isDeleted": false,
      "id": "BoAk9XG17fFdDRfPrS9gr",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1050.95703125,
      "y": 933.9921875,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 0,
      "height": 73.046875,
      "seed": 308827667,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "rxfGrrM9OFh_WK1N-g-re",
        "focus": -0.0001025104816967534,
        "gap": 3.619140624999943
      },
      "endBinding": {
        "elementId": "hGpbtbMrZkrX0KhH8w4_-",
        "focus": -0.024479503029184713,
        "gap": 6.982421874999886
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          0,
          73.046875
        ]
      ]
    },
    {
      "type": "rectangle",
      "version": 1133,
      "versionNonce": 1258067444,
      "index": "aQ",
      "isDeleted": false,
      "id": "gFWzJ7FxT3WBFUqfAhNX6",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 879.0684977319196,
      "y": -216.68667872954282,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#fcc2d7",
      "width": 306.21484375,
      "height": 94.44140625000009,
      "seed": 967604691,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "ETEO9QZoh1NXqMSvOfxCQ"
        },
        {
          "id": "UEodBS-2gK1n8pVPUOskH",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1480,
      "versionNonce": 335082868,
      "index": "aR",
      "isDeleted": false,
      "id": "ETEO9QZoh1NXqMSvOfxCQ",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 935.4660044457868,
      "y": -181.9659756045428,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 193.41983032226562,
      "height": 25,
      "seed": 407095155,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "CLI: request deploy",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "gFWzJ7FxT3WBFUqfAhNX6",
      "originalText": "CLI: request deploy",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 1045,
      "versionNonce": 677230452,
      "index": "aS",
      "isDeleted": false,
      "id": "UEodBS-2gK1n8pVPUOskH",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1031.1995675571322,
      "y": -120.480294690963,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 1.1403122582585183,
      "height": 145.89686222021402,
      "seed": 1827939379,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [
        {
          "type": "text",
          "id": "nhfZ8s9Ghi3Ib9LWhJurN"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "gFWzJ7FxT3WBFUqfAhNX6",
        "focus": 0.008856198031443002,
        "gap": 1.764977788579742
      },
      "endBinding": {
        "elementId": "iXBXwvNpvMPBPUA3YbEGj",
        "focus": -0.05863268704686829,
        "gap": 4.417493291700914
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          1.1403122582585183,
          145.89686222021402
        ]
      ]
    },
    {
      "type": "text",
      "version": 51,
      "versionNonce": 2085768140,
      "index": "aT",
      "isDeleted": false,
      "id": "nhfZ8s9Ghi3Ib9LWhJurN",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 965.1827804585469,
      "y": 173.1346224544575,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 175.9798583984375,
      "height": 50,
      "seed": 1094281405,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Send API request\nto server",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "UEodBS-2gK1n8pVPUOskH",
      "originalText": "Send API request\nto server",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "text",
      "version": 309,
      "versionNonce": 1638016756,
      "index": "aU",
      "isDeleted": false,
      "id": "RFh91IwL7mHBoWbh-wjnn",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1273.3821058203357,
      "y": 878.9730159775985,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 325.3197021484375,
      "height": 25,
      "seed": 1280183411,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Ingress, Service, Deployment (V2)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Ingress, Service, Deployment (V2)",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "rectangle",
      "version": 1575,
      "versionNonce": 1161007180,
      "index": "aV",
      "isDeleted": false,
      "id": "qOF7VoQsQJNKd0YSyF6sW",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 857.2087417557918,
      "y": 235.97643384885313,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 366.5130028477619,
      "height": 71.93575531598776,
      "seed": 1751188605,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "type": "text",
          "id": "Jqzg2nZJ4YFbzLcHppp9R"
        },
        {
          "id": "EQi6SnoohjJOrcg-pyYir",
          "type": "arrow"
        },
        {
          "id": "Kbs2qbOZTyAGYwvOMyUTP",
          "type": "arrow"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 1919,
      "versionNonce": 506393164,
      "index": "aW",
      "isDeleted": false,
      "id": "Jqzg2nZJ4YFbzLcHppp9R",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 966.48530848729,
      "y": 259.44431150684704,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#e9ecef",
      "width": 147.95986938476562,
      "height": 25,
      "seed": 237333725,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Deploy Release",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "qOF7VoQsQJNKd0YSyF6sW",
      "originalText": "Deploy Release",
      "autoResize": true,
      "lineHeight": 1.25
    },
    {
      "type": "arrow",
      "version": 655,
      "versionNonce": 863217356,
      "index": "aX",
      "isDeleted": false,
      "id": "EQi6SnoohjJOrcg-pyYir",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1034.365966663196,
      "y": 125.275467070952,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#96f2d7",
      "width": 2.9006872314416796,
      "height": 108.70644060218552,
      "seed": 1196365373,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "iXBXwvNpvMPBPUA3YbEGj",
        "focus": 0.0562160464173928,
        "gap": 1
      },
      "endBinding": {
        "elementId": "qOF7VoQsQJNKd0YSyF6sW",
        "focus": -0.011864386535615465,
        "gap": 1.9945261757156345
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          2.9006872314416796,
          108.70644060218552
        ]
      ]
    },
    {
      "type": "arrow",
      "version": 786,
      "versionNonce": 739769332,
      "index": "aY",
      "isDeleted": false,
      "id": "Kbs2qbOZTyAGYwvOMyUTP",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 1036.2565010936235,
      "y": 311.3927291111136,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#96f2d7",
      "width": 10.224675359512048,
      "height": 162.13635072184348,
      "seed": 881573971,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "boundElements": [
        {
          "type": "text",
          "id": "Di4LqXPo6CVa5qROcgZ2d"
        }
      ],
      "updated": 1721203140764,
      "link": null,
      "locked": false,
      "startBinding": {
        "elementId": "qOF7VoQsQJNKd0YSyF6sW",
        "focus": 0.0360466251030687,
        "gap": 3.4805399462726854
      },
      "endBinding": {
        "elementId": "IFVcxmp3djOw-yPEOeaBh",
        "focus": 0.005506256827510998,
        "gap": 6.617404542042891
      },
      "lastCommittedPoint": null,
      "startArrowhead": null,
      "endArrowhead": "arrow",
      "points": [
        [
          0,
          0
        ],
        [
          10.224675359512048,
          162.13635072184348
        ]
      ]
    },
    {
      "type": "text",
      "version": 18,
      "versionNonce": 1445537908,
      "index": "aZ",
      "isDeleted": false,
      "id": "Di4LqXPo6CVa5qROcgZ2d",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 988.0820234389544,
      "y": 356.4363596662604,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#ffffff",
      "width": 110.43988037109375,
      "height": 25,
      "seed": 307221629,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1721203141673,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "deploy build",
      "textAlign": "center",
      "verticalAlign": "middle",
      "containerId": "Kbs2qbOZTyAGYwvOMyUTP",
      "originalText": "deploy build",
      "autoResize": true,
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}
</file>

<file path="docs/diginext_logo_black_purple.svg">
<svg width="297" height="66" viewBox="0 0 297 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M69.6914 48.7422C67.0794 47.1484 65.0651 44.9792 63.6484 42.2344C62.1875 39.4453 61.457 36.2578 61.457 32.6719C61.457 29.1302 62.1875 25.9648 63.6484 23.1758C65.1094 20.3867 67.1237 18.1953 69.6914 16.6016C72.3034 15.0078 75.1589 14.2109 78.2578 14.2109C80.6042 14.2109 82.6849 14.7201 84.5 15.7383C86.3151 16.7565 87.6875 18.0182 88.6172 19.5234H89.2148L88.6172 14.6758V1.32812H97.5156V50.0039H89.2148V45.8867H88.6172C87.6875 47.4362 86.3372 48.6758 84.5664 49.6055C82.7513 50.5794 80.6484 51.0664 78.2578 51.0664C75.0703 51.0664 72.2148 50.2917 69.6914 48.7422ZM79.7188 42.832C81.4453 42.832 83.0169 42.4115 84.4336 41.5703C85.8503 40.7292 87.0013 39.5339 87.8867 37.9844C88.7721 36.4349 89.2148 34.6641 89.2148 32.6719C89.2148 30.6797 88.7721 28.9089 87.8867 27.3594C87.0013 25.8099 85.8503 24.6146 84.4336 23.7734C83.0169 22.9323 81.4453 22.5117 79.7188 22.5117C78.0807 22.5117 76.5534 22.9323 75.1367 23.7734C73.6315 24.6589 72.4583 25.8542 71.6172 27.3594C70.776 28.8646 70.3555 30.6354 70.3555 32.6719C70.3555 34.7083 70.776 36.4792 71.6172 37.9844C72.4583 39.4896 73.6315 40.6849 75.1367 41.5703C76.5534 42.4115 78.0807 42.832 79.7188 42.832Z" fill="#BF6BF7"/>
<path d="M103.131 9.82812C101.98 8.67708 101.404 7.30469 101.404 5.71094C101.404 4.16146 101.98 2.8112 103.131 1.66016C104.238 0.553385 105.588 0 107.182 0C108.775 0 110.126 0.553385 111.232 1.66016C112.339 2.76693 112.893 4.11719 112.893 5.71094C112.893 7.34896 112.339 8.72135 111.232 9.82812C110.126 10.9349 108.775 11.4883 107.182 11.4883C105.588 11.4883 104.238 10.9349 103.131 9.82812ZM102.732 15.3398H111.631V50.0039H102.732V15.3398Z" fill="#BF6BF7"/>
<path d="M132.387 65.8086C128.004 65.8086 124.352 64.8125 121.43 62.8203C118.508 60.8281 116.56 58.4596 115.586 55.7148L123.953 52.3281C124.706 54.0547 125.813 55.4049 127.274 56.3789C128.823 57.3971 130.527 57.9062 132.387 57.9062C135.22 57.9062 137.456 57.043 139.094 55.3164C140.732 53.6341 141.551 51.1771 141.551 47.9453V45.2227H141.02C139.869 46.8607 138.452 48.056 136.77 48.8086C134.999 49.6055 132.985 50.0039 130.727 50.0039C127.849 50.0039 125.171 49.2734 122.692 47.8125C120.301 46.3958 118.331 44.3151 116.781 41.5703C115.276 38.8698 114.524 35.7266 114.524 32.1406C114.524 28.5547 115.276 25.4115 116.781 22.7109C118.331 19.9661 120.301 17.8854 122.692 16.4688C125.215 14.9635 127.893 14.2109 130.727 14.2109C132.852 14.2109 134.866 14.6315 136.77 15.4727C138.496 16.2253 139.913 17.3984 141.02 18.9922H141.551V15.3398H150.117V47.6133C150.117 51.4206 149.409 54.6523 147.992 57.3086C146.576 59.9648 144.495 62.0456 141.75 63.5508C139.005 65.056 135.884 65.8086 132.387 65.8086ZM132.52 41.9023C134.999 41.9023 137.124 41.0391 138.895 39.3125C140.666 37.5859 141.551 35.1953 141.551 32.1406C141.551 29.0417 140.688 26.6289 138.961 24.9023C137.235 23.1758 135.087 22.3125 132.52 22.3125C130.041 22.3125 127.893 23.1758 126.078 24.9023C124.307 26.6289 123.422 29.0417 123.422 32.1406C123.422 35.1953 124.307 37.5859 126.078 39.3125C127.893 41.0391 130.041 41.9023 132.52 41.9023Z" fill="#BF6BF7"/>
<path d="M155.666 9.82812C154.515 8.67708 153.94 7.30469 153.94 5.71094C153.94 4.16146 154.515 2.8112 155.666 1.66016C156.773 0.553385 158.123 0 159.717 0C161.311 0 162.661 0.553385 163.768 1.66016C164.875 2.76693 165.428 4.11719 165.428 5.71094C165.428 7.34896 164.875 8.72135 163.768 9.82812C162.661 10.9349 161.311 11.4883 159.717 11.4883C158.123 11.4883 156.773 10.9349 155.666 9.82812ZM155.268 15.3398H164.166V50.0039H155.268V15.3398Z" fill="#BF6BF7"/>
<path d="M169.857 15.3398H178.158V19.6562H178.756C179.862 17.9297 181.323 16.6016 183.138 15.6719C185.042 14.6979 187.101 14.2109 189.314 14.2109C193.476 14.2109 196.663 15.4948 198.877 18.0625C201.046 20.5417 202.131 23.9948 202.131 28.4219V50.0039H193.232V29.5508C193.232 27.3372 192.657 25.6107 191.506 24.3711C190.355 23.1315 188.783 22.5117 186.791 22.5117C184.356 22.5117 182.408 23.4414 180.947 25.3008C179.486 27.1602 178.756 29.5065 178.756 32.3398V50.0039H169.857V15.3398Z" fill="black"/>
<path d="M213.39 48.7422C210.646 47.1927 208.476 45.0013 206.883 42.168C205.333 39.4674 204.558 36.3242 204.558 32.7383C204.558 29.4622 205.333 26.3854 206.883 23.5078C208.388 20.6302 210.513 18.3724 213.258 16.7344C216.002 15.0521 219.035 14.2109 222.355 14.2109C225.897 14.2109 228.974 14.9857 231.586 16.5352C234.198 18.0846 236.168 20.1875 237.496 22.8438C238.824 25.5 239.488 28.4883 239.488 31.8086C239.488 32.8711 239.422 33.8672 239.289 34.7969H213.258C213.7 37.4531 214.807 39.5339 216.578 41.0391C218.305 42.5 220.385 43.2305 222.82 43.2305C224.857 43.2305 226.627 42.7878 228.133 41.9023C229.549 41.0612 230.7 39.8659 231.586 38.3164L238.824 41.8359C235.327 47.9896 229.948 51.0664 222.687 51.0664C219.19 51.0664 216.091 50.2917 213.39 48.7422ZM230.922 28.4219C230.833 27.3594 230.435 26.2969 229.726 25.2344C228.974 24.1719 228 23.2865 226.805 22.5781C225.565 21.8698 224.104 21.5156 222.422 21.5156C220.297 21.5156 218.482 22.1354 216.976 23.375C215.427 24.6589 214.32 26.3411 213.656 28.4219H230.922Z" fill="black"/>
<path d="M250.217 32.4062L238.197 15.3398H248.756L255.33 25.2344H255.795L261.971 15.3398H272.861L260.642 32.4062L272.861 50.0039H262.303L255.596 39.8438H255.197L248.689 50.0039H238.131L250.217 32.4062Z" fill="black"/>
<path d="M289.035 50.5352C287.309 50.5352 285.715 50.2695 284.254 49.7383C282.793 49.207 281.62 48.4987 280.734 47.6133C278.609 45.5768 277.547 42.6771 277.547 38.9141V22.9102H271.504V15.3398H277.547V5.51172H286.445V15.3398H294.945V22.9102H286.445V37.3203C286.445 39.0911 286.822 40.3529 287.574 41.1055C288.238 41.8138 289.345 42.168 290.895 42.168C291.647 42.168 292.355 42.0573 293.02 41.8359C293.374 41.7031 294.104 41.3268 295.211 40.707V49.4062C293.396 50.1589 291.337 50.5352 289.035 50.5352Z" fill="black"/>
<rect x="1" y="6.00391" width="54" height="54" fill="black"/>
<path d="M16.5333 32.5854L20.08 36.3339L9.94666 47.0439L6.39999 43.2954L16.5333 32.5854Z" fill="#BF6BF7"/>
<path d="M20.08 36.3339L16.5333 40.0824L6.4 29.3724L9.94666 25.6239L20.08 36.3339Z" fill="#BF6BF7"/>
<path d="M26.0086 38.25C25.0416 37.6199 24.2958 36.7622 23.7713 35.677C23.2304 34.5743 22.96 33.314 22.96 31.8963C22.96 30.496 23.2304 29.2445 23.7713 28.1418C24.3122 27.0391 25.058 26.1727 26.0086 25.5426C26.9756 24.9124 28.0328 24.5974 29.1802 24.5974C30.0488 24.5974 30.8192 24.7987 31.4912 25.2012C32.1632 25.6038 32.6713 26.1027 33.0155 26.6978H33.2368L33.0155 24.7812V19.5039H36.31V38.7488H33.2368V37.121H33.0155C32.6713 37.7336 32.1714 38.2237 31.5158 38.5913C30.8438 38.9764 30.0652 39.1689 29.1802 39.1689C28 39.1689 26.9429 38.8626 26.0086 38.25ZM29.721 35.9133C30.3603 35.9133 30.9421 35.747 31.4666 35.4144C31.9911 35.0819 32.4173 34.6093 32.7451 33.9967C33.0729 33.3841 33.2368 32.6839 33.2368 31.8963C33.2368 31.1086 33.0729 30.4085 32.7451 29.7959C32.4173 29.1833 31.9911 28.7107 31.4666 28.3781C30.9421 28.0455 30.3603 27.8793 29.721 27.8793C29.1146 27.8793 28.5491 28.0455 28.0246 28.3781C27.4674 28.7282 27.033 29.2008 26.7216 29.7959C26.4102 30.391 26.2545 31.0911 26.2545 31.8963C26.2545 32.7014 26.4102 33.4016 26.7216 33.9967C27.033 34.5918 27.4674 35.0644 28.0246 35.4144C28.5491 35.747 29.1146 35.9133 29.721 35.9133Z" fill="white"/>
<path d="M41.2163 31.7912L36.7663 25.0437H40.6754L43.1094 28.9557H43.2815L45.5679 25.0437H49.6L45.0762 31.7912L49.6 38.7488H45.6909L43.2077 34.7318H43.0602L40.6508 38.7488H36.7417L41.2163 31.7912Z" fill="white"/>
<rect x="22.96" y="43.9839" width="26.64" height="3.06" fill="white"/>
</svg>
</file>

<file path="docs/diginext_logo_white_purple.svg">
<svg width="297" height="66" viewBox="0 0 297 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M69.6914 48.7422C67.0794 47.1484 65.0651 44.9792 63.6484 42.2344C62.1875 39.4453 61.457 36.2578 61.457 32.6719C61.457 29.1302 62.1875 25.9648 63.6484 23.1758C65.1094 20.3867 67.1237 18.1953 69.6914 16.6016C72.3034 15.0078 75.1589 14.2109 78.2578 14.2109C80.6042 14.2109 82.6849 14.7201 84.5 15.7383C86.3151 16.7565 87.6875 18.0182 88.6172 19.5234H89.2148L88.6172 14.6758V1.32812H97.5156V50.0039H89.2148V45.8867H88.6172C87.6875 47.4362 86.3372 48.6758 84.5664 49.6055C82.7513 50.5794 80.6484 51.0664 78.2578 51.0664C75.0703 51.0664 72.2148 50.2917 69.6914 48.7422ZM79.7188 42.832C81.4453 42.832 83.0169 42.4115 84.4336 41.5703C85.8503 40.7292 87.0013 39.5339 87.8867 37.9844C88.7721 36.4349 89.2148 34.6641 89.2148 32.6719C89.2148 30.6797 88.7721 28.9089 87.8867 27.3594C87.0013 25.8099 85.8503 24.6146 84.4336 23.7734C83.0169 22.9323 81.4453 22.5117 79.7188 22.5117C78.0807 22.5117 76.5534 22.9323 75.1367 23.7734C73.6315 24.6589 72.4583 25.8542 71.6172 27.3594C70.776 28.8646 70.3555 30.6354 70.3555 32.6719C70.3555 34.7083 70.776 36.4792 71.6172 37.9844C72.4583 39.4896 73.6315 40.6849 75.1367 41.5703C76.5534 42.4115 78.0807 42.832 79.7188 42.832Z" fill="#BF6BF7"/>
<path d="M103.131 9.82812C101.98 8.67708 101.404 7.30469 101.404 5.71094C101.404 4.16146 101.98 2.8112 103.131 1.66016C104.238 0.553385 105.588 0 107.182 0C108.775 0 110.126 0.553385 111.232 1.66016C112.339 2.76693 112.893 4.11719 112.893 5.71094C112.893 7.34896 112.339 8.72135 111.232 9.82812C110.126 10.9349 108.775 11.4883 107.182 11.4883C105.588 11.4883 104.238 10.9349 103.131 9.82812ZM102.732 15.3398H111.631V50.0039H102.732V15.3398Z" fill="#BF6BF7"/>
<path d="M132.387 65.8086C128.004 65.8086 124.352 64.8125 121.43 62.8203C118.508 60.8281 116.56 58.4596 115.586 55.7148L123.953 52.3281C124.706 54.0547 125.813 55.4049 127.274 56.3789C128.823 57.3971 130.527 57.9062 132.387 57.9062C135.22 57.9062 137.456 57.043 139.094 55.3164C140.732 53.6341 141.551 51.1771 141.551 47.9453V45.2227H141.02C139.869 46.8607 138.452 48.056 136.77 48.8086C134.999 49.6055 132.985 50.0039 130.727 50.0039C127.849 50.0039 125.171 49.2734 122.692 47.8125C120.301 46.3958 118.331 44.3151 116.781 41.5703C115.276 38.8698 114.524 35.7266 114.524 32.1406C114.524 28.5547 115.276 25.4115 116.781 22.7109C118.331 19.9661 120.301 17.8854 122.692 16.4688C125.215 14.9635 127.893 14.2109 130.727 14.2109C132.852 14.2109 134.866 14.6315 136.77 15.4727C138.496 16.2253 139.913 17.3984 141.02 18.9922H141.551V15.3398H150.117V47.6133C150.117 51.4206 149.409 54.6523 147.992 57.3086C146.576 59.9648 144.495 62.0456 141.75 63.5508C139.005 65.056 135.884 65.8086 132.387 65.8086ZM132.52 41.9023C134.999 41.9023 137.124 41.0391 138.895 39.3125C140.666 37.5859 141.551 35.1953 141.551 32.1406C141.551 29.0417 140.688 26.6289 138.961 24.9023C137.235 23.1758 135.087 22.3125 132.52 22.3125C130.041 22.3125 127.893 23.1758 126.078 24.9023C124.307 26.6289 123.422 29.0417 123.422 32.1406C123.422 35.1953 124.307 37.5859 126.078 39.3125C127.893 41.0391 130.041 41.9023 132.52 41.9023Z" fill="#BF6BF7"/>
<path d="M155.666 9.82812C154.515 8.67708 153.94 7.30469 153.94 5.71094C153.94 4.16146 154.515 2.8112 155.666 1.66016C156.773 0.553385 158.123 0 159.717 0C161.311 0 162.661 0.553385 163.768 1.66016C164.875 2.76693 165.428 4.11719 165.428 5.71094C165.428 7.34896 164.875 8.72135 163.768 9.82812C162.661 10.9349 161.311 11.4883 159.717 11.4883C158.123 11.4883 156.773 10.9349 155.666 9.82812ZM155.268 15.3398H164.166V50.0039H155.268V15.3398Z" fill="#BF6BF7"/>
<path d="M169.857 15.3398H178.158V19.6562H178.756C179.862 17.9297 181.323 16.6016 183.138 15.6719C185.042 14.6979 187.101 14.2109 189.314 14.2109C193.476 14.2109 196.663 15.4948 198.877 18.0625C201.046 20.5417 202.131 23.9948 202.131 28.4219V50.0039H193.232V29.5508C193.232 27.3372 192.657 25.6107 191.506 24.3711C190.355 23.1315 188.783 22.5117 186.791 22.5117C184.356 22.5117 182.408 23.4414 180.947 25.3008C179.486 27.1602 178.756 29.5065 178.756 32.3398V50.0039H169.857V15.3398Z" fill="white"/>
<path d="M213.39 48.7422C210.646 47.1927 208.476 45.0013 206.883 42.168C205.333 39.4674 204.558 36.3242 204.558 32.7383C204.558 29.4622 205.333 26.3854 206.883 23.5078C208.388 20.6302 210.513 18.3724 213.258 16.7344C216.002 15.0521 219.035 14.2109 222.355 14.2109C225.897 14.2109 228.974 14.9857 231.586 16.5352C234.198 18.0846 236.168 20.1875 237.496 22.8438C238.824 25.5 239.488 28.4883 239.488 31.8086C239.488 32.8711 239.422 33.8672 239.289 34.7969H213.258C213.7 37.4531 214.807 39.5339 216.578 41.0391C218.305 42.5 220.385 43.2305 222.82 43.2305C224.857 43.2305 226.627 42.7878 228.133 41.9023C229.549 41.0612 230.7 39.8659 231.586 38.3164L238.824 41.8359C235.327 47.9896 229.948 51.0664 222.687 51.0664C219.19 51.0664 216.091 50.2917 213.39 48.7422ZM230.922 28.4219C230.833 27.3594 230.435 26.2969 229.726 25.2344C228.974 24.1719 228 23.2865 226.805 22.5781C225.565 21.8698 224.104 21.5156 222.422 21.5156C220.297 21.5156 218.482 22.1354 216.976 23.375C215.427 24.6589 214.32 26.3411 213.656 28.4219H230.922Z" fill="white"/>
<path d="M250.217 32.4062L238.197 15.3398H248.756L255.33 25.2344H255.795L261.971 15.3398H272.861L260.642 32.4062L272.861 50.0039H262.303L255.596 39.8438H255.197L248.689 50.0039H238.131L250.217 32.4062Z" fill="white"/>
<path d="M289.035 50.5352C287.309 50.5352 285.715 50.2695 284.254 49.7383C282.793 49.207 281.62 48.4987 280.734 47.6133C278.609 45.5768 277.547 42.6771 277.547 38.9141V22.9102H271.504V15.3398H277.547V5.51172H286.445V15.3398H294.945V22.9102H286.445V37.3203C286.445 39.0911 286.822 40.3529 287.574 41.1055C288.238 41.8138 289.345 42.168 290.895 42.168C291.647 42.168 292.355 42.0573 293.02 41.8359C293.374 41.7031 294.104 41.3268 295.211 40.707V49.4062C293.396 50.1589 291.337 50.5352 289.035 50.5352Z" fill="white"/>
<rect x="1" y="6.00391" width="54" height="54" fill="white"/>
<path d="M16.5333 31.5054L20.08 35.2539L9.94666 45.9639L6.39999 42.2154L16.5333 31.5054Z" fill="#BF6BF7"/>
<path d="M20.08 35.2539L16.5333 39.0024L6.4 28.2924L9.94666 24.5439L20.08 35.2539Z" fill="#BF6BF7"/>
<path d="M26.0086 37.17C25.0416 36.5399 24.2958 35.6822 23.7713 34.597C23.2304 33.4943 22.96 32.234 22.96 30.8163C22.96 29.416 23.2304 28.1645 23.7713 27.0618C24.3122 25.9591 25.058 25.0927 26.0086 24.4626C26.9756 23.8324 28.0328 23.5174 29.1802 23.5174C30.0488 23.5174 30.8192 23.7187 31.4912 24.1212C32.1632 24.5238 32.6713 25.0227 33.0155 25.6178H33.2368L33.0155 23.7012V18.4239H36.31V37.6688H33.2368V36.041H33.0155C32.6713 36.6536 32.1714 37.1437 31.5158 37.5113C30.8438 37.8964 30.0652 38.0889 29.1802 38.0889C28 38.0889 26.9429 37.7826 26.0086 37.17ZM29.721 34.8333C30.3603 34.8333 30.9421 34.667 31.4666 34.3344C31.9911 34.0019 32.4173 33.5293 32.7451 32.9167C33.0729 32.304 33.2368 31.6039 33.2368 30.8163C33.2368 30.0286 33.0729 29.3285 32.7451 28.7159C32.4173 28.1032 31.9911 27.6307 31.4666 27.2981C30.9421 26.9655 30.3603 26.7992 29.721 26.7992C29.1146 26.7992 28.5491 26.9655 28.0246 27.2981C27.4674 27.6482 27.033 28.1208 26.7216 28.7159C26.4102 29.311 26.2545 30.0111 26.2545 30.8163C26.2545 31.6214 26.4102 32.3216 26.7216 32.9167C27.033 33.5118 27.4674 33.9844 28.0246 34.3344C28.5491 34.667 29.1146 34.8333 29.721 34.8333Z" fill="black"/>
<path d="M41.2163 30.7112L36.7663 23.9637H40.6754L43.1094 27.8757H43.2815L45.5679 23.9637H49.6L45.0762 30.7112L49.6 37.6688H45.6909L43.2077 33.6518H43.0602L40.6508 37.6688H36.7417L41.2163 30.7112Z" fill="black"/>
<rect x="22.96" y="42.9039" width="26.64" height="3.06" fill="black"/>
</svg>
</file>

<file path="docs/diginext_logo_white.svg">
<svg width="297" height="66" viewBox="0 0 297 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M69.6914 48.7422C67.0794 47.1484 65.0651 44.9792 63.6484 42.2344C62.1875 39.4453 61.457 36.2578 61.457 32.6719C61.457 29.1302 62.1875 25.9648 63.6484 23.1758C65.1094 20.3867 67.1237 18.1953 69.6914 16.6016C72.3034 15.0078 75.1589 14.2109 78.2578 14.2109C80.6042 14.2109 82.6849 14.7201 84.5 15.7383C86.3151 16.7565 87.6875 18.0182 88.6172 19.5234H89.2148L88.6172 14.6758V1.32812H97.5156V50.0039H89.2148V45.8867H88.6172C87.6875 47.4362 86.3372 48.6758 84.5664 49.6055C82.7513 50.5794 80.6484 51.0664 78.2578 51.0664C75.0703 51.0664 72.2148 50.2917 69.6914 48.7422ZM79.7188 42.832C81.4453 42.832 83.0169 42.4115 84.4336 41.5703C85.8503 40.7292 87.0013 39.5339 87.8867 37.9844C88.7721 36.4349 89.2148 34.6641 89.2148 32.6719C89.2148 30.6797 88.7721 28.9089 87.8867 27.3594C87.0013 25.8099 85.8503 24.6146 84.4336 23.7734C83.0169 22.9323 81.4453 22.5117 79.7188 22.5117C78.0807 22.5117 76.5534 22.9323 75.1367 23.7734C73.6315 24.6589 72.4583 25.8542 71.6172 27.3594C70.776 28.8646 70.3555 30.6354 70.3555 32.6719C70.3555 34.7083 70.776 36.4792 71.6172 37.9844C72.4583 39.4896 73.6315 40.6849 75.1367 41.5703C76.5534 42.4115 78.0807 42.832 79.7188 42.832Z" fill="white"/>
<path d="M103.131 9.82812C101.98 8.67708 101.404 7.30469 101.404 5.71094C101.404 4.16146 101.98 2.8112 103.131 1.66016C104.238 0.553385 105.588 0 107.182 0C108.775 0 110.126 0.553385 111.232 1.66016C112.339 2.76693 112.893 4.11719 112.893 5.71094C112.893 7.34896 112.339 8.72135 111.232 9.82812C110.126 10.9349 108.775 11.4883 107.182 11.4883C105.588 11.4883 104.238 10.9349 103.131 9.82812ZM102.732 15.3398H111.631V50.0039H102.732V15.3398Z" fill="white"/>
<path d="M132.387 65.8086C128.004 65.8086 124.352 64.8125 121.43 62.8203C118.508 60.8281 116.56 58.4596 115.586 55.7148L123.953 52.3281C124.706 54.0547 125.813 55.4049 127.274 56.3789C128.823 57.3971 130.527 57.9062 132.387 57.9062C135.22 57.9062 137.456 57.043 139.094 55.3164C140.732 53.6341 141.551 51.1771 141.551 47.9453V45.2227H141.02C139.869 46.8607 138.452 48.056 136.77 48.8086C134.999 49.6055 132.985 50.0039 130.727 50.0039C127.849 50.0039 125.171 49.2734 122.692 47.8125C120.301 46.3958 118.331 44.3151 116.781 41.5703C115.276 38.8698 114.524 35.7266 114.524 32.1406C114.524 28.5547 115.276 25.4115 116.781 22.7109C118.331 19.9661 120.301 17.8854 122.692 16.4688C125.215 14.9635 127.893 14.2109 130.727 14.2109C132.852 14.2109 134.866 14.6315 136.77 15.4727C138.496 16.2253 139.913 17.3984 141.02 18.9922H141.551V15.3398H150.117V47.6133C150.117 51.4206 149.409 54.6523 147.992 57.3086C146.576 59.9648 144.495 62.0456 141.75 63.5508C139.005 65.056 135.884 65.8086 132.387 65.8086ZM132.52 41.9023C134.999 41.9023 137.124 41.0391 138.895 39.3125C140.666 37.5859 141.551 35.1953 141.551 32.1406C141.551 29.0417 140.688 26.6289 138.961 24.9023C137.235 23.1758 135.087 22.3125 132.52 22.3125C130.041 22.3125 127.893 23.1758 126.078 24.9023C124.307 26.6289 123.422 29.0417 123.422 32.1406C123.422 35.1953 124.307 37.5859 126.078 39.3125C127.893 41.0391 130.041 41.9023 132.52 41.9023Z" fill="white"/>
<path d="M155.666 9.82812C154.515 8.67708 153.94 7.30469 153.94 5.71094C153.94 4.16146 154.515 2.8112 155.666 1.66016C156.773 0.553385 158.123 0 159.717 0C161.311 0 162.661 0.553385 163.768 1.66016C164.875 2.76693 165.428 4.11719 165.428 5.71094C165.428 7.34896 164.875 8.72135 163.768 9.82812C162.661 10.9349 161.311 11.4883 159.717 11.4883C158.123 11.4883 156.773 10.9349 155.666 9.82812ZM155.268 15.3398H164.166V50.0039H155.268V15.3398Z" fill="white"/>
<path d="M169.857 15.3398H178.158V19.6562H178.756C179.862 17.9297 181.323 16.6016 183.138 15.6719C185.042 14.6979 187.101 14.2109 189.314 14.2109C193.476 14.2109 196.663 15.4948 198.877 18.0625C201.046 20.5417 202.131 23.9948 202.131 28.4219V50.0039H193.232V29.5508C193.232 27.3372 192.657 25.6107 191.506 24.3711C190.355 23.1315 188.783 22.5117 186.791 22.5117C184.356 22.5117 182.408 23.4414 180.947 25.3008C179.486 27.1602 178.756 29.5065 178.756 32.3398V50.0039H169.857V15.3398Z" fill="#CCCCCC"/>
<path d="M213.39 48.7422C210.646 47.1927 208.476 45.0013 206.883 42.168C205.333 39.4674 204.558 36.3242 204.558 32.7383C204.558 29.4622 205.333 26.3854 206.883 23.5078C208.388 20.6302 210.513 18.3724 213.258 16.7344C216.002 15.0521 219.035 14.2109 222.355 14.2109C225.897 14.2109 228.974 14.9857 231.586 16.5352C234.198 18.0846 236.168 20.1875 237.496 22.8438C238.824 25.5 239.488 28.4883 239.488 31.8086C239.488 32.8711 239.422 33.8672 239.289 34.7969H213.258C213.7 37.4531 214.807 39.5339 216.578 41.0391C218.305 42.5 220.385 43.2305 222.82 43.2305C224.857 43.2305 226.627 42.7878 228.133 41.9023C229.549 41.0612 230.7 39.8659 231.586 38.3164L238.824 41.8359C235.327 47.9896 229.948 51.0664 222.687 51.0664C219.19 51.0664 216.091 50.2917 213.39 48.7422ZM230.922 28.4219C230.833 27.3594 230.435 26.2969 229.726 25.2344C228.974 24.1719 228 23.2865 226.805 22.5781C225.565 21.8698 224.104 21.5156 222.422 21.5156C220.297 21.5156 218.482 22.1354 216.976 23.375C215.427 24.6589 214.32 26.3411 213.656 28.4219H230.922Z" fill="#CCCCCC"/>
<path d="M250.217 32.4062L238.197 15.3398H248.756L255.33 25.2344H255.795L261.971 15.3398H272.861L260.642 32.4062L272.861 50.0039H262.303L255.596 39.8438H255.197L248.689 50.0039H238.131L250.217 32.4062Z" fill="#CCCCCC"/>
<path d="M289.035 50.5352C287.309 50.5352 285.715 50.2695 284.254 49.7383C282.793 49.207 281.62 48.4987 280.734 47.6133C278.609 45.5768 277.547 42.6771 277.547 38.9141V22.9102H271.504V15.3398H277.547V5.51172H286.445V15.3398H294.945V22.9102H286.445V37.3203C286.445 39.0911 286.822 40.3529 287.574 41.1055C288.238 41.8138 289.345 42.168 290.895 42.168C291.647 42.168 292.355 42.0573 293.02 41.8359C293.374 41.7031 294.104 41.3268 295.211 40.707V49.4062C293.396 50.1589 291.337 50.5352 289.035 50.5352Z" fill="#CCCCCC"/>
<rect x="1" y="6.00391" width="54" height="54" fill="white"/>
<path d="M16.5333 31.5054L20.08 35.2539L9.94666 45.9639L6.39999 42.2154L16.5333 31.5054Z" fill="#BF6BF7"/>
<path d="M20.08 35.2539L16.5333 39.0024L6.4 28.2924L9.94666 24.5439L20.08 35.2539Z" fill="#BF6BF7"/>
<path d="M26.0086 37.17C25.0416 36.5399 24.2958 35.6822 23.7713 34.597C23.2304 33.4943 22.96 32.2341 22.96 30.8163C22.96 29.416 23.2304 28.1645 23.7713 27.0618C24.3122 25.9591 25.058 25.0927 26.0086 24.4626C26.9756 23.8324 28.0328 23.5174 29.1802 23.5174C30.0488 23.5174 30.8192 23.7187 31.4912 24.1213C32.1632 24.5238 32.6713 25.0227 33.0155 25.6178H33.2368L33.0155 23.7012V18.4239H36.31V37.6688H33.2368V36.041H33.0155C32.6713 36.6536 32.1714 37.1437 31.5158 37.5113C30.8438 37.8964 30.0652 38.0889 29.1802 38.0889C28 38.0889 26.9429 37.7826 26.0086 37.17ZM29.721 34.8333C30.3603 34.8333 30.9421 34.667 31.4666 34.3345C31.9911 34.0019 32.4173 33.5293 32.7451 32.9167C33.0729 32.3041 33.2368 31.6039 33.2368 30.8163C33.2368 30.0286 33.0729 29.3285 32.7451 28.7159C32.4173 28.1033 31.9911 27.6307 31.4666 27.2981C30.9421 26.9655 30.3603 26.7993 29.721 26.7993C29.1146 26.7993 28.5491 26.9655 28.0246 27.2981C27.4674 27.6482 27.033 28.1208 26.7216 28.7159C26.4102 29.311 26.2545 30.0111 26.2545 30.8163C26.2545 31.6214 26.4102 32.3216 26.7216 32.9167C27.033 33.5118 27.4674 33.9844 28.0246 34.3345C28.5491 34.667 29.1146 34.8333 29.721 34.8333Z" fill="black"/>
<path d="M41.2163 30.7113L36.7663 23.9637H40.6754L43.1094 27.8757H43.2815L45.5679 23.9637H49.6L45.0762 30.7113L49.6 37.6688H45.6909L43.2077 33.6518H43.0602L40.6508 37.6688H36.7417L41.2163 30.7113Z" fill="black"/>
<rect x="22.96" y="42.9039" width="26.64" height="3.06" fill="black"/>
</svg>
</file>

<file path="docs/diginext_logo.svg">
<svg width="297" height="66" viewBox="0 0 297 66" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M69.6914 48.7422C67.0794 47.1484 65.0651 44.9792 63.6484 42.2344C62.1875 39.4453 61.457 36.2578 61.457 32.6719C61.457 29.1302 62.1875 25.9648 63.6484 23.1758C65.1094 20.3867 67.1237 18.1953 69.6914 16.6016C72.3034 15.0078 75.1589 14.2109 78.2578 14.2109C80.6042 14.2109 82.6849 14.7201 84.5 15.7383C86.3151 16.7565 87.6875 18.0182 88.6172 19.5234H89.2148L88.6172 14.6758V1.32812H97.5156V50.0039H89.2148V45.8867H88.6172C87.6875 47.4362 86.3372 48.6758 84.5664 49.6055C82.7513 50.5794 80.6484 51.0664 78.2578 51.0664C75.0703 51.0664 72.2148 50.2917 69.6914 48.7422ZM79.7188 42.832C81.4453 42.832 83.0169 42.4115 84.4336 41.5703C85.8503 40.7292 87.0013 39.5339 87.8867 37.9844C88.7721 36.4349 89.2148 34.6641 89.2148 32.6719C89.2148 30.6797 88.7721 28.9089 87.8867 27.3594C87.0013 25.8099 85.8503 24.6146 84.4336 23.7734C83.0169 22.9323 81.4453 22.5117 79.7188 22.5117C78.0807 22.5117 76.5534 22.9323 75.1367 23.7734C73.6315 24.6589 72.4583 25.8542 71.6172 27.3594C70.776 28.8646 70.3555 30.6354 70.3555 32.6719C70.3555 34.7083 70.776 36.4792 71.6172 37.9844C72.4583 39.4896 73.6315 40.6849 75.1367 41.5703C76.5534 42.4115 78.0807 42.832 79.7188 42.832Z" fill="black"/>
<path d="M103.131 9.82812C101.98 8.67708 101.404 7.30469 101.404 5.71094C101.404 4.16146 101.98 2.8112 103.131 1.66016C104.238 0.553385 105.588 0 107.182 0C108.775 0 110.126 0.553385 111.232 1.66016C112.339 2.76693 112.893 4.11719 112.893 5.71094C112.893 7.34896 112.339 8.72135 111.232 9.82812C110.126 10.9349 108.775 11.4883 107.182 11.4883C105.588 11.4883 104.238 10.9349 103.131 9.82812ZM102.732 15.3398H111.631V50.0039H102.732V15.3398Z" fill="black"/>
<path d="M132.387 65.8086C128.004 65.8086 124.352 64.8125 121.43 62.8203C118.508 60.8281 116.56 58.4596 115.586 55.7148L123.953 52.3281C124.706 54.0547 125.813 55.4049 127.274 56.3789C128.823 57.3971 130.527 57.9062 132.387 57.9062C135.22 57.9062 137.456 57.043 139.094 55.3164C140.732 53.6341 141.551 51.1771 141.551 47.9453V45.2227H141.02C139.869 46.8607 138.452 48.056 136.77 48.8086C134.999 49.6055 132.985 50.0039 130.727 50.0039C127.849 50.0039 125.171 49.2734 122.692 47.8125C120.301 46.3958 118.331 44.3151 116.781 41.5703C115.276 38.8698 114.524 35.7266 114.524 32.1406C114.524 28.5547 115.276 25.4115 116.781 22.7109C118.331 19.9661 120.301 17.8854 122.692 16.4688C125.215 14.9635 127.893 14.2109 130.727 14.2109C132.852 14.2109 134.866 14.6315 136.77 15.4727C138.496 16.2253 139.913 17.3984 141.02 18.9922H141.551V15.3398H150.117V47.6133C150.117 51.4206 149.409 54.6523 147.992 57.3086C146.576 59.9648 144.495 62.0456 141.75 63.5508C139.005 65.056 135.884 65.8086 132.387 65.8086ZM132.52 41.9023C134.999 41.9023 137.124 41.0391 138.895 39.3125C140.666 37.5859 141.551 35.1953 141.551 32.1406C141.551 29.0417 140.688 26.6289 138.961 24.9023C137.235 23.1758 135.087 22.3125 132.52 22.3125C130.041 22.3125 127.893 23.1758 126.078 24.9023C124.307 26.6289 123.422 29.0417 123.422 32.1406C123.422 35.1953 124.307 37.5859 126.078 39.3125C127.893 41.0391 130.041 41.9023 132.52 41.9023Z" fill="black"/>
<path d="M155.666 9.82812C154.515 8.67708 153.94 7.30469 153.94 5.71094C153.94 4.16146 154.515 2.8112 155.666 1.66016C156.773 0.553385 158.123 0 159.717 0C161.311 0 162.661 0.553385 163.768 1.66016C164.875 2.76693 165.428 4.11719 165.428 5.71094C165.428 7.34896 164.875 8.72135 163.768 9.82812C162.661 10.9349 161.311 11.4883 159.717 11.4883C158.123 11.4883 156.773 10.9349 155.666 9.82812ZM155.268 15.3398H164.166V50.0039H155.268V15.3398Z" fill="black"/>
<path d="M169.857 15.3398H178.158V19.6562H178.756C179.862 17.9297 181.323 16.6016 183.138 15.6719C185.042 14.6979 187.101 14.2109 189.314 14.2109C193.476 14.2109 196.663 15.4948 198.877 18.0625C201.046 20.5417 202.131 23.9948 202.131 28.4219V50.0039H193.232V29.5508C193.232 27.3372 192.657 25.6107 191.506 24.3711C190.355 23.1315 188.783 22.5117 186.791 22.5117C184.356 22.5117 182.408 23.4414 180.947 25.3008C179.486 27.1602 178.756 29.5065 178.756 32.3398V50.0039H169.857V15.3398Z" fill="#555555"/>
<path d="M213.39 48.7422C210.646 47.1927 208.476 45.0013 206.883 42.168C205.333 39.4674 204.558 36.3242 204.558 32.7383C204.558 29.4622 205.333 26.3854 206.883 23.5078C208.388 20.6302 210.513 18.3724 213.258 16.7344C216.002 15.0521 219.035 14.2109 222.355 14.2109C225.897 14.2109 228.974 14.9857 231.586 16.5352C234.198 18.0846 236.168 20.1875 237.496 22.8438C238.824 25.5 239.488 28.4883 239.488 31.8086C239.488 32.8711 239.422 33.8672 239.289 34.7969H213.258C213.7 37.4531 214.807 39.5339 216.578 41.0391C218.305 42.5 220.385 43.2305 222.82 43.2305C224.857 43.2305 226.627 42.7878 228.133 41.9023C229.549 41.0612 230.7 39.8659 231.586 38.3164L238.824 41.8359C235.327 47.9896 229.948 51.0664 222.687 51.0664C219.19 51.0664 216.091 50.2917 213.39 48.7422ZM230.922 28.4219C230.833 27.3594 230.435 26.2969 229.726 25.2344C228.974 24.1719 228 23.2865 226.805 22.5781C225.565 21.8698 224.104 21.5156 222.422 21.5156C220.297 21.5156 218.482 22.1354 216.976 23.375C215.427 24.6589 214.32 26.3411 213.656 28.4219H230.922Z" fill="#555555"/>
<path d="M250.217 32.4062L238.197 15.3398H248.756L255.33 25.2344H255.795L261.971 15.3398H272.861L260.642 32.4062L272.861 50.0039H262.303L255.596 39.8438H255.197L248.689 50.0039H238.131L250.217 32.4062Z" fill="#555555"/>
<path d="M289.035 50.5352C287.309 50.5352 285.715 50.2695 284.254 49.7383C282.793 49.207 281.62 48.4987 280.734 47.6133C278.609 45.5768 277.547 42.6771 277.547 38.9141V22.9102H271.504V15.3398H277.547V5.51172H286.445V15.3398H294.945V22.9102H286.445V37.3203C286.445 39.0911 286.822 40.3529 287.574 41.1055C288.238 41.8138 289.345 42.168 290.895 42.168C291.647 42.168 292.355 42.0573 293.02 41.8359C293.374 41.7031 294.104 41.3268 295.211 40.707V49.4062C293.396 50.1589 291.337 50.5352 289.035 50.5352Z" fill="#555555"/>
<rect x="1" y="6.00391" width="54" height="54" fill="black"/>
<path d="M16.5333 32.5854L20.08 36.3339L9.94666 47.0439L6.39999 43.2954L16.5333 32.5854Z" fill="#BF6BF7"/>
<path d="M20.08 36.3339L16.5333 40.0824L6.4 29.3724L9.94666 25.6239L20.08 36.3339Z" fill="#BF6BF7"/>
<path d="M26.0086 38.25C25.0416 37.6199 24.2958 36.7622 23.7713 35.677C23.2304 34.5743 22.96 33.314 22.96 31.8963C22.96 30.496 23.2304 29.2445 23.7713 28.1418C24.3122 27.0391 25.058 26.1727 26.0086 25.5426C26.9756 24.9124 28.0328 24.5974 29.1802 24.5974C30.0488 24.5974 30.8192 24.7987 31.4912 25.2012C32.1632 25.6038 32.6713 26.1027 33.0155 26.6978H33.2368L33.0155 24.7812V19.5039H36.31V38.7488H33.2368V37.121H33.0155C32.6713 37.7336 32.1714 38.2237 31.5158 38.5913C30.8438 38.9764 30.0652 39.1689 29.1802 39.1689C28 39.1689 26.9429 38.8626 26.0086 38.25ZM29.721 35.9133C30.3603 35.9133 30.9421 35.747 31.4666 35.4144C31.9911 35.0819 32.4173 34.6093 32.7451 33.9967C33.0729 33.3841 33.2368 32.6839 33.2368 31.8963C33.2368 31.1086 33.0729 30.4085 32.7451 29.7959C32.4173 29.1833 31.9911 28.7107 31.4666 28.3781C30.9421 28.0455 30.3603 27.8793 29.721 27.8793C29.1146 27.8793 28.5491 28.0455 28.0246 28.3781C27.4674 28.7282 27.033 29.2008 26.7216 29.7959C26.4102 30.391 26.2545 31.0911 26.2545 31.8963C26.2545 32.7014 26.4102 33.4016 26.7216 33.9967C27.033 34.5918 27.4674 35.0644 28.0246 35.4144C28.5491 35.747 29.1146 35.9133 29.721 35.9133Z" fill="white"/>
<path d="M41.2163 31.7912L36.7663 25.0437H40.6754L43.1094 28.9557H43.2815L45.5679 25.0437H49.6L45.0762 31.7912L49.6 38.7488H45.6909L43.2077 34.7318H43.0602L40.6508 38.7488H36.7417L41.2163 31.7912Z" fill="white"/>
<rect x="22.96" y="43.9839" width="26.64" height="3.06" fill="white"/>
</svg>
</file>

<file path="docs/diginext-deploy-button.svg">
<svg width="274" height="90" viewBox="0 0 274 90" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_1205_31634)">
<path d="M0 20C0 8.9543 8.9543 0 20 0H274V70C274 81.0457 265.046 90 254 90H0V20Z" fill="black"/>
<path opacity="0.5" d="M20 0.5H273.5V70C273.5 80.7696 264.77 89.5 254 89.5H0.5V20C0.5 9.23045 9.23045 0.5 20 0.5Z" stroke="url(#paint0_linear_1205_31634)"/>
<path d="M29.2891 58.2578C27.7526 57.3203 26.5677 56.0443 25.7344 54.4297C24.875 52.7891 24.4453 50.9141 24.4453 48.8047C24.4453 46.7214 24.875 44.8594 25.7344 43.2188C26.5938 41.5781 27.7786 40.2891 29.2891 39.3516C30.8255 38.4141 32.5052 37.9453 34.3281 37.9453C35.7083 37.9453 36.9323 38.2448 38 38.8438C39.0677 39.4427 39.875 40.1849 40.4219 41.0703H40.7734L40.4219 38.2188V30.3672H45.6562V59H40.7734V56.5781H40.4219C39.875 57.4896 39.0807 58.2188 38.0391 58.7656C36.9714 59.3385 35.7344 59.625 34.3281 59.625C32.4531 59.625 30.7734 59.1693 29.2891 58.2578ZM35.1875 54.7812C36.2031 54.7812 37.1276 54.5339 37.9609 54.0391C38.7943 53.5443 39.4714 52.8411 39.9922 51.9297C40.513 51.0182 40.7734 49.9766 40.7734 48.8047C40.7734 47.6328 40.513 46.5911 39.9922 45.6797C39.4714 44.7682 38.7943 44.0651 37.9609 43.5703C37.1276 43.0755 36.2031 42.8281 35.1875 42.8281C34.224 42.8281 33.3255 43.0755 32.4922 43.5703C31.6068 44.0911 30.9167 44.7943 30.4219 45.6797C29.9271 46.5651 29.6797 47.6068 29.6797 48.8047C29.6797 50.0026 29.9271 51.0443 30.4219 51.9297C30.9167 52.8151 31.6068 53.5182 32.4922 54.0391C33.3255 54.5339 34.224 54.7812 35.1875 54.7812ZM52.2797 58.2578C50.6651 57.3464 49.3891 56.0573 48.4516 54.3906C47.5401 52.8021 47.0844 50.9531 47.0844 48.8438C47.0844 46.9167 47.5401 45.1068 48.4516 43.4141C49.337 41.7214 50.587 40.3932 52.2016 39.4297C53.8161 38.4401 55.6 37.9453 57.5531 37.9453C59.6365 37.9453 61.4464 38.401 62.9828 39.3125C64.5193 40.224 65.6781 41.4609 66.4594 43.0234C67.2406 44.5859 67.6313 46.3438 67.6313 48.2969C67.6313 48.9219 67.5922 49.5078 67.5141 50.0547H52.2016C52.462 51.6172 53.113 52.8411 54.1547 53.7266C55.1703 54.5859 56.3943 55.0156 57.8266 55.0156C59.0245 55.0156 60.0661 54.7552 60.9516 54.2344C61.7849 53.7396 62.462 53.0365 62.9828 52.125L67.2406 54.1953C65.1833 57.8151 62.0193 59.625 57.7484 59.625C55.6911 59.625 53.8682 59.1693 52.2797 58.2578ZM62.5922 46.3047C62.5401 45.6797 62.3057 45.0547 61.8891 44.4297C61.4464 43.8047 60.8734 43.2839 60.1703 42.8672C59.4411 42.4505 58.5818 42.2422 57.5922 42.2422C56.3422 42.2422 55.2745 42.6068 54.3891 43.3359C53.4776 44.0911 52.8266 45.0807 52.4359 46.3047H62.5922ZM69.0984 38.6094H74.0203V41.0703H74.3719C74.9188 40.1849 75.726 39.4427 76.7938 38.8438C77.8615 38.2448 79.0854 37.9453 80.4656 37.9453C82.2885 37.9453 83.9682 38.4141 85.5047 39.3516C86.963 40.263 88.1349 41.5521 89.0203 43.2188C89.8797 44.8594 90.3094 46.7214 90.3094 48.8047C90.3094 50.9141 89.8797 52.7891 89.0203 54.4297C88.1609 56.0703 86.9891 57.3464 85.5047 58.2578C84.0203 59.1693 82.3406 59.625 80.4656 59.625C79.0854 59.625 77.8615 59.3385 76.7938 58.7656C75.726 58.1927 74.9188 57.4635 74.3719 56.5781H74.0203L74.3719 59.4297V67.6328H69.0984V38.6094ZM82.3016 54.0391C83.187 53.5182 83.8771 52.8151 84.3719 51.9297C84.8667 51.0443 85.1141 50.0026 85.1141 48.8047C85.1141 47.6068 84.8667 46.5651 84.3719 45.6797C83.8771 44.7943 83.187 44.0911 82.3016 43.5703C81.4682 43.0755 80.5568 42.8281 79.5672 42.8281C78.5776 42.8281 77.6661 43.0755 76.8328 43.5703C75.9995 44.0651 75.3224 44.7682 74.8016 45.6797C74.2807 46.5911 74.0203 47.6328 74.0203 48.8047C74.0203 49.9766 74.2807 51.0182 74.8016 51.9297C75.3224 52.8411 75.9995 53.5443 76.8328 54.0391C77.6661 54.5339 78.5776 54.7812 79.5672 54.7812C80.5568 54.7812 81.4682 54.5339 82.3016 54.0391ZM91.5813 30.3672H96.8156V59H91.5813V30.3672ZM109.103 59.625C106.994 59.625 105.119 59.1562 103.478 58.2188C101.838 57.2812 100.548 55.9922 99.6109 54.3516C98.6995 52.763 98.2438 50.9141 98.2438 48.8047C98.2438 46.7214 98.6995 44.8854 99.6109 43.2969C100.574 41.6302 101.864 40.3281 103.478 39.3906C105.171 38.4271 107.046 37.9453 109.103 37.9453C111.16 37.9453 113.035 38.4271 114.728 39.3906C116.343 40.3281 117.632 41.6302 118.595 43.2969C119.507 44.8854 119.963 46.7214 119.963 48.8047C119.963 50.9141 119.507 52.763 118.595 54.3516C117.658 55.9922 116.369 57.2812 114.728 58.2188C113.088 59.1562 111.213 59.625 109.103 59.625ZM111.916 54.0781C112.749 53.6354 113.426 52.9453 113.947 52.0078C114.468 51.0964 114.728 50.0286 114.728 48.8047C114.728 47.6068 114.468 46.5521 113.947 45.6406C113.426 44.7031 112.749 44.013 111.916 43.5703C111.004 43.0755 110.067 42.8281 109.103 42.8281C108.166 42.8281 107.241 43.0755 106.33 43.5703C105.47 44.0391 104.78 44.7292 104.259 45.6406C103.739 46.5521 103.478 47.6068 103.478 48.8047C103.478 49.9505 103.739 51.0052 104.259 51.9688C104.754 52.9062 105.444 53.6094 106.33 54.0781C107.189 54.5469 108.114 54.7812 109.103 54.7812C110.119 54.7812 111.056 54.5469 111.916 54.0781ZM127.094 58.0234L118.5 38.6094H124.477L129.75 51.2656H130.062L135.141 38.6094H141L128.383 67.6328H122.758L127.094 58.0234Z" fill="white"/>
<path d="M157.255 59.3125C156.239 59.3125 155.302 59.1562 154.442 58.8438C153.583 58.5312 152.893 58.1146 152.372 57.5938C151.122 56.3958 150.497 54.6901 150.497 52.4766V43.0625H146.942V38.6094H150.497V32.8281H155.731V38.6094H160.731V43.0625H155.731V51.5391C155.731 52.5807 155.953 53.3229 156.395 53.7656C156.786 54.1823 157.437 54.3906 158.348 54.3906C158.791 54.3906 159.208 54.3255 159.598 54.1953C159.807 54.1172 160.236 53.8958 160.887 53.5312V58.6484C159.82 59.0911 158.609 59.3125 157.255 59.3125ZM171.73 59.625C169.62 59.625 167.745 59.1562 166.105 58.2188C164.464 57.2812 163.175 55.9922 162.238 54.3516C161.326 52.763 160.87 50.9141 160.87 48.8047C160.87 46.7214 161.326 44.8854 162.238 43.2969C163.201 41.6302 164.49 40.3281 166.105 39.3906C167.797 38.4271 169.672 37.9453 171.73 37.9453C173.787 37.9453 175.662 38.4271 177.355 39.3906C178.969 40.3281 180.258 41.6302 181.222 43.2969C182.133 44.8854 182.589 46.7214 182.589 48.8047C182.589 50.9141 182.133 52.763 181.222 54.3516C180.284 55.9922 178.995 57.2812 177.355 58.2188C175.714 59.1562 173.839 59.625 171.73 59.625ZM174.542 54.0781C175.376 53.6354 176.053 52.9453 176.573 52.0078C177.094 51.0964 177.355 50.0286 177.355 48.8047C177.355 47.6068 177.094 46.5521 176.573 45.6406C176.053 44.7031 175.376 44.013 174.542 43.5703C173.631 43.0755 172.693 42.8281 171.73 42.8281C170.792 42.8281 169.868 43.0755 168.956 43.5703C168.097 44.0391 167.407 44.7292 166.886 45.6406C166.365 46.5521 166.105 47.6068 166.105 48.8047C166.105 49.9505 166.365 51.0052 166.886 51.9688C167.381 52.9062 168.071 53.6094 168.956 54.0781C169.816 54.5469 170.74 54.7812 171.73 54.7812C172.745 54.7812 173.683 54.5469 174.542 54.0781Z" fill="#C2C2C2"/>
<path d="M199 14H261V68C261 72.4183 257.418 76 253 76H199V14Z" fill="white"/>
<path d="M216.835 43.2795L220.907 47.5833L209.272 59.88L205.2 55.5761L216.835 43.2795Z" fill="#BF6BF7"/>
<path d="M220.907 47.5833L216.835 51.8871L205.2 39.5905L209.272 35.2866L220.907 47.5833Z" fill="#BF6BF7"/>
<path d="M227.714 49.7833C226.603 49.0598 225.747 48.0751 225.145 46.8291C224.524 45.563 224.213 44.1161 224.213 42.4883C224.213 40.8806 224.524 39.4437 225.145 38.1776C225.766 36.9115 226.622 35.9167 227.714 35.1933C228.824 34.4698 230.038 34.1081 231.355 34.1081C232.352 34.1081 233.237 34.3392 234.008 34.8014C234.78 35.2636 235.363 35.8364 235.759 36.5196H236.013L235.759 34.3191V28.26H239.541V50.356H236.013V48.4871H235.759C235.363 49.1904 234.789 49.7531 234.037 50.1752C233.265 50.6173 232.371 50.8383 231.355 50.8383C230 50.8383 228.786 50.4867 227.714 49.7833ZM231.976 47.1004C232.71 47.1004 233.378 46.9095 233.98 46.5277C234.582 46.1458 235.072 45.6032 235.448 44.8998C235.824 44.1965 236.013 43.3926 236.013 42.4883C236.013 41.5839 235.824 40.7801 235.448 40.0767C235.072 39.3733 234.582 38.8307 233.98 38.4489C233.378 38.0671 232.71 37.8761 231.976 37.8761C231.28 37.8761 230.63 38.0671 230.028 38.4489C229.388 38.8508 228.89 39.3934 228.532 40.0767C228.175 40.76 227.996 41.5638 227.996 42.4883C227.996 43.4127 228.175 44.2166 228.532 44.8998C228.89 45.5831 229.388 46.1257 230.028 46.5277C230.63 46.9095 231.28 47.1004 231.976 47.1004Z" fill="black"/>
<path d="M245.174 42.3677L240.065 34.6205H244.553L247.348 39.1121H247.545L250.171 34.6205H254.8L249.606 42.3677L254.8 50.356H250.312L247.461 45.7439H247.291L244.525 50.356H240.037L245.174 42.3677Z" fill="black"/>
<rect x="224.213" y="56.3667" width="30.5867" height="3.51333" fill="black"/>
</g>
<defs>
<linearGradient id="paint0_linear_1205_31634" x1="0" y1="0" x2="274" y2="90" gradientUnits="userSpaceOnUse">
<stop stop-color="white"/>
<stop offset="0.53125" stop-color="white" stop-opacity="0"/>
<stop offset="1" stop-color="white"/>
</linearGradient>
<clipPath id="clip0_1205_31634">
<rect width="274" height="90" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="docs/docs.md">
# CLI Documentation

## General

- Authenticate your CLI with your workspace:

    ```bash
    dx login
    # is similar with
    dx login https://app.dxup.dev
    ```

- Authenticate your CLI with your **self-hosted** workspace:

    ```bash
    dx login https://your-self-hosted.workspace
    ```

- Sign out from your workspace:

    ```bash
    dx logout
    ```

## Project & App Helper

-   Create new project:

    ```bash
    dx new
    ```

-   **[!!! DANGER !!!]** Forcefully create new project **(overwriting current directory & git repo if any)**:

    ```bash
    dx new --overwrite

    # short term:
    dx new -o
    ```

-   Initialize a framework in the current app directory:

    ```bash
    cd /path/to/current/app
    dx init
    ```

-   Update **Diginext** to new version:

    ```bash
    npm i diginext@latest -g
    ```

## Build & Deployment

-   Authenticate Google Cloud with Service Account:

    ```bash
    dx gcloud auth -f /path/to/service-account.json
    ```

-   Authenticate Digital Ocean with API access token:

    ```bash
    dx do auth --key=<DO_API_ACCESS_TOKEN>
    ```

-   Connect Docker with Google Container Registry:

    ```bash
    # [Authentication required] `dx gcloud auth -f /path/to/service-account.json`
    dx gcloud registry connect --host=<GOOGLE_CONTAINER_REGISTRY_URL>
    ```

-   Connect Docker with Digital Ocean Container Registry:

    ```bash
    # [Authentication required] `dx do auth --key=<DO_API_ACCESS_TOKEN>`
    dx do registry connect
    ```

-   Request Diginext Server to build the application & push that image to the Container Registry (**It won't deploy the app**):

    ```bash
    dx build

    # options
    dx build --registry=<registry-slug>
    dx build --image=<image_url>:<image_tag>
    ```

-   Deploy your web app to **DEV environment**:

    ```bash
    dx up
    # is similar with
    dx up --dev
    # is similar with
    dx deploy
    # is similar with
    dx deploy --dev
    ```

-   Deploy to **DEV environment** at any K8S clusters:

    ```bash
    dx up --dev --select-cluster
    ```

-   Deploy to **PRODUCTION environment**:

    ```bash
    dx up --prod

    # to any other clusters
    dx up --prod --select-cluster
    ```

    **New deployment of PROD environment will not be rolled out immediately like other environments.**

    After the build process finished, access [Diginext Workspace](https://app.dxup.dev) to preview the deployment, if everything is okay, you can process ROLLING OUT within the Admin UI.

-   Deploy to **custom enviroments**:

    ```bash
    dx up --env=canary
    ```

## Build

(TBU)

## Framework

(TBU)

## Cluster

(TBU)

## Workspace

(TBU)

## Storage

(TBU)

## Database

(TBU)

## Tracking (GA4/GTAG)

(TBU)

## Git Provider

(TBU)
</file>

<file path="docs/readme-tbu.md">
# README - To be updated

Some to-be-updated content of the [README.md](README.md).

[![Let's fund issues in this repository](https://issuehunt.io/static/embed/issuehunt-button-v1.svg)](https://issuehunt.io/repos/34526884)
</file>

<file path="docs/why-podman.md">
# Why PODMAN over DOCKER?

Diginext uses both PODMAN & DOCKER to build your application.

For simple installation, we usually like to spin up the Diginext build server with Docker / Docker Compose or Kubernetes, this is the concept of [Docker-in-Docker](https://www.docker.com/blog/docker-can-now-run-within-docker/), Docker Engine requires deamonset to build your image, therefor you need to run the container as `root` user with `privileged` mode & also mount `docker.sock` volume. Running a container in `privileged` mode is a bad practice since it would lead to security issue (if you don't know this, [read here](https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html)).

On the other hand, [Podman](https://podman.io/) is a daemonless container engine for developing, managing, and running OCI Containers. Containers can either be run as `root` or in `rootless` mode. Podman also has similar commands with Docker, so it would be simpler to implement into **Diginext**.

**__Notes:__** there is a bit of tradeoff when using Podman instead of Docker as a builder - build speed. You will notice a slightly increase build time when using Podman, however, I would make it as an acceptance rather facing any potential risks in the future.
</file>

<file path="podman/containers/registries.conf.d/shortnames.conf">
[aliases]
  # centos
  "centos" = "registry.centos.org/centos"
  # containers
  "skopeo" = "quay.io/skopeo/stable"
  "buildah" = "quay.io/buildah/stable"
  "podman" = "quay.io/podman/stable"
  # docker
  "alpine" = "docker.io/library/alpine"
  "docker" = "docker.io/library/docker"
  "registry" = "docker.io/library/registry"
  "hello-world" = "docker.io/library/hello-world"
  "swarm" = "docker.io/library/swarm"
  # Fedora
  "fedora-minimal" = "registry.fedoraproject.org/fedora-minimal"
  "fedora" = "registry.fedoraproject.org/fedora"
  # openSUSE
  "opensuse/tumbleweed" = "registry.opensuse.org/opensuse/tumbleweed"
  "opensuse/leap" = "registry.opensuse.org/opensuse/leap"
  "opensuse/busybox" = "registry.opensuse.org/opensuse/busybox"
  "tumbleweed" = "registry.opensuse.org/opensuse/tumbleweed"
  "leap" = "registry.opensuse.org/opensuse/leap"
  "tw-busybox" = "registry.opensuse.org/opensuse/busybox"
  # SUSE
  "suse/sle15" = "registry.suse.com/suse/sle15"
  "suse/sles12sp5" = "registry.suse.com/suse/sles12sp5"
  "suse/sles12sp4" = "registry.suse.com/suse/sles12sp4"
  "suse/sles12sp3" = "registry.suse.com/suse/sles12sp3"
  "sle15" = "registry.suse.com/suse/sle15"
  "sles12sp5" = "registry.suse.com/suse/sles12sp5"
  "sles12sp4" = "registry.suse.com/suse/sles12sp4"
  "sles12sp3" = "registry.suse.com/suse/sles12sp3"
  # Red Hat Enterprise Linux
  "rhel" = "registry.access.redhat.com/rhel"
  "rhel6" = "registry.access.redhat.com/rhel6"
  "rhel7" = "registry.access.redhat.com/rhel7"
  "ubi7" = "registry.access.redhat.com/ubi7"
  "ubi7-init" = "registry.access.redhat.com/ubi7-init"
  "ubi7-minimal" = "registry.access.redhat.com/ubi7-minimal"
  "ubi8" = "registry.access.redhat.com/ubi8"
  "ubi8-minimal" = "registry.access.redhat.com/ubi8-minimal"
  "ubi8-init" = "registry.access.redhat.com/ubi8-init"
  # Debian
  "debian" = "docker.io/library/debian"
  # Ubuntu
  "ubuntu" = "docker.io/library/ubuntu"
</file>

<file path="podman/containers/containers.conf">
# The containers configuration file specifies all of the available configuration
# command-line options/flags for container engine tools like Podman & Buildah,
# but in a TOML format that can be easily modified and versioned.

# Please refer to containers.conf(5) for details of all configuration options.
# Not all container engines implement all of the options.
# All of the options have hard coded defaults and these options will override
# the built in defaults. Users can then override these options via the command
# line. Container engines will read containers.conf files in up to three
# locations in the following order:
#  1. /usr/share/containers/containers.conf
#  2. /etc/containers/containers.conf
#  3. $HOME/.config/containers/containers.conf (Rootless containers ONLY)
#  Items specified in the latter containers.conf, if they exist, override the
# previous containers.conf settings, or the default settings.

[containers]

# List of devices. Specified as
# "<device-on-host>:<device-on-container>:<permissions>", for example:
# "/dev/sdc:/dev/xvdc:rwm".
# If it is empty or commented out, only the default devices will be used
#
# devices = []

# List of volumes. Specified as
# "<directory-on-host>:<directory-in-container>:<options>", for example:
# "/db:/var/lib/db:ro".
# If it is empty or commented out, no volumes will be added
#
# volumes = []
# Used to change the name of the default AppArmor profile of container engine.
#
# apparmor_profile = "container-default"
# List of annotation. Specified as
# "key=value"
# If it is empty or commented out, no annotations will be added
#
# annotations = []
# Default way to to create a cgroup namespace for the container
# Options are:
# `private` Create private Cgroup Namespace for the container.
# `host`    Share host Cgroup Namespace with the container.
#
# cgroupns = "private"
# Control container cgroup configuration
# Determines  whether  the  container will create CGroups.
# Options are:
# `enabled`   Enable cgroup support within container
# `disabled`  Disable cgroup support, will inherit cgroups from parent
# `no-conmon` Do not create a cgroup dedicated to conmon.
#
# cgroups = "enabled"
# List of default capabilities for containers. If it is empty or commented out,
# the default capabilities defined in the container engine will be added.
#
default_capabilities = [
"CHOWN",
"DAC_OVERRIDE",
"FOWNER",
"FSETID",
"KILL",
"NET_BIND_SERVICE",
"SETFCAP",
"SETGID",
"SETPCAP",
"SETUID",
"SYS_CHROOT"
]


# A list of sysctls to be set in containers by default,
# specified as "name=value",
# for example:"net.ipv4.ping_group_range = 0 0".
#
default_sysctls = [
"net.ipv4.ping_group_range=0 0",
]

# A list of ulimits to be set in containers by default, specified as
# "<ulimit name>=<soft limit>:<hard limit>", for example:
# "nofile=1024:2048"
# See setrlimit(2) for a list of resource names.
# Any limit not specified here will be inherited from the process launching the
# container engine.
# Ulimits has limits for non privileged container engines.
#
default_ulimits = [
"nofile=120000:120000",
]

# List of default DNS options to be added to /etc/resolv.conf inside of the container.
#
# dns_options = []

# List of default DNS search domains to be added to /etc/resolv.conf inside of the container.
#
# dns_searches = []
# Set default DNS servers.
# This option can be used to override the DNS configuration passed to the
# container. The special value "none" can be specified to disable creation of
# /etc/resolv.conf in the container.
# The /etc/resolv.conf file in the image will be used without changes.
#
# dns_servers = []
# Environment variable list for the conmon process; used for passing necessary
# environment variables to conmon or the runtime.
#
# env = [
#    "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
#    "TERM=xterm",
# ]
# Pass all host environment variables into the container.
#
# env_host = false
# Default proxy environment variables passed into the container.
# The environment variables passed in include:
# http_proxy, https_proxy, ftp_proxy, no_proxy, and the upper case versions of
# these. This option is needed when host system uses a proxy but container
# should not use proxy. Proxy environment variables specified for the container
# in any other way will override the values passed from the host.
#
# http_proxy = true
# Run an init inside the container that forwards signals and reaps processes.
#
# init = false
#  Container init binary, if init=true, this is the init binary to be used for containers.
#
# init_path = "/usr/libexec/podman/catatonit"
# Default way to to create an IPC namespace (POSIX SysV IPC) for the container
# Options are:
# `private` Create private IPC Namespace for the container.
# `host`    Share host IPC Namespace with the container.
#
# ipcns = "private"
# keyring tells the container engine whether to create
# a kernel keyring for use within the container.
# keyring = true
# label tells the container engine whether to use container separation using
# MAC(SELinux) labeling or not.
# The label flag is ignored on label disabled systems.
#
# label = true
# Logging driver for the container. Available options: k8s-file and journald.
#
# log_driver = "k8s-file"
# Maximum size allowed for the container log file. Negative numbers indicate
# that no size limit is imposed. If positive, it must be >= 8192 to match or
# exceed conmon's read buffer. The file is truncated and re-opened so the
# limit is never exceeded.
#
# log_size_max = -1
# Default way to to create a Network namespace for the container
# Options are:
# `private` Create private Network Namespace for the container.
# `host`    Share host Network Namespace with the container.
# `none`    Containers do not use the network
#
# netns = "private"
# Create /etc/hosts for the container.  By default, container engine manage
# /etc/hosts, automatically adding  the container's  own  IP  address.
#
# no_hosts = false
# Maximum number of processes allowed in a container.
#
# pids_limit = 2048
# Default way to to create a PID namespace for the container
# Options are:
# `private` Create private PID Namespace for the container.
# `host`    Share host PID Namespace with the container.
#
# pidns = "private"
# Path to the seccomp.json profile which is used as the default seccomp profile
# for the runtime.
#
# seccomp_profile = "/usr/share/containers/seccomp.json"
# Size of /dev/shm. Specified as <number><unit>.
# Unit is optional, values:
# b (bytes), k (kilobytes), m (megabytes), or g (gigabytes).
# If the unit is omitted, the system uses bytes.
#
# shm_size = "65536k"
# Set timezone in container. Takes IANA timezones as well as "local",
# which sets the timezone in the container to match the host machine.
#
# tz = ""
# Set umask inside the container
#
# umask="0022"
# Default way to to create a UTS namespace for the container
# Options are:
# `private`        Create private UTS Namespace for the container.
# `host`    Share host UTS Namespace with the container.
#
# utsns = "private"
# Default way to to create a User namespace for the container
# Options are:
# `auto`        Create unique User Namespace for the container.
# `host`    Share host User Namespace with the container.
#
# userns = "host"
# Number of UIDs to allocate for the automatic container creation.
# UIDs are allocated from the "container" UIDs listed in
# /etc/subuid & /etc/subgid
#
# userns_size=65536
# The network table contains settings pertaining to the management of
# CNI plugins.
[network]

# Path to directory where CNI plugin binaries are located.
#
# cni_plugin_dirs = ["/usr/libexec/cni"]

# Path to the directory where CNI configuration files are located.
#
# network_config_dir = "/etc/cni/net.d/"
[engine]
# ImageBuildFormat indicates the default image format to building
# container images. Valid values are "oci" (default) or "docker".
# image_build_format = "oci"

# Cgroup management implementation used for the runtime.
# Valid options "systemd" or "cgroupfs"
#
# cgroup_manager = "systemd"
cgroup_manager = "cgroupfs"

# Environment variables to pass into conmon
#
# conmon_env_vars = [
#        "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
# ]

# Paths to look for the conmon container manager binary
#
# conmon_path = [
#        "/usr/libexec/podman/conmon",
#        "/usr/local/libexec/podman/conmon",
#        "/usr/local/lib/podman/conmon",
#        "/usr/bin/conmon",
#        "/usr/sbin/conmon",
#        "/usr/local/bin/conmon",
#        "/usr/local/sbin/conmon"
# ]
# Specify the keys sequence used to detach a container.
# Format is a single character [a-Z] or a comma separated sequence of
# `ctrl-<value>`, where `<value>` is one of:
# `a-z`, `@`, `^`, `[`, `\`, `]`, `^` or `_`
#
# detach_keys = "ctrl-p,ctrl-q"
# Determines whether engine will reserve ports on the host when they are
# forwarded to containers. When enabled, when ports are forwarded to containers,
# ports are held open by as long as the container is running, ensuring that
# they cannot be reused by other programs on the host. However, this can cause
# significant memory usage if a container has many ports forwarded to it.
# Disabling this can save memory.
#
# enable_port_reservation = true
# Environment variables to be used when running the container engine (e.g., Podman, Buildah).
# For example "http_proxy=internal.proxy.company.com".
# Note these environment variables will not be used within the container.
# Set the env section under [containers] table, if you want to set environment variables for the container.
# env = []
# Selects which logging mechanism to use for container engine events.
# Valid values are `journald`, `file` and `none`.
#
# events_logger = "journald"
events_logger = "file"

# Path to OCI hooks directories for automatically executed hooks.
#
# hooks_dir = [
#     "/usr/share/containers/oci/hooks.d",
# ]

# Default transport method for pulling and pushing for images
#
# image_default_transport = "docker://"
# Default command to run the infra container
#
# infra_command = "/pause"
# Infra (pause) container image name for pod infra containers.  When running a
# pod, we start a `pause` process in a container to hold open the namespaces
# associated with the  pod.  This container does nothing other then sleep,
# reserving the pods resources for the lifetime of the pod.
#
# infra_image = "k8s.gcr.io/pause:3.2"
# Specify the locking mechanism to use; valid values are "shm" and "file".
# Change the default only if you are sure of what you are doing, in general
# "file" is useful only on platforms where cgo is not available for using the
# faster "shm" lock type.  You may need to run "podman system renumber" after
# you change the lock type.
#
# lock_type** = "shm"
# MultiImageArchive - if true, the container engine allows for storing archives
# (e.g., of the docker-archive transport) with multiple images.  By default,
# Podman creates single-image archives.
#
# multi_image_archive = "false"
# Default engine namespace
# If engine is joined to a namespace, it will see only containers and pods
# that were created in the same namespace, and will create new containers and
# pods in that namespace.
# The default namespace is "", which corresponds to no namespace. When no
# namespace is set, all containers and pods are visible.
#
# namespace = ""
# Path to the slirp4netns binary
#
# network_cmd_path=""
# Default options to pass to the slirp4netns binary.
# For example "allow_host_loopback=true"
#
# network_cmd_options=[]
# Whether to use chroot instead of pivot_root in the runtime
#
# no_pivot_root = false
# Number of locks available for containers and pods.
# If this is changed, a lock renumber must be performed (e.g. with the
# 'podman system renumber' command).
#
# num_locks = 2048
# Whether to pull new image before running a container
# pull_policy = "missing"
# Indicates whether the application should be running in remote mode. This flag modifies the
# --remote option on container engines. Setting the flag to true will default
# `podman --remote=true` for access to the remote Podman service.
# remote = false
# Directory for persistent engine files (database, etc)
# By default, this will be configured relative to where the containers/storage
# stores containers
# Uncomment to change location from this default
#
# static_dir = "/var/lib/containers/storage/libpod"
# Directory for temporary files. Must be tmpfs (wiped after reboot)
#
# tmp_dir = "/run/libpod"
# Directory for libpod named volumes.
# By default, this will be configured relative to where containers/storage
# stores containers.
# Uncomment to change location from this default.
#
volume_path = "/home/app/containers/storage"

# Default OCI runtime
#
# runtime = "crun"

# List of the OCI runtimes that support --format=json.  When json is supported
# engine will use it for reporting nicer errors.
#
# runtime_supports_json = ["crun", "runc", "kata"]
# List of the OCI runtimes that supports running containers without cgroups.
#
# runtime_supports_nocgroups = ["crun"]
# List of the OCI runtimes that supports running containers with KVM Separation.
#
# runtime_supports_kvm = ["kata"]
# Number of seconds to wait for container to exit before sending kill signal.
# stop_timeout = 10
# Index to the active service
# active_service = production
# map of service destinations
# [service_destinations]
#   [service_destinations.production]
#     URI to access the Podman service
#     Examples:
#       rootless "unix://run/user/$UID/podman/podman.sock" (Default)
#       rootfull "unix://run/podman/podman.sock (Default)
#       remote rootless ssh://engineering.lab.company.com/run/user/1000/podman/podman.sock
#       remote rootfull ssh://root@10.10.1.136:22/run/podman/podman.sock
#     uri="ssh://user@production.example.com/run/user/1001/podman/podman.sock"
#     Path to file containing ssh identity key
#     identity = "~/.ssh/id_rsa"
# Paths to look for a valid OCI runtime (crun, runc, kata, etc)
[engine.runtimes]
# crun = [
#            "/usr/bin/crun",
#            "/usr/sbin/crun",
#            "/usr/local/bin/crun",
#            "/usr/local/sbin/crun",
#            "/sbin/crun",
#            "/bin/crun",
#            "/run/current-system/sw/bin/crun",
# ]

# runc = [
#        "/usr/bin/runc",
#        "/usr/sbin/runc",
#        "/usr/local/bin/runc",
#        "/usr/local/sbin/runc",
#        "/sbin/runc",
#        "/bin/runc",
#        "/usr/lib/cri-o-runc/sbin/runc",
# ]

# kata = [
#            "/usr/bin/kata-runtime",
#            "/usr/sbin/kata-runtime",
#            "/usr/local/bin/kata-runtime",
#            "/usr/local/sbin/kata-runtime",
#            "/sbin/kata-runtime",
#            "/bin/kata-runtime",
#            "/usr/bin/kata-qemu",
#            "/usr/bin/kata-fc",
# ]
[engine.volume_plugins]
# testplugin = "/run/podman/plugins/test.sock"

# The [engine.volume_plugins] table MUST be the last entry in this file.
# (Unless another table is added)
# TOML does not provide a way to end a table other than a further table being
# defined, so every key hereafter will be part of [volume_plugins] and not the
# main config.
</file>

<file path="podman/containers/registries.conf">
# For more information on this configuration file, see containers-registries.conf(5).
#
# NOTE: RISK OF USING UNQUALIFIED IMAGE NAMES
# We recommend always using fully qualified image names including the registry
# server (full dns name), namespace, image name, and tag
# (e.g., registry.redhat.io/ubi8/ubi:latest). Pulling by digest (i.e.,
# quay.io/repository/name@digest) further eliminates the ambiguity of tags.
# When using short names, there is always an inherent risk that the image being
# pulled could be spoofed. For example, a user wants to pull an image named
# `foobar` from a registry and expects it to come from myregistry.com. If
# myregistry.com is not first in the search list, an attacker could place a
# different `foobar` image at a registry earlier in the search list. The user
# would accidentally pull and run the attacker's image and code rather than the
# intended content. We recommend only adding registries which are completely
# trusted (i.e., registries which don't allow unknown or anonymous users to
# create accounts with arbitrary names). This will prevent an image from being
# spoofed, squatted or otherwise made insecure.  If it is necessary to use one
# of these registries, it should be added at the end of the list.
#
# # An array of host[:port] registries to try when pulling an unqualified image, in order.
unqualified-search-registries = ["docker.io"]
#
# [[registry]]
# # The "prefix" field is used to choose the relevant [[registry]] TOML table;
# # (only) the TOML table with the longest match for the input image name
# # (taking into account namespace/repo/tag/digest separators) is used.
# #
# # If the prefix field is missing, it defaults to be the same as the "location" field.
# prefix = "example.com/foo"
#
# # If true, unencrypted HTTP as well as TLS connections with untrusted
# # certificates are allowed.
# insecure = false
#
# # If true, pulling images with matching names is forbidden.
# blocked = false
#
# # The physical location of the "prefix"-rooted namespace.
# #
# # By default, this equal to "prefix" (in which case "prefix" can be omitted
# # and the [[registry]] TOML table can only specify "location").
# #
# # Example: Given
# #   prefix = "example.com/foo"
# #   location = "internal-registry-for-example.net/bar"
# # requests for the image example.com/foo/myimage:latest will actually work with the
# # internal-registry-for-example.net/bar/myimage:latest image.
# location = internal-registry-for-example.com/bar"
#
# # (Possibly-partial) mirrors for the "prefix"-rooted namespace.
# #
# # The mirrors are attempted in the specified order; the first one that can be
# # contacted and contains the image will be used (and if none of the mirrors contains the image,
# # the primary location specified by the "registry.location" field, or using the unmodified
# # user-specified reference, is tried last).
# #
# # Each TOML table in the "mirror" array can contain the following fields, with the same semantics
# # as if specified in the [[registry]] TOML table directly:
# # - location
# # - insecure
# [[registry.mirror]]
# location = "example-mirror-0.local/mirror-for-foo"
# [[registry.mirror]]
# location = "example-mirror-1.local/mirrors/foo"
# insecure = true
# # Given the above, a pull of example.com/foo/image:latest will try:
# # 1. example-mirror-0.local/mirror-for-foo/image:latest
# # 2. example-mirror-1.local/mirrors/foo/image:latest
# # 3. internal-registry-for-example.net/bar/image:latest
# # in order, and use the first one that exists.
</file>

<file path="podman/containers/storage.conf">
# This file is the configuration file for all tools
# that use the containers/storage library. The storage.conf file
# overrides all other storage.conf files. Container engines using the
# container/storage library do not inherit fields from other storage.conf
# files.
#
#  Note: The storage.conf file overrides other storage.conf files based on this precedence:
#      /usr/containers/storage.conf
#      /etc/containers/storage.conf
#      $HOME/.config/containers/storage.conf
#      $XDG_CONFIG_HOME/containers/storage.conf (If XDG_CONFIG_HOME is set)
# See man 5 containers-storage.conf for more information
# The "container storage" table contains all of the server options.
[storage]

# Default Storage Driver, Must be set for proper operation.
driver = "overlay2"
# driver = "overlay"
# driver = "vfs"
# driver = "fuse-overlayfs"

# Temporary storage location
# runroot = "/run/containers/storage"
# runroot = "/run/user/1000"
runroot = "/home/app/containers"

# Primary Read/Write location of container storage
# When changing the graphroot location on an SELINUX system, you must
# ensure  the labeling matches the default locations labels with the
# following commands:
# semanage fcontext -a -e /var/lib/containers/storage /NEWSTORAGEPATH
# restorecon -R -v /NEWSTORAGEPATH
# graphroot = "/var/lib/containers/storage"
# graphroot = "/var/tmp/app/containers/storage"
graphroot = "/home/app/containers/graph"


# Storage path for rootless users
rootless_storage_path = "$HOME/.local/share/containers/storage"

# Transient store mode makes all container metadata be saved in temporary storage
# (i.e. runroot above). This is faster, but doesn't persist across reboots.
# transient_store = true

[storage.options]
# Storage options to be passed to underlying storage drivers

# AdditionalImageStores is used to pass paths to additional Read/Only image stores
# Must be comma separated list.
additionalimagestores = [
]

# Allows specification of how storage is populated when pulling images. This
# option can speed the pulling process of images compressed with format
# zstd:chunked. Containers/storage looks for files within images that are being
# pulled from a container registry that were previously pulled to the host.  It
# can copy or create a hard link to the existing file when it finds them,
# eliminating the need to pull them from the container registry. These options
# can deduplicate pulling of content, disk storage of content and can allow the
# kernel to use less memory when running containers.

# containers/storage supports four keys
#   * enable_partial_images="true" | "false"
#     Tells containers/storage to look for files previously pulled in storage
#     rather then always pulling them from the container registry.
#   * use_hard_links = "false" | "true"
#     Tells containers/storage to use hard links rather then create new files in
#     the image, if an identical file already existed in storage.
#   * ostree_repos = ""
#     Tells containers/storage where an ostree repository exists that might have
#     previously pulled content which can be used when attempting to avoid
#     pulling content from the container registry
pull_options = {enable_partial_images = "false", use_hard_links = "false", ostree_repos=""}

# Remap-UIDs/GIDs is the mapping from UIDs/GIDs as they should appear inside of
# a container, to the UIDs/GIDs as they should appear outside of the container,
# and the length of the range of UIDs/GIDs.  Additional mapped sets can be
# listed and will be heeded by libraries, but there are limits to the number of
# mappings which the kernel will allow when you later attempt to run a
# container.
#
# remap-uids = 0:1668442479:65536
# remap-gids = 0:1668442479:65536

# Remap-User/Group is a user name which can be used to look up one or more UID/GID
# ranges in the /etc/subuid or /etc/subgid file.  Mappings are set up starting
# with an in-container ID of 0 and then a host-level ID taken from the lowest
# range that matches the specified name, and using the length of that range.
# Additional ranges are then assigned, using the ranges which specify the
# lowest host-level IDs first, to the lowest not-yet-mapped in-container ID,
# until all of the entries have been used for maps.
#
# remap-user = "containers"
# remap-group = "containers"

# Root-auto-userns-user is a user name which can be used to look up one or more UID/GID
# ranges in the /etc/subuid and /etc/subgid file.  These ranges will be partitioned
# to containers configured to create automatically a user namespace.  Containers
# configured to automatically create a user namespace can still overlap with containers
# having an explicit mapping set.
# This setting is ignored when running as rootless.
# root-auto-userns-user = "storage"
#
# Auto-userns-min-size is the minimum size for a user namespace created automatically.
# auto-userns-min-size=1024
#
# Auto-userns-max-size is the minimum size for a user namespace created automatically.
# auto-userns-max-size=65536

[storage.options.overlay]
# ignore_chown_errors can be set to allow a non privileged user running with
# a single UID within a user namespace to run containers. The user can pull
# and use any image even those with multiple uids.  Note multiple UIDs will be
# squashed down to the default uid in the container.  These images will have no
# separation between the users in the container. Only supported for the overlay
# and vfs drivers.
#ignore_chown_errors = "false"

# Inodes is used to set a maximum inodes of the container image.
# inodes = ""

# Path to an helper program to use for mounting the file system instead of mounting it
# directly.
# mount_program = "/usr/bin/fuse-overlayfs"
mount_program = "/usr/bin/fuse-overlayfs"

# mountopt specifies comma separated list of extra mount options
mountopt = "nodev"

# Set to skip a PRIVATE bind mount on the storage home directory.
# skip_mount_home = "false"

# Size is used to set a maximum size of the container image.
# size = ""

# ForceMask specifies the permissions mask that is used for new files and
# directories.
#
# The values "shared" and "private" are accepted.
# Octal permission masks are also accepted.
#
#  "": No value specified.
#     All files/directories, get set with the permissions identified within the
#     image.
#  "private": it is equivalent to 0700.
#     All files/directories get set with 0700 permissions.  The owner has rwx
#     access to the files. No other users on the system can access the files.
#     This setting could be used with networked based homedirs.
#  "shared": it is equivalent to 0755.
#     The owner has rwx access to the files and everyone else can read, access
#     and execute them. This setting is useful for sharing containers storage
#     with other users.  For instance have a storage owned by root but shared
#     to rootless users as an additional store.
#     NOTE:  All files within the image are made readable and executable by any
#     user on the system. Even /etc/shadow within your image is now readable by
#     any user.
#
#   OCTAL: Users can experiment with other OCTAL Permissions.
#
#  Note: The force_mask Flag is an experimental feature, it could change in the
#  future.  When "force_mask" is set the original permission mask is stored in
#  the "user.containers.override_stat" xattr and the "mount_program" option must
#  be specified. Mount programs like "/usr/bin/fuse-overlayfs" present the
#  extended attribute permissions to processes within containers rather than the
#  "force_mask"  permissions.
#
# force_mask = ""

[storage.options.thinpool]
# Storage Options for thinpool

# autoextend_percent determines the amount by which pool needs to be
# grown. This is specified in terms of % of pool size. So a value of 20 means
# that when threshold is hit, pool will be grown by 20% of existing
# pool size.
# autoextend_percent = "20"

# autoextend_threshold determines the pool extension threshold in terms
# of percentage of pool size. For example, if threshold is 60, that means when
# pool is 60% full, threshold has been hit.
# autoextend_threshold = "80"

# basesize specifies the size to use when creating the base device, which
# limits the size of images and containers.
# basesize = "10G"

# blocksize specifies a custom blocksize to use for the thin pool.
# blocksize="64k"

# directlvm_device specifies a custom block storage device to use for the
# thin pool. Required if you setup devicemapper.
# directlvm_device = ""

# directlvm_device_force wipes device even if device already has a filesystem.
# directlvm_device_force = "True"

# fs specifies the filesystem type to use for the base device.
# fs="xfs"

# log_level sets the log level of devicemapper.
# 0: LogLevelSuppress 0 (Default)
# 2: LogLevelFatal
# 3: LogLevelErr
# 4: LogLevelWarn
# 5: LogLevelNotice
# 6: LogLevelInfo
# 7: LogLevelDebug
# log_level = "7"

# min_free_space specifies the min free space percent in a thin pool require for
# new device creation to succeed. Valid values are from 0% - 99%.
# Value 0% disables
# min_free_space = "10%"

# mkfsarg specifies extra mkfs arguments to be used when creating the base
# device.
# mkfsarg = ""

# metadata_size is used to set the `pvcreate --metadatasize` options when
# creating thin devices. Default is 128k
# metadata_size = ""

# Size is used to set a maximum size of the container image.
# size = ""

# use_deferred_removal marks devicemapper block device for deferred removal.
# If the thinpool is in use when the driver attempts to remove it, the driver
# tells the kernel to remove it as soon as possible. Note this does not free
# up the disk space, use deferred deletion to fully remove the thinpool.
# use_deferred_removal = "True"

# use_deferred_deletion marks thinpool device for deferred deletion.
# If the device is busy when the driver attempts to delete it, the driver
# will attempt to delete device every 30 seconds until successful.
# If the program using the driver exits, the driver will continue attempting
# to cleanup the next time the driver is used. Deferred deletion permanently
# deletes the device and all data stored in device will be lost.
# use_deferred_deletion = "True"

# xfs_nospace_max_retries specifies the maximum number of retries XFS should
# attempt to complete IO when ENOSPC (no space) error is returned by
# underlying storage device.
# xfs_nospace_max_retries = "0"
</file>

<file path="podman/cleanup.sh">
#!/bin/bash

# Usage [1]: ./cleanup.sh 72 hours
# Usage [2]: ./cleanup.sh 7 days

# Check if the time threshold argument is provided
if [[ -z $1 ]]; then
    echo "Error: Time threshold not specified."
    echo "Usage: ./cleanup.sh <time_threshold> <time_unit>"
    exit 1
fi

# Check if the time unit argument is provided
if [[ -z $2 ]]; then
    echo "Error: Time unit not specified."
    echo "Usage: ./cleanup.sh <time_threshold> <time_unit>"
    exit 1
fi

# Check if the time unit is hours or days
if [[ $2 != "hours" && $2 != "days" ]]; then
    echo "Error: Invalid time unit. Use 'hours' or 'days'."
    echo "Usage: ./cleanup.sh <time_threshold> <time_unit>"
    exit 1
fi

# Calculate the timestamp threshold
if [[ $2 == "hours" ]]; then
    threshold=$(date -d "-$1 hours" +%s)
else
    threshold=$(date -d "-$1 days" +%s)
fi

# Get all container IDs and their creation timestamps
containers=$(podman ps -aq --format "{{.ID}} {{.CreatedAt}}")

# Iterate over the containers
while read -r container; do
    container_id=$(echo "$container" | awk '{print $1}')
    created_time=$(echo "$container" | awk '{print $2}')
    created_timestamp=$(date -d "$created_time" +%s)

    # Check if the container is older than the threshold
    if [[ $created_timestamp -lt $threshold ]]; then
        # Stop and remove the container
        podman stop "$container_id" && podman rm "$container_id"
    fi
done <<<"$containers"
</file>

<file path="scripts/github-actions/deploy.yml">
name: Release All Workflow

# TRIGGERS
on:
  workflow_run:
    workflows:
      - "Release All Workflow"
    branches: 
      - main
      - prerelease
      - beta
    types:
      - completed

# CI/CD STEPS
jobs:
  deploy-topgroup:
    name: Deploy to topgroup.dxup.dev
    runs-on: ubuntu-latest
    if: >
      github.event.workflow_run.conclusion == 'success'
      && github.ref == 'refs/heads/deploy/topgroup'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - uses: actions-hub/kubectl@master
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        with:
          args: --context=topgroup-k3s -n diginext-cli set image deploy *=digitop/diginext:${{github.ref_name}}
</file>

<file path="scripts/github-actions/docker-build-push.yml">
name: Docker Build & Push Workflow

# TRIGGERS
on:
  workflow_run:
    workflows: ["Release Workflow"]
    branches: 
      - main
      - prerelease
      - beta
    types:
      - completed

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

# CI/CD STEPS
jobs:
  docker-base:
    name: Build Diginext Docker Base Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: docker build -f Dockerfile.base -t digitop/diginext-base .

      - name: Push image to Docker Hub
        run: docker push digitop/diginext-base
        if: contains(github.ref, 'beta') || contains(github.ref, 'prerelease')

  docker-release:
    name: Release Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
      #   run: npm ci
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
  
      - name: Build & push to Docker Hub (main)
        run: pnpm docker-build
        if: contains(github.ref, 'main') || contains(github.ref, 'release')

      - name: Build & push to Docker Hub (beta)
        run: pnpm docker-build-beta
        if: contains(github.ref, 'beta') || contains(github.ref, 'prerelease')
</file>

<file path="scripts/gpt/01-node-install.sh">
#!/bin/bash

# Check if Node.js is already installed
if command -v node &> /dev/null; then
  echo "Node.js is already installed."
  exit 0
fi

# Install Node.js

if [[ "$(uname -s)" == "Darwin" ]]; then
  # macOS
  brew install node
elif [[ -f /etc/redhat-release ]]; then
  # CentOS
  curl --silent --location https://rpm.nodesource.com/setup_18.x | bash -
  yum -y install nodejs
elif [[ -f /etc/lsb-release ]]; then
  # Ubuntu
  curl -sL https://deb.nodesource.com/setup_18.x | bash -
  apt-get install -y nodejs
elif [[ "$(uname -s)" == "Windows" ]]; then
  # Windows
  choco install nodejs
else
  echo "Unable to install Node.js. Unknown operating system."
  exit 1
fi

echo "Node.js has been successfully installed."
</file>

<file path="scripts/gpt/02-yarn-install.sh">
#!/bin/bash

# Check if yarn is already installed
if command -v yarn &> /dev/null; then
  echo "yarn is already installed."
  exit 0
fi

# Install yarn

if [[ "$(uname -s)" == "Darwin" ]]; then
  # macOS
  brew install yarn
elif [[ -f /etc/redhat-release ]]; then
  # CentOS
  curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo
  yum install yarn
elif [[ -f /etc/lsb-release ]]; then
  # Ubuntu
  curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
  echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
  apt-get update && apt-get install yarn
elif [[ "$(uname -s)" == "Windows" ]]; then
  # Windows
  choco install yarn
else
  echo "Unable to install yarn. Unknown operating system."
  exit 1
fi

echo "yarn has been successfully installed."
</file>

<file path="scripts/gpt/03-gcloud-install.sh">
#!/bin/bash

# Check if gcloud is already installed
if command -v gcloud &> /dev/null; then
  echo "gcloud is already installed."
  exit 0
fi

# Install gcloud sdk

if [[ "$(uname -s)" == "Darwin" ]]; then
  # macOS
  brew cask install google-cloud-sdk
elif [[ -f /etc/redhat-release ]]; then
  # CentOS
  export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
  echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  apt-get update && apt-get install google-cloud-sdk
elif [[ -f /etc/lsb-release ]]; then
  # Ubuntu
  export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
  echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  apt-get update && apt-get install google-cloud-sdk
elif [[ "$(uname -s)" == "Windows" ]]; then
  # Windows
  choco install google-cloud-sdk
else
  echo "Unable to install gcloud. Unknown operating system."
  exit 1
fi

echo "gcloud has been successfully installed."
</file>

<file path="scripts/gpt/04-gke-auth-plugin-install.sh">
#!/bin/bash

# Check if the plugin is already installed
if gcloud auth list --format='value(account)' | grep -q "gke-gcloud-auth-plugin@system.gserviceaccount.com"; then
  echo "The GKE gcloud auth plugin is already installed."
  exit 0
fi

# Install the GKE gcloud auth plugin

gcloud components install gke-gcloud-auth-plugin

echo "The GKE gcloud auth plugin has been successfully installed."
</file>

<file path="scripts/gpt/05-doctl-install.sh">
#!/bin/bash

# Check if doctl is already installed
if command -v doctl &> /dev/null; then
  echo "doctl is already installed."
  exit 0
fi

# Install doctl

if [[ "$(uname -s)" == "Darwin" ]]; then
  # macOS
  brew install doctl
elif [[ -f /etc/redhat-release ]]; then
  # CentOS
  curl -sSL https://github.com/digitalocean/doctl/releases/download/v1.54.0/doctl-1.54.0-linux-amd64.tar.gz | tar -xvz
  mv doctl /usr/local/bin/
elif [[ -f /etc/lsb-release ]]; then
  # Ubuntu
  curl -sSL https://github.com/digitalocean/doctl/releases/download/v1.54.0/doctl-1.54.0-linux-amd64.tar.gz | tar -xvz
  mv doctl /usr/local/bin/
elif [[ "$(uname -s)" == "Windows" ]]; then
  # Windows
  choco install doctl
else
  echo "Unable to install doctl. Unknown operating system."
  exit 1
fi

echo "doctl has been successfully installed."
</file>

<file path="scripts/gpt/06-docker-install.sh">
#!/bin/bash

# Check if Docker is already installed
if command -v docker &> /dev/null; then
  echo "Docker is already installed."
  exit 0
fi

# Install Docker

if [[ "$(uname -s)" == "Darwin" ]]; then
  # macOS
  brew cask install docker
elif [[ -f /etc/redhat-release ]]; then
  # CentOS
  yum install -y yum-utils
  yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  yum install -y docker-ce
  systemctl start docker
elif [[ -f /etc/lsb-release ]]; then
  # Ubuntu
  apt-get update
  apt-get install -y apt-transport-https ca-certificates curl software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  apt-get update
  apt-get install -y docker-ce
elif [[ "$(uname -s)" == "Windows" ]]; then
  # Windows
  choco install docker
else
  echo "Unable to install Docker. Unknown operating system."
  exit 1
fi

echo "Docker has been successfully installed."
</file>

<file path="scripts/gpt/k3s-install.sh">
#!/bin/bash

# Check if k3s is already installed
if command -v k3s &>/dev/null; then
    echo "k3s is already installed."
    exit 0
fi

# Install k3s

if [[ "$(uname -s)" == "Darwin" ]]; then
    # macOS
    curl -sfL https://get.k3s.io | sh -
elif [[ -f /etc/redhat-release ]]; then
    # CentOS
    curl -sfL https://get.k3s.io | sh -
elif [[ -f /etc/lsb-release ]]; then
    # Ubuntu
    curl -sfL https://get.k3s.io | sh -
elif [[ "$(uname -s)" == "Windows" ]]; then
    # Windows
    curl -sfL https://get.k3s.io | sh -
else
    echo "Unable to install k3s. Unknown operating system."
    exit 1
fi

# Check if k3s is installed
if ! command -v k3s &>/dev/null; then
    echo "k3s is not installed. Please install k3s first."
    exit 1
fi

# Copy k3s.yaml and node-token to correct directories

if [[ "$(uname -s)" == "Darwin" ]]; then
    # macOS
    sudo cp /etc/rancher/k3s/k3s.yaml /usr/local/etc/k3s/k3s.yaml
    sudo cp /etc/rancher/k3s/server/node-token /usr/local/etc/k3s/node-token
elif [[ -f /etc/redhat-release ]]; then
    # CentOS
    sudo cp /etc/rancher/k3s/k3s.yaml /usr/local/etc/k3s/k3s.yaml
    sudo cp /etc/rancher/k3s/server/node-token /usr/local/etc/k3s/node-token
elif [[ -f /etc/lsb-release ]]; then
    # Ubuntu
    sudo cp /etc/rancher/k3s/k3s.yaml /usr/local/etc/k3s/k3s.yaml
    sudo cp /etc/rancher/k3s/server/node-token /usr/local/etc/k3s/node-token
else
    echo "Unable to copy k3s.yaml and node-token. Unknown operating system."
    exit 1
fi

# Check if k3s is installed
if [[ "$(uname -s)" == "Darwin" ]]; then
    # macOS
    # TODO: add startup script for macOS
elif [[ -f /etc/redhat-release ]]; then
    # CentOS
    if ! command -v k3s &>/dev/null; then
        echo "k3s is not installed. Please install k3s first."
        exit 1
    fi

    # Check if Systemd is installed
    if ! command -v systemctl &>/dev/null; then
        echo "Systemd is not installed. Please install Systemd first."
        exit 1
    fi

    # Create a Systemd unit file for k3s
    cat <<EOF >/etc/systemd/system/k3s.service
[Unit]
Description=Lightweight Kubernetes
Documentation=https://k3s.io
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/k3s server
ExecStop=/usr/local/bin/k3s kill
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    # Reload the Systemd daemon to pick up the new unit file
    systemctl daemon-reload

    # Enable the k3s service to start automatically on system boot
    systemctl enable k3s

    # Start the k3s
    systemctl start k3s

    # Check the status of k3s
    systemctl status k3s
elif [[ -f /etc/lsb-release ]]; then
    # Ubuntu
    # Check if k3s is installed
    if ! command -v k3s &>/dev/null; then
        echo "k3s is not installed. Please install k3s first."
        exit 1
    fi

    # Check if Systemd is installed
    if ! command -v systemctl &>/dev/null; then
        echo "Systemd is not installed. Please install Systemd first."
        exit 1
    fi

    # Create a Systemd unit file for k3s
    cat <<EOF >/etc/systemd/system/k3s.service
[Unit]
Description=Lightweight Kubernetes
Documentation=https://k3s.io
After=network.target

[Service]
Type=simple
User=root
ExecStart=/usr/local/bin/k3s server
ExecStop=/usr/local/bin/k3s kill
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    # Reload the Systemd daemon to pick up the new unit file
    systemctl daemon-reload

    # Enable the k3s service to start automatically on system boot
    systemctl enable k3s

    # Start the k3s service
    systemctl start k3s

    # Verify that the k3s service is running
    systemctl status k3s
else
    echo "Unable to start k3s as a service. Unknown operating system."
    exit 1
fi

echo "k3s has been successfully installed."
</file>

<file path="scripts/k8s/dx-deployment.yaml">
# NAMESPACE CONFIGURATION
apiVersion: v1
kind: Namespace
metadata:
  name: diginext
  labels:
    project: diginext
---
# SERVICE CONFIGURATION
apiVersion: v1
kind: Service
metadata:
  name: diginext
  namespace: diginext
  labels:
    app: diginext
    # project label
    project: diginext
    owner: topgroup
spec:
  ports:
    - port: 6969
  selector:
    app: diginext
---
# POD DEPLOYMENT CONFIGURATION
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diginext
  namespace: diginext
  labels:
    project: diginext
    owner: topgroup
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: diginext
  template:
    metadata:
      labels:
        owner: topgroup
        app: diginext
        # project label
        project: diginext
    spec:
      containers:
        - name: diginext
          image: digitop/diginext:latest
          ports:
            - containerPort: 6969
          securityContext:
            priviledged: true
            runAsUser: 1000
            runAsGroup: 1000
          env:
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: PORT
              value: "6969"
            - name: NODE_ENV
              value: production
            - name: CLI_MODE
              value: server
            - name: DEV_MODE
              value: "false"
            - name: BASE_URL
              value: "{{base_url}}"
            - name: DB_NAME
              value: diginext
            - name: DB_URI
              value: "{{db_uri}}"
            - name: JWT_SECRET
              value: "{{jwt_secret}}"
            - name: JWT_EXPIRE_TIME
              value: 48h
            - name: GOOGLE_CLIENT_ID
              value: "{{google_client_id}}"
            - name: GOOGLE_CLIENT_SECRET
              value: "{{google_client_secret}}"
            - name: BUILDER
              value: docker
          volumeMounts:
            - name: storage
              mountPath: /usr/app/storage
            - name: logs
              mountPath: /usr/app/public/logs
            - name: home
              mountPath: /home/app
      volumes:
        - name: storage
          hostPath:
            path: /home/dev/diginext/storage
        - name: logs
          hostPath:
            path: /home/dev/diginext/public/logs
        - name: home
          hostPath:
            path: /home/dev/diginext/storage/home
---
# persistent volume
</file>

<file path="scripts/custom_rsa.sh">
#!/bin/bash

# Check if ID_RSA variable is set and not empty
if [ -n "$ID_RSA" ]; then

    # Ensure ~/.ssh directory exists and is secure
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh

    # Write private key to ~/.ssh/id_rsa and secure it
    echo "$ID_RSA" >~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa

    # Write public key to ~/.ssh/id_rsa.pub
    ssh-keygen -y -f ~/.ssh/id_rsa >>~/.ssh/id_rsa.pub

    # Add bitbucket.org and github.com to known_hosts
    ssh-keyscan bitbucket.org github.com >>~/.ssh/known_hosts
    chmod 644 ~/.ssh/known_hosts

    # Verify SSH Authentication using the specific private key file
    # This will attempt to connect to bitbucket.org using the provided SSH key
    # It's generally considered good practice to use ssh -T to prevent an actual SSH session from being started
    ssh -T git@bitbucket.org

    # Check the exit status of the ssh command
    if [ $? -eq 0 ]; then
        echo "SSH authentication successful!"
    else
        echo -e "\e[31mSSH authentication failed!\e[0m"
    fi
fi
</file>

<file path="scripts/k3s-install.sh">
#!/bin/bash

# Function to detect Linux distribution
detect_linux_distribution() {
  if [ -f "/etc/os-release" ]; then
    source "/etc/os-release"
    if [ "${ID}" == "ubuntu" ]; then
      echo "ubuntu"
    elif [ "${ID}" == "centos" ]; then
      echo "centos"
    elif [ "${ID}" == "debian" ]; then
      echo "debian"
    fi
  fi
}

# Detect Linux distribution
linux_distribution=$(detect_linux_distribution)

# Get machine's user & public IP address
export IP_ADDRESS=$(curl ifconfig.me)
export USER=$(whoami)

# TODO: call api to create dxup.dev domain and point it to this server

# Install K3S
curl -sfL https://get.k3s.io | sh -s - --disable=traefik

# Start the MicroK8s cluster
export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

# Install Helm
curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod +x get_helm.sh
./get_helm.sh

# Install NGINX Ingress
helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace

# Install Cert-Manager using Helm
kubectl create ns cert-manager
helm repo add jetstack https://charts.jetstack.io
helm repo update cert-manager
helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.5.3 --set installCRDs=true

# Install Prometheus using Helm
kubectl create ns prometheus
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/kube-prometheus-stack --namespace prometheus

# Install Grafana using Helm
kubectl create ns grafana
helm repo add grafana https://grafana.github.io/helm-charts
helm repo update
helm install grafana grafana/grafana --namespace grafana

# Install Loki using Fluentd
helm repo add loki https://grafana.github.io/loki/charts
helm repo update
helm upgrade --install loki grafana/loki-stack \
  --set fluent-bit.enabled=true,promtail.enabled=false \
  --set loki.persistence.enabled=true \
  --set loki.persistence.size=10Gi \
  --set loki.compactor.retention_enabled=true \
  --set loki.limits_config.retention_period=3d

# Create the YAML file for the Cert Manager Prod Let's Encrypt ClusterIssuer
kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: cert@dxup.dev
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: nginx
EOF

# Install MongoDB ReplicaSet
# kb create ns mongodb
# helm upgrade --install mongodb -n mongodb \
#   --set architecture=replicaset \
#   --set global.namespaceOverride=mongodb \
#   --set externalAccess.enabled=true \
#   --set auth.rootPassword=iGk8fETzZt bitnami/mongodb

# --- Deploy "hello-world" ---

# create namespace "dev"
kubectl create ns dev

# create deployment "dev"
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dev
  template:
    metadata:
      labels:
        app: dev
        project: dev
    spec:
      containers:
        - name: dev
          image: digitop/static:latest
          ports:
            - containerPort: 80
          env:
            - name: NEXT_PUBLIC_ENV
              value: production
EOF

# create service "dev"
kubectl apply -f - <<EOF
---
apiVersion: v1
kind: Service
metadata:
  name: dev
  namespace: dev
  labels:
    app: dev
    project: dev
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: dev
EOF

# create ingress "dev" (NO HTTPS)
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev-http
  namespace: dev
spec:
  ingressClassName: nginx
  rules:
    - host: microk8s.topane.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev
                port:
                  number: 80
EOF

# create ingress "dev" (HTTPS)
kubectl apply -f - <<EOF
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dev
  namespace: dev
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - demo.topane.com
      secretName: cert-secret-demo-topane-com
  rules:
    - host: demo.topane.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: dev
                port:
                  number: 80
EOF

echo "Setup completed successfully."
</file>

<file path="scripts/microk8s-install.sh">
#!/bin/bash
set -e
set -o noglob

# Function to detect Linux distribution
detect_linux_distribution() {
  if [ -f "/etc/os-release" ]; then
    source "/etc/os-release"
    if [ "${ID}" == "ubuntu" ]; then
      echo "ubuntu"
    elif [ "${ID}" == "centos" ]; then
      echo "centos"
    elif [ "${ID}" == "debian" ]; then
      echo "debian"
    fi
  fi
}

# Detect Linux distribution
linux_distribution=$(detect_linux_distribution)

# Get machine's user & public IP address
export IP_ADDRESS=$(curl ifconfig.me)
export USER=$(whoami)

# check "root" permission
if [ "${USER}" != "root" ]; then
  echo "Please run this script as 'root' user."
  exit 1
fi

# Check if "curl" is already installed
if command -v curl >/dev/null 2>&1; then
  echo "curl is already installed."
else
  # Install "curl" if it's not existed
  if [ "${linux_distribution}" == "ubuntu" ]; then
    sudo apt-get install curl -y
  elif [ "${linux_distribution}" == "centos" ]; then
    sudo yum install curl -y
  elif [ "${linux_distribution}" == "debian" ]; then
    sudo apt-get install curl -y
  else
    echo "Unable to install 'curl': Unsupported Linux distribution."
    exit 1
  fi
fi

# Check if "microk8s" is already installed
if command -v microk8s >/dev/null 2>&1; then
  echo "microk8s is already installed."
else
  # Install MicroK8s based on Linux distribution
  if [ "${linux_distribution}" == "ubuntu" ]; then
    sudo snap install microk8s --classic
  elif [ "${linux_distribution}" == "centos" ]; then
    sudo yum install -y snapd
    sudo systemctl enable --now snapd.socket
    sudo ln -s /var/lib/snapd/snap /snap
    sudo snap install microk8s --classic
  elif [ "${linux_distribution}" == "debian" ]; then
    sudo apt update
    sudo apt install -y snapd
    sudo snap install microk8s --classic
  else
    echo "Unable to install 'microk8s': Unsupported Linux distribution."
    exit 1
  fi
fi

# Enable addons
microk8s enable dashboard
microk8s enable dns
microk8s enable ingress
microk8s enable metrics-server
microk8s enable helm
microk8s enable helm3
microk8s enable cert-manager
microk8s enable hostpath-storage
microk8s enable observability

# Install Grafana using Helm
# microk8s kubectl create ns grafana
# microk8s helm repo add grafana https://grafana.github.io/helm-charts
# microk8s helm repo update
# microk8s helm install grafana grafana/grafana --namespace grafana

# Install Loki with Fluentd
# microk8s helm repo add loki https://grafana.github.io/loki/charts
# microk8s helm repo update
# microk8s helm upgrade --install loki grafana/loki-stack \
#   --set fluent-bit.enabled=true,promtail.enabled=false \
#   --set loki.persistence.enabled=true \
#   --set loki.persistence.size=5Gi \
#   --set loki.compactor.retention_enabled=true \
#   --set loki.limits_config.retention_period=3d

# Get current ingress class
INGRESS_CLASS=$(microk8s kubectl get ingressclass -o json | jq -r '.items[] | select(.metadata.annotations."ingressclass.kubernetes.io/is-default-class" == "true") | .metadata.name')

# Create the YAML file for the Cert Manager Prod Let's Encrypt ClusterIssuer
microk8s kubectl apply -f - <<EOF
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: cert@dxup.dev
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - http01:
        ingress:
          class: $INGRESS_CLASS
EOF

# --- Deploy "hello-world" app ---

# # create namespace "hello"
# # microk8s kubectl create ns hello
# microk8s kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: diginext
# EOF

# # create deployment "hello"
# # microk8s kubectl -n hello create deployment hello --image=digitop/static --port=80
# microk8s kubectl apply -f - <<EOF
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   labels:
#     app: hello
#   name: hello
#   namespace: hello
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: hello
#   template:
#     metadata:
#       labels:
#         app: hello
#     spec:
#       containers:
#         - image: digitop/static
#           name: static
#           ports:
#             - containerPort: 80
# EOF

# # expose service "hello"
# # microk8s kubectl -n hello expose deployment hello
# microk8s kubectl apply -f - <<EOF
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: hello
#   name: hello
#   namespace: hello
# spec:
#   ports:
#   - port: 80
#     targetPort: 80
#   selector:
#     app: hello
#   type: ClusterIP
# EOF

# # create ingress "hello" to expose service via
# microk8s kubectl apply -f - <<EOF
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: hello
#   namespace: hello
# spec:
#   rules:
#   - http:
#       paths:
#       - path: /
#         pathType: Prefix
#         backend:
#           service:
#             name: hello
#             port:
#               number: 80
# EOF

# create ingress "hello" (HTTPS)
# microk8s kubectl apply -f - <<EOF
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: hello
#   namespace: hello
#   annotations:
#     cert-manager.io/cluster-issuer: letsencrypt-prod
# spec:
#   tls:
#     - hosts:
#         - microk8s2.topane.com
#       secretName: cert-secret-microk8s2-topane-com
#   rules:
#     - host: microk8s2.topane.com
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: hello
#                 port:
#                   number: 80
# EOF

# microk8s kubectl -n hello get all,ing -o wide

# Install MongoDB using Helm
MONGODB_NAMESPACE=mongodb
MONGODB_STATEFULSET_NAME=mongodb
MONGODB_ROOT_PW=diginext
MONGODB_URI=mongodb://root:${MONGODB_ROOT_PW}@mongodb.mongodb:27017/diginext?authSource=admin

# microk8s kubectl create ns $MONGODB_NAMESPACE
microk8s kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: ${MONGODB_NAMESPACE}
EOF

microk8s helm upgrade --install $MONGODB_STATEFULSET_NAME -n $MONGODB_NAMESPACE \
  --set architecture=replicaset \
  --set global.namespaceOverride=$MONGODB_NAMESPACE \
  --set auth.rootPassword=$MONGODB_ROOT_PW \
  oci://registry-1.docker.io/bitnamicharts/mongodb

# Check if the MongoDB StatefulSet is ready
is_statefulset_ready() {
  microk8s kubectl get statefulset "$MONGODB_STATEFULSET_NAME" -n "$MONGODB_NAMESPACE" -ojsonpath='{.status.readyReplicas}' | grep -q "$(microk8s kubectl get statefulset "$MONGODB_STATEFULSET_NAME" -n "$MONGODB_NAMESPACE" -ojsonpath='{.status.replicas}')"
}

# Wait for the StatefulSet to be ready
while ! is_statefulset_ready; do
  echo "Waiting for the StatefulSet to be ready..."
  sleep 5
done

echo "MongoDB is fully ready."

# ----- Deploy Diginext -----

export KUBECONFIG=$(microk8s config)
export DX_BASE_URL=http://${IP_ADDRESS}
# generate random 64 character length string
export JWT_SECRET=$(openssl rand -hex 32)

# Deploy "FUSE Drive" plugin
microk8s kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fuse-device-plugin-daemonset
  namespace: kube-system
spec:
  selector:
    matchLabels:
      name: fuse-device-plugin-ds
  template:
    metadata:
      labels:
        name: fuse-device-plugin-ds
    spec:
      hostNetwork: true
      containers:
      - image: soolaugust/fuse-device-plugin:v1.0
        name: fuse-device-plugin-ctr
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
        volumeMounts:
          - name: device-plugin
            mountPath: /var/lib/kubelet/device-plugins
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
      imagePullSecrets:
        - name: registry-secret
EOF

# Deploy "Diginext" server
microk8s kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: diginext
---
# INGRESS CONFIGURATION
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: diginext
  namespace: diginext
  labels:
    project: diginext
    owner: topgroup
  annotations:
    nginx.ingress.kubernetes.io/enable-underscores-in-headers: "true"
spec:
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: diginext
                port:
                  number: 6969
---
# SERVICE CONFIGURATION
apiVersion: v1
kind: Service
metadata:
  name: diginext
  namespace: diginext
  labels:
    app: diginext
    project: diginext
    owner: topgroup
spec:
  ports:
    - port: 6969
  selector:
    app: diginext
---
# POD DEPLOYMENT CONFIGURATION
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diginext
  namespace: diginext
  labels:
    project: diginext
    owner: topgroup
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: diginext
  template:
    metadata:
      labels:
        owner: topgroup
        app: diginext
        project: diginext
    spec:
      containers:
        - name: diginext
          image: digitop/diginext:latest
          ports:
            - containerPort: 6969
          # Security for PODMAN to run in rootless mode
          securityContext:
            privileged: true
            runAsUser: 1000
            runAsGroup: 1000
          # Required for PODMAN to run (kubectl apply -f 05-podman-fuse-device-plugin.yaml)
          resources:
            limits:
              github.com/fuse: 1
          env:
            - name: PORT
              value: "6969"
            - name: NODE_ENV
              value: production
            - name: CLI_MODE
              value: server
            - name: BASE_URL
              value: ${DX_BASE_URL}
            - name: JWT_SECRET
              value: ${JWT_SECRET}
            - name: DB_NAME
              value: diginext
            - name: DB_URI
              value: ${MONGODB_URI}
            - name: INITIAL_CLUSTER_KUBECONFIG
              value: |
                ${KUBECONFIG}
          volumeMounts:
            - name: storage
              mountPath: /usr/app/storage
            - name: logs
              mountPath: /usr/app/public/logs
            - name: home
              mountPath: /home/app
      volumes:
        - name: storage
          emptyDir: {}
        - name: logs
          emptyDir: {}
        - name: home
          emptyDir: {}
EOF

# curl http://localhost

echo "MicroK8S Cluster has been set up successfully."
echo "  - Diginext URL: ${DX_BASE_URL}"
</file>

<file path="scripts/set_env">
#!/bin/bash

variable_name="$1"
value="$2"

# Check if variable name and value are provided
if [ -z "$variable_name" ] || [ -z "$value" ]; then
    echo "Usage: set_env <variable_name> <value>"
    exit 1
fi

# Check and append to .bashrc if the export command doesn't exist
if ! grep -q "export $variable_name=$value" ~/.bashrc; then
    echo "export $variable_name=$value" >> ~/.bashrc
else
    echo "Variable '$variable_name' already exists in ~/.bashrc"
fi

# Check and append to .zshrc if the export command doesn't exist
if [ -f ~/.zshrc ]; then
    if ! grep -q "export $variable_name=$value" ~/.zshrc; then
        echo "export $variable_name=$value" >> ~/.zshrc
    else
        echo "Variable '$variable_name' already exists in ~/.zshrc"
    fi
fi
EOF
</file>

<file path="scripts/startup-dev.sh">
#!/bin/bash

echo "EXECUTING START-UP SCRIPT IN DEVELOPMENT"

# Set the default port to 6969
PORT=${PORT:-6969}

# Wait until the app is ready
# while ! nc -z localhost "$PORT"; do
#     sleep 1
# done

# Check if NODE_ENV is "test" and run the "test" script if it is
if [ "$NODE_ENV" = "test" ]; then
    npm run test
else
    # Run the dev server
    pnpm dev:server
fi
</file>

<file path="scripts/startup.sh">
#!/bin/bash

# create some helpful aliases
alias ll="ls -al"

# Check if ID_RSA variable is set and not empty
# ./custom_rsa.sh

# Start the app...
export CLI_MODE=server
node /usr/app/dist/server.js
</file>

<file path="src/build/system.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { log, logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
// import { execaCommand } from "execa";
import { Config } from "@/app.config";
⋮----
import { Logger } from "../plugins/logger";
import { execCmd } from "../plugins/utils";
⋮----
export async function listImages()
⋮----
// convert to json:
⋮----
export async function cleanUp()
⋮----
// Clean up docker system
⋮----
// Clean up docker volumes
⋮----
// // Clean up docker images
// result = await execCmd("docker image prune -af --filter until=72h");
// log(`>>> DOCKER IMAGES HAVE BEEN CLEANED UP:`);
// log(result);
// logger?.append(result);
⋮----
// logger?.append(`-------------------------`);
// logger?.append(`-------------------------`);
⋮----
// // Clean up docker build cache
// result = await execCmd(`docker builder prune -af --filter until=72h`);
// log(`>>> DOCKER BUILD CACHE HAS BEEN CLEANED UP:`);
// log(result);
// logger?.append(result);
⋮----
// log success message:
</file>

<file path="src/config/const.ts">
import { homedir } from "os";
import path from "path";
⋮----
// DEFAULT
</file>

<file path="src/controllers/ApiKeyUserController.ts">
import BaseController from "@/controllers/BaseController";
import type { ApiKeyAccountDto, IApiKeyAccount } from "@/entities/ApiKeyAccount";
import type { IDeleteQueryParams, IGetQueryParams, IPostQueryParams } from "@/interfaces";
import { respondFailure, respondSuccess } from "@/interfaces";
import { ApiKeyUserService } from "@/services/ApiKeyUserService";
import { WorkspaceService } from "@/services/WorkspaceService";
⋮----
interface JoinWorkspaceBody {
	userId: string;
	workspace: string;
}
⋮----
export default class ApiKeyUserController extends BaseController<IApiKeyAccount>
⋮----
constructor()
⋮----
read(queryParams?: IGetQueryParams)
⋮----
create(body: ApiKeyAccountDto, queryParams?: IPostQueryParams)
⋮----
update(body: ApiKeyAccountDto, queryParams?: IPostQueryParams)
⋮----
delete(queryParams?: IDeleteQueryParams)
⋮----
async joinWorkspace(data: JoinWorkspaceBody)
⋮----
// console.log("{ userId, workspace } :>> ", { userId, workspace });
⋮----
// console.log("===========");
// console.log("userId, workspaceSlug :>> ", userId, workspaceSlug);
⋮----
// console.log("workspace :>> ", workspace);
⋮----
// console.log("user :>> ", user);
// console.log("wsId :>> ", wsId);
⋮----
// validations
⋮----
// console.log("isUserJoinedThisWorkspace :>> ", isUserJoinedThisWorkspace);
⋮----
// console.log("isWorkspaceActive :>> ", isWorkspaceActive);
⋮----
// console.log("user.workspaces :>> ", user.workspaces);
⋮----
// console.log("[1] updatedUser :>> ", updatedUser[0]);
⋮----
// make this workspace active
⋮----
// console.log("[2] updatedUser :>> ", updatedUser[0]);
</file>

<file path="src/controllers/BuildController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "@tsoa/runtime";
import { isEmpty } from "lodash";
⋮----
import type { IBuild } from "@/entities";
⋮----
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import type { BuildStatus, DeployStatus } from "@/interfaces/SystemTypes";
⋮----
import { Logger } from "@/plugins";
import { BuildService } from "@/services/BuildService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class BuildController extends BaseController<IBuild, BuildService>
⋮----
constructor()
⋮----
/**
	 * List of builds
	 */
⋮----
async read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
// exclude "logs" when "id" and "slug" query params are not provided
⋮----
create(@Body() body: entities.BuildDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
update(@Body() body: entities.BuildDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async getLogs(@Queries() queryParams?:
⋮----
// validation
⋮----
// Get logs from the database
⋮----
// if no logs in database -> try to fetch in local storage:
⋮----
/**
	 * Check status then build container image finish.
	 */
⋮----
async getStatus(@Queries() queryParams?:
⋮----
// validation
⋮----
// Attempt [1]: get logs from the database
⋮----
/**
	 * Create a new {Build} instance, then start building container image.
	 */
⋮----
async startBuild(@Body() body: buildModule.StartBuildParams)
⋮----
async stopBuild(@Body() body:
⋮----
/**
	 * Create a new {Build} instance, then start building container image.
	 */
⋮----
async rerunBuild(
		@Body() body: buildModule.RerunBuildParams,
		@Queries()
		queryParams?: {
			/**
			 * Build's slug
			 */
			slug: string;
			/**
			 * Build's ID
			 */
			_id: string;
		}
)
⋮----
/**
			 * Build's slug
			 */
⋮----
/**
			 * Build's ID
			 */
⋮----
// validates
⋮----
// rerun the build
</file>

<file path="src/controllers/CloudDatabaseBackupController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ICloudDatabaseBackup } from "@/entities";
import { CloudDatabaseBackupDto } from "@/entities";
⋮----
import { CloudDatabaseBackupService } from "@/services/CloudDatabaseBackupService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class CloudDatabaseBackupController extends BaseController<ICloudDatabaseBackup>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: CloudDatabaseBackupDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
update(@Body() body: CloudDatabaseBackupDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
</file>

<file path="src/controllers/CloudDatabaseController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ICloudDatabase } from "@/entities";
import { CloudDatabaseBackupDto } from "@/entities";
import type { CronjobRepeat, CronjonRepeatCondition } from "@/entities/Cronjob";
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import { MongoDB } from "@/plugins/mongodb";
import { CloudDatabaseService } from "@/services/CloudDatabaseService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class CloudDatabaseController extends BaseController<ICloudDatabase>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: Omit<ICloudDatabase, keyof HiddenBodyKeys>, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
update(@Body() body: Omit<ICloudDatabase, keyof HiddenBodyKeys>, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async checkConnection(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async backup(
		@Body()
		body: {
			/**
			 * `[OPTIONAL]`
			 * Backup name
			 */
			name?: string;
		},
		@Queries()
		queryParams?: {
			/**
			 * Cloud Database ID
			 */
			id: string;
		}
)
⋮----
/**
			 * `[OPTIONAL]`
			 * Backup name
			 */
⋮----
/**
			 * Cloud Database ID
			 */
⋮----
async restore(
		@Body() body: CloudDatabaseBackupDto,
		@Queries()
		queryParams?: {
			/**
			 * Cloud Database Backup ID
			 */
			id: string;
		}
)
⋮----
/**
			 * Cloud Database Backup ID
			 */
⋮----
// restore...
⋮----
async scheduleAutoBackup(
		@Body()
		body: {
			/**
			 * Recurrent job's configuration
			 */
			repeat?: CronjobRepeat;
			/**
			 * Recurrent job's conditions
			 */
			condition?: CronjonRepeatCondition;
		},
		@Queries() queryParams?: { _id: string }
)
⋮----
/**
			 * Recurrent job's configuration
			 */
⋮----
/**
			 * Recurrent job's conditions
			 */
⋮----
// default values: run backup cronjob at 2AM everyday
</file>

<file path="src/controllers/CloudProviderController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { CloudProviderService } from "@/services/CloudProviderService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class CloudProviderController extends BaseController
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
// console.log("this.filter :>> ", this.filter);
⋮----
create(@Body() body: entities.CloudProviderDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
update(@Body() body: entities.CloudProviderDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
</file>

<file path="src/controllers/CloudStorageController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ICloudStorage } from "@/entities";
import { type HiddenBodyKeys, type IPostQueryParams, IDeleteQueryParams, IGetQueryParams, respondFailure } from "@/interfaces";
import { CloudStorageService } from "@/services/CloudStorageService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class CloudStorageController extends BaseController<ICloudStorage>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: IGetQueryParams)
⋮----
async create(@Body() body: Omit<ICloudStorage, keyof HiddenBodyKeys>, @Queries() queryParams?: IPostQueryParams)
⋮----
update(@Body() body: Omit<ICloudStorage, keyof HiddenBodyKeys>, @Queries() queryParams?: IPostQueryParams)
⋮----
delete(@Queries() queryParams?: IDeleteQueryParams)
</file>

<file path="src/controllers/ClusterController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ICluster } from "@/entities";
⋮----
import type { ResponseData } from "@/interfaces/ResponseData";
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import ClusterManager from "@/modules/k8s";
import { ContainerRegistrySecretOptions } from "@/modules/registry/ContainerRegistrySecretOptions";
import { CloudProviderService } from "@/services/CloudProviderService";
import { ClusterService } from "@/services/ClusterService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class ClusterController extends BaseController<ICluster, ClusterService>
⋮----
constructor()
⋮----
/**
	 * List of K8S clusters of a workspace
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
/**
	 * List of K8S clusters (include system default clusters)
	 */
⋮----
async readAll(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: entities.ClusterDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// validation - round 1
⋮----
// validate cloud provider...
⋮----
// validation - round 2
⋮----
// if (!body.region) errors.push(`Google cluster region is required.`);
⋮----
// if (!body.region) errors.push(`Digital Ocean cluster region is required.`);
⋮----
// create new cluster
⋮----
async update(@Body() body: entities.ClusterDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// find cluster to update
⋮----
// update to database
⋮----
// console.log("[CLUSTER CONTROLLER] UPDATE > cluster :>> ", cluster);
⋮----
async delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
/**
	 * Verify this cluster accessibility, then switch the current context to this cluster
	 * - Similar to `/verify`
	 */
⋮----
async connect(@Queries() queryParams?:
⋮----
/**
	 * Verify this cluster accessibility, **won't** switch the current context to this cluster
	 * - Similar to `/connect`
	 */
⋮----
async verify(@Queries() queryParams?:
⋮----
// verify but won't
⋮----
async createImagePullSecret(@Body() body: ContainerRegistrySecretOptions)
</file>

<file path="src/controllers/ContainerRegistryController.ts">
import { isNotIn } from "class-validator";
import { logError } from "diginext-utils/dist/xconsole/log";
import { unlink } from "fs";
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IContainerRegistry } from "@/entities";
⋮----
import type { ResponseData } from "@/interfaces";
⋮----
import { registryProviderList } from "@/interfaces/SystemTypes";
import digitalocean from "@/modules/providers/digitalocean";
import gcloud from "@/modules/providers/gcloud";
import { connectRegistry } from "@/modules/registry/connect-registry";
import { createTmpFile } from "@/plugins";
import { MongoDB } from "@/plugins/mongodb";
import { ContainerRegistryService } from "@/services/ContainerRegistryService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class ContainerRegistryController extends BaseController
⋮----
constructor()
⋮----
/**
	 * List of container registry
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
/**
	 * List of K8S clusters (include system default clusters)
	 */
⋮----
async readAll(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: entities.ContainerRegistryDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// TODO: add dockerUsername, dockerPassword, dockerServer, dockerEmail
// TODO: encrypt "dockerPassword"
⋮----
// const saltRounds = 10;
// dockerPassword = await bcrypt.hash(dockerPassword, saltRounds);
⋮----
// console.log("newRegistry :>> ", newRegistry);
// console.log("this.workspace :>> ", this.workspace);
// verify container registry connection...
⋮----
// const newRegistry = await connectRegistry(newRegistryData, { userId: this.user?._id, workspaceId: this.workspace?._id });
⋮----
async update(@Body() body: entities.ContainerRegistryDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// update db
⋮----
// verify container registry connection...
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async connect(@Queries() queryParams?:
⋮----
// console.log("options :>> ", options);
⋮----
// console.log("registry :>> ", registry);
⋮----
// console.log("authResult :>> ", authResult);
⋮----
// delete temporary service account
</file>

<file path="src/controllers/CronjobController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ICloudDatabase } from "@/entities";
import type { CronjobRepeat, CronjobRequest, CronjonRepeatCondition, ICronjob } from "@/entities/Cronjob";
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import { cancelCronjobById } from "@/modules/cronjob/cancel-job";
import { createCronjobAtTime, createCronjobRepeat } from "@/modules/cronjob/schedule";
import { MongoDB } from "@/plugins/mongodb";
import { CronjobService } from "@/services/CronjobService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class CronjobController extends BaseController<ICronjob>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: Omit<ICloudDatabase, keyof HiddenBodyKeys>, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async update(@Body() body: Omit<ICloudDatabase, keyof HiddenBodyKeys>, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
/**
	 * Schedule a cronjob to be executed at a specific time
	 */
⋮----
async scheduleAt(
		@Body()
		body: {
			/**
			 * Name
			 */
			name: string;
			/**
			 * HTTP Request information
			 */
			request: CronjobRequest;
			/**
			 * Scheduled time of the cronjob
			 */
			time: Date;
		},
		@Queries() queryParams?: interfaces.IPostQueryParams
)
⋮----
/**
			 * Name
			 */
⋮----
/**
			 * HTTP Request information
			 */
⋮----
/**
			 * Scheduled time of the cronjob
			 */
⋮----
/**
	 * Schedule a cronjob to be executed repeatedly
	 */
⋮----
async scheduleRepeat(
		@Body()
		body: {
			/**
			 * Name
			 */
			name: string;
			/**
			 * HTTP Request information
			 */
			request: CronjobRequest;
			/**
			 * Recurrent job configuration
			 */
			repeat: CronjobRepeat;
			/**
			 * Recurrent job's conditions
			 */
			condition: CronjonRepeatCondition;
		},
		@Queries() queryParams?: interfaces.IPostQueryParams
)
⋮----
/**
			 * Name
			 */
⋮----
/**
			 * HTTP Request information
			 */
⋮----
/**
			 * Recurrent job configuration
			 */
⋮----
/**
			 * Recurrent job's conditions
			 */
⋮----
/**
	 * Cancel a cronjob
	 */
⋮----
async cancelCronjob(@Body() body:
</file>

<file path="src/controllers/DeployController.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { log } from "diginext-utils/dist/xconsole/log";
import { toNumber } from "lodash";
import { Body, Deprecated, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import pkg from "@/../package.json";
import type { IBuild, IUser, IWorkspace } from "@/entities";
import type { InputOptions, IQueryFilter, IQueryOptions, IResponsePagination, ResponseData } from "@/interfaces";
import { IPostQueryParams, respondFailure, respondSuccess } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { getDeployEvironmentByApp } from "@/modules/apps/get-app-environment";
import type { StartBuildParams } from "@/modules/build";
import { generateBuildTagByApp } from "@/modules/build/generate-build-tag";
import { startBuildV1 } from "@/modules/build/start-build";
import type { DeployBuildOptions } from "@/modules/deploy/deploy-build";
import { PromoteDeployEnvironmentOptions } from "@/modules/deploy/promote-deploy-environment";
import { parseGitRepoDataFromRepoSSH } from "@/modules/git/git-utils";
import { MongoDB } from "@/plugins/mongodb";
import DeployService from "@/services/DeployService";
⋮----
export type DeployBuildParams = {
	/**
	 * Deploy environment
	 * @example "dev", "prod"
	 */
	env: string;
	/**
	 * `[OPTIONAL]` - Cluster's slug
	 */
	cluster?: string;
	/**
	 * `[OPTIONAL]` - Container registry's slug
	 */
	registry?: string;
	/**
	 * User ID of the author
	 */
	author?: string;
	/**
	 * [DANGER]
	 * ---
	 * Should delete old deployment and deploy a new one from scratch
	 * @default false
	 */
	shouldUseFreshDeploy?: boolean;
	/**
	 * ### FOR DEPLOY to PROD
	 * Force roll out the release to "prod" deploy environment (instead of "prerelease" environment)
	 * @default false
	 */
	forceRollOut?: boolean;
	/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
	skipReadyCheck?: boolean;
	/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
	deployInBackground?: boolean;
	/**
	 * Health check path
	 * @default "/"
	 */
	healthzPath?: string | null;
};
⋮----
/**
	 * Deploy environment
	 * @example "dev", "prod"
	 */
⋮----
/**
	 * `[OPTIONAL]` - Cluster's slug
	 */
⋮----
/**
	 * `[OPTIONAL]` - Container registry's slug
	 */
⋮----
/**
	 * User ID of the author
	 */
⋮----
/**
	 * [DANGER]
	 * ---
	 * Should delete old deployment and deploy a new one from scratch
	 * @default false
	 */
⋮----
/**
	 * ### FOR DEPLOY to PROD
	 * Force roll out the release to "prod" deploy environment (instead of "prerelease" environment)
	 * @default false
	 */
⋮----
/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
⋮----
/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
⋮----
/**
	 * Health check path
	 * @default "/"
	 */
⋮----
export default class DeployController
⋮----
/**
	 * ### [DEPRECATED]
	 * #### Use `buildAndDeploy()` instead.
	 * Build container image first, then deploy that build to target deploy environment.
	 */
⋮----
deployFromSource(@Body() body:
⋮----
// console.log("deployFromSource :>> ", body);
⋮----
// validation & conversion...
⋮----
// if (!isJSON(inputOptions)) return { status: 0, messages: [`Deploy "options" is invalid (should be in JSON format).`] } as ResponseData;
⋮----
// const options = JSON.parse(inputOptions as string) as InputOptions;
// log("[DEPLOY] options", options);
⋮----
// TODO: Save client CLI version to server database for tracking purpose!
⋮----
// check for version compatibility between CLI & SERVER:
⋮----
// return respondSuccess({ msg: `Building...` });
⋮----
// start build in background:
⋮----
/**
	 * Build container image first, then deploy that build to target deploy environment.
	 * - `Alias of "/api/v1/deploy/from-source"`
	 */
⋮----
async buildAndDeploy(
		@Body() body: { buildParams: StartBuildParams; deployParams: DeployBuildParams },
		@Queries() queryParams?: IPostQueryParams
)
⋮----
// validation
⋮----
// start build in background:
⋮----
/**
	 * Build container image first, then deploy that build to target deploy environment.
	 * - `Alias of "/api/v1/deploy/build-first"`
	 */
⋮----
buildFromSourceAndDeploy(
		@Body() body: { buildParams: StartBuildParams; deployParams: DeployBuildParams },
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
	 * Build container image from app's git repo and deploy it to target deploy environment.
	 */
⋮----
async buildFromAppAndDeploy(
		@Body()
		body: {
			/**
			 * App's slug
			 */
			appSlug: string;
			/**
			 * Target git branch to build and deploy
			 */
			gitBranch: string;
			deployParams: DeployBuildParams;
		}
)
⋮----
/**
			 * App's slug
			 */
⋮----
/**
			 * Target git branch to build and deploy
			 */
⋮----
// validate registry -> if this app has no registries but specified in deploy params -> move forward as it will use deploy params
⋮----
// validate cluster -> if this app has no clusters but specified in deploy params -> move forward as it will use deploy params
⋮----
/**
	 * Build container image from app's git repo and deploy it to target deploy environment.
	 * - Flow: fork the git repo -> build from the new repo -> deploy to Diginext
	 */
⋮----
async buildFromGitRepoAndDeploy(
		@Body()
		body: {
			/**
			 * Git repo SSH url
			 */
			sshUrl: string;
			/**
			 * Target git branch to build and deploy
			 */
			gitBranch: string;
			/**
			 * Cluster's slug
			 * - **CAUTION: will take the default or random cluster if not specified**.
			 */
			clusterSlug?: string;
			/**
			 * Exposed port
			 */
			port: string;
			deployParams: DeployBuildParams;
		}
)
⋮----
/**
			 * Git repo SSH url
			 */
⋮----
/**
			 * Target git branch to build and deploy
			 */
⋮----
/**
			 * Cluster's slug
			 * - **CAUTION: will take the default or random cluster if not specified**.
			 */
⋮----
/**
			 * Exposed port
			 */
⋮----
// deploy "dev" environment by default
⋮----
// inherit the ownership
⋮----
// generate new app
⋮----
// try to get default git provider
⋮----
// create a new app
⋮----
// get random registry in this workspace
⋮----
// find default cluster
⋮----
// get default cluster
⋮----
// get random cluster
⋮----
// create deploy environment (if not exists):
⋮----
// assign new created deploy environment:
⋮----
// validate deploy params
⋮----
// start build & deploy from source (repo):
⋮----
/**
	 * Deploy app to target environment from a "success" build.
	 */
⋮----
async deployFromBuild(
		@Body()
		body: {
			/**
			 * Build's slug
			 */
			buildSlug: string;
		} & DeployBuildParams,
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * Build's slug
			 */
⋮----
// DEPLOY A BUILD:
⋮----
/**
	 * Deploy app to target environment from a release.
	 */
⋮----
async deployFromRelease(
		@Body()
		body: {
			/**
			 * Release's slug
			 */
			releaseSlug: string;
		} & DeployBuildParams,
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * Release's slug
			 */
⋮----
// DEPLOY A BUILD:
⋮----
/**
	 * Promote a deploy environment to another deploy environment (default: "production").
	 */
⋮----
async promoteDeployEnvironment(
		@Body()
		body: PromoteDeployEnvironmentOptions
)
⋮----
// DEPLOY A BUILD FROM A SOURCE DEPLOY ENVIRONMENT TO A DESTINATION DEPLOY ENVIRONMENT:
</file>

<file path="src/controllers/FrameworkController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { FrameworkDto } from "@/entities";
import { IDeleteQueryParams, IGetQueryParams, IPostQueryParams, respondFailure, respondSuccess } from "@/interfaces";
import { FrameworkService } from "@/services/FrameworkService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class FrameworkController extends BaseController
⋮----
constructor()
⋮----
/**
	 * List of frameworks
	 */
⋮----
read(@Queries() queryParams?: IGetQueryParams)
⋮----
async create(@Body() body: FrameworkDto)
⋮----
update(@Body() body: FrameworkDto, @Queries() queryParams?: IPostQueryParams)
⋮----
delete(@Queries() queryParams?: IDeleteQueryParams)
⋮----
/**
	 * List of trending repositories on Github
	 */
⋮----
async getGithubTrends(@Queries() queryParams?: IGetQueryParams)
</file>

<file path="src/controllers/GitProviderController.ts">
import { isEmpty } from "lodash";
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { GitProviderDto } from "@/entities";
import { IDeleteQueryParams, IGetQueryParams, IPostQueryParams } from "@/interfaces";
import type { ResponseData } from "@/interfaces/ResponseData";
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import type { GitProviderDomain, GitProviderType } from "@/interfaces/SystemTypes";
import { generateSSH, getPublicKey, sshKeysExisted, verifySSH, writeCustomSSHKeys } from "@/modules/git";
import GitProviderAPI, { GitRepositoryDto } from "@/modules/git/git-provider-api";
import { GitProviderService } from "@/services/GitProviderService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class GitProviderController extends BaseController
⋮----
constructor()
⋮----
/**
	 * List of GIT providers
	 */
⋮----
async read(@Queries() queryParams?: IGetQueryParams)
⋮----
async create(@Body() body: GitProviderDto, @Queries() queryParams?: IPostQueryParams)
⋮----
// error
⋮----
async update(@Body() body: GitProviderDto, @Queries() queryParams?: IPostQueryParams)
⋮----
delete(@Queries() queryParams?: IDeleteQueryParams)
⋮----
// ------------ GIT APIs ------------
⋮----
async verify(@Queries() queryParams?: IPostQueryParams)
⋮----
// validation
⋮----
// process
⋮----
async getProfile(@Queries() queryParams?:
⋮----
// validation
⋮----
// process
⋮----
async getListOrgs(
		@Queries()
		queryParams?: {
			/**
			 * Git provider's ID
			 */
			_id?: string;
			/**
			 * Git provider's SLUG¸¸¸
			 */
			slug?: string;
		}
)
⋮----
/**
			 * Git provider's ID
			 */
⋮----
/**
			 * Git provider's SLUG¸¸¸
			 */
⋮----
// validation
⋮----
// process
⋮----
/**
	 * List organization repositories
	 */
⋮----
async getListOrgRepos(
		@Queries()
		queryParams?: {
			/**
			 * Git provider's ID
			 */
			_id?: string;
			/**
			 * Git provider's SLUG¸¸¸
			 */
			slug?: string;
		}
)
⋮----
/**
			 * Git provider's ID
			 */
⋮----
/**
			 * Git provider's SLUG¸¸¸
			 */
⋮----
// validation
⋮----
// process
⋮----
/**
	 * Create new repository in git provider organization
	 */
⋮----
async createOrgRepo(
		@Body() body: GitRepositoryDto,
		@Queries()
		queryParams?: {
			/**
			 * Git provider's ID
			 */
			_id?: string;
			/**
			 * Git provider's SLUG¸¸¸
			 */
			slug?: string;
		}
)
⋮----
/**
			 * Git provider's ID
			 */
⋮----
/**
			 * Git provider's SLUG¸¸¸
			 */
⋮----
// validation
⋮----
// process
⋮----
/**
	 * Create new repository in git provider organization
	 */
⋮----
async deleteOrgRepo(
		@Body() body: GitRepositoryDto,
		@Queries()
		queryParams?: {
			/**
			 * Git provider's ID
			 */
			_id?: string;
			/**
			 * Git repository's SLUG¸¸¸
			 */
			slug?: string;
		}
)
⋮----
/**
			 * Git provider's ID
			 */
⋮----
/**
			 * Git repository's SLUG¸¸¸
			 */
⋮----
// validation
⋮----
// process
⋮----
/**
	 * Create new repository in git provider organization
	 */
⋮----
async listRepoBranches(
		@Queries()
		queryParams?: {
			/**
			 * Git provider's ID
			 */
			_id?: string;
			/**
			 * Git provider's SLUG
			 */
			slug?: string;
			/**
			 * Git repo's SLUG
			 */
			repo: string;
		}
)
⋮----
/**
			 * Git provider's ID
			 */
⋮----
/**
			 * Git provider's SLUG
			 */
⋮----
/**
			 * Git repo's SLUG
			 */
⋮----
// repo's slug
⋮----
delete this.filter.repo; // <-- to get correct git provider 😅
⋮----
// validation
⋮----
// process
⋮----
// ------------ SSH KEYS ------------
⋮----
async getPublicKey()
⋮----
async createKeysSSH(@Body() body:
⋮----
async generateSSH()
⋮----
async verifySSH(@Queries() queryParams?:
</file>

<file path="src/controllers/MediaController.ts">
import { Body, Post, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IMedia } from "@/entities/Media";
import MediaService from "@/services/MediaService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class MediaController extends BaseController<IMedia, MediaService>
⋮----
constructor()
⋮----
async uploadToCloudStorage(@Body() body:
</file>

<file path="src/controllers/ProjectController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IProject } from "@/entities";
⋮----
import type { ResponseData } from "@/interfaces/ResponseData";
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import { checkQuota } from "@/modules/workspace/check-quota";
import { MongoDB } from "@/plugins/mongodb";
import { AppService } from "@/services/AppService";
import { ProjectService } from "@/services/ProjectService";
⋮----
import BaseController from "./BaseController";
⋮----
interface IQueryProjectsAndApps {
	/**
	 * Should check for item's status
	 * @default false
	 */
	status?: boolean;
	/**
	 * Find one item by `{ObjectID}`
	 */
	id?: string;
	_id?: string;
	/**
	 * Mark this request as search (return the similar results based on the filter query params)
	 * @default true
	 */
	search?: boolean;
	/**
	 * Pagination
	 */
	page?: number;
	size?: number;
	limit?: number;
	skip?: number;
}
⋮----
/**
	 * Should check for item's status
	 * @default false
	 */
⋮----
/**
	 * Find one item by `{ObjectID}`
	 */
⋮----
/**
	 * Mark this request as search (return the similar results based on the filter query params)
	 * @default true
	 */
⋮----
/**
	 * Pagination
	 */
⋮----
export default class ProjectController extends BaseController
⋮----
constructor()
⋮----
/**
	 * List of projects
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: entities.ProjectDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// check dx quota
⋮----
// return respondFailure(
// 	`You've exceeded the limit amount of projects (${quotaRes.data.type} / Max. ${quotaRes.data.limits.projects} projects).`
// );
⋮----
update(@Body() body: entities.ProjectDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async getProjectsAndApps(@Queries() queryParams?: IQueryProjectsAndApps)
⋮----
// populate apps
⋮----
// console.log("apps :>> ", apps);
</file>

<file path="src/controllers/ReleaseController.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IRelease } from "@/entities";
⋮----
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import { createReleaseFromApp } from "@/modules/build/create-release-from-app";
import { createReleaseFromBuild } from "@/modules/build/create-release-from-build";
import ClusterManager from "@/modules/k8s";
import { MongoDB } from "@/plugins/mongodb";
import { BuildService } from "@/services/BuildService";
import { ReleaseService } from "@/services/ReleaseService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class ReleaseController extends BaseController<IRelease>
⋮----
constructor()
⋮----
/**
	 * List of releases
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
create(@Body() body: entities.ReleaseDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// TODO: validate body and check for required params
⋮----
update(@Body() body: entities.ReleaseDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async createFromApp(
		@Body()
		body: {
			/**
			 * App's slug
			 */
			app: string;
			/**
			 * Deploy environment
			 * @example dev,prod,...
			 */
			env: string;
			/**
			 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
			 * @example latest, v01, prerelease, alpha, beta,...
			 */
			buildTag: string;
		}
)
⋮----
/**
			 * App's slug
			 */
⋮----
/**
			 * Deploy environment
			 * @example dev,prod,...
			 */
⋮----
/**
			 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
			 * @example latest, v01, prerelease, alpha, beta,...
			 */
⋮----
async createFromBuild(
		@Body()
		body: {
			/**
			 * Build's ID
			 */
			build: string;
			/**
			 * Deploy environment
			 * @example dev,prod,...
			 */
			env: string;
		}
)
⋮----
/**
			 * Build's ID
			 */
⋮----
/**
			 * Deploy environment
			 * @example dev,prod,...
			 */
⋮----
async rollout(@Body() data:
⋮----
// console.log("controller > rollout > id :>> ", id);
⋮----
async rolloutV2(@Body() data:
⋮----
// console.log("controller > rollout > id :>> ", id);
⋮----
async previewPrerelease(@Body() data:
⋮----
/**
	 * @deprecated
	 */
async migrate()
</file>

<file path="src/controllers/RoleController.ts">
import { isEmpty } from "lodash";
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IRole } from "@/entities";
⋮----
import { RoleService } from "@/services/RoleService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class RoleController extends BaseController<IRole>
⋮----
constructor()
⋮----
/**
	 * List of roles
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: entities.RoleDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// validation
⋮----
// TODO: no one can create "Administrator" and "Member" role
⋮----
update(@Body() body: entities.RoleDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
// Can't delete default roles: Administrator, Moderator & Member
</file>

<file path="src/controllers/RouteController.ts">
import { Body, Get, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IRole } from "@/entities";
import type { IRoute } from "@/entities/Route";
import type { IRoutePermission } from "@/interfaces";
⋮----
import type { DBCollection } from "@/modules/api/DB";
import { MongoDB } from "@/plugins/mongodb";
import { RouteService } from "@/services/RouteService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class RouteController extends BaseController<IRoute>
⋮----
constructor()
⋮----
/**
	 * Get all routes
	 */
⋮----
async read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
// console.log("res :>> ", res);
⋮----
/**
	 * Check access permissions
	 */
⋮----
async checkPermissions(@Body() body:
⋮----
// console.log("item :>> ", item);
⋮----
// check wildcard route first...
⋮----
// if permisions have "own" -> only have access to items which "owner" is "userID":
⋮----
// ...then check the exact route
⋮----
// if permisions have "own" -> only have access to items which "owner" is "userID":
</file>

<file path="src/controllers/ServiceAccountController.ts">
import BaseController from "@/controllers/BaseController";
import type { IServiceAccount, ServiceAccountDto } from "@/entities/ServiceAccount";
import type { IDeleteQueryParams, IGetQueryParams, IPostQueryParams, ResponseData } from "@/interfaces";
import { MongoDB } from "@/plugins/mongodb";
import { ServiceAccountService } from "@/services/ServiceAccountService";
import { WorkspaceService } from "@/services/WorkspaceService";
⋮----
interface JoinWorkspaceBody {
	userId: string;
	workspace: string;
}
⋮----
export default class ServiceAccountController extends BaseController<IServiceAccount>
⋮----
constructor()
⋮----
read(queryParams?: IGetQueryParams)
⋮----
create(body: ServiceAccountDto, queryParams?: IPostQueryParams)
⋮----
update(body: ServiceAccountDto, queryParams?: IPostQueryParams)
⋮----
delete(queryParams?: IDeleteQueryParams)
⋮----
async joinWorkspace(data: JoinWorkspaceBody)
⋮----
// console.log("{ userId, workspace } :>> ", { userId, workspace });
⋮----
// console.log("===========");
// console.log("userId, workspaceSlug :>> ", userId, workspaceSlug);
⋮----
// console.log("workspace :>> ", workspace);
⋮----
// console.log("user :>> ", user);
// console.log("wsId :>> ", wsId);
⋮----
// validations
⋮----
// console.log("isUserJoinedThisWorkspace :>> ", isUserJoinedThisWorkspace);
⋮----
// console.log("isWorkspaceActive :>> ", isWorkspaceActive);
⋮----
// console.log("user.workspaces :>> ", user.workspaces);
⋮----
// console.log("[1] updatedUser :>> ", updatedUser[0]);
⋮----
// make this workspace active
⋮----
// console.log("[2] updatedUser :>> ", updatedUser[0]);
</file>

<file path="src/controllers/StatsController.ts">
import dayjs from "dayjs";
import { Get, Route, Security, Tags } from "tsoa/dist";
⋮----
import { Config } from "@/app.config";
import { respondSuccess } from "@/interfaces";
import { currentVersion } from "@/plugins";
⋮----
import BaseController from "./BaseController";
⋮----
export default class StatsController extends BaseController
⋮----
/**
	 * Current version
	 */
⋮----
version()
⋮----
/**
	 * General stats
	 */
⋮----
async summary()
⋮----
// all
⋮----
// today
⋮----
// week
⋮----
// month
⋮----
// all
⋮----
// today
⋮----
// week
⋮----
// month
⋮----
/**
	 * Count projects
	 */
⋮----
async projects()
⋮----
/**
	 * Count apps
	 */
⋮----
async apps()
⋮----
/**
	 * Count clusters
	 */
⋮----
async clusters()
⋮----
/**
	 * Count databases
	 */
⋮----
async databases()
⋮----
/**
	 * Count git providers
	 */
⋮----
async gits()
⋮----
/**
	 * Count registries
	 */
⋮----
async registries()
⋮----
/**
	 * Count frameworks
	 */
⋮----
async frameworks()
⋮----
/**
	 * Count users
	 */
⋮----
async users()
⋮----
/**
	 * Count builds
	 */
⋮----
async builds()
⋮----
/**
	 * Count releases
	 */
⋮----
async releases()
</file>

<file path="src/controllers/TeamController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { ITeam } from "@/entities";
⋮----
import { TeamService } from "@/services/TeamService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class TeamController extends BaseController<ITeam>
⋮----
constructor()
⋮----
/**
	 * List of teams
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
create(@Body() body: entities.TeamDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
update(@Body() body: entities.TeamDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
</file>

<file path="src/controllers/UserController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "@tsoa/runtime";
import { isArray } from "lodash";
⋮----
import BaseController from "@/controllers/BaseController";
import type { IUser } from "@/entities";
import { UserDto } from "@/entities";
import { IDeleteQueryParams, IGetQueryParams, IPostQueryParams, respondFailure, respondSuccess } from "@/interfaces";
import { MongoDB } from "@/plugins/mongodb";
import { assignRoleByID, assignRoleWithoutCheckingPermissions, filterSensitiveInfo, filterUsersByWorkspaceRole } from "@/plugins/user-utils";
import { UserJoinWorkspaceParams, UserService } from "@/services/UserService";
⋮----
export default class UserController extends BaseController<IUser>
⋮----
constructor()
⋮----
/**
	 * List of users
	 */
⋮----
async read(@Queries() queryParams?: IGetQueryParams)
⋮----
// console.log("[1] res.data :>> ", res.data);
⋮----
// console.log("[2] res.data :>> ", res.data);
⋮----
async profile(@Queries() queryParams?: IGetQueryParams)
⋮----
// create username from slug (if not exists)
⋮----
async create(@Body() body: UserDto, @Queries() queryParams?: IPostQueryParams)
⋮----
async update(@Body() body: UserDto, @Queries() queryParams?: IPostQueryParams)
⋮----
// console.log("body.roles :>> ", body.roles);
⋮----
// find list of affected users
⋮----
// ! [MAGIC] if the item to be updated is the current logged in user -> allow it to happen!
⋮----
delete(@Queries() queryParams?: IDeleteQueryParams)
⋮----
async assignRole(@Body() body:
⋮----
async joinWorkspace(@Body() body: UserJoinWorkspaceParams)
⋮----
// console.log("body :>> ", body);
⋮----
/**
	 * Update user's access permissions
	 * @param body - Example: `{ userId: "000", resource: { "projects": "1,2,3,4", "apps": "4,5,6" } }`
	 * @returns
	 */
⋮----
async updateAccessPermissions(
		@Body()
		body: {
			/**
			 * User slug
			 */
			userSlug: string;
			/**
			 * Resource data:
			 * - "name": `projects`, `apps`, `clusters`, `databases`, `database_backups`, `gits`, `frameworks`, `container_registries`
			 * - "value": List of resource IDs in string, separated by commas without spacing. For example: `123,456,789`
			 * @example { projects: "1,2,3", apps: "5,6,7" }
			 */
			resource: { [name: string]: string };
		}
)
⋮----
/**
			 * User slug
			 */
⋮----
/**
			 * Resource data:
			 * - "name": `projects`, `apps`, `clusters`, `databases`, `database_backups`, `gits`, `frameworks`, `container_registries`
			 * - "value": List of resource IDs in string, separated by commas without spacing. For example: `123,456,789`
			 * @example { projects: "1,2,3", apps: "5,6,7" }
			 */
</file>

<file path="src/controllers/UtilityController.ts">
import { Body, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { respondFailure, respondSuccess } from "@/interfaces";
import exportPdf, * as exportPdf_1 from "@/modules/capture/export-pdf";
import screenshot, * as screenshot_1 from "@/modules/capture/screenshot";
import MediaService from "@/services/MediaService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class UtilityController extends BaseController
⋮----
/**
	 * Export a webpage to PDF
	 */
⋮----
async exportWebpagePDF(@Body() body: exportPdf_1.ExportPDFOptions, @Queries() queryParams?:
⋮----
// process
⋮----
// success -> write to db
⋮----
/**
	 * Capture a webpage screenshot
	 */
⋮----
async captureScreenshot(@Body() body: screenshot_1.CaptureScreenshotOptions =
⋮----
// process
⋮----
// success -> write to db
</file>

<file path="src/controllers/WebhookController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { IWebhook } from "@/entities/Webhook";
⋮----
import { WebhookDto, WebhookService } from "@/services/WebhookService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class WebhookController extends BaseController<IWebhook, WebhookService>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: WebhookDto, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async update(@Body() body: IWebhook, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
</file>

<file path="src/controllers/WorkspaceController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import BaseController from "@/controllers/BaseController";
import type { IApiKeyAccount, IServiceAccount, IWorkspace } from "@/entities";
⋮----
import { AddUserToWorkspaceParams, InviteMemberData, WorkspaceInputData, WorkspaceService } from "@/services/WorkspaceService";
⋮----
export default class WorkspaceController extends BaseController<IWorkspace>
⋮----
constructor()
⋮----
/**
	 * List of workspaces
	 */
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: WorkspaceInputData)
⋮----
async update(@Body() body: Partial<WorkspaceInputData>, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async inviteMember(
		@Body()
		data: InviteMemberData
)
⋮----
async addUser(@Body() data: AddUserToWorkspaceParams)
⋮----
/**
	 * ======================= SERVICE ACCOUNT ======================
	 */
⋮----
/**
	 * Get Service Account list of a workspace
	 */
⋮----
async getServiceAccounts(
		@Queries()
		queryParams?: {
			/**
			 * ID of Service Account
			 */
			id?: string;
		}
)
⋮----
/**
			 * ID of Service Account
			 */
⋮----
/**
	 * ======================= API KEY USER ACCOUNT ======================
	 */
⋮----
/**
	 * Get Service Account list of a workspace
	 */
⋮----
async getApiKeyUsers(
		@Queries()
		queryParams?: {
			/**
			 * ID of API key account
			 */
			id?: string;
		}
)
⋮----
/**
			 * ID of API key account
			 */
⋮----
async updatePackageWorkspace(@Body() data:
⋮----
async isOwnerWorkspace(@Body() data:
⋮----
async testCloudStorage()
</file>

<file path="src/entities/Activity.ts">
import { model, Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export /**
 * An interface that extends IBase and describes the properties of an activity.
 *
 * @interface IActivity
 * @extends {IBase}
 */
interface IActivity extends IBase {
	/**
	 * The name of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	name?: string;

	/**
	 * A message associated with the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	message?: string;

	/**
	 * The URL of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	url?: string;

	/**
	 * The route of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	route?: string;

	/**
	 * The name of the route of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	routeName?: string;

	/**
	 * The HTTP method used for the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	method?: string;

	/**
	 * The query parameters of the activity.
	 *
	 * @type {*}
	 * @memberof IActivity
	 */
	query?: any;

	/**
	 * The HTTP status code returned from the activity.
	 *
	 * @type {*}
	 * @memberof IActivity
	 */
	httpStatus?: any;

	/**
	 * The response message returned from the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
	response?: string;

	/**
	 * The response status code returned from the activity.
	 *
	 * @type {number}
	 * @memberof IActivity
	 */
	responseStatus?: number;
}
⋮----
/**
	 * The name of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * A message associated with the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The URL of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The route of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The name of the route of the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The HTTP method used for the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The query parameters of the activity.
	 *
	 * @type {*}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The HTTP status code returned from the activity.
	 *
	 * @type {*}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The response message returned from the activity.
	 *
	 * @type {string}
	 * @memberof IActivity
	 */
⋮----
/**
	 * The response status code returned from the activity.
	 *
	 * @type {number}
	 * @memberof IActivity
	 */
⋮----
export type ActivityDto = Omit<IActivity, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/ApiKeyAccount.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import { baseSchemaDefinitions } from "./Base";
import type { IUser } from "./User";
⋮----
export interface IApiKeyAccount extends IUser {
	/**
	 * Service Account is also a User with unexpired access token.
	 */
	type?: string;
}
⋮----
/**
	 * Service Account is also a User with unexpired access token.
	 */
⋮----
export type ApiKeyAccountDto = Omit<IApiKeyAccount, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/App.ts">
import type { Types } from "mongoose";
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { DeployEnvironment } from "@/interfaces/DeployEnvironment";
import type { GitProviderType } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IGitProvider } from "./GitProvider";
⋮----
export interface AppGitInfo {
	/**
	 * `REQUIRES`
	 * ---
	 * A SSH URI of the source code repository
	 * @example git@bitbucket.org:digitopvn/example-repo.git
	 */
	repoSSH: string;
	/**
	 * OPTIONAL
	 * ---
	 * A SSH URI of the source code repository
	 * @example https://bitbucket.org/digitopvn/example-repo
	 */
	repoURL?: string;
	/**
	 * OPTIONAL
	 * ---
	 * Git provider's type: `github`, `bitbucket`, `gitlab`
	 */
	provider?: GitProviderType;
	/**
	 * OPTIONAL
	 * ---
	 * Git provider's type: `github`, `bitbucket`, `gitlab`
	 */
	providerID?: string | IGitProvider;
}
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * A SSH URI of the source code repository
	 * @example git@bitbucket.org:digitopvn/example-repo.git
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * A SSH URI of the source code repository
	 * @example https://bitbucket.org/digitopvn/example-repo
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Git provider's type: `github`, `bitbucket`, `gitlab`
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Git provider's type: `github`, `bitbucket`, `gitlab`
	 */
⋮----
/**
 * An interface that extends IBase and describes the properties of an app.
 *
 * @interface IApp
 * @extends {IBase}
 */
export interface IApp extends IBase {
	/**
	 * The name of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	name?: string;

	/**
	 * OPTIONAL: The image URI of this app on the Container Registry (without `TAG`).
	 *
	 * Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 *
	 * **Don't** specify `tag` at the end! (e.g., `latest`, `beta`,...)
	 *
	 * @type {string}
	 * @memberof IApp
	 * @default <registry-image-base-url>/<project-slug>/<app-name-slug>
	 * @example "asia.gcr.io/my-workspace/my-project/my-app"
	 */
	image?: string;

	/**
	 * The slug of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	slug?: string;

	/**
	 * The user who created the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	createdBy?: string;

	/**
	 * The user who last updated the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	lastUpdatedBy?: string;

	/**
	 * Git Provider of this app
	 */
	gitProvider?: Types.ObjectId | IGitProvider | string;

	/**
	 * The Git information of the app.
	 *
	 * @type {AppGitInfo}
	 * @memberof IApp
	 */
	git?: AppGitInfo;

	/**
	 * The framework information of the app.
	 *
	 * @memberof IApp
	 */
	framework?: {
		name?: string;
		slug?: string;
		version?: string;
		repoURL?: string;
		repoSSH?: string;
	};

	/**
	 * The environment information of the app.
	 *
	 * @type {{ [key: string]: DeployEnvironment | string }}
	 * @memberof IApp
	 * @deprecated
	 */
	environment?: { [key: string]: DeployEnvironment | string };

	/**
	 * The deploy environment information of the app.
	 *
	 * @type {{ [key: string]: DeployEnvironment }}
	 * @memberof IApp
	 */
	deployEnvironment?: { [key: string]: DeployEnvironment };

	/**
	 * The latest build of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	latestBuild?: string;

	/**
	 * The incremental integer of build for this app
	 */
	buildNumber?: number;

	/**
	 * The project slug of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
	projectSlug?: string;

	/**
	 * Date when the application was archived (take down all deploy environments)
	 */
	archivedAt?: Date;
}
⋮----
/**
	 * The name of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * OPTIONAL: The image URI of this app on the Container Registry (without `TAG`).
	 *
	 * Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 *
	 * **Don't** specify `tag` at the end! (e.g., `latest`, `beta`,...)
	 *
	 * @type {string}
	 * @memberof IApp
	 * @default <registry-image-base-url>/<project-slug>/<app-name-slug>
	 * @example "asia.gcr.io/my-workspace/my-project/my-app"
	 */
⋮----
/**
	 * The slug of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * The user who created the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * The user who last updated the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * Git Provider of this app
	 */
⋮----
/**
	 * The Git information of the app.
	 *
	 * @type {AppGitInfo}
	 * @memberof IApp
	 */
⋮----
/**
	 * The framework information of the app.
	 *
	 * @memberof IApp
	 */
⋮----
/**
	 * The environment information of the app.
	 *
	 * @type {{ [key: string]: DeployEnvironment | string }}
	 * @memberof IApp
	 * @deprecated
	 */
⋮----
/**
	 * The deploy environment information of the app.
	 *
	 * @type {{ [key: string]: DeployEnvironment }}
	 * @memberof IApp
	 */
⋮----
/**
	 * The latest build of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * The incremental integer of build for this app
	 */
⋮----
/**
	 * The project slug of the app.
	 *
	 * @type {string}
	 * @memberof IApp
	 */
⋮----
/**
	 * Date when the application was archived (take down all deploy environments)
	 */
⋮----
export type AppDto = Omit<IApp, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Build.ts">
import type { Types } from "mongoose";
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import { type BuildStatus, type DeployStatus, buildStatusList, deployStatusList } from "@/interfaces/SystemTypes";
⋮----
import type { IApp } from "./App";
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IContainerRegistry } from "./ContainerRegistry";
⋮----
export interface IBuild extends IBase {
	name?: string;
	image?: string;
	/**
	 * Image tag is also "buildTag"
	 */
	tag?: string;
	/**
	 * Build number
	 */
	num?: number;
	/**
	 * Build start time
	 */
	startTime?: Date;
	/**
	 * Build end time
	 */
	endTime?: Date;
	/**
	 * Build duration in miliseconds
	 */
	duration?: number;
	/**
	 * Build for which deploy environment
	 * - **[OPTIONAL] DO NOT rely on this!**
	 * - A build should be able to be used for any deploy environments.
	 */
	env?: string;
	/**
	 * Release revision message
	 */
	message?: string;
	/**
	 * Build from which git branch
	 */
	branch?: string;
	cliVersion?: string;
	serverVersion?: string;
	serverLocation?: string;
	createdBy?: string;
	status?: BuildStatus;
	deployStatus?: DeployStatus;
	projectSlug?: string;
	/**
	 * App's slug
	 */
	appSlug?: string;
	logs?: string;
	/**
	 * ID of the container registry
	 * @remarks This can be populated to {IContainerRegistry} data
	 */
	registry?: Types.ObjectId | IContainerRegistry | string;
	/**
	 * ID of the app
	 * @remarks This can be populated to {IApp} data
	 */
	app?: Types.ObjectId | IApp | string;
}
⋮----
/**
	 * Image tag is also "buildTag"
	 */
⋮----
/**
	 * Build number
	 */
⋮----
/**
	 * Build start time
	 */
⋮----
/**
	 * Build end time
	 */
⋮----
/**
	 * Build duration in miliseconds
	 */
⋮----
/**
	 * Build for which deploy environment
	 * - **[OPTIONAL] DO NOT rely on this!**
	 * - A build should be able to be used for any deploy environments.
	 */
⋮----
/**
	 * Release revision message
	 */
⋮----
/**
	 * Build from which git branch
	 */
⋮----
/**
	 * App's slug
	 */
⋮----
/**
	 * ID of the container registry
	 * @remarks This can be populated to {IContainerRegistry} data
	 */
⋮----
/**
	 * ID of the app
	 * @remarks This can be populated to {IApp} data
	 */
⋮----
export type BuildDto = Omit<IBuild, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/CloudDatabase.ts">
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import { type CloudDatabaseType, cloudDatabaseList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { ICronjob } from "./Cronjob";
⋮----
export interface ICloudDatabase extends IBase {
	name?: string;
	verified?: boolean;
	type?: CloudDatabaseType;
	provider?: string;
	user?: string;
	pass?: string;
	host?: string;
	port?: number;
	authDb?: string;
	url?: string;
	/**
	 * Cronjob ID
	 */
	autoBackup?: string | ICronjob;
}
⋮----
/**
	 * Cronjob ID
	 */
⋮----
export type CloudDatabaseDto = Omit<ICloudDatabase, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/CloudDatabaseBackup.ts">
import type { ObjectId } from "mongoose";
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { BackupStatus, CloudDatabaseType } from "@/interfaces/SystemTypes";
import { backupStatusList, cloudDatabaseList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface ICloudDatabaseBackup extends IBase {
	name?: string;
	status?: BackupStatus;
	/**
	 * Backup file path
	 */
	path?: string;
	/**
	 * Backup file URL
	 */
	url?: string;
	type?: CloudDatabaseType;
	dbSlug?: string;
	database?: string | ObjectId;
}
⋮----
/**
	 * Backup file path
	 */
⋮----
/**
	 * Backup file URL
	 */
⋮----
export type CloudDatabaseBackupDto = Omit<ICloudDatabaseBackup, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/CloudProvider.ts">
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { CloudProviderType } from "@/interfaces/SystemTypes";
import { cloudProviderList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { ICluster } from "./Cluster";
⋮----
export interface ICloudProvider extends IBase {
	/**
	 * Cloud provider name
	 */
	name?: string;
	/**
	 * Cloud provider short name, without spacing & special characters
	 */
	shortName?: CloudProviderType;
	/**
	 * Content of the API access token to use services on this cloud provider
	 * - Apply for: Digital Ocean
	 */
	apiAccessToken?: string;
	/**
	 * Content of the Service Account credentials ti access services on this cloud provider
	 * - Apply for: Google Cloud, AWS,...
	 * - For example: Kubernetes Clusters, Single Sign-On,...
	 */
	serviceAccount?: string;
	/**
	 * List of available clusters on this provider
	 */
	clusters?: string[] | ICluster[];
}
⋮----
/**
	 * Cloud provider name
	 */
⋮----
/**
	 * Cloud provider short name, without spacing & special characters
	 */
⋮----
/**
	 * Content of the API access token to use services on this cloud provider
	 * - Apply for: Digital Ocean
	 */
⋮----
/**
	 * Content of the Service Account credentials ti access services on this cloud provider
	 * - Apply for: Google Cloud, AWS,...
	 * - For example: Kubernetes Clusters, Single Sign-On,...
	 */
⋮----
/**
	 * List of available clusters on this provider
	 */
⋮----
export type CloudProviderDto = Omit<ICloudProvider, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/CloudStorage.ts">
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { StorageProviderType } from "@/interfaces/SystemTypes";
import { storageProviderList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface ICloudStorage extends IBase {
	name?: string;
	verified?: boolean;
	provider?: StorageProviderType;
	/**
	 * The host (domain) of your cloud storage.
	 * @example "cdn.example.com"
	 */
	host?: string;
	/**
	 * Storage origin URL
	 * @example "https://storage.googleapis.com/<project-id>"
	 */
	origin?: string;
	/**
	 * Bucket name
	 */
	bucket?: string;
	/**
	 * Storage region
	 */
	region?: string;
	/**
	 * Authentication
	 */
	auth?: {
		/**
		 * ### NOTE: For Google Cloud Storage
		 * JSON string containing "client_email" and "private_key" properties, or the external account client options.
		 */
		service_account?: string;
		/**
		 * ### NOTE: For AWS S3 & DigitalOcean Space Storage
		 * Your AWS access key ID
		 */
		key_id?: string;
		/**
		 * ### NOTE: For AWS S3 & DigitalOcean Space Storage
		 * Your AWS secret access key
		 */
		key_secret?: string;
	};
}
⋮----
/**
	 * The host (domain) of your cloud storage.
	 * @example "cdn.example.com"
	 */
⋮----
/**
	 * Storage origin URL
	 * @example "https://storage.googleapis.com/<project-id>"
	 */
⋮----
/**
	 * Bucket name
	 */
⋮----
/**
	 * Storage region
	 */
⋮----
/**
	 * Authentication
	 */
⋮----
/**
		 * ### NOTE: For Google Cloud Storage
		 * JSON string containing "client_email" and "private_key" properties, or the external account client options.
		 */
⋮----
/**
		 * ### NOTE: For AWS S3 & DigitalOcean Space Storage
		 * Your AWS access key ID
		 */
⋮----
/**
		 * ### NOTE: For AWS S3 & DigitalOcean Space Storage
		 * Your AWS secret access key
		 */
⋮----
export type CloudStorageDto = Omit<ICloudStorage, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Cluster.ts">
import mongoose, { Schema, Types } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { CloudProviderType } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { ICloudProvider } from "./CloudProvider";
⋮----
export interface ICluster extends IBase {
	/**
	 * Cluster name
	 */
	name?: string;
	/**
	 * Cluster slug
	 */
	slug?: string;
	/**
	 * Is cluster verified
	 */
	isVerified?: boolean;
	/**
	 * Is this a default cluster
	 */
	isDefault?: boolean;
	/**
	 * A cluster name on the cloud provider
	 * - **Applied for GKE & DOK only**
	 */
	shortName?: string;
	/**
	 * Cluster context name (to access via `kubectl context`)
	 */
	contextName?: string;
	/**
	 * Cloud provider of this cluster
	 */
	provider?: string | Types.ObjectId | ICloudProvider;
	/**
	 * Short name of the cloud provider
	 * @example "gcloud", "digitalocean", "custom"
	 */
	providerShortName?: CloudProviderType;
	/**
	 * Cloud zone of this cluster
	 */
	zone?: string;
	/**
	 * Cloud region of this cluster
	 */
	region?: string;
	/**
	 * [GOOGLE ONLY] Project ID of this cluster
	 *
	 * @remarks This is not a project ID of BUILD SERVER database
	 */
	projectID?: string;
	/**
	 * #### `REQUIRES`
	 * ---
	 * The PRIMARY domain of this cluster
	 */
	primaryDomain?: string;
	/**
	 * The PRIMARY IP ADDRESS of this cluster
	 */
	primaryIP?: string;
	/**
	 * Alternative domains or project's domains of this cluster
	 */
	domains?: string[];
	/**
	 * The KUBECONFIG data to access to this cluster
	 */
	kubeConfig?: string;
	/**
	 * Content of the Service Account credentials to access this cluster
	 */
	serviceAccount?: string;
	/**
	 * Content of the API ACCESS TOKEN to access this cluster
	 */
	apiAccessToken?: string;
}
⋮----
/**
	 * Cluster name
	 */
⋮----
/**
	 * Cluster slug
	 */
⋮----
/**
	 * Is cluster verified
	 */
⋮----
/**
	 * Is this a default cluster
	 */
⋮----
/**
	 * A cluster name on the cloud provider
	 * - **Applied for GKE & DOK only**
	 */
⋮----
/**
	 * Cluster context name (to access via `kubectl context`)
	 */
⋮----
/**
	 * Cloud provider of this cluster
	 */
⋮----
/**
	 * Short name of the cloud provider
	 * @example "gcloud", "digitalocean", "custom"
	 */
⋮----
/**
	 * Cloud zone of this cluster
	 */
⋮----
/**
	 * Cloud region of this cluster
	 */
⋮----
/**
	 * [GOOGLE ONLY] Project ID of this cluster
	 *
	 * @remarks This is not a project ID of BUILD SERVER database
	 */
⋮----
/**
	 * #### `REQUIRES`
	 * ---
	 * The PRIMARY domain of this cluster
	 */
⋮----
/**
	 * The PRIMARY IP ADDRESS of this cluster
	 */
⋮----
/**
	 * Alternative domains or project's domains of this cluster
	 */
⋮----
/**
	 * The KUBECONFIG data to access to this cluster
	 */
⋮----
/**
	 * Content of the Service Account credentials to access this cluster
	 */
⋮----
/**
	 * Content of the API ACCESS TOKEN to access this cluster
	 */
⋮----
export type ClusterDto = Omit<ICluster, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/ContainerRegistry.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { RegistryProviderType } from "@/interfaces/SystemTypes";
import { registryProviderList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface IContainerRegistry extends IBase {
	name?: string;
	slug?: string;
	isVerified?: boolean;
	/**
	 * Is this a default git provider
	 */
	isDefault?: boolean;

	/**
	 * The host (domain) of your container registry which you are using.
	 * @example
	 * - gcr.io
	 * - asia.gcr.io
	 * - azurecr.io
	 */
	host?: string;

	/**
	 * Organization name in Docker Registry, or Project ID in Google/DigitalOcean Container Registry.
	 */
	organization?: string;

	/**
	 * Base URL of the image, usually is the registry host URI combines with something else.
	 * - This will be used to combine with your project/app image path.
	 * @example
	 * asia.gcr.io/project-id-here
	 */
	imageBaseURL?: string;

	/**
	 * Provider's "shortName"
	 */
	provider?: RegistryProviderType;

	/**
	 * Content of the Service Account credentials ti access services on this cloud provider
	 * - Apply for: Google Cloud, AWS,...
	 * - For example: Kubernetes Clusters, Single Sign-On,...
	 */
	serviceAccount?: string;

	/**
	 * Content of the API access token to use services on this cloud provider
	 * - Apply for: Digital Ocean
	 */
	apiAccessToken?: string;

	/**
	 * `[For Docker Registry]` Docker registry server
	 * @default https://index.docker.io/v1/
	 */
	dockerServer?: string;

	/**
	 * `[For Docker Registry]` Docker email
	 */
	dockerEmail?: string;

	/**
	 * `[For Docker Registry]` Docker username
	 */
	dockerUsername?: string;

	/**
	 * `[For Docker Registry]` Docker password
	 */
	dockerPassword?: string;
	imagePullSecret?: {
		name?: string;
		value?: string;
	};
}
⋮----
/**
	 * Is this a default git provider
	 */
⋮----
/**
	 * The host (domain) of your container registry which you are using.
	 * @example
	 * - gcr.io
	 * - asia.gcr.io
	 * - azurecr.io
	 */
⋮----
/**
	 * Organization name in Docker Registry, or Project ID in Google/DigitalOcean Container Registry.
	 */
⋮----
/**
	 * Base URL of the image, usually is the registry host URI combines with something else.
	 * - This will be used to combine with your project/app image path.
	 * @example
	 * asia.gcr.io/project-id-here
	 */
⋮----
/**
	 * Provider's "shortName"
	 */
⋮----
/**
	 * Content of the Service Account credentials ti access services on this cloud provider
	 * - Apply for: Google Cloud, AWS,...
	 * - For example: Kubernetes Clusters, Single Sign-On,...
	 */
⋮----
/**
	 * Content of the API access token to use services on this cloud provider
	 * - Apply for: Digital Ocean
	 */
⋮----
/**
	 * `[For Docker Registry]` Docker registry server
	 * @default https://index.docker.io/v1/
	 */
⋮----
/**
	 * `[For Docker Registry]` Docker email
	 */
⋮----
/**
	 * `[For Docker Registry]` Docker username
	 */
⋮----
/**
	 * `[For Docker Registry]` Docker password
	 */
⋮----
export type ContainerRegistryDto = Omit<IContainerRegistry, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Cronjob.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { CronjobStatus, RequestMethodType } from "@/interfaces/SystemTypes";
import { cronjobStatusList, requestMethodList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export type WeekDay = (typeof weekDays)[number];
⋮----
export type CronjobRepeatUnit = (typeof cronjobRepeatUnitList)[number];
⋮----
export type CronjobRequest = {
	url?: string;
	method?: RequestMethodType;
	params?: Record<string, string>;
	headers?: Record<string, string>;
	body?: any;
};
⋮----
export type CronjobRepeat = {
	range?: number;
	unit?: CronjobRepeatUnit;
};
⋮----
export type CronjonRepeatCondition = {
	/**
	 * Array of hours from 0 to 23
	 */
	atHours?: number[];
	/**
	 * Array of minutes from 0 to 59
	 */
	atMins?: number[];
	/**
	 * Array of weekdays
	 */
	atWeekDays?: WeekDay[];
	/**
	 * Array of days from 1 to 31
	 */
	atDays?: number[];
	/**
	 * Array of days from 0 to 11
	 */
	atMonths?: number[];
};
⋮----
/**
	 * Array of hours from 0 to 23
	 */
⋮----
/**
	 * Array of minutes from 0 to 59
	 */
⋮----
/**
	 * Array of weekdays
	 */
⋮----
/**
	 * Array of days from 1 to 31
	 */
⋮----
/**
	 * Array of days from 0 to 11
	 */
⋮----
export type CronjobHistory = {
	runAt: Date;
	status: CronjobStatus;
	responseStatus: string | number;
	message: string;
};
⋮----
export interface ICronjob extends IBase {
	name?: string;
	// api request
	url?: string;
	method?: RequestMethodType;
	params?: Record<string, string>;
	headers?: Record<string, string>;
	body?: any;
	// schedule
	nextRunAt?: Date;
	endDate?: Date;
	repeat?: CronjobRepeat;
	repeatCondition?: CronjonRepeatCondition;
	// history
	history?: CronjobHistory[];
}
⋮----
// api request
⋮----
// schedule
⋮----
// history
⋮----
export type CronjobDto = Omit<ICronjob, keyof HiddenBodyKeys>;
⋮----
// api request
⋮----
// schedule
</file>

<file path="src/entities/Framework.ts">
import type { Types } from "mongoose";
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { GitProviderType } from "@/interfaces/SystemTypes";
import { availableGitProviders } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IGitProvider } from "./GitProvider";
⋮----
export type FrameworkDto = Omit<IFramework, keyof HiddenBodyKeys>;
⋮----
/**
 * An interface that extends IBase and describes the properties of a framework.
 *
 * @interface IFramework
 * @extends {IBase}
 */
export interface IFramework extends IBase {
	name?: string;
	host?: string;
	/**
	 * Type of the Git Provider
	 */
	gitProvider?: GitProviderType;
	/**
	 * Git repository access privacy
	 * @deprecated
	 */
	isPrivate?: boolean;
	/**
	 * ID of the Git Provider
	 * @remarks This can be populated to {GitProvider} data
	 */
	git?: Types.ObjectId | IGitProvider;

	/**
	 * The repository URL of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
	repoURL?: string;

	/**
	 * The SSH URL of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
	repoSSH?: string;

	/**
	 * The main branch of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
	mainBranch?: string;

	/**
	 * The number of downloads for the framework.
	 *
	 * @type {number}
	 * @memberof IFramework
	 */
	downloads?: number;
}
⋮----
/**
	 * Type of the Git Provider
	 */
⋮----
/**
	 * Git repository access privacy
	 * @deprecated
	 */
⋮----
/**
	 * ID of the Git Provider
	 * @remarks This can be populated to {GitProvider} data
	 */
⋮----
/**
	 * The repository URL of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
⋮----
/**
	 * The SSH URL of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
⋮----
/**
	 * The main branch of the framework.
	 *
	 * @type {string}
	 * @memberof IFramework
	 */
⋮----
/**
	 * The number of downloads for the framework.
	 *
	 * @type {number}
	 * @memberof IFramework
	 */
</file>

<file path="src/entities/GitProvider.ts">
import { model, Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { GitProviderType } from "@/interfaces/SystemTypes";
import { availableGitProviders } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export type BitbucketAuthFlow = (typeof bitbucketAuthFlow)[number];
⋮----
export type GithubAuthFlow = (typeof githubAuthFlow)[number];
⋮----
export interface BitbucketOAuthOptions {
	/**
	 * The CONSUMER_KEY for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	consumer_key?: string;

	/**
	 * The CONSUMER_SECRET for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	consumer_secret?: string;

	/**
	 * Your Bitbucket account's username
	 */
	username?: string;

	/**
	 * The APP_PASSWORD for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	app_password?: string;

	/**
	 * `TRUE` if the REST API calling was successfully.
	 */
	verified?: boolean;
}
⋮----
/**
	 * The CONSUMER_KEY for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * The CONSUMER_SECRET for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Your Bitbucket account's username
	 */
⋮----
/**
	 * The APP_PASSWORD for Bitbucket authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * `TRUE` if the REST API calling was successfully.
	 */
⋮----
export interface GithubOAuthOptions {
	/**
	 * The app's CLIENT_ID for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	client_id?: string;

	/**
	 * The app's CLIENT_SECRET for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @link https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/about-authentication-with-a-github-app
	 * @type {string}
	 * @memberof IGitProvider
	 */
	client_secret?: string;

	/**
	 * Your Github account's username
	 */
	username?: string;

	/**
	 * The PERSONAL ACCESS TOKEN for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @link https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
	 * @type {string}
	 * @memberof IGitProvider
	 */
	personal_access_token?: string;

	/**
	 * `TRUE` if the REST API calling was successfully.
	 */
	verified?: boolean;
}
⋮----
/**
	 * The app's CLIENT_ID for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * The app's CLIENT_SECRET for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @link https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/about-authentication-with-a-github-app
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Your Github account's username
	 */
⋮----
/**
	 * The PERSONAL ACCESS TOKEN for Github authentication:
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @link https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * `TRUE` if the REST API calling was successfully.
	 */
⋮----
/**
 * An interface that extends IBase and describes the properties of a Git provider.
 *
 * @interface IGitProvider
 * @extends {IBase}
 */
export interface IGitProvider extends IBase {
	/**
	 * The name of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	name?: string;

	/**
	 * Is this a default git provider
	 */
	isDefault?: boolean;

	/**
	 * The host of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	host?: string;

	/**
	 * The Git workspace (ORG) of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	org?: string;

	/**
	 * Alias of `org` field, will be remove soon.
	 * @deprecated
	 */
	gitWorkspace?: string;

	/**
	 * The repository of the Git provider.
	 *
	 * @type {{
	 *     url?: string;
	 *     sshPrefix?: string;
	 *   }}
	 * @memberof IGitProvider
	 */
	repo?: {
		/**
		 * The URL of the repository of the Git provider.
		 *
		 * @type {string}
		 */
		url?: string;

		/**
		 * The SSH prefix of the repository of the Git provider.
		 *
		 * @type {string}
		 */
		sshPrefix?: string;
	};

	/**
	 * - `TRUE` if the git provider which connected by "Administrator"
	 * - `FALSE` if it was connected by workspace's members and won't be displayed on the dashboard.
	 */
	isOrg?: boolean;

	/**
	 * The type of the Git provider.
	 *
	 * @type {GitProviderType}
	 * @memberof IGitProvider
	 */
	type?: GitProviderType;

	/**
	 * Bitbucket OAuth Information
	 */
	bitbucket_oauth?: BitbucketOAuthOptions;

	/**
	 * Github OAuth Information
	 */
	github_oauth?: GithubOAuthOptions;

	/**
	 * Authorization header method
	 */
	method?: "bearer" | "basic";

	/**
	 * The API access token of the Git provider,
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	access_token?: string;

	/**
	 * The API refresh token of the Git provider,
	 * to obtain new access token if it's expired
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
	refresh_token?: string;

	/**
	 * Verify status, `true` is successfully connected with the git workspace REST API.
	 *
	 * @type {boolean}
	 * @memberof IGitProvider
	 */
	verified?: boolean;
}
⋮----
/**
	 * The name of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Is this a default git provider
	 */
⋮----
/**
	 * The host of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * The Git workspace (ORG) of the Git provider.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Alias of `org` field, will be remove soon.
	 * @deprecated
	 */
⋮----
/**
	 * The repository of the Git provider.
	 *
	 * @type {{
	 *     url?: string;
	 *     sshPrefix?: string;
	 *   }}
	 * @memberof IGitProvider
	 */
⋮----
/**
		 * The URL of the repository of the Git provider.
		 *
		 * @type {string}
		 */
⋮----
/**
		 * The SSH prefix of the repository of the Git provider.
		 *
		 * @type {string}
		 */
⋮----
/**
	 * - `TRUE` if the git provider which connected by "Administrator"
	 * - `FALSE` if it was connected by workspace's members and won't be displayed on the dashboard.
	 */
⋮----
/**
	 * The type of the Git provider.
	 *
	 * @type {GitProviderType}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Bitbucket OAuth Information
	 */
⋮----
/**
	 * Github OAuth Information
	 */
⋮----
/**
	 * Authorization header method
	 */
⋮----
/**
	 * The API access token of the Git provider,
	 * to create new repo, commit, pull & push changes to the repositories.
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * The API refresh token of the Git provider,
	 * to obtain new access token if it's expired
	 *
	 * @type {string}
	 * @memberof IGitProvider
	 */
⋮----
/**
	 * Verify status, `true` is successfully connected with the git workspace REST API.
	 *
	 * @type {boolean}
	 * @memberof IGitProvider
	 */
⋮----
export type GitProviderDto = Omit<IGitProvider, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/index.ts">

</file>

<file path="src/entities/Media.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export type MediaMime = (typeof mediaMimes)[number];
⋮----
export interface IMedia extends IBase {
	name: string;
	mime: MediaMime;
	url: string;
	path?: string;
}
export type MediaCreateDto = Omit<IMedia, keyof HiddenBodyKeys>;
export type MediaUpdateDto = Partial<MediaCreateDto>;
</file>

<file path="src/entities/Notification.ts">
import type { ObjectId } from "mongoose";
import { model, Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { AppStatus, BackupStatus, BuildStatus, DeployStatus, SystemEvent, WebhookChannel } from "@/interfaces/SystemTypes";
import { systemEventList, webhookChannelList, webhookEventStatusList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IUser } from "./User";
import type { IDataReferences, IWebhook } from "./Webhook";
⋮----
export /**
 * An interface that extends IBase and describes the properties of an notification.
 *
 * @interface INotification
 * @extends {IBase}
 */
interface INotification extends IBase {
	/**
	 * The name of the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
	name?: string;

	/**
	 * A message associated with the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
	message?: string;

	/**
	 * A user ID who sent the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
	from?: string | ObjectId | IUser;

	/**
	 * A webhook associated with the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
	webhook?: string | ObjectId | IWebhook;

	/**
	 * The system event that triggered the notification
	 */
	events?: SystemEvent[];

	/**
	 * The status of the event (e.g., start, in_progress, failed, success, cancelled, deploying, sleep, awake, down, up)
	 */
	status?: BuildStatus & DeployStatus & BackupStatus & AppStatus;

	/**
	 * A list of {IWebhook} channels.
	 */
	channels?: WebhookChannel[];

	/**
	 * Callback URL of a notification
	 */
	url?: string;

	/**
	 * The date the user read or mark a notitication as read
	 */
	readAt?: Date;

	/**
	 * Referenced data of a notification
	 */
	references?: IDataReferences;
}
⋮----
/**
	 * The name of the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
⋮----
/**
	 * A message associated with the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
⋮----
/**
	 * A user ID who sent the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
⋮----
/**
	 * A webhook associated with the notification.
	 *
	 * @type {string}
	 * @memberof INotification
	 */
⋮----
/**
	 * The system event that triggered the notification
	 */
⋮----
/**
	 * The status of the event (e.g., start, in_progress, failed, success, cancelled, deploying, sleep, awake, down, up)
	 */
⋮----
/**
	 * A list of {IWebhook} channels.
	 */
⋮----
/**
	 * Callback URL of a notification
	 */
⋮----
/**
	 * The date the user read or mark a notitication as read
	 */
⋮----
/**
	 * Referenced data of a notification
	 */
⋮----
export type NotificationDto = Omit<INotification, keyof HiddenBodyKeys>;
⋮----
// webhook
⋮----
// timing
</file>

<file path="src/entities/Project.ts">
import type { Types } from "mongoose";
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IApp } from "./App";
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IBuild } from "./Build";
import type { IUser } from "./User";
import type { IWorkspace } from "./Workspace";
⋮----
export interface IProject extends IBase {
	name?: string;
	isDefault?: boolean;
	image?: string;
	slug?: string;
	apiKey?: string;
	clientId?: string;
	clientSecret?: string;
	createdBy?: string;
	lastUpdatedBy?: string;
	/**
	 * Latest build tag of an application in this project
	 */
	latestBuildTag?: Types.ObjectId | string;
	/**
	 * Latest build ID or DOCUMENT
	 */
	latestBuild?: Types.ObjectId | IBuild | string;
	/**
	 * List of App slugs
	 *
	 * @remarks This can be populated to {App} data
	 */
	appSlugs?: string[];

	/**
	 * List of App IDs
	 *
	 * @remarks This can be populated to {App} data
	 */
	apps?: (Types.ObjectId | IApp | string)[];
	owner?: Types.ObjectId | IUser | string;
	workspace?: Types.ObjectId | IWorkspace | string;

	/**
	 * Date when the project was archived (take down all deploy environments)
	 */
	archivedAt?: Date;
}
⋮----
/**
	 * Latest build tag of an application in this project
	 */
⋮----
/**
	 * Latest build ID or DOCUMENT
	 */
⋮----
/**
	 * List of App slugs
	 *
	 * @remarks This can be populated to {App} data
	 */
⋮----
/**
	 * List of App IDs
	 *
	 * @remarks This can be populated to {App} data
	 */
⋮----
/**
	 * Date when the project was archived (take down all deploy environments)
	 */
⋮----
export type ProjectDto = Omit<IProject, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Release.ts">
import type { Types } from "mongoose";
import { model, Schema } from "mongoose";
⋮----
import type { AppConfig, HiddenBodyKeys } from "@/interfaces";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { BuildStatus, DeployStatus } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { IApp, IBuild } from "./index";
⋮----
export interface IRelease extends IBase {
	name?: string;
	image?: string;
	buildTag?: string;
	buildNumber?: number;
	cliVersion?: string;
	appVersion?: string;
	/**
	 * Targeted environment.
	 * @example dev, prod, staging, canary,...
	 */
	env?: string;
	/**
	 * Environment variables
	 */
	envVars?: KubeEnvironmentVariable[];
	/**
	 * ONLY PRE-RELEASE - Environment variables
	 */
	prereleaseEnvironment?: any[] | string;
	/**
	 * @deprecated
	 * Old "diginext.json"
	 */
	diginext?: any;
	appConfig?: AppConfig;
	namespace?: string;
	/**
	 * @deprecated
	 * Use `deploymentYaml` instead.
	 */
	prodYaml?: string;
	preYaml?: string;
	prereleaseUrl?: string;
	productionUrl?: string;
	deploymentYaml?: string;
	endpoint?: string;
	createdBy?: string;
	branch?: string;
	provider?: string;
	/**
	 * Cluster's slug
	 */
	cluster?: string;
	projectSlug?: string;
	appSlug?: string;
	providerProjectId?: string;
	buildStatus?: BuildStatus;
	status?: DeployStatus;
	active?: boolean;
	/**
	 * Release revision message
	 */
	message?: string;
	/**
	 * Deploy start time
	 */
	startTime?: Date;
	/**
	 * Deploy end time
	 */
	endTime?: Date;
	/**
	 * Deploy duration in miliseconds
	 */
	duration?: number;
	/**
	 * URL of the webpage screenshot
	 */
	screenshot?: string;
	/**
	 * ID of the build
	 *
	 * @remarks This can be populated to {IBuild} data
	 */
	build?: Types.ObjectId | IBuild | string;
	/**
	 * ID of the app
	 *
	 * @remarks This can be populated to {IApp} data
	 */
	app?: Types.ObjectId | IApp | string;
}
⋮----
/**
	 * Targeted environment.
	 * @example dev, prod, staging, canary,...
	 */
⋮----
/**
	 * Environment variables
	 */
⋮----
/**
	 * ONLY PRE-RELEASE - Environment variables
	 */
⋮----
/**
	 * @deprecated
	 * Old "diginext.json"
	 */
⋮----
/**
	 * @deprecated
	 * Use `deploymentYaml` instead.
	 */
⋮----
/**
	 * Cluster's slug
	 */
⋮----
/**
	 * Release revision message
	 */
⋮----
/**
	 * Deploy start time
	 */
⋮----
/**
	 * Deploy end time
	 */
⋮----
/**
	 * Deploy duration in miliseconds
	 */
⋮----
/**
	 * URL of the webpage screenshot
	 */
⋮----
/**
	 * ID of the build
	 *
	 * @remarks This can be populated to {IBuild} data
	 */
⋮----
/**
	 * ID of the app
	 *
	 * @remarks This can be populated to {IApp} data
	 */
⋮----
export type ReleaseDto = Omit<IRelease, keyof HiddenBodyKeys>;
⋮----
/**
		 * Deployment YAML
		 */
⋮----
/**
		 * Release endpoint URL (development/.../production URL)
		 */
⋮----
/**
		 * @deprecated
		 * Short name of the cloud provider of the cluster to deploy to.
		 */
⋮----
/**
		 * Short name of the targeted cluster to deploy to.
		 */
⋮----
/**
		 *
		 */
</file>

<file path="src/entities/Role.ts">
import { model, Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import { type IRoutePermission, type IRouteScope, routePermissionList, routeScopeList } from "@/interfaces/IPermission";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface RoleRoute {
	/**
	 * Route path
	 * @example /api/v1/healthz
	 */
	path: string;
	/**
	 * @default ["full"]
	 */
	permissions: IRoutePermission[];
	/**
	 * (TBC)
	 * @default all
	 * @example all
	 */
	scope?: IRouteScope[];
}
⋮----
/**
	 * Route path
	 * @example /api/v1/healthz
	 */
⋮----
/**
	 * @default ["full"]
	 */
⋮----
/**
	 * (TBC)
	 * @default all
	 * @example all
	 */
⋮----
export interface IRole extends IBase {
	name: string;
	routes: RoleRoute[];
	maskedFields?: string[];
	/**
	 * One of:
	 * - undefined | "custom": custom role
	 * - "admin"		: 	default super admin role
	 * - "moderator"	: 	default moderator role
	 * - "member"		: 	default member role
	 * - "guest"		: 	default guest role
	 */
	type?: string;
}
⋮----
/**
	 * One of:
	 * - undefined | "custom": custom role
	 * - "admin"		: 	default super admin role
	 * - "moderator"	: 	default moderator role
	 * - "member"		: 	default member role
	 * - "guest"		: 	default guest role
	 */
⋮----
export type RoleDto = Omit<IRole, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Route.ts">
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { RequestMethodType } from "@/interfaces/SystemTypes";
import { requestMethodList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface IRoute extends IBase {
	name?: string;
	path?: string;
	methods?: RequestMethodType[];
}
export type RouteDto = Omit<IRoute, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/ServiceAccount.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import { baseSchemaDefinitions } from "./Base";
import type { IUser } from "./User";
⋮----
export interface IServiceAccount extends IUser {
	type?: string;
}
export type ServiceAccountDto = Omit<IServiceAccount, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/SystemLog.ts">
import { model, Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { LogType } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export /**
 * An interface that extends IBase and describes the properties of an activity.
 *
 * @interface ISystemLog
 * @extends {IBase}
 */
interface ISystemLog extends IBase {
	/**
	 * The name of the log.
	 *
	 * @type {string}
	 * @memberof ISystemLog
	 */
	name?: string;

	/**
	 * The type of the log.
	 *
	 * @type {LogType}
	 * @memberof ISystemLog
	 */
	type?: LogType;

	/**
	 * A message associated with the log.
	 *
	 * @type {string}
	 * @memberof ISystemLog
	 */
	message?: string;

	/**
	 * The prioritized level of the log:
	 * - `1` -> DEBUG: diagnostic information, intended debug message.
	 * - `2` -> WARN: detected an unexpected application problem, might or might not harm the application in the future.
	 * - `3` -> ERROR: failure of something important in your application
	 * - `4` -> FATAL: a serious problem or corruption is happening.
	 *
	 * @type {1 | 2 | 3 | 4}
	 * @memberof ISystemLog
	 */
	level?: 1 | 2 | 3 | 4;
}
⋮----
/**
	 * The name of the log.
	 *
	 * @type {string}
	 * @memberof ISystemLog
	 */
⋮----
/**
	 * The type of the log.
	 *
	 * @type {LogType}
	 * @memberof ISystemLog
	 */
⋮----
/**
	 * A message associated with the log.
	 *
	 * @type {string}
	 * @memberof ISystemLog
	 */
⋮----
/**
	 * The prioritized level of the log:
	 * - `1` -> DEBUG: diagnostic information, intended debug message.
	 * - `2` -> WARN: detected an unexpected application problem, might or might not harm the application in the future.
	 * - `3` -> ERROR: failure of something important in your application
	 * - `4` -> FATAL: a serious problem or corruption is happening.
	 *
	 * @type {1 | 2 | 3 | 4}
	 * @memberof ISystemLog
	 */
⋮----
export type SystemLogDto = Omit<ISystemLog, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Team.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
// import type { User } from "./User";
// import type { Workspace } from "./Workspace";
⋮----
export interface ITeam extends IBase {
	name: string;
	image?: string;
}
export type TeamDto = Omit<ITeam, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/User.ts">
import type { Types } from "mongoose";
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { WebhookChannel } from "@/interfaces/SystemTypes";
⋮----
import type { ICloudDatabase, ICloudDatabaseBackup, IContainerRegistry, IFramework, IGitProvider } from ".";
import type { IApp } from "./App";
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { ICluster } from "./Cluster";
import type { IProject } from "./Project";
import type { IRole } from "./Role";
import type { ITeam } from "./Team";
import type { IWorkspace } from "./Workspace";
⋮----
export interface ProviderInfo {
	name: string;
	user_id?: string;
	access_token?: string;
}
⋮----
export interface AccessTokenInfo {
	access_token: string;
	refresh_token?: string;
	expiredTimestamp: number;
	expiredDate: Date;
	expiredDateGTM7: string;
}
⋮----
/**
 * ### User access permission settings:
 * - `undefined`: all
 * - `[]`: none
 * - `[ ...project_id... ]`: some
 */
export type UserAccessPermissions = {
	projects?: (IProject | Types.ObjectId | string)[];
	apps?: (IApp | Types.ObjectId | string)[];
	clusters?: (ICluster | Types.ObjectId | string)[];
	databases?: (ICloudDatabase | Types.ObjectId | string)[];
	database_backups?: (ICloudDatabaseBackup | Types.ObjectId | string)[];
	gits?: (IGitProvider | Types.ObjectId | string)[];
	frameworks?: (IFramework | Types.ObjectId | string)[];
	container_registries?: (IContainerRegistry | Types.ObjectId | string)[];
};
⋮----
export type UserDto = Omit<IUser, keyof HiddenBodyKeys>;
⋮----
// export type IUser = typeof User;
⋮----
export interface IUser extends IBase {
	name: string;
	/**
	 * Unique username of a user
	 * This equavilent with "slug"
	 */
	username?: string;
	type?: string;
	/**
	 * User email address
	 */
	email: string;
	/**
	 * Is this user's email or phone verified?
	 */
	verified?: boolean;
	/**
	 * User profile picture URL
	 */
	image?: string;
	/**
	 * List of Cloud Providers which this user can access to
	 */
	providers?: ProviderInfo[];
	/**
	 * User password (hashed)
	 */
	password?: string;
	/**
	 * User ID in DXUP.DEV
	 */
	dxUserId?: string;
	/**
	 * User token
	 */
	token?: AccessTokenInfo;
	roles?: (IRole | Types.ObjectId | string)[];
	activeRole?: IRole | Types.ObjectId | string;
	teams?: (ITeam | Types.ObjectId | string)[];
	workspaces?: (IWorkspace | Types.ObjectId | string)[];
	activeWorkspace?: IWorkspace | Types.ObjectId | string;
	/**
	 * User access permission settings
	 */
	allowAccess?: UserAccessPermissions;
	/**
	 * User settings
	 */
	settings?: {
		notification: {
			workspace?: WebhookChannel[];
			project?: WebhookChannel[];
			app?: WebhookChannel[];
			build?: WebhookChannel[];
			deploy?: WebhookChannel[];
		};
	};
}
⋮----
/**
	 * Unique username of a user
	 * This equavilent with "slug"
	 */
⋮----
/**
	 * User email address
	 */
⋮----
/**
	 * Is this user's email or phone verified?
	 */
⋮----
/**
	 * User profile picture URL
	 */
⋮----
/**
	 * List of Cloud Providers which this user can access to
	 */
⋮----
/**
	 * User password (hashed)
	 */
⋮----
/**
	 * User ID in DXUP.DEV
	 */
⋮----
/**
	 * User token
	 */
⋮----
/**
	 * User access permission settings
	 */
⋮----
/**
	 * User settings
	 */
</file>

<file path="src/entities/UserToken.ts">
import type { ObjectId } from "mongoose";
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
// import type { User } from "./User";
// import type { Workspace } from "./Workspace";
⋮----
export interface IUserToken extends IBase {
	userId: string | ObjectId;
	token: string;
}
export type UserTokenDto = Omit<IUserToken, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Webhook.ts">
import type { ObjectId } from "mongoose";
import { model, Schema } from "mongoose";
⋮----
import type { SystemEvent, WebhookChannel, WebhookEventStatus } from "@/interfaces/SystemTypes";
import { systemEventList, webhookChannelList, webhookEventStatusList } from "@/interfaces/SystemTypes";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
import type { ITeam } from "./Team";
import type { IUser } from "./User";
⋮----
/**
 * --------- DATA REFERENCES ---------
 */
export interface IDataReferences extends Pick<IBase, "project" | "workspace" | "owner"> {
	/**
	 * Refferenced build
	 */
	build?: string | ObjectId;
	/**
	 * Refferenced release
	 */
	release?: string | ObjectId;
	/**
	 * Refferenced app
	 */
	app?: string | ObjectId;
	/**
	 * Refferenced database
	 */
	database?: string | ObjectId;
	/**
	 * Refferenced database backup
	 */
	databaseBackup?: string | ObjectId;
	/**
	 * Refferenced git provider
	 */
	gitProvider?: string | ObjectId;
	/**
	 * Refferenced cluster
	 */
	cluster?: string | ObjectId;
	/**
	 * Refferenced container registry
	 */
	registry?: string | ObjectId;
	/**
	 * Refferenced framework
	 */
	framework?: string | ObjectId;
	/**
	 * Refferenced team
	 */
	team?: string | ObjectId;
}
⋮----
/**
	 * Refferenced build
	 */
⋮----
/**
	 * Refferenced release
	 */
⋮----
/**
	 * Refferenced app
	 */
⋮----
/**
	 * Refferenced database
	 */
⋮----
/**
	 * Refferenced database backup
	 */
⋮----
/**
	 * Refferenced git provider
	 */
⋮----
/**
	 * Refferenced cluster
	 */
⋮----
/**
	 * Refferenced container registry
	 */
⋮----
/**
	 * Refferenced framework
	 */
⋮----
/**
	 * Refferenced team
	 */
⋮----
/**
 * An interface that extends IBase and describes the properties of an webhook.
 *
 * @interface IWebhook
 * @extends {IBase}
 */
export interface IWebhook extends IBase, IDataReferences {
	/**
	 * The name of the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
	name?: string;

	/**
	 * A event status associated with the webhook.
	 *
	 * @type {WebhookEventStatus}
	 * @memberof IWebhook
	 */
	status?: WebhookEventStatus;

	/**
	 * A list of {IUser} that subscribed to this webhook.
	 */
	consumers?: string[] | ObjectId[] | IUser[];

	/**
	 * A list of {ITeam} that subscribed to this webhook.
	 */
	consumerGroups?: string[] | ObjectId[] | ITeam[];

	/**
	 * A list of {IWebhook} events.
	 */
	events?: SystemEvent[];

	/**
	 * A list of {IWebhook} channels.
	 */
	channels?: WebhookChannel[];

	/**
	 * The callback URL of the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
	url?: string;

	/**
	 * The HTTP method used for the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
	method?: string;

	/**
	 * The request headers of a callback URL.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
	headers?: any;

	/**
	 * The request body of a callback URL.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
	body?: any;

	/**
	 * The HTTP status code (200, 403, 503,...) returned from the webhook.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
	httpStatus?: any;

	/**
	 * The response status code (0 or 1) returned from the webhook.
	 *
	 * @type {number}
	 * @memberof IWebhook
	 */
	responseStatus?: number;
}
⋮----
/**
	 * The name of the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * A event status associated with the webhook.
	 *
	 * @type {WebhookEventStatus}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * A list of {IUser} that subscribed to this webhook.
	 */
⋮----
/**
	 * A list of {ITeam} that subscribed to this webhook.
	 */
⋮----
/**
	 * A list of {IWebhook} events.
	 */
⋮----
/**
	 * A list of {IWebhook} channels.
	 */
⋮----
/**
	 * The callback URL of the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * The HTTP method used for the webhook.
	 *
	 * @type {string}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * The request headers of a callback URL.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * The request body of a callback URL.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * The HTTP status code (200, 403, 503,...) returned from the webhook.
	 *
	 * @type {*}
	 * @memberof IWebhook
	 */
⋮----
/**
	 * The response status code (0 or 1) returned from the webhook.
	 *
	 * @type {number}
	 * @memberof IWebhook
	 */
⋮----
// consumers
⋮----
// callback
⋮----
// references
</file>

<file path="src/interfaces/bitbucket/BitbucketOrg.ts">
export interface BitbucketOrg {
	uuid: string;
	links: {
		owners: {
			href: string;
		};
		self: {
			href: string;
		};
		repositories: {
			href: string;
		};
		snippets: {
			href: string;
		};
		html: {
			href: string;
		};
		avatar: {
			href: string;
		};
		members: {
			href: string;
		};
		projects: {
			href: string;
		};
	};
	created_on: string;
	type: string;
	slug: string;
	is_private: boolean;
	name: string;
}
</file>

<file path="src/interfaces/bitbucket/BitbucketProject.ts">
export interface BitbucketProject {
	type: string;
	owner: {
		display_name: string;
		links: {
			self: {
				href: string;
			};
			avatar: {
				href: string;
			};
			html: {
				href: string;
			};
		};
		type: string;
		uuid: string;
		username: string;
	};
	workspace: {
		type: string;
		uuid: string;
		name: string;
		slug: string;
		links: {
			avatar: {
				href: string;
			};
			html: {
				href: string;
			};
			self: {
				href: string;
			};
		};
	};
	key: string;
	uuid: string;
	is_private: boolean;
	name: string;
	description: string;
	links: {
		self: {
			href: string;
		};
		html: {
			href: string;
		};
		repositories: {
			href: string;
		};
		avatar: {
			href: string;
		};
	};
	created_on: string;
	updated_on: string;
	has_publicly_visible_repos: boolean;
}
</file>

<file path="src/interfaces/bitbucket/BitbucketRepoBranch.ts">
interface AuthorLink {
	href: string;
}
⋮----
interface Author {
	type: string;
	raw: string;
	user: {
		display_name: string;
		links: {
			self: AuthorLink;
			avatar: AuthorLink;
			html: AuthorLink;
		};
		type: string;
		uuid: string;
		account_id: string;
		nickname: string;
	};
}
⋮----
interface CommitLink {
	href: string;
}
⋮----
interface Commit {
	type: string;
	hash: string;
	date: string;
	author: Author;
	message: string;
	links: {
		self: CommitLink;
		html: CommitLink;
		diff: CommitLink;
		approve: CommitLink;
		comments: CommitLink;
		statuses: CommitLink;
	};
	parents: {
		type: string;
		hash: string;
		links: {
			self: CommitLink;
			html: CommitLink;
		};
	}[];
}
⋮----
interface RepositoryLink {
	href: string;
}
⋮----
interface Repository {
	type: string;
	full_name: string;
	links: {
		self: RepositoryLink;
		html: RepositoryLink;
		avatar: RepositoryLink;
	};
	name: string;
	uuid: string;
}
⋮----
interface BranchLink {
	href: string;
}
⋮----
interface Branch {
	self: BranchLink;
	commits: BranchLink;
	html: BranchLink;
}
⋮----
interface MergeRequest {
	name: string;
	target: {
		type: string;
		hash: string;
		date: string;
		author: Author;
		message: string;
		links: {
			self: CommitLink;
			html: CommitLink;
			diff: CommitLink;
			approve: CommitLink;
			comments: CommitLink;
			statuses: CommitLink;
		};
		parents: {
			type: string;
			hash: string;
			links: {
				self: CommitLink;
				html: CommitLink;
			};
		}[];
		repository: Repository;
	};
	links: {
		self: BranchLink;
		commits: BranchLink;
		html: BranchLink;
	};
	type: string;
	merge_strategies: string[];
	default_merge_strategy: string;
}
⋮----
export interface BitbucketRepoBranch {
	name: string;
	target: Commit;
	links: Branch;
	type: string;
	merge_strategies: string[];
	default_merge_strategy: string;
}
</file>

<file path="src/interfaces/bitbucket/BitbucketRepository.ts">
export interface BitbucketRepository {
	type: string;
	full_name: string;
	links: {
		self: {
			href: string;
		};
		html: {
			href: string;
		};
		avatar: {
			href: string;
		};
		pullrequests: {
			href: string;
		};
		commits: {
			href: string;
		};
		forks: {
			href: string;
		};
		watchers: {
			href: string;
		};
		branches: {
			href: string;
		};
		tags: {
			href: string;
		};
		downloads: {
			href: string;
		};
		source: {
			href: string;
		};
		clone: {
			name: string;
			href: string;
		}[];
		hooks: {
			href: string;
		};
	};
	name: string;
	slug: string;
	description: string;
	scm: string;
	website: string;
	owner: {
		display_name: string;
		links: {
			self: {
				href: string;
			};
			avatar: {
				href: string;
			};
			html: {
				href: string;
			};
		};
		type: string;
		uuid: string;
		username: string;
	};
	workspace: {
		type: string;
		uuid: string;
		name: string;
		slug: string;
		links: {
			avatar: {
				href: string;
			};
			html: {
				href: string;
			};
			self: {
				href: string;
			};
		};
	};
	is_private: boolean;
	project: {
		type: string;
		key: string;
		uuid: string;
		name: string;
		links: {
			self: {
				href: string;
			};
			html: {
				href: string;
			};
			avatar: {
				href: string;
			};
		};
	};
	fork_policy: string;
	created_on: string;
	updated_on: string;
	size: number;
	language: string;
	has_issues: boolean;
	has_wiki: false;
	uuid: string;
	mainbranch: {
		name: string;
		type: string;
	};
	override_settings: {
		default_merge_strategy: boolean;
		branching_model: boolean;
	};
}
</file>

<file path="src/interfaces/bitbucket/BitbucketUser.ts">
export interface BitbucketUser {
	display_name: string;
	links: {
		self: {
			href: string;
		};
		avatar: {
			href: string;
		};
		repositories: {
			href: string;
		};
		snippets: {
			href: string;
		};
		html: {
			href: string;
		};
		hooks: {
			href: string;
		};
	};
	created_on: string;
	type: string;
	uuid: string;
	has_2fa_enabled: null;
	username: string;
	is_staff: boolean;
	account_id: string;
	nickname: string;
	account_status: string;
	location: string;
}
</file>

<file path="src/interfaces/bitbucket/index.ts">

</file>

<file path="src/interfaces/github/GithubOrg.ts">
export interface GitHubOrg {
	login: string;
	id: number;
	node_id: string;
	url: string;
	repos_url: string;
	events_url: string;
	hooks_url: string;
	issues_url: string;
	members_url: string;
	public_members_url: string;
	avatar_url: string;
	description: string;
}
</file>

<file path="src/interfaces/github/GithubRepoBranch.ts">
interface Commit {
	sha: string;
	url: string;
}
⋮----
interface Protection {
	required_status_checks: {
		enforcement_level: string;
		contexts: string[];
	};
}
⋮----
export interface GithubRepoBranch {
	name: string;
	commit: Commit;
	protected: boolean;
	protection: Protection;
	protection_url: string;
}
</file>

<file path="src/interfaces/github/GithubRepository.ts">
export interface GithubRepository {
	id: number;
	name: string;
	full_name: string;
	description: string;
	private: boolean;
	fork: boolean;
	html_url: string;
	git_url: string;
	ssh_url: string;
	owner: {
		login: string;
		id: number;
		url: string;
		type: string;
	};
	created_at: string;
	updated_at: string;
}
</file>

<file path="src/interfaces/github/GithubUser.ts">
export interface GithubUser {
	login: string;
	id: number;
	node_id: string;
	avatar_url: string;
	gravatar_id: string;
	url: string;
	html_url: string;
	followers_url: string;
	following_url: string;
	gists_url: string;
	starred_url: string;
	subscriptions_url: string;
	organizations_url: string;
	repos_url: string;
	events_url: string;
	received_events_url: string;
	type: string;
	site_admin: boolean;
	name: string;
	company: string | null;
	blog: string;
	location: string | null;
	email: string | null;
	hireable: boolean | null;
	bio: string | null;
	twitter_username: string | null;
	public_repos: number;
	public_gists: number;
	followers: number;
	following: number;
	created_at: string;
	updated_at: string;
}
</file>

<file path="src/interfaces/github/index.ts">

</file>

<file path="src/interfaces/AppConfig.ts">
import type { ClientDeployEnvironmentConfig } from "./DeployEnvironment";
⋮----
export interface AppConfig {
	name?: string;
	slug?: string;
	owner?: string;
	workspace?: string;
	cliVersion?: string;
	/**
	 * Project SLUG
	 */
	project?: string;

	framework?: {
		name?: string;
		slug?: string;
		repoSSH?: string;
		version?: string;
	};

	git?: {
		provider?: string;
		repoURL?: string;
		repoSSH?: string;
	};

	deployEnvironment?: {
		[key: string]: ClientDeployEnvironmentConfig;
	};
}
⋮----
/**
	 * Project SLUG
	 */
</file>

<file path="src/interfaces/DeployEnvironmentVolume.ts">
export type DeployEnvironmentVolume = {
	/**
	 * Volume name
	 */
	name: string;
	/**
	 * Kubernetes node name
	 */
	node: string;
	/**
	 * Volume size
	 * @example "5Gi", "500Mi"
	 */
	size: string;
	/**
	 * Kubernetes Storage Class
	 */
	storageClass: string;
	/**
	 * Map directory on the host server to this volume
	 */
	hostPath?: string;
	/**
	 * Type
	 */
	type?: string;
	/**
	 * Location of mapped directory inside the container into this volume
	 */
	mountPath: string;
};
⋮----
/**
	 * Volume name
	 */
⋮----
/**
	 * Kubernetes node name
	 */
⋮----
/**
	 * Volume size
	 * @example "5Gi", "500Mi"
	 */
⋮----
/**
	 * Kubernetes Storage Class
	 */
⋮----
/**
	 * Map directory on the host server to this volume
	 */
⋮----
/**
	 * Type
	 */
⋮----
/**
	 * Location of mapped directory inside the container into this volume
	 */
</file>

<file path="src/interfaces/DockerResourceTypes.ts">
export type DockerImageType = {
	Containers?: string;
	CreatedAt?: string;
	CreatedSince?: string;
	Digest?: string;
	ID?: string;
	Repository?: string;
	SharedSize?: string;
	Size?: string;
	Tag?: string;
	UniqueSize?: string;
	VirtualSize?: string;
};
⋮----
export type DockerVolumeType = {
	Driver: string;
	Labels: string;
	Links: string;
	Mountpoint: string;
	Name: string;
	Scope: string;
	Size: string;
};
⋮----
export type DockerContainerType = {
	Command: string;
	CreatedAt: string;
	ID: string;
	Image: string;
	Labels: string;
	LocalVolumes: string;
	Mounts: string;
	Names: string;
	Networks: string;
	Ports: string;
	RunningFor: string;
	Size: string;
	State: string;
	Status: string;
};
⋮----
export type DockerSystemDiskUsage = {
	Active: string;
	Reclaimable: string;
	Size: string;
	TotalCount: string;
	Type: string;
};
</file>

<file path="src/interfaces/DomainRecord.ts">
export interface DomainRecord {
	id?: string | number;
	/**
	 * The priority for SRV and MX records.
	 */
	priority?: number;
	/**
	 * The port for SRV records.
	 */
	port?: number;
	/**
	 * This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	 */
	ttl?: number;
	/**
	 * The weight for SRV records.
	 */
	weight?: string;
	/**
	 * An unsigned integer between 0-255 used for CAA records.
	 */
	flags?: number;
	/**
	 * The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
	 */
	tag?: string | number;

	/**
	 * The host name, alias, or service being defined by the record.
	 * - This could be the subdomain name: `sub-domain-name.dxup.dev`
	 * @example "@"
	 */
	name: string;

	/**
	 * The type of the DNS record. For example: `A`, `CNAME`, `TXT`, ...
	 * @default "A"
	 */
	type?: "A" | "AAAA" | "CAA" | "CNAME" | "MX" | "NS" | "SOA" | "SRV" | "TXT";

	/**
	 * Variable data depending on record type.
	 * - For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped.
	 * - For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
	 */
	data: string;
}
⋮----
/**
	 * The priority for SRV and MX records.
	 */
⋮----
/**
	 * The port for SRV records.
	 */
⋮----
/**
	 * This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.
	 */
⋮----
/**
	 * The weight for SRV records.
	 */
⋮----
/**
	 * An unsigned integer between 0-255 used for CAA records.
	 */
⋮----
/**
	 * The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"
	 */
⋮----
/**
	 * The host name, alias, or service being defined by the record.
	 * - This could be the subdomain name: `sub-domain-name.dxup.dev`
	 * @example "@"
	 */
⋮----
/**
	 * The type of the DNS record. For example: `A`, `CNAME`, `TXT`, ...
	 * @default "A"
	 */
⋮----
/**
	 * Variable data depending on record type.
	 * - For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped.
	 * - For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.
	 */
</file>

<file path="src/interfaces/EnvironmentVariable.ts">
export interface KubeEnvironmentVariable {
	name: string;
	value: string;
}
⋮----
export interface DiginextEnvironmentVariable {
	name: string;
	value: string;
	/**
	 * @default "string"
	 */
	type?: "string" | "secret";
}
⋮----
/**
	 * @default "string"
	 */
</file>

<file path="src/interfaces/GoogleServiceAccount.ts">
export type GoogleServiceAccount = {
	type: string;
	project_id: string;
	private_key_id: string;
	private_key: string;
	client_email: string;
	client_id: string;
	auth_uri: string;
	token_uri: string;
	auth_provider_x509_cert_url: string;
	client_x509_cert_url: string;
};
</file>

<file path="src/interfaces/IKube.ts">
export interface IResourceQuota {
	limits?: {
		cpu?: string;
		memory?: string;
	};
	requests?: {
		cpu?: string;
		memory?: string;
	};
}
</file>

<file path="src/interfaces/index.ts">

</file>

<file path="src/interfaces/InputOptions.ts">
import type { IApp, IFramework, IGitProvider, IProject, IUser, IWorkspace } from "@/entities";
⋮----
import type { GitProviderType, ResourceQuotaSize } from "./SystemTypes";
⋮----
/**
 * Các giá trị đầu vào của CLI
 */
export type InputOptions = {
	/**
	 * For testing purpose
	 * - Flags: `--debug`
	 */
	isDebugging?: boolean;

	/**
	 * Follow the output logs until the command is finished.
	 * - Flags: `--tail`
	 */
	isTail?: boolean;

	/**
	 * Tracking information
	 */
	statistics?: {
		author?: string;
		startTime?: Date;
		endTime?: Date;
	};

	/**
	 * Continuous integration (CI) flag
	 * - Flag: `--ci`, `--no-ci`
	 * @default false
	 */
	ci?: boolean;

	/**
	 * Define if the command was executed on local machine or server machine
	 * - Flags: `--local`
	 */
	isLocal?: boolean;

	/**
	 * Version string
	 * - Flags: `--version`, `-v`
	 */
	version?: string;

	/**
	 * Ownership
	 */
	author?: IUser;
	username?: string;
	userId?: string;
	workspace?: IWorkspace;
	workspaceId?: string;

	/**
	 * User input organization. Used in:
	 * - Container registry commands
	 * - Git provider commands
	 */
	org?: string;

	/**
	 * User input username
	 * - Flags: `--user`
	 */
	user?: string;

	/**
	 * User input password
	 * - Flags: `--pass`
	 */
	pass?: string;

	/**
	 * User input email
	 * - Flags: `--email`
	 */
	email?: string;

	/**
	 * User input server
	 * - Flags: `--server`
	 */
	server?: string;

	/**
	 * Auth input name
	 * - Flags: `--auth`
	 */
	auth?: string;

	/**
	 * User input name
	 * - Flags: `--name`
	 */
	name?: string;

	/**
	 * {App} slug
	 * - Flags: `--slug`
	 */
	slug?: string;

	/**
	 * Flag: `-i`, `--input`
	 */
	input?: string;

	/**
	 *
	 */
	data?: string;

	/**
	 * User access token
	 * Flag: `--token`
	 */
	token?: string;

	/**
	 * User refresh token
	 */
	refreshToken?: string;

	/**
	 * API access token
	 * - Flag: `--api-key`, `--api-token`
	 */
	apiToken?: string;

	/**
	 * Flag: `--key`, `--token`
	 */
	key?: string;
	/**
	 * Flag: `--val`, `--value`
	 */
	value?: string;

	/**
	 * Flag: `-f`, `--file`
	 */
	filePath?: string;

	/**
	 * - Flags: `--path`
	 *
	 */
	path?: string;

	/**
	 * - Flags: `--url`
	 *
	 */
	url?: string;

	/**
	 * - Flags: `--host`
	 *
	 */
	host?: string;

	/**
	 * Location where the CLI command point to.
	 * - Flags: `--dir`, `--targetDir`
	 */
	targetDirectory?: string;

	/**
	 * Git repo URL
	 * @example https://github.com/digitopvn/diginext
	 */
	repoURL?: string;

	/**
	 * Git repo SSH url
	 * @example git@github.com:digitopvn/diginext.git
	 */
	repoSSH?: string;

	/**
	 * Git repo slug
	 */
	repoSlug?: string;

	/**
	 *
	 */
	SOCKET_ROOM?: string;

	/**
	 * Framework
	 */
	framework?: IFramework;

	/**
	 * Version of the framework
	 */
	frameworkVersion?: string;

	/**
	 * - Flags: `--force`, `--overwrite`
	 * @default false
	 */
	overwrite?: boolean;

	/**
	 * DX command's action level 1
	 */
	action?: string;

	/**
	 * DX command's action level 2
	 */
	secondAction?: string;

	/**
	 * DX command's action level 3
	 */
	thirdAction?: string;

	/**
	 * DX command's action level 4
	 */
	fourAction?: string;

	/**
	 * DX command's action level 5
	 */
	fifthAction?: string;

	/**
	 * Specify environment code:
	 * - One of: `dev, prod, staging,...`
	 * - Flags: `--env`
	 * @default "dev"
	 */
	env?: "dev" | "prod" | "staging" | string;

	/**
	 * List of deploy environment codes
	 * @default ["dev"]
	 */
	envs?: ("dev" | "prod" | "staging" | string)[];

	/**
	 * - Flags: `--dev`
	 * @type {Boolean}
	 * @default true
	 */
	isDev?: boolean;

	/**
	 * - Flags: `--staging`
	 * @type {Boolean}
	 * @default false
	 */
	isStaging?: boolean;

	/**
	 * - Flags: `--prod`
	 * @type {Boolean}
	 * @default false
	 */
	isProd?: boolean;
	production?: boolean;

	/**
	 * - Flags: `--canary`
	 * @type {Boolean}
	 * @default false
	 */
	isCanary?: boolean;

	/**
	 * Should compress the files
	 */
	optimize?: boolean;

	/**
	 * - Flags: `--ssl`, `--no-ssl`
	 * @type {Boolean}
	 * @default true
	 */
	ssl?: boolean;

	/**
	 * - Flags: `--healthz` (default "/"), `--no-healthz`, `--healthz=/custom/path`
	 * @default "/"
	 */
	healthz?: string | null;

	/**
	 * Should skip creating new directory while creating project
	 * @default false
	 */
	skipCreatingDirectory?: boolean;

	/**
	 * @default false
	 * Should show input options while executing the command [for DEBUGGING]
	 */
	shouldShowInputOptions?: boolean;

	/**
	 * - Flags: `--help`, `-h`
	 * @type {Boolean}
	 * @default false
	 */
	shouldShowHelp?: boolean;

	/**
	 * - Flags: `--version`, `-v`
	 * @type {Boolean}
	 * @default false
	 */
	shouldShowVersion?: boolean;

	/**
	 * - Flags: `--update`, `-U`
	 * Should update CLI version before running the command
	 * @type {Boolean}
	 * @default false
	 */
	shouldUpdateCli?: boolean;

	/**
	 * @deprecated
	 * ### This is required now!
	 * ---
	 * Enable GIT when create new or initialize app
	 * @default true
	 */
	shouldUseGit?: boolean;

	/**
	 * @type {Boolean}
	 * @default false
	 */
	shouldCompress?: boolean;

	/**
	 * @type {Boolean}
	 * @default false
	 */
	shouldGenerate?: boolean;

	/**
	 * - Flags: `--template`
	 * @type {Boolean}
	 * @default false
	 */
	shouldUseTemplate?: boolean;

	/**
	 * - Flags: `--merge`
	 * @type {Boolean}
	 * @default false
	 */
	shouldMerge?: boolean;

	/**
	 * - Flags: `--inherit`
	 * @type {Boolean}
	 * @default true
	 */
	shouldInherit?: boolean;

	/**
	 * @deprecated
	 */
	shouldUpdatePipeline?: boolean;

	/**
	 * Should install NPM packages locally after creating new project
	 * @default true
	 */
	shouldInstallPackage?: boolean;

	/**
	 * - Flags: `--close`
	 * @default true
	 */
	shouldClose?: boolean;

	/**
	 * [Use when deploying an app] Force upload local DOTENV file to deployed environment.
	 * - Flags: `--upload-env`
	 * @default false
	 */
	shouldUploadDotenv?: boolean;

	/**
	 * [Use when deploying an app] Should enable CDN for this app
	 * - Flags: `--cdn`
	 * @default false
	 */
	shouldEnableCDN?: boolean;

	/**
	 * Should create something
	 * - Flags: `--create`
	 * @example
	 * - Create "imagePullSecrets" in a namespace
	 * @default false
	 */
	shouldCreate?: boolean;

	/**
	 * Should apply something
	 * - Flags: `--apply`
	 */
	shouldApply?: boolean;

	/**
	 * Should roll out release (skip `prerelease` environment)
	 * - Flags: `--rollout`
	 * @default false
	 */
	shouldRollOut?: boolean;

	/**
	 * ! Should deploy app from a fresh namespace
	 * - Flags: `--fresh`
	 * ## [WARNING]
	 * - **With this flag enabled, the server will wipe out all current deployments within the target namespace, then deploy your app completely from scratch!**
	 * - Use at your own risk, make sure you understand what you're doing, double check the namespace before deploying to avoid accidently take down other apps.
	 */
	shouldUseFreshDeploy?: boolean;

	/**
	 * Content of the deployment yaml (Namespace, Ingress, Service, Deploy,...)
	 */
	deployYaml?: string;

	/**
	 * - Flags: `--port`
	 * @type {Number}
	 */
	port?: number;

	/**
	 * - Flags: `--replicas`
	 * @type {Number}
	 */
	replicas?: number;

	/**
	 * Project
	 */
	project?: IProject;

	/**
	 * ID of the {Project}
	 * - [WARN] This is NOT a {PROJECT_ID} of Google Cloud platform!
	 */
	projectId?: string;

	/**
	 * {Project} slug
	 * - Flags: `--projectSlug`
	 */
	projectSlug?: string;

	/**
	 * {Project} name
	 * - Flags: `--projectName`
	 */
	projectName?: string;

	/**
	 * Kubernetes namespace
	 * - Flags: `--namespace`
	 */
	namespace?: string;

	/**
	 * Application's domain
	 * - Flags: `--domain`
	 * @example "myapp.example.com"
	 */
	domain?: boolean | string;

	/**
	 * @type {Boolean}
	 * @default false
	 */
	printSuccess?: boolean;

	/**
	 * Git repository access policy, default is PRIVATE.
	 * - Flags: `--public`
	 *
	 * @type {Boolean}
	 * @default false
	 */
	isPublic?: boolean;

	/**
	 * - Flags: `--redirect`
	 *
	 * @type {Boolean}
	 * @default false
	 */
	redirect?: boolean;

	/**
	 * Build directory
	 */
	buildDir?: string;

	/**
	 * Build tag
	 */
	buildTag?: string;

	/**
	 * Build image
	 */
	buildImage?: string;

	/**
	 * - Flags: `--image`
	 */
	imageURL?: string;

	/**
	 *
	 */
	buildId?: string;

	/**
	 * - Flags: `--size`
	 *
	 * @default "1x"
	 */
	size?: ResourceQuotaSize;

	/**
	 * Specify an {App} instance
	 */
	app?: IApp;

	/**
	 * ID of an {App} instance
	 */
	appId?: string;

	/**
	 * Slug of an {App} instance
	 * - Flags: `--appSlug`
	 */
	appSlug?: string;

	/**
	 * Cluster's slug. For deploy to specific cluster.
	 * - Flags: `--cluster`
	 */
	cluster?: string | boolean;

	/**
	 * [GOOGLE CLOUD] Specify a zone of your cluster
	 */
	zone?: string;

	/**
	 * [GOOGLE CLOUD] Specify a region of your cluster
	 */
	region?: string;

	/**
	 * Cloud provider
	 * - Flag: `--provider`, `--pro`
	 * @type {"gcloud" | "digitalocean" | "custom"}
	 * @default "custom"
	 */
	provider?: string;

	/**
	 * Container Registry's slug
	 * - Flag: `-r`, `--registry`
	 */
	registry?: string | boolean;

	/**
	 * Git provider
	 * - Flag: `--git`
	 */
	git?: IGitProvider;

	/**
	 * Git provider type
	 * - Flag: `--gp`, `--git-provider`
	 * @example "github", "bitbucket"
	 */
	gitProvider?: GitProviderType;

	/**
	 * A slug of git workspace
	 * - Flag: `--org`, `--git-org`
	 */
	gitOrg?: string;

	/**
	 * Specify a git branch
	 * - Flags: `--branch`, `--git-branch`
	 */
	gitBranch?: string;

	/**
	 * `PROJECT_ID` trên provider (GCP hoặc DO)
	 */
	providerProject?: string;

	/**
	 * Flag: `-o`, `--output`
	 * @default "string"
	 * @example "string" | "json" | "yaml"
	 */
	output?: string;

	/**
	 * Output directory location.
	 * @default "string"
	 * @example "/path/to/output/"
	 */
	outputDir?: any;

	/**
	 * Output file name.
	 * @default "string"
	 * @example "output.txt"
	 */
	outputName?: any;

	/**
	 * Output path (include directory path + file name).
	 * @default "string"
	 * @example "/path/to/output.file"
	 */
	outputPath?: any;

	/**
	 * @deprecated
	 */
	stagingDomains?: string[];
	/**
	 * @deprecated
	 */
	prodDomains?: string[];

	/**
	 * Used in request build/deployment
	 * - Flag: `-m`, `--message`
	 * @example "v1.0.0"
	 */
	message?: string;
};
⋮----
/**
	 * For testing purpose
	 * - Flags: `--debug`
	 */
⋮----
/**
	 * Follow the output logs until the command is finished.
	 * - Flags: `--tail`
	 */
⋮----
/**
	 * Tracking information
	 */
⋮----
/**
	 * Continuous integration (CI) flag
	 * - Flag: `--ci`, `--no-ci`
	 * @default false
	 */
⋮----
/**
	 * Define if the command was executed on local machine or server machine
	 * - Flags: `--local`
	 */
⋮----
/**
	 * Version string
	 * - Flags: `--version`, `-v`
	 */
⋮----
/**
	 * Ownership
	 */
⋮----
/**
	 * User input organization. Used in:
	 * - Container registry commands
	 * - Git provider commands
	 */
⋮----
/**
	 * User input username
	 * - Flags: `--user`
	 */
⋮----
/**
	 * User input password
	 * - Flags: `--pass`
	 */
⋮----
/**
	 * User input email
	 * - Flags: `--email`
	 */
⋮----
/**
	 * User input server
	 * - Flags: `--server`
	 */
⋮----
/**
	 * Auth input name
	 * - Flags: `--auth`
	 */
⋮----
/**
	 * User input name
	 * - Flags: `--name`
	 */
⋮----
/**
	 * {App} slug
	 * - Flags: `--slug`
	 */
⋮----
/**
	 * Flag: `-i`, `--input`
	 */
⋮----
/**
	 *
	 */
⋮----
/**
	 * User access token
	 * Flag: `--token`
	 */
⋮----
/**
	 * User refresh token
	 */
⋮----
/**
	 * API access token
	 * - Flag: `--api-key`, `--api-token`
	 */
⋮----
/**
	 * Flag: `--key`, `--token`
	 */
⋮----
/**
	 * Flag: `--val`, `--value`
	 */
⋮----
/**
	 * Flag: `-f`, `--file`
	 */
⋮----
/**
	 * - Flags: `--path`
	 *
	 */
⋮----
/**
	 * - Flags: `--url`
	 *
	 */
⋮----
/**
	 * - Flags: `--host`
	 *
	 */
⋮----
/**
	 * Location where the CLI command point to.
	 * - Flags: `--dir`, `--targetDir`
	 */
⋮----
/**
	 * Git repo URL
	 * @example https://github.com/digitopvn/diginext
	 */
⋮----
/**
	 * Git repo SSH url
	 * @example git@github.com:digitopvn/diginext.git
	 */
⋮----
/**
	 * Git repo slug
	 */
⋮----
/**
	 *
	 */
⋮----
/**
	 * Framework
	 */
⋮----
/**
	 * Version of the framework
	 */
⋮----
/**
	 * - Flags: `--force`, `--overwrite`
	 * @default false
	 */
⋮----
/**
	 * DX command's action level 1
	 */
⋮----
/**
	 * DX command's action level 2
	 */
⋮----
/**
	 * DX command's action level 3
	 */
⋮----
/**
	 * DX command's action level 4
	 */
⋮----
/**
	 * DX command's action level 5
	 */
⋮----
/**
	 * Specify environment code:
	 * - One of: `dev, prod, staging,...`
	 * - Flags: `--env`
	 * @default "dev"
	 */
⋮----
/**
	 * List of deploy environment codes
	 * @default ["dev"]
	 */
⋮----
/**
	 * - Flags: `--dev`
	 * @type {Boolean}
	 * @default true
	 */
⋮----
/**
	 * - Flags: `--staging`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--prod`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--canary`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * Should compress the files
	 */
⋮----
/**
	 * - Flags: `--ssl`, `--no-ssl`
	 * @type {Boolean}
	 * @default true
	 */
⋮----
/**
	 * - Flags: `--healthz` (default "/"), `--no-healthz`, `--healthz=/custom/path`
	 * @default "/"
	 */
⋮----
/**
	 * Should skip creating new directory while creating project
	 * @default false
	 */
⋮----
/**
	 * @default false
	 * Should show input options while executing the command [for DEBUGGING]
	 */
⋮----
/**
	 * - Flags: `--help`, `-h`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--version`, `-v`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--update`, `-U`
	 * Should update CLI version before running the command
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * @deprecated
	 * ### This is required now!
	 * ---
	 * Enable GIT when create new or initialize app
	 * @default true
	 */
⋮----
/**
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--template`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--merge`
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--inherit`
	 * @type {Boolean}
	 * @default true
	 */
⋮----
/**
	 * @deprecated
	 */
⋮----
/**
	 * Should install NPM packages locally after creating new project
	 * @default true
	 */
⋮----
/**
	 * - Flags: `--close`
	 * @default true
	 */
⋮----
/**
	 * [Use when deploying an app] Force upload local DOTENV file to deployed environment.
	 * - Flags: `--upload-env`
	 * @default false
	 */
⋮----
/**
	 * [Use when deploying an app] Should enable CDN for this app
	 * - Flags: `--cdn`
	 * @default false
	 */
⋮----
/**
	 * Should create something
	 * - Flags: `--create`
	 * @example
	 * - Create "imagePullSecrets" in a namespace
	 * @default false
	 */
⋮----
/**
	 * Should apply something
	 * - Flags: `--apply`
	 */
⋮----
/**
	 * Should roll out release (skip `prerelease` environment)
	 * - Flags: `--rollout`
	 * @default false
	 */
⋮----
/**
	 * ! Should deploy app from a fresh namespace
	 * - Flags: `--fresh`
	 * ## [WARNING]
	 * - **With this flag enabled, the server will wipe out all current deployments within the target namespace, then deploy your app completely from scratch!**
	 * - Use at your own risk, make sure you understand what you're doing, double check the namespace before deploying to avoid accidently take down other apps.
	 */
⋮----
/**
	 * Content of the deployment yaml (Namespace, Ingress, Service, Deploy,...)
	 */
⋮----
/**
	 * - Flags: `--port`
	 * @type {Number}
	 */
⋮----
/**
	 * - Flags: `--replicas`
	 * @type {Number}
	 */
⋮----
/**
	 * Project
	 */
⋮----
/**
	 * ID of the {Project}
	 * - [WARN] This is NOT a {PROJECT_ID} of Google Cloud platform!
	 */
⋮----
/**
	 * {Project} slug
	 * - Flags: `--projectSlug`
	 */
⋮----
/**
	 * {Project} name
	 * - Flags: `--projectName`
	 */
⋮----
/**
	 * Kubernetes namespace
	 * - Flags: `--namespace`
	 */
⋮----
/**
	 * Application's domain
	 * - Flags: `--domain`
	 * @example "myapp.example.com"
	 */
⋮----
/**
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * Git repository access policy, default is PRIVATE.
	 * - Flags: `--public`
	 *
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * - Flags: `--redirect`
	 *
	 * @type {Boolean}
	 * @default false
	 */
⋮----
/**
	 * Build directory
	 */
⋮----
/**
	 * Build tag
	 */
⋮----
/**
	 * Build image
	 */
⋮----
/**
	 * - Flags: `--image`
	 */
⋮----
/**
	 *
	 */
⋮----
/**
	 * - Flags: `--size`
	 *
	 * @default "1x"
	 */
⋮----
/**
	 * Specify an {App} instance
	 */
⋮----
/**
	 * ID of an {App} instance
	 */
⋮----
/**
	 * Slug of an {App} instance
	 * - Flags: `--appSlug`
	 */
⋮----
/**
	 * Cluster's slug. For deploy to specific cluster.
	 * - Flags: `--cluster`
	 */
⋮----
/**
	 * [GOOGLE CLOUD] Specify a zone of your cluster
	 */
⋮----
/**
	 * [GOOGLE CLOUD] Specify a region of your cluster
	 */
⋮----
/**
	 * Cloud provider
	 * - Flag: `--provider`, `--pro`
	 * @type {"gcloud" | "digitalocean" | "custom"}
	 * @default "custom"
	 */
⋮----
/**
	 * Container Registry's slug
	 * - Flag: `-r`, `--registry`
	 */
⋮----
/**
	 * Git provider
	 * - Flag: `--git`
	 */
⋮----
/**
	 * Git provider type
	 * - Flag: `--gp`, `--git-provider`
	 * @example "github", "bitbucket"
	 */
⋮----
/**
	 * A slug of git workspace
	 * - Flag: `--org`, `--git-org`
	 */
⋮----
/**
	 * Specify a git branch
	 * - Flags: `--branch`, `--git-branch`
	 */
⋮----
/**
	 * `PROJECT_ID` trên provider (GCP hoặc DO)
	 */
⋮----
/**
	 * Flag: `-o`, `--output`
	 * @default "string"
	 * @example "string" | "json" | "yaml"
	 */
⋮----
/**
	 * Output directory location.
	 * @default "string"
	 * @example "/path/to/output/"
	 */
⋮----
/**
	 * Output file name.
	 * @default "string"
	 * @example "output.txt"
	 */
⋮----
/**
	 * Output path (include directory path + file name).
	 * @default "string"
	 * @example "/path/to/output.file"
	 */
⋮----
/**
	 * @deprecated
	 */
⋮----
/**
	 * @deprecated
	 */
⋮----
/**
	 * Used in request build/deployment
	 * - Flag: `-m`, `--message`
	 * @example "v1.0.0"
	 */
</file>

<file path="src/interfaces/IPermission.ts">
export type IRouteScope = (typeof routeScopeList)[number];
⋮----
export type IRoutePermission = (typeof routePermissionList)[number];
</file>

<file path="src/interfaces/KubeConfig.ts">
export interface KubeConfigCluster {
	cluster: {
		["certificate-authority-data"]?: string;
		server?: string;
	};
	name: string;
}
⋮----
export interface KubeConfigContext {
	context: {
		cluster?: string;
		user?: string;
	};
	name: string;
}
⋮----
export interface KubeConfigUser {
	name: string;
	user: {
		["client-certificate-data"]?: string;
		["client-key-data"]?: string;
		exec?: {
			apiVersion?: string;
			args?: string[];
			command?: string;
			env?: string;
			interactiveMode?: string;
			provideClusterInfo?: boolean;
			installHint?: string;
		};
	};
}
⋮----
export interface KubeConfig {
	clusters: KubeConfigCluster[];
	contexts: KubeConfigContext[];
	["current-context"]: string;
	users: KubeConfigUser[];
}
</file>

<file path="src/interfaces/KubeDeployment.ts">
import type { V1Deployment } from "@kubernetes/client-node";
⋮----
import type { ResourceQuotaSize } from "./SystemTypes";
⋮----
export interface KubeDeployment extends V1Deployment {
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
	/**
	 * Usage
	 */
	cpuAvg?: string;
	cpuCapacity?: string;
	cpuRecommend?: string;
	memoryAvg?: string;
	memoryCapacity?: string;
	memoryRecommend?: string;
	size?: ResourceQuotaSize;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
/**
	 * Usage
	 */
</file>

<file path="src/interfaces/KubeIngress.ts">
export interface KubeIngress {
	/**
	 * @example networking.k8s.io/v1
	 */
	apiVersion?: string;
	kind?: "Ingress";
	metadata?: {
		name?: string;
		namespace?: string;
		labels?: {
			[key: string]: string;
		};
		annotations?: { [key: string]: string };
	};
	spec?: {
		/**
		 * @example "nginx" | "kong"
		 */
		ingressClassName?: string;
		tls?: { hosts?: string[]; secretName?: string }[];
		rules?: {
			host?: string;
			http?: {
				paths?: { path?: string; pathType?: string; backend?: { service?: { name?: string; port?: { number?: number; name?: string } } } }[];
			};
		}[];
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
/**
	 * @example networking.k8s.io/v1
	 */
⋮----
/**
		 * @example "nginx" | "kong"
		 */
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/KubeIngressClass.ts">
export interface KubeIngressClass {
	apiVersion?: string;
	kind?: string;
	metadata?: {
		annotations?: {
			[key: string]: string;
		};
		creationTimestamp?: string;
		generation?: number;
		labels?: {
			[key: string]: string;
		};
		name?: string;
		resourceVersion?: string;
		uid?: string;
	};
	spec?: {
		controller?: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
</file>

<file path="src/interfaces/KubeNamespace.ts">
export interface KubeNamespace {
	apiVersion?: string;
	kind?: "Namespace";
	metadata?: {
		name?: string;
		namespace?: string;
		labels: {
			[key: string]: string;
		};
		creationTimestamp?: string;
	};
	spec?: {
		finalizers?: string[];
	};
	status?: {
		phase?: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/KubeNode.ts">
interface Address {
	address: string;
	type: string;
}
⋮----
interface Allocatable {
	cpu: string;
	"ephemeral-storage": string;
	"github.com/fuse": string;
	"hugepages-1Gi": string;
	"hugepages-2Mi": string;
	memory: string;
	pods: string;
}
⋮----
interface Capacity {
	cpu: string;
	"ephemeral-storage": string;
	"github.com/fuse": string;
	"hugepages-1Gi": string;
	"hugepages-2Mi": string;
	memory: string;
	pods: string;
}
⋮----
interface Condition {
	lastHeartbeatTime: string;
	lastTransitionTime: string;
	message: string;
	reason: string;
	status: string;
	type: string;
}
⋮----
interface DaemonEndpoints {
	kubeletEndpoint: {
		Port: number;
	};
}
⋮----
interface Image {
	names: string[];
	sizeBytes: number;
}
⋮----
interface NodeInfo {
	architecture: string;
	bootID: string;
	containerRuntimeVersion: string;
	kernelVersion: string;
	kubeProxyVersion: string;
	kubeletVersion: string;
	machineID: string;
	operatingSystem: string;
	osImage: string;
	systemUUID: string;
}
⋮----
interface Metadata {
	annotations: Record<string, string>;
	creationTimestamp: string;
	finalizers: string[];
	labels: Record<string, string>;
	name: string;
	resourceVersion: string;
	uid: string;
}
⋮----
interface Status {
	addresses: Partial<Address>[];
	allocatable: Partial<Allocatable>;
	capacity: Partial<Capacity>;
	conditions: Partial<Condition>[];
	daemonEndpoints: Partial<DaemonEndpoints>;
	images: Image[];
	nodeInfo: Partial<NodeInfo>;
}
⋮----
interface Spec {
	podCIDR: string;
	podCIDRs: string[];
	providerID: string;
}
⋮----
export interface KubeNode {
	apiVersion: string;
	kind: string;
	metadata: Partial<Metadata>;
	spec: Partial<Spec>;
	status: Partial<Status>;
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
	/**
	 * Usage
	 */
	cpu?: string;
	cpuPercent?: string;
	cpuCapacity?: string;
	memory?: string;
	memoryPercent?: string;
	memoryCapacity?: string;
	podCount?: number;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
/**
	 * Usage
	 */
</file>

<file path="src/interfaces/KubePod.ts">
export interface KubePod {
	apiVersion?: string;
	kind?: "Pod";
	metadata: {
		creationTimestamp?: string;
		generateName?: string;
		labels?: any;
		name?: string;
		namespace?: string;
		ownerReferences?: {
			apiVersion?: string;
			blockOwnerDeletion?: boolean;
			controller?: boolean;
			kind?: string;
			name?: string;
			uid?: string;
		}[];
		resourceVersion?: string;
		uid?: string;
	};
	spec?: {
		containers?: {
			args?: string[];
			env?: {
				name?: string;
				value?: string;
				valueFrom?: {
					fieldRef?: {
						apiVersion?: string;
						fieldPath?: string;
					};
				};
			}[];
			image?: string;
			imagePullPolicy?: "IfNotPresent" | "Always" | "Never";
			lifecycle?: {
				preStop?: {
					exec?: {
						command?: string[];
					};
				};
			};
			livenessProbe?: {
				failureThreshold?: number;
				httpGet?: {
					path?: string;
					port?: number;
					scheme?: string;
				};
				initialDelaySeconds?: number;
				periodSeconds?: number;
				successThreshold?: number;
				timeoutSeconds?: number;
			};
			name?: string;
			ports?: {
				containerPort?: number;
				name?: string;
				protocol?: string;
			}[];
			readinessProbe?: {
				failureThreshold?: number;
				httpGet?: {
					path?: string;
					port?: number;
					scheme?: string;
				};
				initialDelaySeconds?: number;
				periodSeconds?: number;
				successThreshold?: number;
				timeoutSeconds?: number;
			};
			resources?: {
				requests?: {
					cpu?: string;
					memory?: string;
				};
				limit?: {
					cpu?: string;
					memory?: string;
				};
			};
			securityContext?: {
				allowPrivilegeEscalation?: boolean;
				capabilities?: {
					add?: string[];
					drop?: string[];
				};
				runAsUser?: string | number;
			};
			terminationMessagePath?: string;
			terminationMessagePolicy?: string;
			volumeMounts?: {
				mountPath?: string;
				name?: string;
				readOnly?: boolean;
			}[];
		}[];
		dnsPolicy?: string;
		enableServiceLinks?: boolean;
		nodeName?: string;
		nodeSelector?: Record<string, string>;
		preemptionPolicy?: string;
		priority?: number;
		restartPolicy?: "Always";
		schedulerName?: string;
		securityContext?: {};
		serviceAccount?: string;
		serviceAccountName?: string;
		terminationGracePeriodSeconds?: number;
		tolerations?: {
			effect?: string;
			key?: string;
			operator?: string;
			tolerationSeconds?: number;
		}[];
		volumes?: {
			name?: string;
			projected?: any;
			secret?: {
				defaultMode?: number;
				secretName?: string;
			};
		}[];
	};
	status?: {
		conditions?: {
			lastProbeTime?: string;
			lastTransitionTime?: string;
			status?: "True" | "False";
			message?: string;
			reason?: string;
			type?: "Initialized" | "PodScheduled" | "ContainersReady" | "PodHasNetwork" | "PodReadyToStartContainers" | "Ready";
		}[];
		containerStatuses?: {
			containerID?: string;
			image?: string;
			imageID?: string;
			lastState?: {
				terminated?: {
					containerID?: string;
					exitCode?: number;
					finishedAt?: string;
					reason?: string;
					startedAt?: string;
				};
			};
			name?: string;
			ready?: boolean;
			restartCount?: number;
			started?: boolean;
			state?: {
				running?: {
					startedAt?: string;
				};
				waiting?: {
					message?: string;
					reason?: string;
				};
			};
		}[];
		hostIP?: string;
		phase?: "Running" | "Pending" | "Succeeded" | "Failed" | "Unknown";
		podIP?: string;
		podIPs?: { ip?: string }[];
		qosClass?: string;
		startTime?: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
	/**
	 * CPU Usage
	 */
	cpu?: string;
	/**
	 * Memory Usage
	 */
	memory?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
/**
	 * CPU Usage
	 */
⋮----
/**
	 * Memory Usage
	 */
</file>

<file path="src/interfaces/KubeRegistrySecret.ts">
/**
apiVersion: v1
kind: Secret
metadata:
  name: myregistrykey
  namespace: awesomeapps
data:
  .dockerconfigjson: UmVhbGx5IHJlYWxseSByZWVlZWVlZWVlZWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGxsbGx5eXl5eXl5eXl5eXl5eXl5eXl5eSBsbGxsbGxsbGxsbGxsbG9vb29vb29vb29vb29vb29vb29vb29vb29vb25ubm5ubm5ubm5ubm5ubm5ubm5ubm5ubmdnZ2dnZ2dnZ2dnZ2dnZ2dnZ2cgYXV0aCBrZXlzCg==
type: kubernetes.io/dockerconfigjson
 */
⋮----
export interface KubeRegistrySecret {
	apiVersion?: string;
	kind?: "Secret";
	type?: "kubernetes.io/dockerconfigjson";
	metadata?: {
		name?: string;
		namespace?: string;
	};
	data?: {
		[".dockerconfigjson"]?: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/KubeSecret.ts">
export interface KubeSecret {
	apiVersion?: string;
	kind?: "Secret";
	type?: string;
	metadata?: {
		name?: string;
		namespace?: string;
	};
	data?: {
		[key: string]: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/KubeService.ts">
export interface KubeService {
	apiVersion?: string;
	kind?: "Service";
	metadata?: {
		name?: string;
		namespace?: string;
		labels?: {
			[key: string]: string;
		};
	};
	spec?: {
		type?: string;
		ports?: { port?: number; targetPort?: number }[];
		selector?: { app?: string };
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/KubeStatefulSet.ts">
import type { V1StatefulSet } from "@kubernetes/client-node";
⋮----
import type { ResourceQuotaSize } from "./SystemTypes";
⋮----
export interface KubeStatefulSet extends V1StatefulSet {
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
	/**
	 * Usage
	 */
	cpuAvg?: string;
	cpuCapacity?: string;
	cpuRecommend?: string;
	memoryAvg?: string;
	memoryCapacity?: string;
	memoryRecommend?: string;
	size?: ResourceQuotaSize;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
/**
	 * Usage
	 */
</file>

<file path="src/interfaces/KubeVolumes.ts">
import type { V1PersistentVolume, V1PersistentVolumeClaim } from "@kubernetes/client-node";
⋮----
export interface KubePersistentVolume extends V1PersistentVolume {
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
export interface KubePersistentVolumeClaim extends V1PersistentVolumeClaim {
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
</file>

<file path="src/interfaces/MonitoringQuery.ts">
export interface MonitoringQueryFilter {
	/**
	 * Cluster's ID or SLUG
	 */
	cluster?: string;
	/**
	 * Resource's name
	 */
	name?: string;
	/**
	 * Namespace's name
	 */
	namespace?: string;
	/**
	 * Filter by labels
	 */
	labels?: Record<string, string>;
}
⋮----
/**
	 * Cluster's ID or SLUG
	 */
⋮----
/**
	 * Resource's name
	 */
⋮----
/**
	 * Namespace's name
	 */
⋮----
/**
	 * Filter by labels
	 */
⋮----
export interface MonitoringQueryOptions {
	/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
	order?: Record<string, 1 | -1>;
	/**
	 * Alias of `order`
	 */
	sort?: Record<string, 1 | -1>;
	/**
	 * If `TRUE`, return the closest results of filter
	 * @default false
	 */
	search?: boolean;
	/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
	output?: "json" | "yaml";
	/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
	full?: boolean;
	/**
	 * Debug mode enabling
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
⋮----
/**
	 * Alias of `order`
	 */
⋮----
/**
	 * If `TRUE`, return the closest results of filter
	 * @default false
	 */
⋮----
/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
⋮----
/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
⋮----
/**
	 * Debug mode enabling
	 * @default false
	 */
⋮----
export type MonitoringCreateOptions = Pick<MonitoringQueryOptions, "isDebugging" | "output">;
⋮----
export interface MonitoringQueryParams {
	/**
	 * Cluster's ID or SLUG
	 */
	cluster?: string;
	/**
	 * Resource's name
	 */
	name?: string;
	/**
	 * Namespace's name
	 */
	namespace?: string;
	/**
	 * Filter by labels
	 */
	labels?: any;
	/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
	order?: any;
	/**
	 * Alias of `order`
	 */
	sort?: any;
	/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
	output?: "json" | "yaml";
	/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
	full?: boolean;
	/**
	 * Debug mode enabling
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Cluster's ID or SLUG
	 */
⋮----
/**
	 * Resource's name
	 */
⋮----
/**
	 * Namespace's name
	 */
⋮----
/**
	 * Filter by labels
	 */
⋮----
/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
⋮----
/**
	 * Alias of `order`
	 */
⋮----
/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
⋮----
/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
⋮----
/**
	 * Debug mode enabling
	 * @default false
	 */
⋮----
export interface MonitoringNamespaceQueryFilter {
	/**
	 * Cluster's ID or SLUG
	 */
	cluster?: string;
	/**
	 * Namespace's name
	 */
	name?: string;
	/**
	 * Filter by labels
	 */
	labels?: any;
	/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
	order?: any;
	/**
	 * Alias of `order`
	 */
	sort?: any;
	/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
	output?: "json" | "yaml";
	/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
	full?: boolean;
	/**
	 * Debug mode enabling
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Cluster's ID or SLUG
	 */
⋮----
/**
	 * Namespace's name
	 */
⋮----
/**
	 * Filter by labels
	 */
⋮----
/**
	 * Sort the results based on metadata.
	 * @example { order: { "metadata.creationTimestamp": -1 } }
	 */
⋮----
/**
	 * Alias of `order`
	 */
⋮----
/**
	 * Output data type (JSON or YAML)
	 * @default "json"
	 */
⋮----
/**
	 * Return full data, default is `FALSE` and returns compact data.
	 * @default false
	 */
⋮----
/**
	 * Debug mode enabling
	 * @default false
	 */
</file>

<file path="src/interfaces/PackageConfig.ts">
export interface PackageConfig {
	name: string;
	version: string;
	description?: string;
	author?: string | { name?: string; email?: string };
	license?: string;
	keywords?: string[];
	files?: string[];
	main?: string;
	bin?: { [key: string]: string };
	engines?: { [key: string]: string };
	scripts?: { [key: string]: string };
	dependencies?: { [key: string]: string };
	devDependencies: { [key: string]: string };
}
</file>

<file path="src/interfaces/ResponseData.ts">
import { isArray, isString } from "lodash";
⋮----
import type { IResponsePagination } from "./IQuery";
⋮----
export interface ResponseData extends IResponsePagination {
	/**
	 * 1 = succeed | 0 = failed
	 */
	status: 1 | 0;
	data: any;
	/**
	 * Error/warning messages
	 */
	messages: string[];
}
⋮----
/**
	 * 1 = succeed | 0 = failed
	 */
⋮----
/**
	 * Error/warning messages
	 */
⋮----
export const respondFailure = (params:
⋮----
export const respondSuccess = (params:
</file>

<file path="src/middlewares/activity-log.ts">
import { isJSON } from "class-validator";
import type { NextFunction } from "express";
import { isEmpty } from "lodash";
⋮----
import { Config } from "@/app.config";
import type { IWorkspace } from "@/entities";
import type { IActivity } from "@/entities/Activity";
import type { AppRequest, AppResponse } from "@/interfaces/SystemTypes";
import ActivityService from "@/services/ActivityService";
⋮----
export const saveActivityLog = async (req: AppRequest, res: AppResponse, next: NextFunction) =>
⋮----
// Only save log for POST, PATCH & DELETE
// if (req.method === "GET") return next();
⋮----
// console.log("saveActivityLog > body :>> ", res.body);
// console.log("user :>> ", user);
// console.log('role :>> ', role);
⋮----
// parse & create activity dto:
⋮----
// activityDto.response = res.body;
⋮----
// write activity log to database:
⋮----
// console.log("Saved activity info :>> ", activity._id);
⋮----
// next();
</file>

<file path="src/middlewares/auth-rate-limit.ts">
import type express from "express";
import { RateLimiterMongo } from "rate-limiter-flexible";
⋮----
import AppDatabase from "@/modules/AppDatabase";
⋮----
points: 5, // Requests
duration: 60, // Per second(s)
blockDuration: 60 * 60 * 1, // 1 hour
⋮----
const authRateLimiterMiddleware = (req: express.Request, res: express.Response, next: express.NextFunction) =>
</file>

<file path="src/middlewares/auth-swagger.ts">
import { Config } from "@/app.config";
⋮----
/**
 * I HAVE NOT USE THIS YET !!! (lol)
 * ---
 * But SwaggerUI authentication is still working (I don't know why, but who cares), so I just leave this function here just in case.
 * @copyright https://tsoa-community.github.io/docs/authentication.html
 */
⋮----
export function swaggerAuthentication(request: express.Request, securityName: string, scopes?: string[]): Promise<any>
⋮----
// // Check if JWT contains all required scopes
// for (let scope of scopes) {
// 	if (!decoded.scopes.includes(scope)) {
// 		reject(new Error("JWT does not contain required scope."));
// 	}
// }
</file>

<file path="src/middlewares/authenticate.ts">
import type express from "express";
⋮----
import type { AppRequest } from "@/interfaces/SystemTypes";
⋮----
import { apiAccessTokenHandler } from "./auth-api-key";
import jwt_auth from "./auth-jwt";
⋮----
export const authenticate = async (req: AppRequest, res: express.Response, next: express.NextFunction) =>
⋮----
// API_ACCESS_TOKEN will be transformed to lowercase in Express:
// console.log("req.headers :>> ", req.headers);
⋮----
// console.log("req.headers[x-api-key] :>> ", API_ACCESS_TOKEN);
// console.log("req.headers.authorization :>> ", req.headers.authorization);
</file>

<file path="src/middlewares/authorize.ts">
import { Response as ApiResponse } from "diginext-utils/dist/response";
import type { NextFunction, Response } from "express";
import { trimEnd } from "lodash";
⋮----
import type { IRole, IWorkspace } from "@/entities";
import type { IRoutePermission } from "@/interfaces";
import type { AppRequest } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
import { filterUsersByWorkspaceRole } from "@/plugins/user-utils";
⋮----
export async function authorize(req: AppRequest, res: Response, next: NextFunction)
⋮----
// console.log("authorize > route :>> ", route);
⋮----
// filter roles
⋮----
// console.log("authorize > user :>> ", user);
⋮----
// request permission:
⋮----
// if the user doesn't have roles, reject the request!
⋮----
/**
		 * authorization logic here!
		 */
// const { activeRole } = user;
⋮----
// console.log("activeRole :>> ", activeRole);
⋮----
// If wildcard "*" route is specified:
⋮----
// if permisions have "own" -> only have access to items which "owner" is "userID":
⋮----
// YOU ARE THE KING!
⋮----
// Check again if a specific route is specified:
⋮----
// console.log("authorize() > routeRole :>> ", routeRole);
⋮----
// if permisions have "own" -> only have access to items which "owner" is "userID":
⋮----
// print the debug info
// console.log(
// 	chalk.cyan(`=====> AUTHORIZING : Request for permission > [${requestPermission}]`),
// 	`\n> API URL: ${routePath}`,
// 	`\n> URL Query:`,
// 	req.query,
// 	`\n> ROLE :>> [WS: ${activeRole.workspace}] ${activeRole.name}:`,
// 	`\n> routeRole:`,
// 	routeRole,
// 	`\n> Allowed permissions & routes: \n${activeRole.routes.map((r) => `  · ${r.path} - ${r.permissions.join(",") || "none"}`).join("\n")}`,
// 	`\n>>> ALLOW:`,
// 	isAllowed
// );
⋮----
// always lock query filter to workspace scope
⋮----
// re-assign user to express.Request
</file>

<file path="src/middlewares/failSafeHandler.ts">
import { Response as AppResponse } from "diginext-utils/dist/response";
import { logError } from "diginext-utils/dist/xconsole/log";
import type { NextFunction, Response } from "express";
⋮----
import type { AppRequest } from "@/interfaces/SystemTypes";
⋮----
export const failSafeHandler = async (error: Error, req: AppRequest, res: Response, next: NextFunction) =>
⋮----
// save log to database
</file>

<file path="src/middlewares/route404.ts">
import { Response as ApiResponse } from "diginext-utils/dist/response";
import { logRes } from "diginext-utils/dist/xconsole/log";
import type { NextFunction } from "express";
⋮----
import type { AppRequest, AppResponse } from "@/interfaces/SystemTypes";
⋮----
export const route404_handler = (req: AppRequest, res: AppResponse, next: NextFunction) =>
</file>

<file path="src/migration/delete-permanent-soft-deleted-items.ts">
import type { Schema } from "mongoose";
⋮----
import { appSchema, buildSchema, clusterSchema, containerRegistrySchema, projectSchema } from "@/entities";
import { BaseService } from "@/services";
⋮----
async function deletePermanentDeletedItemsInCollection(schema: Schema)
⋮----
// const items = await svc.find({ deletedAt: { $exists: true } });
// console.log("count :>> ", items.length);
// console.log("items :>> ", items);
// return items;
⋮----
export async function deletePermanentSoftDeletedItemsAllCollections()
⋮----
// apps
⋮----
// projects
⋮----
// builds
⋮----
// registry
⋮----
// cluster
⋮----
// registry
</file>

<file path="src/migration/migrate-all-clusters.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
export const migrateAllClusters = async () =>
⋮----
// set "slug" = "shortName" (for existing clusters ONLY)
⋮----
// set "migratedAt" field to avoid multiple migrations
</file>

<file path="src/migration/migrate-all-frameworks.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
export const migrateAllFrameworks = async () =>
⋮----
// delete "isPrivate" field
⋮----
// set "migratedAt" field to avoid multiple migrations
</file>

<file path="src/migration/migrate-all-git-providers.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
export const migrateAllGitProviders = async () =>
⋮----
// update "isOrg" -> "public"
</file>

<file path="src/migration/migrate-all-records.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
export const migrateAllRecords = async () =>
</file>

<file path="src/migration/migrate-all-releases.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import { ReleaseService } from "@/services";
⋮----
export const migrateAllReleases = async () =>
</file>

<file path="src/migration/migrate-all-roles.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import type { RoleRoute } from "@/entities";
import { adminRoleRoutes, memberRoleRoutes, moderatorRoleRoutes } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
⋮----
const toRouteStr = (route: RoleRoute) => `$
const toAllRoutesStr = (routes: RoleRoute[])
⋮----
export const migrateAllRoles = async () =>
⋮----
// find migration conditions
⋮----
// remove "_id" field of routes
⋮----
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(role.routes) :>> `, toAllRoutesStr(role.routes));
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(moderatorRoleRoutes) :>> `, toAllRoutesStr(moderatorRoleRoutes));
// console.log(`[ROLE] ${role.type} > role.routes :>> `, role.routes);
⋮----
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(role.routes) :>> `, toAllRoutesStr(role.routes));
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(moderatorRoleRoutes) :>> `, toAllRoutesStr(moderatorRoleRoutes));
// console.log(`[ROLE] ${role.type} > role.routes :>> `, role.routes);
⋮----
// console.log(`[ROLE] ${role.type} > role.routes :>> `, role.routes);
⋮----
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(role.routes) :>> `, toAllRoutesStr(role.routes));
// console.log(`[ROLE] ${role.type} > toAllRoutesStr(moderatorRoleRoutes) :>> `, toAllRoutesStr(moderatorRoleRoutes));
⋮----
// skip if no need migration...
⋮----
// start migrating...
⋮----
// notify migration results...
</file>

<file path="src/migration/migrate-all-sa-and-api-key.ts">
export const migrateServiceAccountAndApiKey = async () =>
⋮----
// create default roles for each workspace: Admin, Moderator & Member
⋮----
// Moderator
⋮----
// find all service accounts & API keys of this workspace and assign "moderator" role:
</file>

<file path="src/migration/migrate-all-user-types.ts">
import { log } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
export const migrateAllUserTypes = async () =>
</file>

<file path="src/migration/migrate-all-users.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import { filterUniqueItemWithCondition } from "@/plugins/array";
⋮----
export const migrateAllUsers = async () =>
⋮----
// { $or: [{ migratedAt: { $exists: false } }, { migratedAt: { $gte: dayjs().startOf("date"), $lte: dayjs().endOf("date") } }] },
</file>

<file path="src/migration/migrate-app-environment.ts">
import { isJSON } from "class-validator";
import { log } from "diginext-utils/dist/xconsole/log";
import { isEmpty, isObject } from "lodash";
⋮----
import type { IApp } from "@/entities";
⋮----
export const migrateDeployEnvironmentOfSpecificApps = async (filter: any =
⋮----
// log(`[MIGRATION] migrateAppEnvironment > Found ${apps.length} apps need to migrate deploy environments.`);
⋮----
export const migrateAppEnvironmentVariables = async (app: IApp) =>
⋮----
/**
			 * - {Object} envVars
			 * @example
			 * {
			 * 	"0": { name: "NAME", value: "VALUE" },
			 * 	"1": { name: "NAME", value: "VALUE" },
			 * 	...
			 * }
			 *
			 * - {Array} envVars
			 * @example
			 * [
			 * 	{ name: "NAME", value: "VALUE" },
			 * 	{ name: "NAME", value: "VALUE" },
			 * 	...
			 * ]
			 */
⋮----
export const migrateAllAppEnvironment = async () =>
⋮----
// log(`[MIGRATION] migrateAppEnvironment > Found ${apps.length} apps need environment migration.`);
⋮----
// convert "envVars" {Object} to {Array} (if needed)
</file>

<file path="src/migration/migrate-service-account.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IApiKeyAccount } from "@/entities/ApiKeyAccount";
import type { IServiceAccount } from "@/entities/ServiceAccount";
import { generateWorkspaceApiAccessToken, getUnexpiredAccessToken } from "@/plugins";
⋮----
export const migrateDefaultServiceAccountAndApiKeyUser = async () =>
⋮----
// find default Service Account of this workspace:
⋮----
// console.log("serviceAccounts :>> ", serviceAccounts);
⋮----
// assign "moderator" role to service account:
⋮----
// find default API_KEY user of this workspace
⋮----
// assign "moderator" role to API_KEY:
</file>

<file path="src/migration/migrate-user-workspaces.ts">
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import { isObjectId } from "@/plugins/mongodb";
⋮----
export const migrateUserWorkspaces = async () =>
</file>

<file path="src/migration/seed-initial-clusters.ts">
import yaml from "js-yaml";
import { isEmpty } from "lodash";
import mongoose from "mongoose";
⋮----
import { Config } from "@/app.config";
import { clusterSchema, workspaceSchema } from "@/entities";
import type { KubeConfig } from "@/interfaces";
import { addInitialBareMetalCluster } from "@/seeds/seed-clusters";
import { UserService } from "@/services";
⋮----
export const seedInitialClusters = async () =>
⋮----
// find all workspaces that don't have this initial cluster
⋮----
// validate YAML
⋮----
// extract cluster server URL & IP address
⋮----
// Tìm initial cluster
⋮----
// // Tìm tất cả workspace có clusters với "kubeConfig" là "kubeConfig"
// const workspaceIdsWithInitialCluster = await Cluster.find({
// 	primaryIP: clusterIP,
// 	kubeConfig: { $regex: kubeConfigObject.clusters[0].cluster["certificate-authority-data"] },
// }).distinct("workspace");
// console.log("workspaceIdsWithInitialCluster :>> ", workspaceIdsWithInitialCluster.length);
⋮----
// // Tìm các workspace không có trong danh sách trên
// const workspacesWithoutInitialCluster = await workspaceSvc.find({
// 	_id: { $nin: workspaceIdsWithInitialCluster },
// });
// // console.log("workspacesWithoutInitialCluster :>> ", workspacesWithoutInitialCluster);
// console.log("workspacesWithoutInitialCluster :>> ", workspacesWithoutInitialCluster.length);
⋮----
// // Tạo cluster cho tất cả workspace
// workspacesWithoutInitialCluster.forEach(async (workspace) => {
// 	const owner = await userSvc.findOne({ _id: workspace.owner });
// 	if (!owner) {
// 		console.error(`Error: owner "${workspace.owner}" not found -> delete workspace!`);
// 		await Workspace.deleteOne({ _id: workspace._id });
// 		return;
// 	}
// 	const cluster = await addInitialBareMetalCluster(kubeConfig, workspace, owner);
// 	console.log("Added initial cluster to workspace :>> ", workspace.name, workspace._id);
// });
⋮----
// return workspacesWithoutInitialCluster;
</file>

<file path="src/modules/ai/exec-ai.ts">
import chalk from "chalk";
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import { writeFileSync } from "fs";
import inquirer from "inquirer";
import path from "path";
import yargs from "yargs";
⋮----
import type { InputOptions } from "@/interfaces";
import { getSourceTree } from "@/plugins/fs-extra";
⋮----
import type { AskAiMessage } from "../diginext/dx-ask-ai";
import { dxAskAi } from "../diginext/dx-ask-ai";
⋮----
export async function execAI(options?: InputOptions)
⋮----
// push assistant questions
⋮----
// push user answers
⋮----
// generate a dockerfile
⋮----
// if (!response.status) logError(response.messages[0] || `Unable to call Diginext API.`);
// if (options?.isDebugging) console.log("execAI() > requestResult.data :>> ", response.data);
⋮----
// const dockerfileContent = response?.data;
// writeFileSync(path.resolve(options.targetDirectory, `Dockerfile.${env}`), dockerfileContent, "utf8");
⋮----
// log success
</file>

<file path="src/modules/analytics/analytics.service.ts">
// Imports the Google Analytics Admin API client library
import { AnalyticsAdminServiceClient, protos } from "@google-analytics/admin";
import chalk from "chalk";
import Table from "cli-table";
import { log, logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { IApp } from "@/entities";
⋮----
import { ANALYTICS_SA_PATH } from "../../config/const";
import { getAppConfigFromApp } from "../apps/app-helper";
⋮----
// const { Account } = v1alpha;
⋮----
// google.analytics.admin.v1alpha.Account
⋮----
// Instantiates a client using default credentials.
⋮----
// TODO: update fetch command from Analytics API
export async function getAnalyticsAccount()
⋮----
// Calls listAccounts() method of the Google Analytics Admin API and prints
// the response for each account.
⋮----
// const [accounts] = await analyticsAdminClient.listAccounts();
// accounts.forEach((account) => log(account));
⋮----
// return accounts[0];
⋮----
export const listAnalyticsProperties = async () =>
⋮----
// const properties = await analyticsAdminClient.listProperties({filter: })
⋮----
export const createAnalyticsProperty = async (app: IApp,
⋮----
// if (!name) logError(`"name" is required`);
// if (!url) logError(`"url" is required`);
⋮----
// await analyticsAdminClient.updateAccount({ account: account });
// await analyticsAdminClient.provisionAccountTicket({account: account})
⋮----
// // delete properties
// try {
// 	properties = await analyticsAdminClient.listProperties({ filter: `parent:${account.name}` });
// 	log(`properties:`, properties[0]);
// } catch (e) {
// 	logError(e);
// }
⋮----
// await Promise.all(
// 	properties[0]
// 		.filter((prop) => prop.displayName == "Digichat")
// 		.map((prop) => analyticsAdminClient.deleteProperty({ name: prop.name }))
// );
⋮----
// // list properties
// try {
// 	properties = await analyticsAdminClient.listProperties({ filter: `parent:${account.name}` });
// 	log(`properties:`, properties[0]);
// } catch (e) {
// 	logError(e);
// }
⋮----
// return;
⋮----
// // check web stream existed
// try {
// 	webStreams = await analyticsAdminClient.listWebDataStreams({ filter: `parent:${property.name}` });
// } catch (e) {
// 	logError(e);
// }
⋮----
parent: account.name, // accounts/1324324
⋮----
// countryCode: "vi",
⋮----
// log(req);
⋮----
// SDK.v1alpha.AnalyticsAdminServiceClient
⋮----
// log(webStream);
// log(webStream.name);
// let tag;
// try {
// 	const tags = await analyticsAdminClient.getGlobalSiteTag({ name: webStream.name + "/globalSiteTag" });
// 	tag = tags[0];
// 	log("Global Site Tag:", tag);
// } catch (e) {
// 	logError(e);
// }
⋮----
// diginext.ga = diginext.ga || {};
// diginext.ga[env] = diginext.ga[env] ? [...diginext.ga[env], webStream.measurementId] : [webStream.measurementId];
⋮----
// main(...process.argv.slice(2)).catch((err) => {
//   console.error(err.message);
//   process.exitCode = 1;
// });
// process.on("unhandledRejection", (err) => {
//   console.error(err.message);
//   process.exitCode = 1;
// });
</file>

<file path="src/modules/analytics/index.ts">
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { bitbucketAuthentication } from "../bitbucket/promptForAuthOptions";
import { createAnalyticsProperty, getAnalyticsAccount } from "./analytics.service";
⋮----
export async function execAnalytics(options)
⋮----
// await createAnalyticsAccount("digitop.vn");
</file>

<file path="src/modules/api/DB.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { isArray, isEmpty } from "lodash";
import type { UpdateQuery, UpdateWithAggregationPipeline } from "mongoose";
⋮----
import { isServerMode } from "@/app.config";
import type {
	IApiKeyAccount,
	IApp,
	IBuild,
	ICloudDatabase,
	ICloudDatabaseBackup,
	ICloudProvider,
	ICloudStorage,
	ICluster,
	IContainerRegistry,
	ICronjob,
	IFramework,
	IGitProvider,
	INotification,
	IProject,
	IRelease,
	IRole,
	IRoute,
	IServiceAccount,
	ITeam,
	IUser,
	IWebhook,
	IWorkspace,
} from "@/entities";
import type { IQueryFilter, IQueryOptions, IQueryPagination, KubeNamespace } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import type { GitRepository } from "../git/git-provider-api";
import fetchApi from "./fetchApi";
⋮----
export type DBCollection = (typeof dbCollections)[number];
⋮----
export function queryFilterToUrlFilter(filter: any =
⋮----
export function queryOptionsToUrlOptions(options: IQueryOptions & IQueryPagination =
⋮----
export type TypeByCollection<T extends DBCollection> = T extends "api_key_user"
	? IApiKeyAccount
	: T extends "app"
	? IApp
	: T extends "build"
	? IBuild
	: T extends "cluster"
	? ICluster
	: T extends "cronjob"
	? ICronjob
	: T extends "database"
	? ICloudDatabase
	: T extends "db_backup"
	? ICloudDatabaseBackup
	: T extends "framework"
	? IFramework
	: T extends "git"
	? IGitProvider
	: T extends "git_repo"
	? GitRepository
	: T extends "project"
	? IProject
	: T extends "provider"
	? ICloudProvider
	: T extends "registry"
	? IContainerRegistry
	: T extends "release"
	? IRelease
	: T extends "role"
	? IRole
	: T extends "route"
	? IRoute
	: T extends "service_account"
	? IServiceAccount
	: T extends "team"
	? ITeam
	: T extends "user"
	? IUser
	: T extends "workspace"
	? IWorkspace
	: T extends "webhook"
	? IWebhook
	: T extends "notification"
	? INotification
	: T extends "storage"
	? ICloudStorage
	: T extends "monitor/namespaces"
	? KubeNamespace
	: never;
⋮----
export interface DBQueryOptions extends IQueryOptions {
	filter?: any;

	/**
	 * Subpath of the API
	 */
	subpath?: string;

	/**
	 * Similar to "subpath" but for service -> function name:
	 */
	func?: any;

	/**
	 * Debug
	 * @default false
	 */
	isDebugging?: boolean;

	/**
	 * If `true`, won't throw any errors
	 * @default false
	 */
	ignorable?: boolean;

	user?: IUser;
	workspace?: IWorkspace;
	ownership?: Ownership;
}
⋮----
/**
	 * Subpath of the API
	 */
⋮----
/**
	 * Similar to "subpath" but for service -> function name:
	 */
⋮----
/**
	 * Debug
	 * @default false
	 */
⋮----
/**
	 * If `true`, won't throw any errors
	 * @default false
	 */
⋮----
export class DB
⋮----
static async getService(collection: DBCollection, ownership?: Ownership)
⋮----
// assign ownership
⋮----
static async count<T = any>(collection: DBCollection, filter: IQueryFilter<T> =
⋮----
// extract "subpath", then delete it from "options"
⋮----
// special case
⋮----
static async find<I extends any, T extends DBCollection>(
		collection: T,
		filter: IQueryFilter<TypeByCollection<T>> = {},
		options: IQueryOptions = {},
		pagination?: IQueryPagination
): Promise<TypeByCollection<T>[]>
⋮----
// extract "subpath", then delete it from "options"
⋮----
// special case
⋮----
static async findOne<T extends DBCollection>(
		collection: T,
		filter: IQueryFilter<TypeByCollection<T>> = {},
		options: DBQueryOptions = {}
): Promise<TypeByCollection<T>>
⋮----
// extract "subpath", then delete it from "options"
⋮----
// special case
⋮----
static async create<T extends DBCollection>(collection: T, data: any, options: DBQueryOptions =
⋮----
// if (func) {
// 	return svc[func]();
// }
⋮----
// special case
⋮----
// console.log("newData :>> ", newData);
⋮----
static async update<T extends DBCollection>(
		collection: T,
		filter: IQueryFilter<TypeByCollection<T>>,
		data: UpdateQuery<TypeByCollection<T>> | UpdateWithAggregationPipeline,
		options: DBQueryOptions = {}
): Promise<TypeByCollection<T>[]>
⋮----
// special case
⋮----
static async updateOne<T extends DBCollection>(
		collection: T,
		filter: IQueryFilter<TypeByCollection<T>>,
		data: UpdateQuery<TypeByCollection<T>> | UpdateWithAggregationPipeline,
		options: DBQueryOptions = {}
): Promise<TypeByCollection<T>>
⋮----
static async delete<I = any>(collection: DBCollection, filter: IQueryFilter<I>, data: any =
⋮----
// special case
</file>

<file path="src/modules/api/fetchApi.ts">
import Agent, { HttpsAgent } from "agentkeepalive";
import type { AxiosRequestConfig } from "axios";
import axios from "axios";
import { logError } from "diginext-utils/dist/xconsole/log";
import { url } from "inspector";
⋮----
import { getCliConfig } from "@/config/config";
⋮----
interface FetchApiOptions<T = any> extends AxiosRequestConfig {
	url: string;
	access_token?: string;
	api_key?: string;
	method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE";
	data?: T | any;
	isDebugging?: boolean;
}
⋮----
export interface FetchApiResponse<T extends Object> {
	status?: 0 | 1;
	messages?: string[];
	data?: T | T[];
}
⋮----
export async function fetchApi<T = any>(options: FetchApiOptions<T>)
⋮----
// else if (currentUser?.token?.access_token) {
// 	options.headers = { ...options.headers, Authorization: `Bearer ${currentUser.token?.access_token}` };
// }
⋮----
// if "API_ACCESS_TOKEN" is defined, ignore "Bearer" token
⋮----
// Inject "REFRESH_TOKEN" if any
</file>

<file path="src/modules/api/index.ts">

</file>

<file path="src/modules/apps/app-helper.ts">
import type { IApp, IProject, IUser, IWorkspace } from "@/entities";
import type { AppConfig, ClientDeployEnvironmentConfig, InputOptions } from "@/interfaces";
⋮----
/**
 * Parse `AppConfig` data from `App` instance
 * @param app - Should be populated ["project", "owner", "workspace"]
 */
export const getAppConfigFromApp = (app: IApp, options?: InputOptions) =>
⋮----
// hide confidential information:
⋮----
// parse app config
</file>

<file path="src/modules/apps/ask-project-and-app.ts">
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import { isServerMode } from "@/app.config";
import type { IApp, IProject } from "@/entities";
import type { InputOptions } from "@/interfaces";
import { getAppConfig, getCurrentGitRepoData } from "@/plugins";
⋮----
import { createOrSelectApp } from "./create-or-select-app";
import { createOrSelectProject } from "./create-or-select-project";
⋮----
export const askForProjectAndApp = async (dir: string, options?: InputOptions) =>
⋮----
// no apps found -> create or select one:
⋮----
// try to find apps with deprecated "dx.json" file:
⋮----
// if still no results -> create or select one:
⋮----
// if there are only 1 app with this git repo -> select it:
⋮----
// if there are more than 1 app with this git repo -> select one:
</file>

<file path="src/modules/apps/create-empty-app-dir.ts">
import { readFileSync, writeFileSync } from "fs";
import path from "path";
⋮----
import { README_TEMPLATE_PATH } from "@/config/const";
import type { InputOptions } from "@/interfaces";
import { replaceInFile } from "@/plugins";
⋮----
export async function createEmptyAppDirectory(options?: InputOptions)
</file>

<file path="src/modules/apps/create-or-select-app.ts">
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { IApp } from "@/entities";
import type { InputOptions } from "@/interfaces";
import { getCurrentGitRepoData } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
⋮----
import { askForGitProvider } from "../git/ask-for-git-provider";
import { createAppByForm } from "./new-app-by-form";
import { searchApps } from "./search-apps";
import { updateAppGitInfo } from "./update-git-config";
⋮----
export async function createOrSelectApp(projectSlug: string, options: InputOptions, question?: string)
⋮----
// find/search projects
⋮----
// display list to select:
⋮----
// [backward compatible <3.15.X] apps have no git provider id -> update one!
⋮----
// [backward compatible <3.15.X] apps have no "public" field -> update them follows their gitProvider's "public" field
⋮----
// select this app!
⋮----
// If there are no git info of this app in database, try to fetch current git data:
</file>

<file path="src/modules/apps/create-or-select-project.ts">
import inquirer from "inquirer";
⋮----
import type { InputOptions } from "@/interfaces";
import selectProject from "@/modules/apps/selectProject";
⋮----
import createProjectByForm from "../project/create-project";
⋮----
export async function createOrSelectProject(options?: InputOptions)
⋮----
// if the user provide project name -> create new project immediately
⋮----
// find/search projects
</file>

<file path="src/modules/apps/get-app-environment.ts">
import { isJSON } from "class-validator";
⋮----
import type { IApp } from "@/entities";
import type { DeployEnvironment } from "@/interfaces";
import { formatEnvVars } from "@/plugins/env-var";
// import { migrateDeployEnvironmentOfSpecificApps } from "@/migration/migrate-app-environment";
⋮----
/**
 * Some old deploy environment was saved into JSON
 */
export const getDeployEnvironmentFromJSON = (app: IApp, env: string) =>
⋮----
export const getDeployEvironmentByApp = (app: IApp, env: string) =>
⋮----
// format environment variables
</file>

<file path="src/modules/apps/index.ts">

</file>

<file path="src/modules/apps/init-app.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
⋮----
import type { AppGitInfo, IApp, IProject } from "@/entities";
import type InputOptions from "@/interfaces/InputOptions";
import { getCurrentGitRepoData } from "@/plugins";
⋮----
import { askForGitProvider } from "../git/ask-for-git-provider";
import { printInformation } from "../project/printInformation";
import { getAppConfigFromApp } from "./app-helper";
import { createOrSelectApp } from "./create-or-select-app";
import { createOrSelectProject } from "./create-or-select-project";
import { searchApps } from "./search-apps";
⋮----
export async function execInitApp(options: InputOptions)
⋮----
// display list to select:
⋮----
// assign project info to "options":
⋮----
// assign app info to "options":
⋮----
// git provider
⋮----
// app git info
⋮----
// print project information:
⋮----
// If no apps or projects found -> create new
⋮----
// ! The ONLY different with "createApp":
// ! Select the current working directory instead of create new one
⋮----
// update framework & GIT info in the database
⋮----
// print project information:
</file>

<file path="src/modules/apps/new-app-by-form.ts">
import { log, logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { AppGitInfo, IApp } from "@/entities";
import type { IFramework } from "@/entities/Framework";
import type InputOptions from "@/interfaces/InputOptions";
import type { GitProviderType } from "@/interfaces/SystemTypes";
import { getCurrentGitRepoData } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
import { containsSpecialCharacters } from "@/plugins/string";
⋮----
import { askForGitProvider } from "../git/ask-for-git-provider";
import type { GitRepositoryDto } from "../git/git-provider-api";
import { parseGitRepoDataFromRepoSSH } from "../git/git-utils";
import { createOrSelectProject } from "./create-or-select-project";
import { updateAppConfig } from "./update-config";
⋮----
export async function createAppByForm(
	options?: InputOptions & {
		/**
		 * Skip selecting framework step
		 * @default false
		 */
		skipFramework?: boolean;
	}
)
⋮----
/**
		 * Skip selecting framework step
		 * @default false
		 */
⋮----
// console.log("options.project :>> ", options.project);
⋮----
// if (options.isDebugging) console.log("createAppByForm() > options.framework :>> ", options.framework);
// if (options.isDebugging) console.log("createAppByForm() > skipFramework :>> ", skipFramework);
⋮----
// console.log("createAppByForm() > name :>> ", name);
⋮----
// git repo slug
⋮----
// if "--framework" flag is defined...
⋮----
// can skip selecting framework if wanted (eg. when deploy existing app)
⋮----
// log({ selectFrameworks });
⋮----
// Check git provider authentication
⋮----
// Request select specific version
⋮----
// select git provider for this app:
⋮----
// Create new repo:
⋮----
// ![DANGER] if "--force" was declared, try to delete if the repo was existed
⋮----
// Call API to create new app
⋮----
// ownership
⋮----
// FIXME: I don't know why "options.workspace" is undefined when uploading files to cloud storage
⋮----
// to make sure it write down the correct app "slug" in app config
⋮----
// update existing app config if any
</file>

<file path="src/modules/apps/new-app.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import fs from "fs";
// import Listr from "listr";
import path from "path";
⋮----
import type { InputOptions } from "@/interfaces/InputOptions";
import { getAppConfigFromApp } from "@/modules/apps/app-helper";
import { pullingFramework } from "@/modules/framework";
import { initalizeAndCreateDefaultBranches } from "@/modules/git/initalizeAndCreateDefaultBranches";
import { printInformation } from "@/modules/project/printInformation";
⋮----
import { createEmptyAppDirectory } from "./create-empty-app-dir";
import { createAppByForm } from "./new-app-by-form";
⋮----
/**
 * Create new app with pre-setup: git, cli, config,...
 */
export default async function createApp(options: InputOptions)
⋮----
// FORM > Create new project & app:
⋮----
// console.log("newApp :>> ", newApp);
⋮----
// make sure it always create new directory:
⋮----
// setup git:
⋮----
// pull/clone framework...
⋮----
// update git info to database
⋮----
// setup git remote & create initial commits, branches
⋮----
// print project information:
</file>

<file path="src/modules/apps/search-apps.ts">
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
type SearchAppOptions = {
	projectSlug?: string;
	repoSSH?: string;
	question?: string;
	/**
	 * @default true
	 */
	canSkip?: boolean;
};
⋮----
/**
	 * @default true
	 */
⋮----
export async function searchApps(options: SearchAppOptions)
⋮----
// find/search apps
⋮----
// if don't skip -> keep searching...
</file>

<file path="src/modules/apps/search-projects.ts">
import inquirer from "inquirer";
⋮----
type SearchAppOptions = {
	question?: string;
	/**
	 * @default true
	 */
	canSkip?: boolean;
};
⋮----
/**
	 * @default true
	 */
⋮----
export async function searchProjects(options: SearchAppOptions =
⋮----
// find/search projects
⋮----
// if don't create new -> keep searching...
</file>

<file path="src/modules/apps/selectApp.ts">
import inquirer from "inquirer";
⋮----
import type { IApp } from "@/entities";
import type { InputOptions } from "@/interfaces";
import { searchApps } from "@/modules/apps/search-apps";
import { makeSlug } from "@/plugins/slug";
⋮----
//
⋮----
export default async function selectApp(options?: InputOptions, canSkip: boolean = true)
⋮----
//
⋮----
// display list to select:
</file>

<file path="src/modules/apps/selectProject.ts">
import inquirer from "inquirer";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
import createProjectByForm from "../project/create-project";
import { searchProjects } from "./search-projects";
//
⋮----
export default async function selectProject(options?: InputOptions, canSkip: boolean = true)
⋮----
//
⋮----
// if empty array -> create new
⋮----
// else -> display list to select:
</file>

<file path="src/modules/apps/transferRepo.ts">
import chalk from "chalk";
import console from "console";
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import path from "path";
⋮----
import type { InputOptions } from "@/interfaces";
import { getAppConfigFromApp } from "@/modules/apps/app-helper";
import selectApp from "@/modules/apps/selectApp";
import selectProject from "@/modules/apps/selectProject";
import { pullingRepoToNewGitDir } from "@/modules/framework";
import { askForGitProvider } from "@/modules/git/ask-for-git-provider";
import type { GitRepositoryDto } from "@/modules/git/git-provider-api";
import { initalizeAndCreateDefaultBranches } from "@/modules/git/initalizeAndCreateDefaultBranches";
import { printInformation } from "@/modules/project/printInformation";
import { wait } from "@/plugins";
⋮----
//
export default async function transferRepo(options: InputOptions)
⋮----
// console.log("oldData :>> ", oldData);
// console.log("options :>> ", options);
// {
// 	// Repo URL   : https://bitbucket.org/digitopvn/test-project-gaol-webapp
// 	// Remote SSH : git@bitbucket.org:digitopvn/test-project-gaol-webapp.git
// 	const [updatedApp] = await DB.update(
// 		"app",
// 		{ slug: options.slug },
// 		{
// 			git: {
// 				//
// 				provider: "bitbucket",
// 				repoSSH: "git@bitbucket.org:digitopvn/test-project-gaol-webapp.git",
// 				repoURL: "https://bitbucket.org/digitopvn/test-project-gaol-webapp",
// 			},
// 		}
// 	);
⋮----
// 	console.log("updatedApp :>> ", updatedApp);
// }
// return;
⋮----
// //create git in github
⋮----
// Create new repo:
⋮----
//
⋮----
// update git info to database
⋮----
// return;
// // first commit & create default branches (main, dev/*)
⋮----
// update git info to database
⋮----
// error
⋮----
// print project information:
</file>

<file path="src/modules/apps/update-config.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { AppDto, IApp, IProject } from "@/entities";
import type { ClientDeployEnvironmentConfig } from "@/interfaces";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { getAppConfigFromApp } from "./app-helper";
⋮----
export const updateAppConfig = async (
	app: IApp,
	env?: string,
	serverDeployEnvironment?: ClientDeployEnvironmentConfig,
	options?: { isDebugging?: boolean }
) =>
⋮----
// ! IMPORTANT: In case app was moved to another project
⋮----
slug: app.slug, // <-- update old app slug -> new app slug (if any)
projectSlug: project.slug, // <-- update old app projectSlug -> new app projectSlug (if any)
project: project._id, // <-- update old app's project -> new app's project (if any)
⋮----
// update new app's deploy environment
⋮----
// update to database
⋮----
// return app config
</file>

<file path="src/modules/apps/update-git-config.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { AppDto, AppGitInfo, IApp } from "@/entities";
⋮----
export const updateAppGitInfo = async (app: IApp, gitInfo: AppGitInfo) =>
⋮----
// console.log("[INIT APP] updateData :>> ", updateData);
⋮----
// console.log("[INIT APP] updatedApp :>> ", updatedApp);
</file>

<file path="src/modules/apps/view-logs.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import { getCliConfig } from "@/config/config";
import type { InputOptions } from "@/interfaces";
import { getCurrentGitRepoData } from "@/plugins";
⋮----
import { fetchApi } from "../api";
⋮----
type ViewAppLogsOptions = {
	/**
	 * If `FALSE`, return logs of the first pod only.
	 * @default true
	 */
	allPods?: boolean;
};
⋮----
/**
	 * If `FALSE`, return logs of the first pod only.
	 * @default true
	 */
⋮----
export async function viewAppLogs(options: ViewAppLogsOptions & Pick<InputOptions, "targetDirectory" | "isDebugging" | "env">)
</file>

<file path="src/modules/bitbucket/createPullRequest.ts">
import chalk from "chalk";
// import { auth } from "./index.js";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import type { SimpleGit } from "simple-git";
import { simpleGit } from "simple-git";
⋮----
import type { InputOptions } from "@/interfaces/InputOptions";
⋮----
import { parseRepoSlugFromUrl } from "../../plugins/utils";
import { bitbucket } from "./index";
⋮----
async function processCreatingPullRequest(repoSlug, fromBranch, destBranch, options: InputOptions)
⋮----
// merge origin/DEST_BRANCH with FROM_BRANCH
⋮----
// TODO: get workspace name from git provider
⋮----
// log(res.data);
⋮----
// AUTO MERGE if NOT CONFLICTED
⋮----
// console.log('e', e)
⋮----
export const createPullRequest = async (options: InputOptions) =>
⋮----
// diginext git pr master
⋮----
// get repo URL & repo slug
⋮----
// check for multiple destinations
</file>

<file path="src/modules/bitbucket/index.ts">
import { log, logError } from "diginext-utils/dist/xconsole/log";
import fs from "fs";
import inquirer from "inquirer";
import jsonDiff from "json-diff";
import _ from "lodash";
import { ncp as copyFile } from "ncp";
import ora from "ora";
import path from "path";
import util from "util";
⋮----
import { simpleGit } from "simple-git";
⋮----
// export var bitbucket;
⋮----
export const packageDiff = async () =>
⋮----
export const patchPackage = async () =>
⋮----
// log(diff.scripts);
// log(Object.entries(diff.scripts));
⋮----
// scripts
⋮----
// dependencies
⋮----
// if (key.includes("__deleted")) {
//   delete curPackage.dependencies[key.split("__")[0]];
// }
⋮----
// dev dependencies
// log(diff.devDependencies);
⋮----
// if (key.includes("__deleted")) {
//   delete curPackage.devDependencies[key.split("__")[0]];
// }
⋮----
// browser list
⋮----
// log(curPackage);
⋮----
export const pullMasterToCurrentBranch = async () =>
⋮----
// commit & push everything, then try to merge "master" to current branch
⋮----
// await git.push();
⋮----
/**
 * @deprecated
 * @param all
 */
export const patchResources = async (all = true) =>
⋮----
// await copyFile();
⋮----
// "deployment/Dockerfile",
⋮----
// ".gitignore",
// ".dockerignore",
⋮----
// "docker-compose.yaml",
⋮----
// "next.config_three.js",
⋮----
// "postinstall.js",
⋮----
// hỏi trước
⋮----
// log("confirms", confirms);
⋮----
// sau đó mới copy files:
⋮----
export const writeConfigFiles = async (diginextContent, packageContent) =>
</file>

<file path="src/modules/bitbucket/permissions.ts">
import type { InputOptions } from "../../interfaces/InputOptions";
⋮----
/**
 * @param  {InputOptions} options
 * @param  {string} branch  master, staging, prod
 * @param  {('pull-request-only'|'fast-forward-only'|'no-deletes'|'read-only')} [type=null]  Permission type
 * @param  {('require_passing_builds_to_merge'|'force'|'require_all_dependencies_merged'|'allow_auto_merge_when_builds_pass'|'restrict_merges'|'enforce_merge_checks'|'reset_pullrequest_approvals_on_change'|'require_default_reviewer_approvals_to_merge'|'require_tasks_to_be_completed'|'require_approvals_to_merge'|'push'|'delete')} kind Permission kind
 * @param  {[string]} [groups = [{slug: "administrators"}]]  administrators, frontends, backends
 * @param  {[string]} [users = []]
 */
export const applyBranchPermissions = async (options: InputOptions, branch, type, kind, groups = [
⋮----
// TODO: get workspace name from git provider
// let branchPattern = `${branch}*`;
// let params = {
// 	type: type,
// 	kind: kind,
// 	pattern: branchPattern,
// 	groups: kind == "require_approvals_to_merge" ? null : groups,
// 	// users: users,
// 	value: kind == "push" || kind == "restrict_merges" ? null : 1,
// };
// // list
// let res = await bitbucket.repositories.listBranchRestrictions({
// 	workspace: config.workspace,
// 	repo_slug: options.projectSlug,
// });
// // console.log("Current restrictions:", res.data.values);
// let promises = [];
// res.data.values.map(async (restriction) => {
// 	if (restriction.pattern == branchPattern && restriction.kind == kind) {
// 		try {
// 			res = await bitbucket.repositories.updateBranchRestriction({
// 				workspace: config.workspace,
// 				repo_slug: options.projectSlug,
// 				id: restriction.id,
// 				_body: params,
// 			});
// 		} catch (e) {
// 			// console.log(e);
// 			logError(e);
// 		}
// 		promises.push(res);
// 	}
// });
// // apply
// try {
// 	res = await bitbucket.repositories.createBranchRestriction({
// 		workspace: config.workspace,
// 		repo_slug: options.projectSlug,
// 		_body: params,
// 	});
// } catch (e) {
// 	if (e.status == 409) {
// 		// nothing :)
// 	} else {
// 		await logBitbucketError(e, 400, "applyBranchPermissions");
// 	}
// }
</file>

<file path="src/modules/bitbucket/pipelines.ts">
export const enablePipelines = async () =>
⋮----
// TODO: get workspace name from git provider
// const workspace = "digitopvn";
// try {
// 	var { data, headers } = await bitbucket.repositories.updatePipelineConfig({
// 		workspace: workspace,
// 		repo_slug: projectSlug,
// 		_body: { enabled: true },
// 	});
// } catch (e) {
// 	await logBitbucketError(e, 400);
// }
⋮----
export const disablePipelines = async () =>
⋮----
// TODO: get workspace name from git provider
// const workspace = "digitopvn";
// try {
// 	var { data, headers } = await bitbucket.repositories.updatePipelineConfig({
// 		workspace: workspace,
// 		repo_slug: projectSlug,
// 		_body: { enabled: false },
// 	});
// } catch (e) {
// 	await logBitbucketError(e, 400);
// }
</file>

<file path="src/modules/bitbucket/promptForAuthOptions.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
// import { wait } from "@/plugins";
// import { conf } from "../..";
⋮----
export async function bitbucketAuthentication(options: InputOptions)
</file>

<file path="src/modules/build/build.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import { log, logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import humanizeDuration from "humanize-duration";
import { isEmpty, upperFirst } from "lodash";
import { model, Types } from "mongoose";
import PQueue from "p-queue";
import path from "path";
⋮----
import { Config, isServerMode } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import { type IApp, type IBuild, type IUser, type IWebhook, type IWorkspace, containerRegistrySchema } from "@/entities";
import type { BuildPlatform, BuildStatus, DeployStatus } from "@/interfaces/SystemTypes";
import { currentVersion, getGitProviderFromRepoSSH, Logger, resolveDockerfilePath } from "@/plugins";
import { filterUniqueItems } from "@/plugins/array";
import { MongoDB } from "@/plugins/mongodb";
import { getIO, socketIO } from "@/server";
import { WebhookService } from "@/services";
⋮----
import builder from "../builder";
import { BuildContainerError } from "../builder/docker";
import { createBuildSlug } from "../deploy/create-build-slug";
import { pullOrCloneGitRepoHTTP, repoSshToRepoURL } from "../git/git-utils";
import { connectRegistry } from "../registry/connect-registry";
import { sendLog } from "./send-log-message";
import { updateBuildStatus, updateBuildStatusByAppSlug } from "./update-build-status";
⋮----
export type StartBuildParams = {
	/**
	 * App's slug
	 */
	appSlug: string;

	/**
	 * Select a git branch to pull source code & build
	 */
	gitBranch: string;

	/**
	 * Build tag is also an container image's tag
	 */
	buildTag?: string;

	/**
	 * An incremental number of build
	 */
	buildNumber?: number;

	/**
	 * ID of the author
	 * - `If passing "userId", no need to pass "user" and vice versa.`
	 */
	userId?: string;

	/**
	 * {User} instance of the author
	 * - `If passing "user", no need to pass "userId" and vice versa.`
	 */
	user?: IUser;

	/**
	 * Slug of the Container Registry
	 */
	registrySlug: string;

	/**
	 * Select the deploy environment to build image, in this case, this info is using for selecting "Dockerfile"
	 * of specific deploy environment only, for example: "Dockerfile.dev" or "Dockerfile.prod",
	 * if you don't specify "env", a default "Dockerfile" will be selected.
	 * - **[OPTIONAL] SHOULD NOT rely on this!**
	 * - A build should be able to used for any deploy environments.
	 */
	env?: string;

	/**
	 * Path to the source code directory
	 * * [OPTIONAL] Only apply for CLI command, has no effects on API call
	 */
	buildDir?: string;

	/**
	 * Enable async to watch the build process
	 * @default true
	 */
	buildWatch?: boolean;

	/**
	 * Targeted platform arch: linux/arm64, linux/amd64,...
	 */
	platforms?: BuildPlatform[];

	/**
	 * Build arguments
	 */
	args?: { name: string; value: string }[];

	/**
	 * CLI version of client user
	 */
	cliVersion?: string;

	/**
	 * Current DXUP server version
	 */
	serverVersion?: string;

	/**
	 * Current DXUP server location
	 */
	serverLocation?: string;

	/**
	 * Enable debug mode
	 *
	 * @default false
	 */
	isDebugging?: boolean;

	/**
	 * If `TRUE`, skip trigger webhook notification & process deploy this build
	 *
	 * @default false
	 */
	shouldDeploy?: boolean;

	/**
	 * Revision message
	 */
	message?: string;
};
⋮----
/**
	 * App's slug
	 */
⋮----
/**
	 * Select a git branch to pull source code & build
	 */
⋮----
/**
	 * Build tag is also an container image's tag
	 */
⋮----
/**
	 * An incremental number of build
	 */
⋮----
/**
	 * ID of the author
	 * - `If passing "userId", no need to pass "user" and vice versa.`
	 */
⋮----
/**
	 * {User} instance of the author
	 * - `If passing "user", no need to pass "userId" and vice versa.`
	 */
⋮----
/**
	 * Slug of the Container Registry
	 */
⋮----
/**
	 * Select the deploy environment to build image, in this case, this info is using for selecting "Dockerfile"
	 * of specific deploy environment only, for example: "Dockerfile.dev" or "Dockerfile.prod",
	 * if you don't specify "env", a default "Dockerfile" will be selected.
	 * - **[OPTIONAL] SHOULD NOT rely on this!**
	 * - A build should be able to used for any deploy environments.
	 */
⋮----
/**
	 * Path to the source code directory
	 * * [OPTIONAL] Only apply for CLI command, has no effects on API call
	 */
⋮----
/**
	 * Enable async to watch the build process
	 * @default true
	 */
⋮----
/**
	 * Targeted platform arch: linux/arm64, linux/amd64,...
	 */
⋮----
/**
	 * Build arguments
	 */
⋮----
/**
	 * CLI version of client user
	 */
⋮----
/**
	 * Current DXUP server version
	 */
⋮----
/**
	 * Current DXUP server location
	 */
⋮----
/**
	 * Enable debug mode
	 *
	 * @default false
	 */
⋮----
/**
	 * If `TRUE`, skip trigger webhook notification & process deploy this build
	 *
	 * @default false
	 */
⋮----
/**
	 * Revision message
	 */
⋮----
export type RerunBuildParams = Pick<StartBuildParams, "platforms" | "args" | "registrySlug" | "buildTag" | "buildWatch">;
⋮----
export type StartBuildResult = {
	SOCKET_ROOM: string;
	build: IBuild;
	imageURL: string;
	buildImage: string;
	startTime: dayjs.Dayjs;
	builder: string;
};
⋮----
export async function testBuild()
⋮----
/**
 * Save build log content to database
 */
export async function saveLogs(buildSlug: string, logs: string)
⋮----
/**
 * Stop the build process.
 */
export const stopBuild = async (
	projectSlug: string,
	appSlug: string,
	buildSlug: string,
	status: BuildStatus = "failed",
	deployStatus: DeployStatus = "pending"
) =>
⋮----
// Validate...
⋮----
// Stop the f*cking buildx driver...
⋮----
// Update the status in the database
⋮----
export async function startBuild(
	params: StartBuildParams,
	options?: {
onSucceed?: (build: IBuild)
⋮----
// parse variables
⋮----
// require
⋮----
// optional
⋮----
// validate
⋮----
// get app info
⋮----
// project info
⋮----
// get workspace info
⋮----
// socket & logs
⋮----
// Emit socket message to request the BUILD SERVER to start building...
⋮----
// Validating...
⋮----
// the container registry to store this build image
⋮----
// Git repo of this app
⋮----
// get latest build of this app to utilize the cache for this build process
⋮----
// get app's repository data:
⋮----
/**
	 * ===============================================
	 * Specify BUILD DIRECTORY to pull source code to:
	 * ===============================================
	 */
⋮----
// detect "gitProvider" from git repo SSH URI:
⋮----
/**
	 * Generate build number & update build image data
	 */
⋮----
/**
	 * Create new build in database
	 */
⋮----
env, // <-- optional
⋮----
// versions
⋮----
// create a webhook
// TODO: check user notification settings -> subscribe to webhook
⋮----
/**
	 * Verify SSH before cloning/pulling files from a git repository.
	 */
⋮----
// const gitAuth = await verifySSH({ gitProvider });
// if (!gitAuth) {
// 	// print the logs to client (Dashboard & CLI)
// 	sendLog({
// 		SOCKET_ROOM,
// 		action: "end",
// 		type: "error",
// 		message: `[START BUILD] "${buildDir}" -> Failed to verify "${gitProvider}" git SSH key.`,
// 	});
// 	if (options?.onError) options?.onError(`[START BUILD] "${buildDir}" -> Failed to verify "${gitProvider}" git SSH key.`);
// 	// update build status
// 	await updateBuildStatus(newBuild, "failed");
// 	// dispatch/trigger webhook
// 	if (webhook) webhookSvc.trigger(MongoDB.toString(webhook._id), "failed");
// 	return;
// }
⋮----
async function notifyClientGitPullFailure(e)
⋮----
// print the logs to client (Dashboard & CLI)
⋮----
// update build status
⋮----
// dispatch/trigger webhook
⋮----
// Clone/pull with repoSSH first, if failed, try repoURL...
// try {
// 	await pullOrCloneGitRepo(repoSSH, buildDir, gitBranch, {
// 		onUpdate: (message) => sendLog({ SOCKET_ROOM, message }),
// 	});
// } catch (e) {
// 	// give another try with HTTPS and access token
// 	if (app.gitProvider) {
// 		const git = await DB.findOne("git", { _id: app.gitProvider });
// 		const repoURL = repoSshToRepoURL(repoSSH);
// 		try {
// 			await pullOrCloneGitRepoHTTP(repoURL, buildDir, gitBranch, {
// 				useAccessToken: {
// 					type: git.method === "basic" ? "Basic" : "Bearer",
// 					value: git.access_token,
// 				},
// 				onUpdate: (message) => sendLog({ SOCKET_ROOM, message }),
// 			});
// 		} catch (e2) {
// 			notifyClientGitPullFailure(e2);
// 		}
// 	} else {
// 		notifyClientGitPullFailure(e);
// 	}
// }
⋮----
// Clone or pull repository with HTTPS + access token:
⋮----
// find the git provider of this app:
⋮----
// try with any similar provider
⋮----
// console.log("git :>> ", git);
⋮----
// parse repo URL from repo SSH
⋮----
// notify client...
⋮----
// isDebugging: true,
⋮----
// emit socket message to "digirelease" app:
⋮----
/**
	 * Check if Dockerfile existed
	 */
⋮----
// update build status
⋮----
// dispatch/trigger webhook
⋮----
// Update app so it can be sorted on top!
⋮----
// update build status
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * =====================================================
	 * Build the app with BUILDER ENGINE (Docker or Podman):
	 * =====================================================
	 */
⋮----
const notifyClientBuildSuccess = async (finishedBuild: IBuild) =>
⋮----
// dispatch/trigger webhook
⋮----
// authenticate build engine with container registry before building & pushing image
⋮----
// notify dashboard client
⋮----
// dispatch/trigger webhook
⋮----
// callback
⋮----
// initialize build engine
⋮----
// send notification message to dashboard client
⋮----
// update build status as "success"
⋮----
// send notification message to dashboard client
⋮----
// dispatch/trigger webhook
⋮----
// send notification message to dashboard client
⋮----
// update build status as "success"
⋮----
// dispatch/trigger webhook
</file>

<file path="src/modules/build/create-release-from-app.ts">
import dayjs from "dayjs";
import { isEmpty } from "lodash";
⋮----
import type { IApp, IRelease, IUser, IWorkspace } from "@/entities";
import type { AppConfig } from "@/interfaces/AppConfig";
import { formatEnvVars } from "@/plugins/env-var";
⋮----
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import { fetchDeploymentFromContent } from "../deploy/fetch-deployment";
⋮----
type OwnershipParams = {
	author: IUser;
	workspace?: IWorkspace;
	cliVersion?: string;
};
⋮----
export const createReleaseFromApp = async (app: IApp, env: string, buildTag: string, ownership?: OwnershipParams) =>
⋮----
// if (!buildId) throw new Error(`Build not found due to "undefined" build id (app: "${app.slug}" - env: "${env}")`);
⋮----
// get deployment data
⋮----
// declare AppConfig
⋮----
// prepare release data
⋮----
// build status
⋮----
// deployment target
⋮----
// deployment
⋮----
// production
⋮----
// relationship
⋮----
// ownership
⋮----
// prerelease
⋮----
// create new release in the database
⋮----
// log("Created new Release successfully:", newRelease);
</file>

<file path="src/modules/build/create-release-from-build.ts">
import dayjs from "dayjs";
import { isEmpty } from "lodash";
⋮----
import type { IBuild, IRelease, IUser, IWorkspace } from "@/entities";
import type { AppConfig } from "@/interfaces/AppConfig";
import { formatEnvVars } from "@/plugins/env-var";
⋮----
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import { fetchDeploymentFromContent } from "../deploy/fetch-deployment";
⋮----
type OwnershipParams = {
	author: IUser;
	workspace?: IWorkspace;
	cliVersion?: string;
	appVersion?: string;
};
⋮----
export const createReleaseFromBuild = async (build: IBuild, env?: string, ownership?: OwnershipParams) =>
⋮----
// get app data
⋮----
// console.log("project :>> ", project);
⋮----
// get deployment data
⋮----
// console.log(`deployedEnvironment > ${env} :>>`, deployedEnvironment);
⋮----
// log({ deploymentData });
// log({ prereleaseDeploymentData });
⋮----
// declare AppConfig
⋮----
// prepare release data
⋮----
// build status
⋮----
// deployment target
⋮----
// deployment
⋮----
// production
⋮----
// relationship
⋮----
// ownership
⋮----
// if (env === "prod") {
// 	// prerelease
// 	data.preYaml = prereleaseDeploymentData.deployContent;
// 	data.prereleaseUrl = prereleaseDeploymentData.domains[0];
// }
⋮----
// create new release in the database
⋮----
// update "deployStatus" in a build
⋮----
// log("Created new Release successfully:", newRelease);
</file>

<file path="src/modules/build/exec-build.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
import type { SslIssuer } from "@/interfaces/SystemTypes";
import { makeSlug } from "@/plugins/slug";
⋮----
import { resolveDockerfilePath } from "../../plugins/utils";
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { updateAppConfig } from "../apps/update-config";
import { askForDomain } from "./ask-for-domain";
import { startBuildV1 } from "./start-build";
⋮----
/**
 * This command allow you to build & deploy your application directly from your machine, without requesting to the build server.
 * Notes that it could lead to platform conflicts if your machine & your cluster are running different OS.
 * @deprecated
 */
export async function execBuild(options: InputOptions)
⋮----
// check Dockerfile
⋮----
// ask for generated domains:
⋮----
// if they have any domains, ask if they want to use "letsencrypt":
⋮----
// if they select "custom" SSL certificate -> ask for secret name:
⋮----
// save domains & SSL configs
⋮----
// request build server to build & deploy:
</file>

<file path="src/modules/build/generate-build-tag.ts">
import type { IApp } from "@/entities";
import { getCurrentGitRepoData } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
⋮----
import { getLatestTagOfGitRepo } from "../git/git-utils";
⋮----
export async function generateBuildTagBySourceDir(sourceDir: string, options:
⋮----
export async function generateBuildTagByApp(app: IApp, options:
⋮----
export async function generateBuildTagByAppSlug(appSlug: string, options:
</file>

<file path="src/modules/build/index.ts">

</file>

<file path="src/modules/build/query-build.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
export const queryBuild = async (options: InputOptions) =>
⋮----
// TODO: CRUD for build
</file>

<file path="src/modules/build/request-build.ts">
import chalk from "chalk";
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import { io } from "socket.io-client";
⋮----
import { getCliConfig } from "@/config/config";
import type { AppGitInfo, IApp, IContainerRegistry, IProject } from "@/entities";
import type { InputOptions } from "@/interfaces";
import { fetchApi } from "@/modules/api/fetchApi";
import { getCurrentGitRepoData, resolveDockerfilePath } from "@/plugins";
⋮----
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { updateAppGitInfo } from "../apps/update-git-config";
import { createBuildSlug } from "../deploy/create-build-slug";
import { stageCommitAndPushAll } from "../git/git-utils";
import { askForRegistry } from "../registry/ask-for-registry";
import { generateBuildTagBySourceDir } from "./generate-build-tag";
import type { StartBuildParams } from "./index";
⋮----
/**
 * Request the build server to start building & deploying
 */
export async function requestBuild(options: InputOptions)
⋮----
// ask for project & app information
⋮----
// verify if this app's directory has any git remote integrated
⋮----
// container registry
⋮----
//
⋮----
// check Dockerfile -> no dockerfile, no build -> failed
⋮----
/**
	 * Generate build number & build image as docker image tag
	 */
⋮----
/**
	 * Stage, commit & push configuration files (dx.json) to GIT repository:
	 */
⋮----
// Stop the process if this throws any errors
⋮----
/**
	 * [5] Notify the commander & call API to request server build:
	 */
⋮----
// const deployOptions = JSON.stringify(options);
⋮----
// update the project so it can be sorted on top
⋮----
// friendly reminder
⋮----
// log("[CLI Server] Disconnected");
⋮----
// log("[CLI Server] Connected");
⋮----
// process.exit(1);
⋮----
// process.exit(0);
⋮----
// Max build duration: 30 mins
</file>

<file path="src/modules/build/send-log-message.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import stripAnsi from "strip-ansi";
⋮----
import { Logger } from "@/plugins";
import { socketIO } from "@/server";
⋮----
import { saveLogs } from "./build";
⋮----
type LogMessageOpts = {
	type?: "log" | "warn" | "error" | "success";
	action?: "log" | "end";
	SOCKET_ROOM: string;
	message: string;
};
⋮----
export function sendLog(options: LogMessageOpts)
⋮----
// save logs to database
</file>

<file path="src/modules/build/start-build-and-run.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
import type { SslIssuer } from "@/interfaces/SystemTypes";
import { getCurrentGitRepoData, resolveDockerfilePath } from "@/plugins";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { updateAppConfig } from "../apps/update-config";
import { updateAppGitInfo } from "../apps/update-git-config";
import { askForDomain } from "./ask-for-domain";
import { generateBuildTagBySourceDir } from "./generate-build-tag";
import { startBuildV1 } from "./start-build";
⋮----
export const startBuildAndRun = async (options: InputOptions) =>
⋮----
// try to find any "Dockerfile" to build, it it's not existed, throw error!
⋮----
// ask for generated domains:
⋮----
// if they have any domains, ask if they want to use "letsencrypt":
⋮----
// if they select "custom" SSL certificate -> ask for secret name:
⋮----
// save domains & SSL configs
⋮----
/**
	 * Generate build number as docker image tag
	 */
⋮----
options.slug = appConfig.slug; // ! required
options.projectSlug = appConfig.project; // ! required
options.namespace = namespace; // ! required
options.buildTag = tagInfo.tag; // ! required
options.buildImage = `${imageURL}:${options.buildTag}`; // ! required
</file>

<file path="src/modules/build/start-build.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import { log, logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import humanizeDuration from "humanize-duration";
import { isEmpty } from "lodash";
import PQueue from "p-queue";
import path from "path";
⋮----
import { CLI_CONFIG_DIR } from "@/config/const";
import type { IApp, IBuild, IRelease, IWorkspace } from "@/entities";
import type { InputOptions } from "@/interfaces/InputOptions";
import { getGitProviderFromRepoSSH, Logger, pullOrCloneGitRepo, resolveDockerfilePath, wait } from "@/plugins";
import { MongoDB } from "@/plugins/mongodb";
import { socketIO } from "@/server";
⋮----
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import builder from "../builder";
import { createBuildSlug } from "../deploy/create-build-slug";
import type { GenerateDeploymentV2Result } from "../deploy/generate-deployment-v2";
import { generateDeploymentV2 } from "../deploy/generate-deployment-v2";
import { verifySSH } from "../git";
import ClusterManager from "../k8s";
import { connectRegistry } from "../registry/connect-registry";
import { createReleaseFromBuild, sendLog, updateBuildStatus, updateBuildStatusByAppSlug } from "./index";
⋮----
/**
 * Stop the build process.
 */
export const stopBuild = async (projectSlug: string, appSlug: string, buildSlug: string) =>
⋮----
// Validate...
⋮----
// Stop the f*cking buildx driver...
⋮----
// Update the status in the database
⋮----
/**
 * Start build the app with {InputOptions}
 * @deprecated
 */
export async function startBuildV1(
	options: InputOptions,
	addition: {
		/**
		 * @default true
		 */
		shouldRollout?: boolean;
	} = { shouldRollout: true }
)
⋮----
/**
		 * @default true
		 */
⋮----
// parse variables
⋮----
// socket & logs
⋮----
// Emit socket message to request the BUILD SERVER to start building...
⋮----
// Validating...
⋮----
/**
	 * Specify BUILD DIRECTORY to pull source code:
	 * on build server, this is gonna be --> /mnt/build/{TARGET_DIRECTORY}/{REPO_BRANCH_NAME}
	 * /mnt/build/ -> additional disk (300GB) which mounted to this server on Digital Ocean.
	 */
⋮----
// detect "gitProvider":
⋮----
// create new build on build server:
⋮----
// verify SSH before pulling files...
⋮----
// Git SSH verified -> start pulling now...
⋮----
// emit socket message to "digirelease" app:
⋮----
/**
	 * Check if Dockerfile existed
	 */
⋮----
/**
	 * Validating app deploy environment
	 */
⋮----
// validating...
⋮----
/**
	 * Create namespace & imagePullScrets here!
	 * Because it will generate the name of secret to put into deployment yaml
	 */
⋮----
/**
	 * !!! IMPORTANT !!!
	 * Generate deployment data (YAML) & save the YAML deployment to "app.deployEnvironment[env]"
	 * So it can be used to create release from build
	 */
⋮----
// save log to database
⋮----
// sendLog({ SOCKET_ROOM, message: deploymentContent });
// if (env === "prod") sendLog({ SOCKET_ROOM, message: prereleaseDeploymentContent });
⋮----
// update data to deploy environment:
// serverDeployEnvironment.prereleaseUrl = prereleaseUrl;
⋮----
// serverDeployEnvironment.prereleaseDeploymentYaml = prereleaseDeploymentContent;
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// log(`[BUILD] App's last updated by "${updatedApp.lastUpdatedBy}".`);
⋮----
// build the app with Docker:
⋮----
// authenticate registry before building & pushing image
⋮----
// update build status as "success"
⋮----
/**
	 * ! If this is a Next.js project, upload ".next/static" to CDN:
	 */
// TODO: enable upload cdn while building source code:
// const nextStaticDir = path.resolve(options.targetDirectory, ".next/static");
// if (existsSync(nextStaticDir) && diginext.environment[env].cdn) {
// 	options.secondAction = "push";
// 	options.thirdAction = nextStaticDir;
// 	await execCDN(options);
// }
⋮----
// Insert this build record to server:
// let prereleaseDeploymentData = fetchDeploymentFromContent(prereleaseDeploymentContent);
⋮----
// log("Created new Release successfully:", newRelease);
⋮----
/**
	 * ! [WARNING]
	 * ! If "--fresh" flag was specified, the deployment's namespace will be deleted & redeploy from scratch!
	 */
⋮----
const onRolloutUpdate = (msg: string) => sendLog(
⋮----
// Print success:
⋮----
// if (env == "prod") {
// 	const { buildServerUrl } = getCliConfig();
// 	const rollOutUrl = `${buildServerUrl}/project/?lv1=release&project=${projectSlug}&app=${appSlug}&env=prod`;
⋮----
// 	sendLog({ SOCKET_ROOM, message: chalk.bold(chalk.yellow(`✓ Preview at: ${prereleaseDeploymentData.endpoint}`)), type: "success" });
⋮----
// 	sendLog({
// 		SOCKET_ROOM,
// 		message: chalk.bold(chalk.yellow(`✓ Review & publish at: ${rollOutUrl}`)),
// 		type: "success",
// 	});
⋮----
// 	sendLog({
// 		SOCKET_ROOM,
// 		message: chalk.bold(chalk.yellow(`✓ Roll out with CLI command:`), `$ dx rollout ${releaseId}`),
// 		type: "success",
// 	});
// } else {
// 	sendLog({ SOCKET_ROOM, message: chalk.bold(chalk.yellow(`✓ Preview at: ${endpoint}`)), type: "success" });
// }
⋮----
// i don't know, just for sure...
⋮----
// disconnect CLI client:
⋮----
// logSuccess(msg);
</file>

<file path="src/modules/build/update-build-status.ts">
import dayjs from "dayjs";
import { log, logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { IBuild, IProject } from "@/entities";
import type { BuildStatus, DeployStatus } from "@/interfaces/SystemTypes";
⋮----
export async function updateBuildStatus(build: IBuild, status: BuildStatus, options?:
⋮----
// update latest build to current app
⋮----
export async function updateBuildStatusByAppSlug(
	appSlug: string,
	buildSlug: string,
	buildStatus: BuildStatus,
	deployStatus: DeployStatus = "pending"
)
⋮----
// find the existing project
⋮----
// update latest build to current project
⋮----
// log(`[START BUILD] updateBuildStatus > projectSlug :>>`, projectSlug);
⋮----
// log(`[START BUILD] updateBuildStatus > updatedProject :>>`, updatedProject.latestBuild);
⋮----
// update latest build to current app
⋮----
// log(`[START BUILD] updateBuildStatus > updatedApp :>>`, updatedApp.latestBuild);
⋮----
// update build's status on server
⋮----
// log(`Update build status successfully >> ${app.slug} >> ${buildSlug} >> new status: ${buildStatus.toUpperCase()}`);
</file>

<file path="src/modules/build/update-release-status.ts">
import dayjs from "dayjs";
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { IRelease } from "@/entities";
import type { DeployStatus } from "@/interfaces/SystemTypes";
⋮----
export async function updateReleaseStatus(release: IRelease, status: DeployStatus, options?:
⋮----
export async function updateReleaseStatusById(releaseId: string, status: DeployStatus, options?:
⋮----
// find the existing releasse
</file>

<file path="src/modules/builder/docker.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
import { cliOpts } from "@/config/config";
import type { DockerImageType } from "@/interfaces/DockerResourceTypes";
import type { BuildPlatform } from "@/interfaces/SystemTypes";
import { execCmd, wait } from "@/plugins";
⋮----
interface DockerBuildOptions {
	dockerFile?: string;
	buildDirectory?: string;
	/**
	 * Set the target platform for the build.
	 */
	platforms?: BuildPlatform[];
	/**
	 * Will automatically push the build result to registry after build success.
	 */
	shouldPush?: boolean;
	/**
	 * Driver to use (available: `docker-container`, `remote`)
	 * - [DEFAULT] `docker-container`: Uses a BuildKit container that will be spawned via docker. With this driver, both building multi-platform images and exporting cache are supported.
	 * - `remote`: Uses a remote instance of buildkitd over an arbitrary connection. With this driver, you manually create and manage instances of buildkit yourself, and configure buildx to point at it.
	 *
	 * 	*Unlike docker driver, built images will not automatically appear in docker images and build --load needs to be used to achieve that.*
	 */
	driver?: "docker-container" | "remote";
	/**
	 * Builder container name
	 */
	builder?: string;
	/**
	 * Use an external cache source for a build.
	 * - [TYPE/DEFAULT] `registry`: can import cache from a cache manifest or (special) image configuration on the registry.
	 * - [TYPE] `local`: can import cache from local files previously exported with `--cache-to`.
	 * - [TYPE] `s3`: can import cache from a previously exported cache with `--cache-to` in your S3 bucket
	 * @example
	 * docker buildx build --cache-from=user/app:cache .
	 * docker buildx build --cache-from=user/app .
	 * docker buildx build --cache-from=type=registry,ref=user/app .
	 * docker buildx build --cache-from=type=local,src=path/to/cache .
	 * docker buildx build --cache-from=type=gha .
	 * docker buildx build --cache-from=type=s3,region=eu-west-1,bucket=mybucket .
	 */
	cacheFroms?: { type: "local" | "registry" | "s3"; value: string }[];
	/**
	 * Specify build arguments
	 * @example
	 * docker build --build-arg ARG_NAME_1=ARG_VALUE_1 --build-arg ARG_NAME_2=ARG_VALUE_2 -t IMAGE_NAME:TAG .
	 */
	args?: { name: string; value: string }[];
	/**
	 * Build logs listener
	 */
	onBuilding?: (message: string) => void;
	onError?: (message: string) => void;
}
⋮----
/**
	 * Set the target platform for the build.
	 */
⋮----
/**
	 * Will automatically push the build result to registry after build success.
	 */
⋮----
/**
	 * Driver to use (available: `docker-container`, `remote`)
	 * - [DEFAULT] `docker-container`: Uses a BuildKit container that will be spawned via docker. With this driver, both building multi-platform images and exporting cache are supported.
	 * - `remote`: Uses a remote instance of buildkitd over an arbitrary connection. With this driver, you manually create and manage instances of buildkit yourself, and configure buildx to point at it.
	 *
	 * 	*Unlike docker driver, built images will not automatically appear in docker images and build --load needs to be used to achieve that.*
	 */
⋮----
/**
	 * Builder container name
	 */
⋮----
/**
	 * Use an external cache source for a build.
	 * - [TYPE/DEFAULT] `registry`: can import cache from a cache manifest or (special) image configuration on the registry.
	 * - [TYPE] `local`: can import cache from local files previously exported with `--cache-to`.
	 * - [TYPE] `s3`: can import cache from a previously exported cache with `--cache-to` in your S3 bucket
	 * @example
	 * docker buildx build --cache-from=user/app:cache .
	 * docker buildx build --cache-from=user/app .
	 * docker buildx build --cache-from=type=registry,ref=user/app .
	 * docker buildx build --cache-from=type=local,src=path/to/cache .
	 * docker buildx build --cache-from=type=gha .
	 * docker buildx build --cache-from=type=s3,region=eu-west-1,bucket=mybucket .
	 */
⋮----
/**
	 * Specify build arguments
	 * @example
	 * docker build --build-arg ARG_NAME_1=ARG_VALUE_1 --build-arg ARG_NAME_2=ARG_VALUE_2 -t IMAGE_NAME:TAG .
	 */
⋮----
/**
	 * Build logs listener
	 */
⋮----
export class BuildContainerError extends Error
⋮----
constructor(
		public data: { imageName: string },
		message?: string
)
⋮----
/**
 * Build & push image using Docker
 * @param imageName Image name = "image_url:tag"
 * @returns Image URL of the build
 */
export const build = async (imageName: string, options?: DockerBuildOptions) =>
⋮----
/**
	 * @example
	 * docker buildx build -f Dockerfile --push -t asia.gcr.io/top-group-k8s/test-cli/front-end:2022-12-26-23-20-07 --cache-from type=registry,ref=asia.gcr.io/top-group-k8s/test-cli/front-end:2022-12-26-23-20-07 .
	 **/
⋮----
// latestBuild ? ` --cache-from type=registry,ref=${latestBuild.image}` : "";
⋮----
.filter((opt) => typeof opt !== "undefined") // <-- filter empty flags
⋮----
// docker build command:
⋮----
// just ignore cache import error
⋮----
/**
 * Stop the build
 * @returns Image URL of the build
 */
export const stopBuild = async (builder: string) =>
⋮----
await wait(500); // <-- just to be sure...
⋮----
// return false;
⋮----
export const getAllImages = async () =>
</file>

<file path="src/modules/builder/index.ts">

</file>

<file path="src/modules/builder/podman.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
import { cliOpts } from "@/config/config";
import type { BuildPlatform } from "@/interfaces/SystemTypes";
import { wait } from "@/plugins";
⋮----
import { BuildContainerError } from "./docker";
⋮----
interface PodmanBuildOptions {
	dockerFile?: string;
	buildDirectory?: string;
	/**
	 * Set the target platform for the build.
	 */
	platforms?: BuildPlatform[];
	// platforms?: ("arm" | "arm64" | "386" | "amd64" | "ppc64le" | "s390x")[];
	/**
	 * Will automatically push the build result to registry after build success.
	 */
	shouldPush?: boolean;
	/**
	 * Builder container name
	 */
	builder?: string;
	/**
	 * Use an external cache source for a build.
	 * - [TYPE/DEFAULT] `registry`: can import cache from a cache manifest or (special) image configuration on the registry.
	 * - [TYPE] `local`: can import cache from local files previously exported with `--cache-to`.
	 * - [TYPE] `s3`: can import cache from a previously exported cache with `--cache-to` in your S3 bucket
	 * @example
	 * docker buildx build --cache-from=user/app:cache .
	 * docker buildx build --cache-from=user/app .
	 * docker buildx build --cache-from=type=registry,ref=user/app .
	 * docker buildx build --cache-from=type=local,src=path/to/cache .
	 * docker buildx build --cache-from=type=gha .
	 * docker buildx build --cache-from=type=s3,region=eu-west-1,bucket=mybucket .
	 */
	cacheFroms?: { type: "local" | "registry" | "s3"; value: string }[];
	/**
	 * Specify build arguments
	 * @example
	 * docker build --build-arg ARG_NAME_1=ARG_VALUE_1 --build-arg ARG_NAME_2=ARG_VALUE_2 -t IMAGE_NAME:TAG .
	 */
	args?: { name: string; value: string }[];
	/**
	 * Build logs listener
	 */
	onBuilding?: (message: string) => void;
	onError?: (message: string) => void;
}
⋮----
/**
	 * Set the target platform for the build.
	 */
⋮----
// platforms?: ("arm" | "arm64" | "386" | "amd64" | "ppc64le" | "s390x")[];
/**
	 * Will automatically push the build result to registry after build success.
	 */
⋮----
/**
	 * Builder container name
	 */
⋮----
/**
	 * Use an external cache source for a build.
	 * - [TYPE/DEFAULT] `registry`: can import cache from a cache manifest or (special) image configuration on the registry.
	 * - [TYPE] `local`: can import cache from local files previously exported with `--cache-to`.
	 * - [TYPE] `s3`: can import cache from a previously exported cache with `--cache-to` in your S3 bucket
	 * @example
	 * docker buildx build --cache-from=user/app:cache .
	 * docker buildx build --cache-from=user/app .
	 * docker buildx build --cache-from=type=registry,ref=user/app .
	 * docker buildx build --cache-from=type=local,src=path/to/cache .
	 * docker buildx build --cache-from=type=gha .
	 * docker buildx build --cache-from=type=s3,region=eu-west-1,bucket=mybucket .
	 */
⋮----
/**
	 * Specify build arguments
	 * @example
	 * docker build --build-arg ARG_NAME_1=ARG_VALUE_1 --build-arg ARG_NAME_2=ARG_VALUE_2 -t IMAGE_NAME:TAG .
	 */
⋮----
/**
	 * Build logs listener
	 */
⋮----
/**
 * Build & push image using Podman
 * @param imageName Image name = "image_url:tag"
 * @returns Image URL of the build
 */
export const build = async (imageName: string, options?: PodmanBuildOptions) =>
⋮----
// driver = "docker-container",
⋮----
/**
	 * @example
	 * docker buildx build -f Dockerfile --push -t asia.gcr.io/top-group-k8s/test-cli/front-end:2022-12-26-23-20-07 --cache-from type=registry,ref=asia.gcr.io/top-group-k8s/test-cli/front-end:2022-12-26-23-20-07 .
	 **/
⋮----
// const buildContextNameFlag = !isEmpty(builder) ? `--name ${builder}` : "";
⋮----
// await execCmd(
// 	`docker buildx create ${platformFlag} --driver ${driver} ${buildContextNameFlag}`,
// 	"Docker build context instance was existed, no worries, just ignoring this message."
// );
⋮----
// latestBuild ? ` --cache-from type=registry,ref=${latestBuild.image}` : "";
⋮----
/**
	 * --cache-from: repository must contain neither a tag nor digest
	 */
⋮----
/**
	 * ulimit flag
	 * - https://manpages.ubuntu.com/manpages/lunar/man1/podman-build.1.html
	 */
⋮----
/**
	 * Path to "Dockerfile" flag
	 */
⋮----
/**
	 * Image tag
	 */
⋮----
/**
	 * Context directory
	 */
⋮----
// all build options tags
⋮----
.filter((opt) => typeof opt !== "undefined") // <-- filter empty flags
⋮----
// docker build command:
⋮----
/**
 * Stop the build
 * @returns Image URL of the build
 */
export const stopBuild = async (builder: string) =>
⋮----
// await execaCommand(`docker buildx stop ${builder}`, cliOpts);
// await execaCommand(`docker buildx stop buildx_buildkit_${builder}`, cliOpts);
await wait(500); // <-- just to be sure...
</file>

<file path="src/modules/capture/export-pdf.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { existsSync, mkdirSync } from "fs";
import path from "path";
import puppeteer from "puppeteer";
⋮----
import { Config } from "@/app.config";
import { CLI_DIR } from "@/config/const";
⋮----
export type ExportPDFOptions = {
	viewport?: {
		/**
		 * The page width in pixels.
		 */
		width: number;
		/**
		 * The page height in pixels.
		 */
		height: number;
		/**
		 * Specify device scale factor.
		 * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio | devicePixelRatio} for more info.
		 *
		 * @remarks
		 * Setting this value to `0` will set the deviceScaleFactor to the system default.
		 *
		 * @defaultValue `1`
		 */
		deviceScaleFactor?: number;
		/**
		 * Whether the `meta viewport` tag is taken into account.
		 * @defaultValue `false`
		 */
		isMobile?: boolean;
		/**
		 * Specifies if the viewport is in landscape mode.
		 * @defaultValue `false`
		 */
		isLandscape?: boolean;
		/**
		 * Specify if the viewport supports touch events.
		 * @defaultValue `false`
		 */
		hasTouch?: boolean;
	};
	printBackground?: boolean;
	path?: string;
	format?: "letter" | "legal" | "tabloid" | "ledger" | "a0" | "a1" | "a2" | "a3" | "a4" | "a5" | "a6";
	scale?: number;
	margin?: {
		top?: string | number;
		bottom?: string | number;
		left?: string | number;
		right?: string | number;
	};
	displayHeaderFooter?: boolean;
	/**
	 * Hides default white background and allows generating pdfs with transparency.
	 * @defaultValue `false`
	 */
	omitBackground?: boolean;
};
⋮----
/**
		 * The page width in pixels.
		 */
⋮----
/**
		 * The page height in pixels.
		 */
⋮----
/**
		 * Specify device scale factor.
		 * See {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio | devicePixelRatio} for more info.
		 *
		 * @remarks
		 * Setting this value to `0` will set the deviceScaleFactor to the system default.
		 *
		 * @defaultValue `1`
		 */
⋮----
/**
		 * Whether the `meta viewport` tag is taken into account.
		 * @defaultValue `false`
		 */
⋮----
/**
		 * Specifies if the viewport is in landscape mode.
		 * @defaultValue `false`
		 */
⋮----
/**
		 * Specify if the viewport supports touch events.
		 * @defaultValue `false`
		 */
⋮----
/**
	 * Hides default white background and allows generating pdfs with transparency.
	 * @defaultValue `false`
	 */
⋮----
const exportPdf = async (url: string, options: ExportPDFOptions = defaultExportPdfOptions) =>
⋮----
// upload directory
⋮----
"--disable-dev-shm-usage", // <-- add this one
⋮----
// disable cache...
⋮----
// res.contentType("application/pdf");
// res.send(pdfBuffer);
</file>

<file path="src/modules/capture/screenshot.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { existsSync, mkdirSync } from "fs";
import path from "path";
import type { ScreenshotOptions, Viewport } from "puppeteer";
import puppeteer from "puppeteer";
⋮----
import { Config } from "@/app.config";
import { CLI_DIR } from "@/config/const";
⋮----
export type CaptureScreenshotOptions = {
	/**
	 * @default png
	 */
	type?: "png" | "jpeg" | "webp";
	/**
	 * The file path to save the image to. The screenshot type will be inferred
	 * from file extension. If path is a relative path, then it is resolved
	 * relative to current working directory. If no path is provided, the image
	 * won't be saved to the disk.
	 */
	path?: string;
	/**
	 * When `true`, takes a screenshot of the full page.
	 * @default false
	 */
	fullPage?: boolean;
	/**
	 * An object which specifies the clipping region of the page.
	 */
	clip?: {
		x: number;
		y: number;
		width: number;
		height: number;
		/**
		 * @default 1
		 */
		scale?: number;
	};
	/**
	 * Quality of the image, between 0-100. Not applicable to `png` images.
	 */
	quality?: number;
	/**
	 * Hides default white background and allows capturing screenshots with transparency.
	 * @default false
	 */
	omitBackground?: boolean;
	/**
	 * Encoding of the image.
	 * @default binary
	 */
	encoding?: "base64" | "binary";
	/**
	 * Capture the screenshot beyond the viewport.
	 * @default true
	 */
	captureBeyondViewport?: boolean;
	/**
	 * Capture the screenshot from the surface, rather than the view.
	 * @default true
	 */
	fromSurface?: boolean;
};
⋮----
/**
	 * @default png
	 */
⋮----
/**
	 * The file path to save the image to. The screenshot type will be inferred
	 * from file extension. If path is a relative path, then it is resolved
	 * relative to current working directory. If no path is provided, the image
	 * won't be saved to the disk.
	 */
⋮----
/**
	 * When `true`, takes a screenshot of the full page.
	 * @default false
	 */
⋮----
/**
	 * An object which specifies the clipping region of the page.
	 */
⋮----
/**
		 * @default 1
		 */
⋮----
/**
	 * Quality of the image, between 0-100. Not applicable to `png` images.
	 */
⋮----
/**
	 * Hides default white background and allows capturing screenshots with transparency.
	 * @default false
	 */
⋮----
/**
	 * Encoding of the image.
	 * @default binary
	 */
⋮----
/**
	 * Capture the screenshot beyond the viewport.
	 * @default true
	 */
⋮----
/**
	 * Capture the screenshot from the surface, rather than the view.
	 * @default true
	 */
⋮----
const screenshot = async (url: string, options: ScreenshotOptions = defaultExportPdfOptions) =>
⋮----
// upload directory
⋮----
"--disable-dev-shm-usage", // <-- add this one
⋮----
// disable cache...
⋮----
// res.contentType("application/pdf");
// res.send(pdfBuffer);
</file>

<file path="src/modules/cdn/ask-for-storage.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { ICloudStorage } from "@/entities";
⋮----
export const askForStorage = async () =>
⋮----
// console.log("list :>> ", list);
</file>

<file path="src/modules/cdn/cdn.service.ts">
import cliProgress from "cli-progress";
import { firstElement } from "diginext-utils/dist/array";
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import fs from "fs";
import path from "path";
⋮----
import type { ICloudStorage } from "@/entities";
⋮----
import type { InputOptions } from "../../interfaces/InputOptions";
import { getAppConfig, invalidateCache, resolveEnvFilePath, wait } from "../../plugins";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { askForStorage } from "./ask-for-storage";
⋮----
// config
⋮----
// const defaultPattern = "./{public,.next/static}/**/*.*";
⋮----
// const pattern = "./public/**/*.*";
⋮----
// let projectSlug = "";
// let shouldOptimize = false;
// let isProduction = false;
⋮----
// progress bar
⋮----
// testing
// startUpload();
⋮----
type UploadCallbackParams = { env: string; project?: string; items?: any[] };
type UploadCompleteCallback = (params: UploadCallbackParams) => void;
⋮----
async function purgeDirectory(dirPath, options)
⋮----
// GOOGLE CLOUD
⋮----
// const command = `gcloud compute url-maps invalidate-cdn-cache digitop-cdn-lb --host google-cdn.digitop.vn --path '${dirPath}' --async`;
// log(command);
// await cliContainerExec(command, options);
⋮----
// Use GOOGLE CDN HELPER API:
⋮----
async function upload(env, onComplete, options)
⋮----
// filePath = filePath.replace("public/", `public${version}/`);
⋮----
const checkFinish = (resolve) =>
⋮----
// FINISH UPLOADING...
⋮----
// UPLOAD TO GOOGLE CLOUD STORAGE:
⋮----
// attach "version" to destination files
⋮----
// NOTE: For "Next.js" project only
⋮----
// init service
⋮----
// use service to upload
⋮----
// console.log("uploadRes :>> ", uploadRes);
// await uploadFile(filePath, destination);
⋮----
function uploadBatch(concurrency: number, env: string, onComplete: () => void, options?:
⋮----
/**
 * Upload static files of current working project to Cloud Storage
 */
export async function startUpload(options: InputOptions, onComplete?: UploadCompleteCallback)
⋮----
// ask for project
⋮----
// ask for storage
⋮----
// reset arrays
⋮----
// parse static directory path:
⋮----
// log(`Uploading "${uploadPathPattern}" to "${DIGITOP_CDN_URL}/${projectName}/${env}"`);
⋮----
function onFinishUpload()
⋮----
// NOTE: max wait time: 8 hours
⋮----
export async function purgeProject(options)
⋮----
// GOOGLE CLOUD
⋮----
export async function purgeAllCache(options)
⋮----
// GOOGLE CLOUD
⋮----
// DIGITAL OCEAN
// TODO: Implement DigitalOcean SPACE purging cache feature
⋮----
export const loadVersionCacheCDNFromEnv = (options: InputOptions) =>
⋮----
//
⋮----
//load .env.prod
⋮----
// search NEXT_PUBLIC_VERSION_CDN in env
// add NEXT_PUBLIC_VERSION_CDN if not found !!! edited: DO NOT ADD
// return version
⋮----
// fs.appendFileSync(envFilePath, `\nNEXT_PUBLIC_VERSION_CDN=${version}`);
⋮----
export function enableCDN(options)
⋮----
export function disableCDN(options)
</file>

<file path="src/modules/cdn/index.ts">
import { logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
import { logHelp } from "../../plugins/utils";
import { disableCDN, enableCDN, loadVersionCacheCDNFromEnv, purgeProject, startUpload } from "./cdn.service";
⋮----
export async function execCDN(options: InputOptions)
⋮----
// purge cdn cache
// await purgeAllCache({
//   production: options.isProd,
// });
</file>

<file path="src/modules/cli/account.ts">
import chalk from "chalk";
import Table from "cli-table";
import { logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty, trimEnd } from "lodash";
import open from "open";
⋮----
import { Config } from "@/app.config";
import type { CliConfig } from "@/config/config";
import { getCliConfig, saveCliConfig } from "@/config/config";
import type { IRole } from "@/entities";
import type { AccessTokenInfo, IUser } from "@/entities/User";
import type { IWorkspace } from "@/entities/Workspace";
import type InputOptions from "@/interfaces/InputOptions";
import { fetchApi } from "@/modules/api/fetchApi";
import { MongoDB } from "@/plugins/mongodb";
⋮----
interface CliLoginOptions {
	/**
	 * URL of the build server, specify with the second action of CLI
	 */
	secondAction?: string;

	/**
	 * URL of the build server, specify with `--url` flag
	 */
	url?: string;

	/**
	 * The access token to authenticate, specify with `--token` or `--key` flag
	 */
	accessToken?: string;

	/**
	 * The API_ACCESS_TOKEN to authenticate, specify with `--api-token` or `--api-key` flag
	 */
	apiToken?: string;

	isDebugging?: boolean;
}
⋮----
/**
	 * URL of the build server, specify with the second action of CLI
	 */
⋮----
/**
	 * URL of the build server, specify with `--url` flag
	 */
⋮----
/**
	 * The access token to authenticate, specify with `--token` or `--key` flag
	 */
⋮----
/**
	 * The API_ACCESS_TOKEN to authenticate, specify with `--api-token` or `--api-key` flag
	 */
⋮----
export const showProfile = async (options: InputOptions) =>
⋮----
export const cliLogin = async (options: CliLoginOptions) =>
⋮----
// remove old "refresh_token"
⋮----
// open login page of build server:
⋮----
// validate the "access_token" -> get "userId":
⋮----
// "access_token" is VALID -> save it to local machine!
⋮----
// If no workspace existed, throw error! (because workspace creation flow is on the admin UI)
⋮----
// save this user & workspace to CLI config
⋮----
export const cliLogout = async () =>
⋮----
export async function cliAuthenticate(options: InputOptions)
⋮----
// check old build server url
⋮----
const continueToLoginStep = async (url: string) =>
⋮----
// clear old/expired/cached "access_token" and "refresh_token"
⋮----
// request login API
⋮----
// don't give up, keep trying...
⋮----
// Assign user & workspace to use across all CLI commands
⋮----
// Save "currentUser", "access_token", "refresh_token" for next API requests
</file>

<file path="src/modules/cli/get-server-info.ts">
import axios from "axios";
⋮----
import { getCliConfig } from "@/config/config";
⋮----
export type ServerInfo = {
	version: string;
	location: string;
};
⋮----
export async function getServerInfo(): Promise<ServerInfo>
</file>

<file path="src/modules/cli/index.ts">

</file>

<file path="src/modules/cli/show-cli-info.ts">
import Table from "cli-table";
⋮----
import { getCliConfig } from "@/config/config";
import type { IRole, IWorkspace } from "@/entities";
import type { InputOptions } from "@/interfaces";
import { getOS } from "@/plugins";
⋮----
import { getServerInfo } from "./get-server-info";
⋮----
export const showClientInfo = async (options: InputOptions) =>
⋮----
// try {
// 	table.push(["Docker", (await execa("docker", ["-v"])).stdout]);
// } catch (e) {
// 	table.push(["Docker", "N/A"]);
// }
// try {
// 	table.push(["Podman", (await execa("podnan", ["-v"])).stdout]);
// } catch (e) {
// 	table.push(["Podman", "N/A"]);
// }
⋮----
// table.push(["CLI Dir", CLI_DIR]);
// table.push(["CLI Config", CLI_CONFIG_FILE]);
⋮----
// project & app
</file>

<file path="src/modules/cli/update-cli.ts">
import { progressCmd } from "../../plugins";
⋮----
/**
 * Update current CLI version
 */
export const updateCli = async (version = "latest", options?:
</file>

<file path="src/modules/cluster/ask-for-cluster.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { ICluster } from "@/entities";
⋮----
export const askForCluster = async () =>
</file>

<file path="src/modules/cluster/cli-cluster.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type { ICluster } from "@/entities";
import type InputOptions from "@/interfaces/InputOptions";
⋮----
import { fetchApi } from "../api";
import { askForCluster } from "../cluster/ask-for-cluster";
import { authCluster } from "../k8s/cluster-auth";
⋮----
export const execCluster = async (options?: InputOptions) =>
⋮----
// if (options.isDebugging) console.log("[COMMAND] cluster > connect > cluster :>> ", cluster);
⋮----
// get cluster's credentials
⋮----
// execute cluster authentication
⋮----
// do something
⋮----
// do something
⋮----
// do something
</file>

<file path="src/modules/cronjob/calculate-next-run-at.ts">
import chalk from "chalk";
import dayjs from "dayjs";
⋮----
import type { ICronjob } from "@/entities/Cronjob";
import { weekDays } from "@/entities/Cronjob";
import { sortedDaysOfWeek } from "@/plugins/array";
⋮----
export const calculateNextRunAt = (job: ICronjob, options?:
⋮----
// repeat condition:
/**
		 * Examples:
		 * ✓ Every month (monthly), at [weekdays: "mon", "tue", "fri"]
		 * ✓ Every day (daily), at [weekdays: "mon", "tue", "fri"]
		 * ✓ Every 5 minutes, at [hours: 13,14,18]
		 * ✓ Every 2 hours, at [minutes: 5,10] and [weekdays: mon,wed,thu,sat]
		 */
⋮----
// check end date
</file>

<file path="src/modules/cronjob/cancel-job.ts">
import { logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import { type ICronjob } from "@/entities/Cronjob";
⋮----
export const cancelCronjob = async (job: ICronjob) =>
⋮----
export const cancelCronjobById = async (id: string) =>
</file>

<file path="src/modules/cronjob/find-and-run-job.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import { logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
import { weekDays } from "@/entities/Cronjob";
⋮----
import { runCronjob } from "./run-job";
⋮----
export const findAndRunCronjob = async (workspaceId?: string) =>
⋮----
// find & execute jobs...
⋮----
// else {
// 	if (IsDev()) log(`[CRONJOB] Cronjob checking: found ${jobs.length} to execute.`);
// }
</file>

<file path="src/modules/cronjob/index.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type { ICronjob } from "@/entities/Cronjob";
⋮----
import type { InputOptions } from "../../interfaces/InputOptions";
⋮----
/**
 * Sub-commands of `dx cronjob`
 */
export async function execCronjob(options: InputOptions)
⋮----
//...
⋮----
//...
⋮----
//...
</file>

<file path="src/modules/cronjob/run-job.ts">
import axios from "axios";
import dayjs from "dayjs";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import { type CronjobHistory, type ICronjob } from "@/entities/Cronjob";
⋮----
import { calculateNextRunAt } from "./calculate-next-run-at";
⋮----
export const runCronjob = async (job: ICronjob) =>
⋮----
// call api request of the cronjob:
⋮----
// add to cronjob's history:
⋮----
// add to cronjob's history:
⋮----
// schedule a next run:
</file>

<file path="src/modules/cronjob/schedule.ts">
import { type CronjobDto, type CronjobRepeat, type CronjobRequest, type CronjonRepeatCondition } from "@/entities/Cronjob";
⋮----
export async function createCronjobAtTime(name: string, request: CronjobRequest, time: Date, ownership:
⋮----
export async function createCronjobRepeat(
	name: string,
	request: CronjobRequest,
	repeat: CronjobRepeat,
	condition: CronjonRepeatCondition,
	ownership: { owner: string; workspace: string }
)
⋮----
// insert to database
</file>

<file path="src/modules/db/ask-databases.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { ICloudDatabase } from "@/entities";
⋮----
export async function askForDatabase()
</file>

<file path="src/modules/db/index.ts">
import { logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type { ICloudDatabase } from "@/entities";
⋮----
import type { InputOptions } from "../../interfaces/InputOptions";
import { askForDatabase } from "./ask-databases";
import MySQL from "./mysql";
import PostgreSQL from "./pg";
⋮----
/**
 *
 * @param {InputOptions} options
 * @param {InputOptions.env} env
 * @returns {InputOptions}
 */
export async function execDatabase(options: InputOptions, env)
⋮----
url: db.url, // <-- only mongodb
⋮----
// db = await askForDatabase();
⋮----
// ...
⋮----
// ...
⋮----
// ...
</file>

<file path="src/modules/db/mysql.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logError } from "diginext-utils/dist/xconsole/log";
import { existsSync, mkdirSync } from "fs";
import path from "path";
⋮----
import { STORAGE_DIR } from "@/config/const";
⋮----
export type MysqlConnectionInfo = {
	host: string;
	/**
	 * @default 3306
	 */
	port?: string;
	/**
	 * @default root
	 */
	user?: string;
	pass: string;
};
⋮----
/**
	 * @default 3306
	 */
⋮----
/**
	 * @default root
	 */
⋮----
export const checkConnection = async (options: MysqlConnectionInfo &
⋮----
export const backup = async (
	options: Partial<MysqlConnectionInfo> & {
		/**
		 * @default all-databases
		 */
		dbName?: string;
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * Output directory
		 */
		outDir?: string;
		/**
		 * Backup ID
		 */
		backupId?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * @default all-databases
		 */
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * Output directory
		 */
⋮----
/**
		 * Backup ID
		 */
⋮----
// "--column-statistics=false",
⋮----
export const restore = async (
	options: Partial<MysqlConnectionInfo> & {
		/**
		 * Database name
		 */
		dbName: string;
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * Backup path
		 */
		path?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * Database name
		 */
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * Backup path
		 */
</file>

<file path="src/modules/db/pg.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logError } from "diginext-utils/dist/xconsole/log";
import { existsSync, mkdirSync } from "fs";
import path from "path";
⋮----
import { STORAGE_DIR } from "@/config/const";
⋮----
export type PostgresConnectionInfo = {
	/**
	 * Connection string
	 */
	url?: string;
	/**
	 * Database name
	 * @default admin
	 */
	dbName?: string;
	/**
	 * @default admin
	 */
	authDb?: string;
	host: string;
	/**
	 * @default 5432
	 */
	port?: string;
	/**
	 * @default root
	 */
	user?: string;
	pass: string;
};
⋮----
/**
	 * Connection string
	 */
⋮----
/**
	 * Database name
	 * @default admin
	 */
⋮----
/**
	 * @default admin
	 */
⋮----
/**
	 * @default 5432
	 */
⋮----
/**
	 * @default root
	 */
⋮----
export const getConnectionString = (options: Partial<PostgresConnectionInfo>) =>
⋮----
export const checkConnection = async (options: PostgresConnectionInfo &
⋮----
export const backup = async (
	options: Partial<PostgresConnectionInfo> & {
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * Output directory
		 */
		outDir?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * Output directory
		 */
⋮----
export const restore = async (
	options: Partial<PostgresConnectionInfo> & {
		/**
		 * Database name
		 * @default "all-databases"
		 */
		dbName?: string;
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * Path to backup ".dump"
		 */
		path?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * Database name
		 * @default "all-databases"
		 */
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * Path to backup ".dump"
		 */
</file>

<file path="src/modules/deploy/utils/deploy-checker.ts">
import type { KubePod } from "@/interfaces/KubePod";
import ClusterManager from "@/modules/k8s";
import { waitUntil } from "@/plugins";
⋮----
export class DeploymentReadinessChecker
⋮----
constructor(
⋮----
async checkPodHealth(pods: KubePod[])
⋮----
// const runningPods = pods.filter((pod) => pod.status?.phase === "Running");
⋮----
async getPods()
⋮----
/**
	 * Wait until no creating pods every `interval` seconds (Max wait time is 5 minutes)
	 * @param interval - Interval time in seconds
	 * @param maxWaitTime - Max wait time in seconds
	 */
async waitUntilNoCreatingPods(interval = 10, maxWaitTime = 5 * 60)
⋮----
/**
	 * Wait until at least one new pod is running
	 */
async waitUntilAtLeastOnePodIsRunning()
⋮----
// Check if any pods are crashed and throw an error if so
⋮----
async isDeploymentReady(requiredReplicas: number, options?:
</file>

<file path="src/modules/deploy/utils/deploy-cleaner.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import ClusterManager from "@/modules/k8s";
⋮----
export class DeploymentCleaner
⋮----
constructor(
⋮----
async cleanupOldDeployments(appName: string, currentVersion: string): Promise<void>
⋮----
private async cleanupIngress(appName: string, currentVersion: string)
⋮----
private async cleanupServices(appName: string, currentVersion: string)
⋮----
private async cleanupDeployments(appName: string, currentVersion: string)
</file>

<file path="src/modules/deploy/utils/deploy-error-handler.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { WebhookEventStatus } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
import { WebhookService } from "@/services";
⋮----
export interface DeploymentErrorContext {
	releaseId: string;
	buildId: string;
	appSlug: string;
	env: string;
	namespace: string;
	cluster: string;
}
⋮----
export class DeploymentErrorHandler
⋮----
constructor(db: any)
⋮----
async handleDeploymentError(
		error: Error | string,
		context: DeploymentErrorContext,
		onUpdate?: (msg: string) => void
): Promise<
⋮----
// Log error
⋮----
// Trigger webhook if exists
⋮----
// Update release status
⋮----
// Update build status
⋮----
// Notify update callback
⋮----
private async triggerWebhook(context: DeploymentErrorContext, status: WebhookEventStatus)
⋮----
private async updateReleaseStatus(context: DeploymentErrorContext, status: "failed" | "success")
⋮----
private async updateBuildStatus(context: DeploymentErrorContext, status: "failed" | "success")
</file>

<file path="src/modules/deploy/utils/deploy-preparator.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type { ICluster } from "@/entities";
import ClusterManager from "@/modules/k8s";
⋮----
export class DeploymentPreparator
⋮----
constructor(
⋮----
async prepareNamespace(onUpdate?: (msg: string) => void): Promise<boolean>
⋮----
// Check if namespace exists
⋮----
async createImagePullSecrets(onUpdate?: (msg: string) => void): Promise<
⋮----
async applyDeployment(processedYaml: string, message: string, onUpdate?: (msg: string) => void): Promise<void>
⋮----
// Apply the deployment YAML
⋮----
// Annotate the deployment
⋮----
private extractDeploymentName(yaml: string): string | null
</file>

<file path="src/modules/deploy/utils/deploy-scaler.ts">
import ClusterManager from "@/modules/k8s";
import { waitUntil } from "@/plugins";
⋮----
import { DeploymentReadinessChecker } from "./deploy-checker";
⋮----
export class DeploymentScaler
⋮----
constructor(
⋮----
async scaleDeployment(
		deploymentName: string,
		targetReplicas: number,
		timeout = 300 // 5 minutes
): Promise<boolean>
⋮----
timeout = 300 // 5 minutes
⋮----
"", // No specific version for scaling existing deployment
⋮----
5, // 5 second intervals
</file>

<file path="src/modules/deploy/utils/deploy-yaml-processor.ts">
import yaml from "js-yaml";
⋮----
import type { KubeDeployment, KubeIngress, KubeService } from "@/interfaces";
import { makeSlug } from "@/plugins/slug";
⋮----
export interface DeploymentDetails {
	deploymentName: string;
	mainAppName: string;
	appVersion: string;
	newReplicas: number;
}
⋮----
export class DeploymentYamlProcessor
⋮----
constructor(deploymentYaml: string)
⋮----
processDeploymentYaml(): DeploymentDetails
⋮----
// Extract deployment name
⋮----
// Extract or generate main app name
⋮----
// Extract app version
⋮----
// Store original replica count
⋮----
// Temporarily set replicas to 2 to avoid downtime
⋮----
// Ensure version label is set
⋮----
// Add labels to pod template
⋮----
getProcessedYaml(): string
</file>

<file path="src/modules/deploy/utils/index.ts">

</file>

<file path="src/modules/deploy/ask-ai-generate-dockerfile.ts">
import chalk from "chalk";
import { logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
import { execAI } from "../ai/exec-ai";
⋮----
/**
 * Prompt a question to ask for Cert Issuer: Let's Encrypt, Custom Issuer or None
 * @param options
 * @returns
 */
export const askAiGenerateDockerfile = async (options: InputOptions) =>
</file>

<file path="src/modules/deploy/ask-deploy-environment-info.ts">
import chalk from "chalk";
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty, isNaN } from "lodash";
⋮----
import type { AppGitInfo, ICloudProvider, ICluster, IContainerRegistry } from "@/entities";
import type { InputOptions, SslType } from "@/interfaces";
import { availableSslTypes } from "@/interfaces";
import { getCurrentGitRepoData, resolveEnvFilePath } from "@/plugins";
import { isNumeric } from "@/plugins/number";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import { updateAppConfig } from "../apps/update-config";
import { updateAppGitInfo } from "../apps/update-git-config";
import { askForDomain } from "../build";
import { askForCluster } from "../cluster/ask-for-cluster";
import { askForRegistry } from "../registry/ask-for-registry";
import { checkGitignoreContainsDotenvFiles } from "./dotenv-exec";
import { uploadDotenvFileByApp } from "./dotenv-upload";
⋮----
type DeployEnvironmentRequestOptions = {
	imageURL?: string;
} & InputOptions;
⋮----
/**
 * Prompt a question to ask for Cert Issuer: Let's Encrypt, Custom Issuer or None
 * @param options
 * @returns
 */
export const askForCertIssuer = async (options:
⋮----
export const askForDeployEnvironmentInfo = async (options: DeployEnvironmentRequestOptions) =>
⋮----
// ask for project & app information
⋮----
// verify if this app's directory has any git remote integrated
⋮----
/**
	 * -----------------------------------------------------------------------
	 * FETCH SERVER APP DEPLOYMENT CONFIG & COMPARE WITH THE LOCAL APP CONFIG
	 * -----------------------------------------------------------------------
	 * If one of these condition matched, terminate the previous deployment & deploy a new one:
	 * - "project" is different
	 * - "app" is different
	 * - "cluster" is different
	 * - "namespace" is different
	 */
⋮----
// TODO: move this part to server side?
// if (
// 	serverAppConfig.project !== localAppConfig.project ||
// 	serverAppConfig.slug !== localAppConfig.slug ||
// 	serverDeployEnvironment.cluster !== localDeployEnvironment.cluster ||
// 	serverDeployEnvironment.namespace !== localDeployEnvironment.namespace
// ) {
// 	// Call API to terminate previous deployment
// 	const { buildServerUrl } = getCliConfig();
// 	const terminateData = { slug: serverAppConfig.slug, env };
// 	// console.log("terminateData :>> ", terminateData);
// 	const { status, messages } = await fetchApi({
// 		url: `${buildServerUrl}/api/v1/app/environment`,
// 		method: "DELETE",
// 		data: terminateData,
// 	});
// 	if (!status) {
// 		logWarn(`Can't terminate app's deploy environment:`, messages);
// 	} else {
// 		log(`Terminated "${app.slug}" app's "${env}" deploy environment since the app config was changed.`);
// 	}
// }
⋮----
/**
	 * PARSE LOCAL DEPLOYMENT CONFIG & ASK FOR MISSING INFO
	 */
⋮----
// request cluster
⋮----
// request domains
// console.log("deployEnvironment.domains :>> ", deployEnvironment.domains);
⋮----
// TODO: check for domain DNS ?
⋮----
// request container registry
⋮----
// ALWAYS UPDATE NEW "imageURL"
// if (!serverDeployEnvironment.imageURL) {
⋮----
// }
⋮----
// request ingress class
// deployEnvironment.ingress;
⋮----
// request namespace
⋮----
// request port
⋮----
// request inherit previous deployment config
⋮----
// request cdn
⋮----
// request replicas
⋮----
// request container size
⋮----
// const { selectedSize } = await inquirer.prompt<{ selectedSize: ResourceQuotaSize }>({
// 	type: "list",
// 	name: "selectedSize",
// 	message: "Please select your default container registry:",
// 	choices: availableResourceSizes.map((r) => {
// 		return { name: r, value: r };
// 	}),
// });
// serverDeployEnvironment.size = selectedSize;
⋮----
// request SSL config
⋮----
// leave empty so the build server will generate it automatically
⋮----
// if they select "custom" SSL certificate -> ask for secret name:
⋮----
// TODO: remove domains from database
⋮----
/**
	 * UPDATE APP CONFIG ON SERVER:
	 * (save app & its deploy environment data to database)
	 */
⋮----
// fetched latest app on server
⋮----
/**
	 * UPLOAD ENVIRONMENT VARIABLES
	 * ---
	 * Check database to see should sync ENV variables or not...
	 */
⋮----
// console.log("envFile :>> ", envFile);
⋮----
// if "--upload-env" flag is specified:
⋮----
// if ENV file is existed on local & not available on server -> ask to upload local ENV to server:
⋮----
// [SECURITY CHECK] warns if DOTENV files are not listed in ".gitignore" file
</file>

<file path="src/modules/deploy/create-build-slug.ts">
export type CreateBuildSlugParams = {
	projectSlug: string;
	appSlug: string;
	buildTag: string;
};
⋮----
export function createBuildSlug(params: CreateBuildSlugParams)
</file>

<file path="src/modules/deploy/deploy-build.ts">
import { isEmpty, isUndefined } from "lodash";
import path from "path";
⋮----
import { isServerMode } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import type { IApp, IBuild, ICluster, IProject, IRelease, IUser, IWebhook, IWorkspace } from "@/entities";
import { filterUniqueItems } from "@/plugins/array";
import { MongoDB } from "@/plugins/mongodb";
import { WebhookService } from "@/services";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import { updateAppConfig } from "../apps/update-config";
import { createReleaseFromBuild, sendLog } from "../build";
import { updateReleaseStatusById } from "../build/update-release-status";
import ClusterManager from "../k8s";
import { createBuildSlug } from "./create-build-slug";
import type { FetchDeploymentResult } from "./fetch-deployment";
import type { GenerateDeploymentResult } from "./generate-deployment";
import type { GenerateDeploymentV2Result } from "./generate-deployment-v2";
import { generateDeploymentV2 } from "./generate-deployment-v2";
⋮----
export type DeployBuildOptions = {
	/**
	 * ### `REQUIRED`
	 * Deploy environment
	 */
	env: string;
	/**
	 * ### `REQUIRED`
	 * The USER who process this request
	 */
	owner: IUser;
	/**
	 * ### `REQUIRED`
	 * Workspace
	 */
	workspace: IWorkspace;
	/**
	 * Current version of the Diginext CLI
	 */
	cliVersion?: string;
	/**
	 * ### CAUTION
	 * If `TRUE`, it will find and wipe out the current deployment, then deploy a new one!
	 */
	shouldUseFreshDeploy?: boolean;
	/**
	 * ### ONLY APPLY FOR DEPLOYING to PROD
	 * Force roll out the release to "prod" deploy environment (skip the "prerelease" environment)
	 * @default false
	 */
	forceRollOut?: boolean;
	/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
	skipReadyCheck?: boolean;
	/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
	deployInBackground?: boolean;
};
⋮----
/**
	 * ### `REQUIRED`
	 * Deploy environment
	 */
⋮----
/**
	 * ### `REQUIRED`
	 * The USER who process this request
	 */
⋮----
/**
	 * ### `REQUIRED`
	 * Workspace
	 */
⋮----
/**
	 * Current version of the Diginext CLI
	 */
⋮----
/**
	 * ### CAUTION
	 * If `TRUE`, it will find and wipe out the current deployment, then deploy a new one!
	 */
⋮----
/**
	 * ### ONLY APPLY FOR DEPLOYING to PROD
	 * Force roll out the release to "prod" deploy environment (skip the "prerelease" environment)
	 * @default false
	 */
⋮----
/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
⋮----
/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
⋮----
export type DeployBuildResult = {
	app: IApp;
	build: IBuild;
	release: IRelease;
	deployment: GenerateDeploymentResult;
	endpoint: string;
	prerelease: FetchDeploymentResult;
};
⋮----
export const processDeployBuild = async (build: IBuild, release: IRelease, cluster: ICluster, options: DeployBuildOptions) =>
⋮----
// webhook
⋮----
// authenticate cluster & switch to that cluster's context
⋮----
// target environment info
⋮----
/**
	 * Create namespace & imagePullScrets here!
	 * Because it will generate the name of secret to put into deployment yaml
	 */
⋮----
/**
	 * Checking "imagePullSecrets" in a namepsace
	 */
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * Checking NGINX Ingress:
	 * - If there are a similar domain in different namespace -> throw error
	 */
⋮----
// dispatch/trigger webhook
⋮----
// dispatch/trigger webhook
⋮----
// Start rolling out new release
/**
	 * ! [WARNING]
	 * ! If "--fresh" flag was specified, the deployment's namespace will be deleted & redeploy from scratch!
	 */
// console.log("[DEPLOY BUILD] options.shouldUseFreshDeploy :>> ", options.shouldUseFreshDeploy);
⋮----
// dispatch/trigger webhook
⋮----
const onRolloutUpdate = (msg: string) =>
⋮----
// if any errors on rolling out -> stop processing deployment
⋮----
// if normal log message -> print out to the Web UI
⋮----
// dispatch/trigger webhook
⋮----
// dispatch/trigger webhook
⋮----
// dispatch/trigger webhook
⋮----
export const deployBuild = async (build: IBuild, options: DeployBuildOptions): Promise<DeployBuildResult> =>
⋮----
// parse options
⋮----
// build directory
⋮----
// get deploy environment data
⋮----
// generate 'namespace' if it's not exists
⋮----
// reload app & deploy environment data...
⋮----
// validate deploy environment data...
⋮----
// find cluster
⋮----
// get app config to generate deployment data
⋮----
/**
	 * !!! IMPORTANT !!!
	 * Generate deployment data (YAML) & save the YAML deployment to "app.environment[env]"
	 * So it can be used to create release from build
	 */
⋮----
// save log to database
⋮----
// update data to deploy environment:
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// console.log("updatedApp.deployEnvironment[env].envVars :>> ", updatedApp.deployEnvironment[env].envVars);
⋮----
// log(`[BUILD] App's last updated by "${updatedApp.lastUpdatedBy}".`);
⋮----
// update "deployStatus" of a build
⋮----
// Create new Release:
// let prereleaseDeploymentData = fetchDeploymentFromContent(prereleaseDeploymentContent);
⋮----
// create webhook
⋮----
// console.log("consumers :>> ", consumers);
⋮----
// process deploy build to cluster
⋮----
export const deployWithBuildSlug = async (buildSlug: string, options: DeployBuildOptions) =>
</file>

<file path="src/modules/deploy/deploy-release.ts">
import type { IBuild, IRelease } from "@/entities";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import type { DeployBuildOptions } from "./deploy-build";
import { deployBuildV2 } from "./deploy-build-v2";
⋮----
export interface DeployReleaseOptions extends DeployBuildOptions {
	release: string;
	releaseSlug?: string;
}
⋮----
/**
 * Deploy from a release (using V2 strategy)
 */
export const deployRelease = async (release: IRelease, options: DeployBuildOptions) =>
⋮----
// find a build
⋮----
export const deployWithReleaseSlug = async (releaseSlug: string, options: DeployBuildOptions) =>
</file>

<file path="src/modules/deploy/deploy-rollout.ts">
import chalk from "chalk";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { existsSync, mkdirSync } from "fs";
import yaml from "js-yaml";
import { isEmpty } from "lodash";
import path from "path";
⋮----
import { isServerMode, IsTest } from "@/app.config";
import { CLI_DIR } from "@/config/const";
import type { ICluster, IRelease, IUser, IWorkspace } from "@/entities";
import type { IResourceQuota, KubeIngress, KubeService } from "@/interfaces";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import ClusterManager from "@/modules/k8s";
import { logPodByFilter } from "@/modules/k8s/kubectl";
import { objectToDeploymentYaml, waitUntil } from "@/plugins";
import { MongoDB } from "@/plugins/mongodb";
import { makeSlug } from "@/plugins/slug";
import { WebhookService } from "@/services";
⋮----
import getDeploymentName from "./generate-deployment-name";
import { markReleaseAsActive } from "./mark-release-as-active";
⋮----
export interface RolloutOptions {
	isDebugging?: boolean;
	onUpdate?: (msg?: string) => void;
}
⋮----
export interface CheckDeploymentReadyOptions {
	/**
	 * Cluster's context (in ".kubeconfig")
	 */
	context?: string;
	namespace: string;
	appName: string;
	appVersion?: string;
	replicas?: number;
	onUpdate?: (msg?: string) => void;
	skipCrashedPods?: boolean;
	isDebugging?: boolean;
}
⋮----
/**
	 * Cluster's context (in ".kubeconfig")
	 */
⋮----
const checkDeploymentReady = async (options: CheckDeploymentReadyOptions) =>
⋮----
// Skip crashed pods
⋮----
// if (isDebugging) log(`[ROLL OUT V2] "${appVersion}" > checking ${pods.length} pods > pod.status.conditions:`);
⋮----
// notify to the dashboard:
⋮----
/**
 * Clean up namespace's resources by app version
 * @param cluster - Cluster
 * @param appVersion - App's version
 */
export async function cleanUpNamespace(cluster: ICluster, namespace: string, appName: string, appVersion: string)
⋮----
// Clean up Prerelease YAML
⋮----
// Delete INGRESS to optimize cluster
⋮----
// Delete Prerelease SERVICE to optimize cluster
⋮----
// Clean up Prerelease Deployments
⋮----
// Clean up immediately & just ignore if any errors
⋮----
// * Print success:
⋮----
/**
 * Roll out a release (V2)
 * @param releaseId - Release ID
 */
export async function rolloutV2(releaseId: string, options: RolloutOptions =
⋮----
projectSlug, // ! This is not PROJECT_ID of Google Cloud provider
⋮----
// webhook
⋮----
// log(`Rolling out the release: "${releaseSlug}" (ID: ${id})`);
⋮----
// get the app
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// log(`Rolling out > app:`, app);
⋮----
/**
	 * App's version (for service & deployment selector)
	 */
⋮----
// log(`Rolling out > mainAppName:`, mainAppName);
⋮----
// authenticate cluster's provider & switch kubectl to that cluster:
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// log(`Rolling out > Checked connectivity of "${clusterSlug}" cluster.`);
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// create temporary directory to store release's yaml
⋮----
// ! NEW WAY -> LESS DOWNTIME WHEN ROLLING OUT NEW DEPLOYMENT !
⋮----
/**
	 * Check if there is any prod namespace, if not -> create one
	 */
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// create "imagePullSecret" in namespace:
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
/**
	 * Start applying new deployment YAML
	 */
⋮----
// important: set new deployment's replicas to "deployReplicas" for temporary -> set back later (avoid downtime)
⋮----
//
⋮----
// check ingress domain has been used yet or not:
⋮----
// console.log("domains :>> ", domains);
⋮----
// await ClusterManager.deleteIngress(deleteIng.metadata.name, deleteIng.metadata.namespace, { context });
// if (onUpdate)
// 	onUpdate(
// 		`Domain "${usedDomain}" has been used before at "${deleteIng.metadata.namespace}" namespace -> Deleted "${deleteIng.metadata.name}" ingress to create a new one.`
// 	);
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
/**
	 * Scale current deployment up to many replicas before apply new deployment YAML
	 * But if there are many crashed pods -> skip scaling up
	 */
⋮----
// wait 10 secs
// await wait(30 * 1000);
// await ClusterManager.setDeployImageAll(deploymentName, `${deployEnvironment.imageURL}:${deployEnvironment.buildTag}`, namespace, { context });
⋮----
// wait until an old deployment has been scaled successfully
⋮----
// isDebugging: true,
⋮----
/**
	 * Apply new deployment yaml
	 */
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
/**
	 * Annotate new deployment with app version
	 */
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
/**
	 * Wait until the deployment is ready!
	 * (Ignore crashed pods)
	 */
⋮----
// Check if all new pods are crashed
⋮----
// Dispatch/trigger webhook
⋮----
// Update release as "failed"
⋮----
// Update "deployStatus" of a build to "failed"
⋮----
// check interval: 5 secs
⋮----
// max wait time: 10 mins
⋮----
// Try to get the container logs and print to the web ui
⋮----
// throw the error
⋮----
// print out the logs in server side:
⋮----
// dispatch/trigger webhook
⋮----
// update release as "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// Scale new deployment to new replicas
⋮----
// Print success:
⋮----
// Mark this latest release as "active":
⋮----
// dispatch/trigger webhook
⋮----
// Update "deployStatus" of a build to "failed"
⋮----
// Update "deployStatus" of a build to success
⋮----
// Update project to sort by latest release
⋮----
// Assign this release as "latestRelease" of this app's deploy environment
⋮----
/**
	 * 5. Clean up > Delete old deployments (IF ANY)
	 * - Skip CLEAN UP task on test environment
	 */
⋮----
/**
		 * NOTE: Clean up DEPRECATED deployments (from OLD CLI <3.33.11 deployments)
		 */
// if (isServerMode && env === "prod") {
</file>

<file path="src/modules/deploy/dotenv-download.ts">
import { logSuccess } from "diginext-utils/dist/xconsole/log";
import { existsSync, unlinkSync, writeFileSync } from "fs";
import inquirer from "inquirer";
import path from "path";
⋮----
import type { IApp } from "@/entities";
import { kubeEnvToDotenv } from "@/plugins";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { checkGitignoreContainsDotenvFiles } from "./dotenv-exec";
⋮----
type DownloadDotenvOptions = {
	/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
	targetDir?: string;
	/**
	 * Output file name
	 * @default `.env.{env}`
	 * @example ".env.dev" | ".env.prod"
	 */
	fileName?: string;
	/**
	 * Should overwrite the existing file
	 */
	overwrite?: boolean;
	isDebugging?: boolean;
};
⋮----
/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
⋮----
/**
	 * Output file name
	 * @default `.env.{env}`
	 * @example ".env.dev" | ".env.prod"
	 */
⋮----
/**
	 * Should overwrite the existing file
	 */
⋮----
export const getDotenvContentByApp = (app: IApp, env: string = "dev") =>
⋮----
export const downloadDotenvByApp = async (app: IApp, env: string = "dev", options: DownloadDotenvOptions =
⋮----
export const downloadDotenvByAppSlug = async (appSlug: string, env: string = "dev", options: DownloadDotenvOptions =
⋮----
export const downloadDotenv = async (env: string, options: DownloadDotenvOptions =
⋮----
// [SECURITY CHECK] warns if DOTENV files are not listed in ".gitignore" file
</file>

<file path="src/modules/deploy/dotenv-exec.ts">
import chalk from "chalk";
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import { existsSync, readFileSync } from "fs";
import { last } from "lodash";
import path from "path";
import yargs from "yargs";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
import { downloadDotenv } from "./dotenv-download";
import { uploadDotenvFile } from "./dotenv-upload";
⋮----
type DotenvUtilsOptions = {
	/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
	targetDir?: string;
};
⋮----
/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
⋮----
export const checkGitignoreContainsDotenvFiles = async (options: DotenvUtilsOptions =
⋮----
export const execDotenvCommand = async (options?: InputOptions) =>
⋮----
// take down the whole project & all of its apps
⋮----
// take down the whole app & all of its environments
⋮----
// show help
</file>

<file path="src/modules/deploy/dotenv-upload.ts">
import { log, logError } from "diginext-utils/dist/xconsole/log";
import { existsSync } from "fs";
import path from "path";
⋮----
import type { IApp } from "@/entities";
import type { InputOptions } from "@/interfaces";
import type { CreateEnvVarsDto } from "@/interfaces/AppInterfaces";
import { loadEnvFileAsContainerEnvVars } from "@/plugins";
⋮----
import { fetchApi } from "../api";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { checkGitignoreContainsDotenvFiles } from "./dotenv-exec";
⋮----
type UploadDotenvOptions = {
	/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
	targetDir?: string;
	/**
	 * Output file name
	 * @default `.env.{env}`
	 * @example ".env.dev" | ".env.prod"
	 */
	fileName?: string;
	isDebugging?: boolean;
};
⋮----
/**
	 * Location to write down the dotenv file
	 * @default process.cwd()
	 */
⋮----
/**
	 * Output file name
	 * @default `.env.{env}`
	 * @example ".env.dev" | ".env.prod"
	 */
⋮----
export const uploadDotenvFileByApp = async (envFile: string, app: IApp, env: string = "dev", options?: InputOptions) =>
⋮----
// log({ containerEnvVars });
⋮----
// update env vars to database:
⋮----
// const updateData = flattenObjectPaths(updateAppData);
⋮----
// console.log("[DB] UPDATE > result :>> ", result);
⋮----
// const [updatedApp] = await DB.update<App>("app", { slug: appSlug }, updateAppData);
⋮----
export const uploadDotenvFileByAppSlug = async (envFile: string, appSlug: string, env: string = "dev", options?: InputOptions) =>
⋮----
export const uploadDotenvFile = async (env: string = "dev", options: UploadDotenvOptions =
⋮----
// [SECURITY CHECK] warns if DOTENV files are not listed in ".gitignore" file
</file>

<file path="src/modules/deploy/exec-rollout.ts">
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { IRelease } from "@/entities";
import type InputOptions from "@/interfaces/InputOptions";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import fetchApi from "../api/fetchApi";
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import ClusterManager from "../k8s";
⋮----
export const execRollOut = async (options?: InputOptions) =>
⋮----
// log({ data });
</file>

<file path="src/modules/deploy/exec-takedown.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
/**
 * Take down the whole project & all of its apps
 * @example
 * dx down project
 * @param  {InputOptions} options
 */
export const takedownProject = async (options?: InputOptions) =>
⋮----
// TODO: Implement take down an app from a cluster
⋮----
/**
 * Take down the whole app & all of its environments
 * @example
 * dx down app
 * dx down app <app-slug>
 * @param  {InputOptions} options
 */
export const takedownApp = async (options?: InputOptions) =>
⋮----
// TODO: Implement take down an app from a cluster
⋮----
/**
 * Take down the whole app & all of its environments
 * @example
 * dx down
 * dx down --prod
 * dx down --env=canary
 * @param  {InputOptions} options
 */
export const takedownEnvironment = async (options?: InputOptions) =>
⋮----
// TODO: Implement take down an app from a cluster
⋮----
export async function execTakeDown(options?: InputOptions)
⋮----
// TODO: implement take down app deployment
⋮----
// take down the whole project & all of its apps
⋮----
// take down the whole app & all of its environments
⋮----
// take down a specific environment:
⋮----
// show help
</file>

<file path="src/modules/deploy/fetch-deployment.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import fs from "fs";
import yaml from "js-yaml";
import path from "path";
⋮----
import type { KubeDeployment } from "@/interfaces";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { InputOptions } from "@/interfaces/InputOptions";
⋮----
export type FetchDeploymentResult = {
	domains: string[];
	endpoint: string;
	deployContent: string;
	deployYaml: string;
	NAMESPACE: string;
	SERVICE_NAME: string;
	INGRESS_NAME: string;
	IMAGE_NAME: string;
	ENV_VARS: KubeEnvironmentVariable[];
	APP_NAME: string;
	REPLICAS: number;
	PORT: number;
	BUILD_TAG: string;
};
⋮----
export const fetchDeploymentFromContent = (content: string): FetchDeploymentResult =>
⋮----
// console.log("deploymentData :>> ", deploymentData);
⋮----
// End point of the application:
⋮----
// get build number:
⋮----
// console.log("BUILD_NUMBER :>> ", BUILD_NUMBER);
⋮----
/**
 * @param  {InputOptions} options
 */
⋮----
export function fetchDeployment(filePath: string, options: InputOptions =
⋮----
// current deployment file:
⋮----
// Thay thế IMAGE_NAME vào deployment YAML:
</file>

<file path="src/modules/deploy/generate-deployment-name.ts">
import type { IApp, IProject } from "@/entities";
import { makeSlug } from "@/plugins/slug";
⋮----
/**
 * Generate a deployment name that use for deployment YAML (Ingress, Service, Deployment,...)
 * @param app {IApp} - Must populated "project" field
 * @returns
 */
export default async function getDeploymentName(app: IApp)
</file>

<file path="src/modules/deploy/index.ts">

</file>

<file path="src/modules/deploy/mark-long-build-release-as-failed.ts">
import { logSuccess } from "diginext-utils/dist/xconsole/log";
import mongoose from "mongoose";
⋮----
import type { IBuild, IRelease } from "@/entities";
import { buildSchema, releaseSchema } from "@/entities";
⋮----
/**
 * Mark all builds & releases with "in_progress" status longer than 1 hour as "failed"
 */
export async function markLongRunningBuildAndReleaseAsFailed()
⋮----
// longer than 1 hour
⋮----
// console.log("builds.modifiedCount :>> ", builds.modifiedCount);
⋮----
// longer than 1 hour
⋮----
// console.log("releases.modifiedCount :>> ", releases.modifiedCount);
</file>

<file path="src/modules/deploy/mark-release-as-active.ts">
import { MongoDB } from "@/plugins/mongodb";
import { ReleaseService } from "@/services";
⋮----
export async function markReleaseAsActive(params:
⋮----
// Mark previous releases as "inactive":
⋮----
// Mark this latest release as "active":
</file>

<file path="src/modules/deploy/promote-deploy-environment.ts">
import type { IBuild } from "@/entities";
⋮----
import { DB } from "../api/DB";
import type { DeployBuildV2Options } from "./deploy-build-v2";
import { deployBuildV2 } from "./deploy-build-v2";
⋮----
export type PromoteDeployEnvironmentOptions = {
	/**
	 * @default false
	 */
	isDebugging?: boolean;
	/**
	 * App's slug
	 */
	appSlug: string;
	/**
	 * Original deploy environment (FROM)
	 */
	fromEnv: string;
} & DeployBuildV2Options;
⋮----
/**
	 * @default false
	 */
⋮----
/**
	 * App's slug
	 */
⋮----
/**
	 * Original deploy environment (FROM)
	 */
⋮----
export async function promoteDeployEnvironment(options: PromoteDeployEnvironmentOptions)
⋮----
// copy port from original deploy environment
⋮----
// default options: wait for deploy to finish
</file>

<file path="src/modules/deploy/query-release.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
export const queryRelease = async (options: InputOptions) =>
⋮----
// TODO: CRUD for release
</file>

<file path="src/modules/diginext/dx-ask-ai.ts">
import { IsTest } from "@/app.config";
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type AskAiMessage = {
	role: "user" | "system" | "assistant";
	content:
		| string
		| {
				type: "text";
				text: string;
		  }
		| {
				type: "image_url";
				text:
					| string
					| {
							url: string;
							detail?: string | undefined;
					  };
		  };
};
⋮----
export type AskAiParams = {
	model?: string;
	messages: AskAiMessage[];
};
⋮----
export type AskAiResponseData = {
	object: "chat.completion" | "chat.completion.chunk";
	model: string;
	id: string;
	choices: {
		message: {
			role: string;
			content: string | null;
		};
		finish_reason: string | null;
		error?:
			| {
					code: number;
					message: string;
			  }
			| undefined;
	}[];
	created: number;
	system_fingerprint: string;
	usage: {
		prompt_tokens: number;
		completion_tokens: number;
		total_tokens: number;
	};
};
⋮----
export type AskAiResponse = ResponseData & {
	data: AskAiResponseData;
};
⋮----
export async function dxAskAi(params: AskAiParams, dxKey: string, options?:
</file>

<file path="src/modules/diginext/dx-email.ts">
import { IsTest } from "@/app.config";
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type SendEmailOptions = {
	/**
	 * Array of the recipient's info
	 */
	recipients: { name?: string; email: string }[];
	subject: string;
	content: string;
};
⋮----
/**
	 * Array of the recipient's info
	 */
⋮----
export type SendDiginextEmailResponse = ResponseData & {
	data: { succeed?: number; failure?: number };
};
⋮----
export async function dxSendEmail(params: SendEmailOptions, dxKey: string, options?:
</file>

<file path="src/modules/diginext/dx-package.ts">
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
import type { DxSubsription } from "./dx-subscription";
⋮----
export type DxPackage = {
	id?: string;
	slug?: string;
	name?: string;
	description?: string;
	type?: string;
	price?: number;
	currency?: string;
	quota?: any;
	visible?: boolean;
	disable?: boolean;
	userId?: string;
	createdAt?: string;
	updatedAt?: string;
};
⋮----
export type SubscribeParams = {
	userEmail: string;
	userName?: string;
	name?: string;
	packageId?: string;
};
⋮----
export type SubscribeResponse = ResponseData & {
	data: DxSubsription;
};
⋮----
export type PackageResponse = ResponseData & {
	data: DxPackage[];
};
⋮----
export async function dxGetPackages()
⋮----
export async function dxSubscribe(params: SubscribeParams)
</file>

<file path="src/modules/diginext/dx-subscription.ts">
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type CheckQuotaParams = {
	projects: number;
	apps: number;
	concurrentBuilds: number;
	containerSize: number;
};
⋮----
export type DxSubsription = {
	id?: string;
	slug?: string;
	name?: string;
	paid?: number;
	currency?: string;
	key?: string;
	packageId?: string;
	packageType?: string;
	userId?: string;
	expiredAt?: string;
	createdAt?: string;
	updatedAt?: string;
};
⋮----
export type CheckQuotaResponse = ResponseData & {
	data: { isExceed: boolean };
};
⋮----
export async function dxCheckQuota(params: CheckQuotaParams, dxKey: string)
</file>

<file path="src/modules/diginext/dx-user.ts">
import type { Types } from "mongoose";
⋮----
import { IsTest } from "@/app.config";
import type { ProviderInfo } from "@/entities/User";
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type IBodyCreateUser = {
	email: string;
	image?: string;
	name: string;
	username?: string;
	password?: string;
	metadata?: any;
	providers?: ProviderInfo;
	workspaces?: Types.Array<any>;
	roles?: Types.Array<any>;
	isActive: boolean;
};
⋮----
export type CreateUserResponse = ResponseData & {
	data: { name: string; createdAt: string; updatedAt: string };
};
⋮----
export async function dxCreateUser(params: IBodyCreateUser, options?:
</file>

<file path="src/modules/diginext/dx-workspace.ts">
import dayjs from "dayjs";
⋮----
import { IsTest } from "@/app.config";
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type CreateWorkspaceParams = {
	userId: string;
	name: string;
	public: boolean;
	email?: string;
	subscriptionId?: string;
};
⋮----
export type CreateWorkspaceResponse = ResponseData & {
	data: { name: string; slug: string; domain: string; subscriptionId: string; createdAt: string; updatedAt: string };
};
export type JoinWorkspaceResponse = ResponseData & {
	data: { name: string; createdAt: string; updatedAt: string };
};
⋮----
export async function dxCreateWorkspace(params: CreateWorkspaceParams, options?:
⋮----
export async function dxJoinWorkspace(email: string, slug: string, dxKey: string, options?:
⋮----
// export async function dxIsOnwerWorkspace(userId: string, workspaceId: string) {
// 	console.log("CHECK IS OWNER WORKSPACE");
// 	if (IsTest()) {
// 		return
// 	}
// }
</file>

<file path="src/modules/diginext/index.ts">

</file>

<file path="src/modules/domains/execDomain.ts">
import { logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
import { dxCreateDomain } from "../diginext/dx-domain";
⋮----
export const execDomain = async (options?: InputOptions) =>
</file>

<file path="src/modules/domains/index.ts">

</file>

<file path="src/modules/frameworks/github-trends.ts">
import puppeteer from "puppeteer";
⋮----
export interface TrendingRepository {
	name: string;
	url: string;
	stars: number;
	language: string;
}
⋮----
export interface GithubTrendOptions {
	/**
	 * Programming language
	 * @example "typescript", "go", "rust", "python",...
	 */
	lang?: string;
	/**
	 * Date range.
	 * @default "daily"
	 */
	time?: "daily" | "weekly" | "monthly";
}
⋮----
/**
	 * Programming language
	 * @example "typescript", "go", "rust", "python",...
	 */
⋮----
/**
	 * Date range.
	 * @default "daily"
	 */
⋮----
export async function fetchTrendingRepos(options?: GithubTrendOptions): Promise<TrendingRepository[]>
⋮----
"--disable-dev-shm-usage", // <-- add this one
⋮----
// console.log("repos :>> ", repos);
</file>

<file path="src/modules/git/ask-for-git-provider.ts">
import inquirer from "inquirer";
import { isEmpty, upperFirst } from "lodash";
⋮----
import type { GitProviderDto, IGitProvider } from "@/entities";
import type { GitProviderType } from "@/interfaces/SystemTypes";
import { availableGitProviders } from "@/interfaces/SystemTypes";
⋮----
import type { GitOrg } from "./git-provider-api";
⋮----
export async function askForGitOrg(gitProvider: IGitProvider)
⋮----
// select git org (namespace)
⋮----
// update "gitWorkspace" as selected "org"
⋮----
export async function askForGitProvider(options?:
⋮----
// logError(`This workspace doesn't have any git providers integrated.`);
⋮----
// start authentication...
⋮----
// select org
⋮----
// console.log("gitProviderChoices :>> ", gitProviderChoices);
⋮----
// console.log("selectedGitProvider :>> ", selectedGitProvider);
⋮----
// select org
</file>

<file path="src/modules/git/git-interfaces.ts">
import type { InputOptions } from "@/interfaces";
import type { GitProviderType } from "@/interfaces/SystemTypes";
⋮----
export interface GitRepoData {
	namespace: string;
	repoSlug: string;
	/**
	 * @example org-slug/repo-slug
	 */
	fullSlug: string;
	/**
	 * @example github.com, bitbucket.org,...
	 */
	gitDomain: string;
	/**
	 * Git provider type
	 */
	providerType: GitProviderType;
}
⋮----
/**
	 * @example org-slug/repo-slug
	 */
⋮----
/**
	 * @example github.com, bitbucket.org,...
	 */
⋮----
/**
	 * Git provider type
	 */
⋮----
export interface PullOrCloneGitRepoSSHOptions extends Pick<InputOptions, "ci" | "isDebugging"> {
	/**
	 * Should remove ".git" directory after finished pull/clone repo
	 * @default false
	 */
	removeGitOnFinish?: boolean;
	/**
	 * Should remove ".github" directory after finished pull/clone repo
	 * @default false
	 */
	removeCIOnFinish?: boolean;
	/**
	 * Callback for in progressing events
	 */
	onUpdate?: (msg: string, progress?: number) => void;
}
⋮----
/**
	 * Should remove ".git" directory after finished pull/clone repo
	 * @default false
	 */
⋮----
/**
	 * Should remove ".github" directory after finished pull/clone repo
	 * @default false
	 */
⋮----
/**
	 * Callback for in progressing events
	 */
⋮----
export interface PullOrCloneRepoURLOptions extends PullOrCloneGitRepoSSHOptions {
	useAccessToken: {
		type: "Bearer" | "Basic";
		value: string;
	};
}
</file>

<file path="src/modules/git/git-provider-api.ts">
import axios from "axios";
import { logWarn } from "diginext-utils/dist/xconsole/log";
import { upperFirst } from "lodash";
⋮----
import type { IGitProvider } from "@/entities";
import { respondFailure, respondSuccess } from "@/interfaces";
import type { BitbucketOrg, BitbucketProject, BitbucketRepoBranch, BitbucketRepository, BitbucketUser } from "@/interfaces/bitbucket";
import type { GitHubOrg, GithubRepoBranch, GithubRepository, GithubUser } from "@/interfaces/github";
import type { GitProviderType, RequestMethodType } from "@/interfaces/SystemTypes";
import { makeSlug } from "@/plugins/slug";
⋮----
type GitProviderApiOptions = {
	/**
	 * Mark `TRUE` if this is a personal repo API
	 * @default false
	 */
	isPersonalRepo?: boolean;
	method?: RequestMethodType;
	data?: any;
	headers?: any;
	isDebugging?: boolean;
};
⋮----
/**
	 * Mark `TRUE` if this is a personal repo API
	 * @default false
	 */
⋮----
const userApiPath = (provider: GitProviderType, org?: string)
⋮----
const userOrgApiPath = (provider: GitProviderType, org?: string)
⋮----
const repoApiPath = (provider: GitProviderType, org?: string, slug?: string)
⋮----
const userRepoApiPath = (provider: GitProviderType, username?: string, slug?: string)
⋮----
const orgRepoApiPath = (provider: GitProviderType, org?: string, slug?: string)
⋮----
const repoDeleteApiPath = (provider: GitProviderType, org: string, slug: string)
⋮----
const repoBranchApiPath = (provider: GitProviderType, org: string, slug: string)
⋮----
/**
 * Only applicable for Bitbucket
 */
const orgProjectApiPath = (provider: IGitProvider) => `/workspaces/$
⋮----
interface GithubFailureResponse {
	message?: string;
	documentation_url?: string;
}
⋮----
interface BitbucketFailureResponse {
	type?: string;
	error?: {
		message: string;
	};
}
⋮----
interface GitUser {
	id?: string;
	username?: string;
	display_name?: string;
	url?: string;
	email?: string;
}
⋮----
interface BitbucketResponse extends BitbucketFailureResponse {
	pagelen: number;
	size: number;
	page: number;
	next: string;
}
⋮----
interface BitbucketOrgListResponse extends BitbucketResponse {
	values: BitbucketOrg[];
}
⋮----
interface BitbucketOrgRepoListResponse extends BitbucketResponse {
	values: BitbucketRepository[];
}
⋮----
interface BitbucketOrgProjectListResponse extends BitbucketResponse {
	values: BitbucketProject[];
}
⋮----
type BitbucketOrgProjectResponse = BitbucketProject & BitbucketResponse;
⋮----
export interface GitOrg {
	id: string;
	name: string;
	url: string;
	description: string;
	/**
	 * `false` if this is a personal account
	 */
	is_org: boolean;
}
⋮----
/**
	 * `false` if this is a personal account
	 */
⋮----
export interface GitRepository {
	provider: GitProviderType;
	id: string;
	name: string;
	full_name: string;
	description: string;
	private: boolean;
	fork: boolean;
	repo_url: string;
	ssh_url: string;
	owner: {
		username: string;
		id: string;
		url: string;
		type: string;
	};
	created_at: string;
	updated_at: string;
}
⋮----
export interface GitRepositoryDto {
	name: string;
	description?: string;
	private: boolean;
}
⋮----
export interface GitRepoBranch {
	name: string;
	url: string;
}
⋮----
const bitbucketRefeshToken = async (provider: IGitProvider) =>
⋮----
const api = async (provider: IGitProvider, path: string, options?: GitProviderApiOptions) =>
⋮----
// if (options?.isDebugging) console.log("Git Provider API > response :>> ", response);
⋮----
// catch errors
⋮----
// [BITBUCKET ONLY] if access_token is expired -> try to refresh it:
⋮----
// save new tokens to database
⋮----
// fetch api again
⋮----
// [DELETE ONLY] translate HTTP response
⋮----
const getProfile = async (provider: IGitProvider, options?:
⋮----
// no email for bitbucket user?
⋮----
const listOrgs = async (provider: IGitProvider) =>
⋮----
// console.log("bitbucketOrgsRes :>> ", bitbucketOrgsRes);
⋮----
// push personal git provider
⋮----
const createGitRepository = async (provider: IGitProvider, data: GitRepositoryDto, options?:
⋮----
// validation
⋮----
// process
⋮----
// check if "Diginext" project existed
⋮----
// if not, create "Diginext" project
⋮----
// console.log("dxProject :>> ", dxProject);
⋮----
// create new repository
⋮----
// assign "DXP" project to new repository:
⋮----
// console.log("newBitbucketRepo :>> ", newBitbucketRepo);
⋮----
const listGitRepositories = async (provider: IGitProvider, options?:
⋮----
// console.log("apiUrl :>> ", apiUrl);
⋮----
// console.log("githubRepos :>> ", githubRepos);
⋮----
export const deleteGitRepository = async (provider: IGitProvider, org: string, slug: string, options?:
⋮----
export const listRepoBranches = async (provider: IGitProvider, org: string, slug: string, options?:
</file>

<file path="src/modules/git/git-utils.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { existsSync } from "fs";
import _, { last, startsWith, trimEnd } from "lodash";
import path from "path";
import type { SimpleGit, SimpleGitProgressEvent } from "simple-git";
import { simpleGit } from "simple-git";
⋮----
import type { GitProviderType } from "@/interfaces/SystemTypes";
import { deleteFolderRecursive } from "@/plugins";
⋮----
import type { GitRepoData, PullOrCloneRepoURLOptions } from "./git-interfaces";
⋮----
/**
 * Get current git branch
 */
export const getCurrentGitBranch = async (dir = process.cwd()) =>
⋮----
/**
 * Get latest tag of the git repository
 */
export async function getLatestTagOfGitRepo(dir = process.cwd())
⋮----
interface GitStageOptions {
	directory?: string;
	message?: string;
}
⋮----
export async function isUnstagedFiles(dir = process.cwd())
⋮----
// Extract the list of unstaged files from the status object
⋮----
/**
 * Stage all files, commit them & push to git origin.
 */
export async function stageCommitAndPushAll(options: GitStageOptions)
⋮----
// log("[current branch]", gitStatus.current);
⋮----
// commit & push everything, then try to merge "master" to current branch
⋮----
/**
 * Read git data in a repo SSH url
 * @param {string} repoSSH - Example: `git@bitbucket.org:organization-name/git-repo-slug.git`
 */
export function parseGitRepoDataFromRepoSSH(repoSSH: string): GitRepoData
⋮----
/**
 * Read git data in a git repo url
 * @param {string} repoURL - Example: `https://bitbucket.org/organization-name/git-repo-slug`
 */
export function parseGitRepoDataFromRepoURL(repoURL: string): GitRepoData
⋮----
// console.log(repoURL);
⋮----
/**
 * Generate git repo SSH url from a git repo URL
 * @example "git@github.com:digitopvn/diginext.git" -> "https://github.com/digitopvn/diginext"
 */
export function repoSshToRepoURL(repoSSH: string)
⋮----
/**
 * Generate git repo URL from a git repo SSH url
 * @example "https://github.com/digitopvn/diginext" -> "git@github.com:digitopvn/diginext.git"
 */
export function repoUrlToRepoSSH(repoURL: string)
⋮----
export function validateRepoURL(url: string)
⋮----
// if (!endsWith(url, ".git")) throw new Error(`Repo URL should end with ".git".`);
⋮----
export function isValidRepoURL(url: string)
⋮----
export function isValidBase64(str: string): boolean
⋮----
export function injectAuthToRepoURL(url: string, options:
⋮----
// validate
⋮----
// basic auth
⋮----
// repo data
⋮----
export const pullOrCloneGitRepoHTTP = async (repoURL: string, dir: string, branch: string, options: PullOrCloneRepoURLOptions) =>
⋮----
// if (options?.isDebugging) console.log("pullOrCloneGitRepoHTTP() > options :>> ", options);
⋮----
const onProgress = (event: SimpleGitProgressEvent) =>
⋮----
// -----------------------
// CAUTION: DO NOT SET TO "FALSE"
// -----------------------
⋮----
// remove git on finish
⋮----
// just for sure...
⋮----
// for CLI create new app from a framework
⋮----
// remove git on finish
⋮----
// remove git on finish
</file>

<file path="src/modules/git/github.ts">
import axios from "axios";
import { isJSON } from "class-validator";
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import open from "open";
⋮----
import { Config } from "@/app.config";
import { getCliConfig, saveCliConfig } from "@/config/config";
import type { RequestMethodType } from "@/interfaces/SystemTypes";
import { paramsToObject } from "@/plugins/params";
⋮----
export type GithubApiRequestOptions = {
	url: string;
	method?: RequestMethodType;
	data?: any;
	headers?: any;
	token?: string;
};
⋮----
export type GithubApiFailResponse = {
	message?: string;
	documentation_url?: string;
};
⋮----
export type GithubAccessTokenInfo = {
	access_token?: string;
	expires_in?: number;
	refresh_token?: string;
	refresh_token_expires_in?: number;
	token_type?: string;
	error?: string;
	error_description?: string;
	error_uri?: string;
};
⋮----
export type GithubProfile = {
	login: string;
	id: number;
	node_id: string;
	avatar_url: string;
	gravatar_id: string;
	url: string;
	html_url: string;
	followers_url: string;
	following_url: string;
	gists_url: string;
	starred_url: string;
	subscriptions_url: string;
	organizations_url: string;
	repos_url: string;
	events_url: string;
	received_events_url: string;
	type: string;
	site_admin: boolean;
	name: string;
	company: string;
	blog: string;
	location: string;
	email: string;
	hireable: boolean;
	bio: string;
	twitter_username: string;
	public_repos: number;
	public_gists: number;
	followers: number;
	following: number;
	created_at: string;
	updated_at: string;
};
⋮----
// get github profile
⋮----
// get github profile
⋮----
// headers
⋮----
// make a request
⋮----
// response data
</file>

<file path="src/modules/git/index.ts">
import chalk from "chalk";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { execa, execaCommand, execaSync } from "execa";
import { createWriteStream, existsSync, readFileSync, unlinkSync, writeFileSync } from "fs";
import capitalize from "lodash/capitalize";
import open from "open";
import path from "path";
import { simpleGit } from "simple-git";
import yargs from "yargs";
⋮----
import { HOME_DIR, SSH_DIR } from "@/config/const";
import type { InputOptions } from "@/interfaces/InputOptions";
import type { GitProviderDomain, GitProviderType } from "@/interfaces/SystemTypes";
import { gitProviderDomain } from "@/interfaces/SystemTypes";
import { execCmd, getCurrentGitRepoData, isMac, wait } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
⋮----
// import { conf } from "../..";
import Github from "./github";
⋮----
// TODO: Implement CRUD of git provider
⋮----
/**
 * Generate SSH URL of the git repository
 * @param provider
 * @example `github`
 * @param repoSlug - Include username/org slug, exclude ".git" at the end
 * @example `digitopvn/diginext13`
 * @returns
 */
export function generateRepoSSH(provider: GitProviderType | string, repoSlug: string)
⋮----
/**
 * Generate SSH URL of the git repository
 * @param repoSlug - Include username/org slug, exclude ".git" at the end
 * @example `digitopvn/diginext13`
 * @returns
 */
export function generateRepoURL(provider: GitProviderType | string, repoSlug: string)
⋮----
/**
 * Generate SSH URL of the git repository
 * @param repoSlug - Include username/org slug, exclude ".git" at the end
 * @example `digitopvn/diginext13`
 * @returns
 */
⋮----
export const login = async (options?: InputOptions) =>
⋮----
// logWarn(`This feature is under development.`);
⋮----
export const logout = async () =>
⋮----
// logout bitbucket account
// conf.delete("username");
// conf.delete("token");
⋮----
// logout github account
⋮----
export interface InitializeGitRemoteOptions extends Pick<InputOptions, "repoSSH" | "targetDirectory" | "username"> {
	/**
	 * App's working directory
	 */
	dir: string;
}
⋮----
/**
	 * App's working directory
	 */
⋮----
/**
 * @deprecated
 * Setup "main" branch and "dev/*" branch
 */
export async function initializeGitRemote(options: InitializeGitRemoteOptions)
⋮----
// add git origin:
⋮----
// create developer branches
⋮----
/**
 * Get user profile object
 */
export const getUserProfile = async (options?: InputOptions) =>
⋮----
export const setupRepositoryPermissions = async (options?: InputOptions) =>
⋮----
// await applyBranchPermissions(options, "master", "pull-request-only", "push", []);
// await applyBranchPermissions(options, "staging", "pull-request-only", "push", []);
// await applyBranchPermissions(options, "staging", "pull-request-only", "require_approvals_to_merge");
// await applyBranchPermissions(options, "prod", "pull-request-only", "push", []);
// await applyBranchPermissions(options, "prod", "pull-request-only", "restrict_merges");
⋮----
// logSuccess(`Đã áp dụng quyền hạn chế truy cập mặc định.`);
⋮----
export const getListRepositories = async (options?: InputOptions) =>
⋮----
// await bitbucketAuthentication(options);
// await signInBitbucket(options);
⋮----
// return repoList(options);
⋮----
export const createNewPullRequest = async (options?: InputOptions) =>
⋮----
// const { gitProvider } = options;
⋮----
export const addKeysToKnownHosts = async (data:
⋮----
// check if "known_hosts" file exists
⋮----
// only scan SSH key of git provider if it's not existed
⋮----
// const knownHostsContent = readFileSync(knownHostsPath, "utf8");
// await execCmd(`ssh-keyscan ${gitDomain} >> ${knownHostsPath}`);
// if (knownHostsContent.indexOf(publicKeyContent) === -1) await execCmd(`ssh-keyscan ${gitDomain} >> ${knownHostsPath}`);
⋮----
// SSH config
⋮----
export const writeCustomSSHKeys = async (params:
⋮----
// if (!publicKey) throw new Error(`[GIT] Write SSH keys > Content of "publicKey" is required.`);
⋮----
// delete existing files
⋮----
// write "privateKey" content to file
⋮----
// Make sure the private key is assigned correct permissions (400)
⋮----
// write "publicKey" to file event if "publicKey" is not provided
⋮----
// [TEST] remove old keys
// await execCmd(`ssh-keygen -R ${gitDomain}`);
⋮----
// add keys to "know_hosts"
⋮----
// Start SSH agent & add private keys: eval `ssh-agent`
// await execCmd(`eval $(ssh-agent -s) && ssh-add ${privateIdRsaFile}`);
⋮----
// This is important to execute the command in a shell
⋮----
// print results
⋮----
// console.log("privateIdRsaFile :>> ", readFileSync(privateIdRsaFile, "utf8"));
// console.log("publicIdRsaFile :>> ", readFileSync(publicIdRsaFile, "utf8"));
⋮----
export const generateSSH = async (options?: InputOptions) =>
⋮----
// const { gitProvider } = options;
// Check if any "id_rsa" existed
⋮----
// const idRsaDir = path.resolve(CLI_DIR, "storage/home/ssh");
// log(`idRsaDir:`, idRsaDir, `>> Existed: ${existsSync(idRsaDir)}`);
⋮----
// log(`existed "id_rsa" files >>`, files);
⋮----
// Make sure the private key is assigned correct permissions (400)
⋮----
// If no "id_rsa" existed -> generate one: ssh-keygen -b 2048 -t rsa -p -f $HOME/.ssh/id_rsa -q -N "" -> id_rsa  id_rsa.pub
⋮----
// set permission 400 to id_rsa files
⋮----
// Start SSH agent & add private keys: eval `ssh-agent`
// await execCmd(`eval $(ssh-agent -s) && ssh-add ${privateIdRsaFile}`);
⋮----
// This is important to execute the command in a shell
⋮----
// Return PUBLIC key to add to GIT provider
⋮----
export const sshKeysExisted = async (options?:
⋮----
// Make sure the private key is assigned correct permissions (400)
⋮----
export const getSshKeys = async (options?:
⋮----
export const getPublicKey = async (filePath?: string) =>
⋮----
export const sshKeyContainPassphase = (options?:
⋮----
export const verifySSH = async (options?: InputOptions) =>
⋮----
// has to use this because "Github does not provide shell access"
⋮----
// case "gitlab":
// 	authResult = await execCmd(`ssh -o StrictHostKeyChecking=no -T git@gitlab.com`, "[GIT] Gitlab authentication failed");
// 	authResult = typeof authResult !== "undefined";
// 	break;
⋮----
/**
 * Check if the client machine can access to the git provider publicly.
 */
export const checkGitProviderAccess = async (gitProvider: GitProviderType) =>
⋮----
// has to use this because "Github does not provide shell access"
⋮----
// case "gitlab":
// 	result = await execCmd(`ssh -o StrictHostKeyChecking=no -T git@gitlab.com`, "Gitlab authentication failed");
// 	break;
⋮----
/**
 * Check if the client machine can access to the PRIVATE git repository.
 */
export const checkGitRepoAccess = async (repoSSH: string) =>
⋮----
export async function execGit(options)
⋮----
// if (typeof options.targetDirectory == "undefined") options.targetDirectory = process.cwd();
</file>

<file path="src/modules/git/initalizeAndCreateDefaultBranches.ts">
// import { log } from "diginext-utils/dist/xconsole/log";
import Timer from "diginext-utils/dist/Timer";
import { log } from "diginext-utils/dist/xconsole/log";
⋮----
import path from "path";
import { simpleGit } from "simple-git";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
import updateBranchProtection from "@/modules/git/updateBranchProtection";
import updateRepoSetting from "@/modules/git/updateRepoSetting";
import { wait } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
⋮----
export const initalizeAndCreateDefaultBranches = async (options: InputOptions) =>
⋮----
// Remove current git (if any) & initialize new git...
⋮----
// Initialize local git...
⋮----
// create "main" branch
⋮----
// just to make sure the remote git is ready...
⋮----
// add git origin remote:
⋮----
// await git.addRemote("origin", options.repoURL);
⋮----
// stage all deployment files & commit it
⋮----
// debug
⋮----
// Update main branch protection
⋮----
// create developer branches
</file>

<file path="src/modules/git/updateBranchProtection.ts">
import axios from "axios";
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
export default async function updateBranchProtection(options: InputOptions)
⋮----
//
// https://api.github.com/repos/OWNER/REPO/branches/BRANCH/protection \
⋮----
// console.log("options :>> ", options);
// console.log("options.git :>> ", options.git);
// console.log("options.git?.type :>> ", options.git?.type);
⋮----
//
⋮----
// if (options.isDebugging) log("res Update main branch protection :>> ", res?.statusText);
⋮----
// The request was made and the server responded with a status code outside of the 2xx range
⋮----
// The request was made but no response was received
⋮----
// Something happened in setting up the request that triggered an Error
</file>

<file path="src/modules/git/updateRepoSetting.ts">
import axios from "axios";
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
export default async function updateRepoSetting(options: InputOptions)
⋮----
//
// https://api.github.com/repos/OWNER/REPO/branches/BRANCH/protection \
⋮----
// console.log("options :>> ", options);
// console.log("options.git :>> ", options.git);
// console.log("options.git?.type :>> ", options.git?.type);
⋮----
// repos/OWNER/REPO
⋮----
//
⋮----
// if (options.isDebugging) log("res Update main branch protection :>> ", res?.statusText);
⋮----
// The request was made and the server responded with a status code outside of the 2xx range
⋮----
// The request was made but no response was received
⋮----
// Something happened in setting up the request that triggered an Error
</file>

<file path="src/modules/k8s/ask-for-deployment.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
⋮----
import type { ICluster } from "@/entities";
⋮----
import ClusterManager from "./index";
⋮----
export const askForDeployment = async (cluster: ICluster, namespace: string = "default") =>
</file>

<file path="src/modules/k8s/ask-for-image.ts">
import inquirer from "inquirer";
⋮----
export const askForImageURL = async () =>
</file>

<file path="src/modules/k8s/ask-for-namespace.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import { Config } from "@/app.config";
import type { ICluster } from "@/entities";
⋮----
export const askForNamespace = async (cluster: ICluster) =>
</file>

<file path="src/modules/k8s/ask-for-new-value.ts">
import inquirer from "inquirer";
⋮----
export const askForNewValue = async <T = string>(title?: string) =>
</file>

<file path="src/modules/k8s/ask-for-target-prop.ts">
import inquirer from "inquirer";
⋮----
export const askForTargetProp = async (type: string) =>
</file>

<file path="src/modules/k8s/cluster-auth.ts">
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import { unlink } from "fs";
⋮----
import type { ICluster } from "@/entities";
import type { KubeConfigContext } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { createTmpFile, execCmd } from "@/plugins";
⋮----
import custom from "../providers/custom";
import digitalocean from "../providers/digitalocean";
import gcloud from "../providers/gcloud";
import { getKubeContextByCluster, getKubeContextByClusterSlug } from "./kube-config";
⋮----
export interface ClusterAuthOptions {
	ownership: Ownership;
	/**
	 * Flag to switch to this cluster after finishing authentication
	 * @default true
	 */
	shouldSwitchContextToThisCluster?: boolean;
	/**
	 * Debugging flag
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Flag to switch to this cluster after finishing authentication
	 * @default true
	 */
⋮----
/**
	 * Debugging flag
	 * @default false
	 */
⋮----
export const switchContext = async (context: string) =>
⋮----
export const switchContextToCluster = async (clusterSlug: string, providerShortName?: string) =>
⋮----
/**
 * Authenticate current machine with the K8S cluster by its short name (context-name).
 */
export const authCluster = async (cluster: ICluster, options: ClusterAuthOptions) =>
⋮----
// Only support Google Service Account authentication
⋮----
// validate service account file:
⋮----
// start authenticating...
⋮----
// delete temporary service account
⋮----
// save this cluster to KUBE_CONFIG
⋮----
// get K8S context
⋮----
// switch context (if needed)
// if (shouldSwitchContextToThisCluster) await switchContext(context.name);
⋮----
// mark this cluster verified
⋮----
// Only support Digital Ocean API access token authentication
⋮----
// save cluster access info to "kubeconfig"
⋮----
// get K8S context
⋮----
// switch context (if needed)
// if (shouldSwitchContextToThisCluster) await switchContext(context.name);
⋮----
// mark this cluster verified
⋮----
// Only support "kube-config" authentication
⋮----
// start authenticating & save cluster access info to "kubeconfig"...
⋮----
// delete temporary file
⋮----
// switch context (if needed)
// if (shouldSwitchContextToThisCluster) await switchContext(contextName);
⋮----
/**
 * Authenticate current machine with the K8S cluster by its short name (context-name).
 * @param clusterSlug - A cluster name on the cloud provider (**NOT** a cluster in `kubeconfig`)
 */
export const authClusterBySlug = async (clusterSlug: string, options: ClusterAuthOptions) =>
⋮----
// find the cluster in the database:
</file>

<file path="src/modules/k8s/image-pull-secret.ts">
import { log, logError } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import digitalocean from "../providers/digitalocean";
import gcloud from "../providers/gcloud";
import type { ContainerRegistrySecretOptions } from "../registry/ContainerRegistrySecretOptions";
import DockerRegistry from "../registry/docker-registry";
⋮----
/**
 * Create imagePullSecrets in a namespace
 */
export async function createImagePullSecrets(options: ContainerRegistrySecretOptions)
⋮----
// console.log("createImagePullSecretsInNamespace > options :>> ", options);
⋮----
// console.log("imagePullSecret :>> ", imagePullSecret);
⋮----
// update image pull secret name into container registry
⋮----
// print success
⋮----
/**
 * Create imagePullSecrets in a namespace by deploy environment
 * @param appSlug - App's slug
 * @param env @example "dev", "prod"
 */
export async function createImagePullSecretsByDeployEnvironment(appSlug: string, env: string = "dev")
⋮----
// console.log("createImagePullSecretsInNamespace > options :>> ", options);
⋮----
/**
 * Create imagePullSecrets in a namespace
 * @param appSlug - App's slug
 * @param env @example "dev", "prod"
 * @param clusterSlug - Cluster's slug
 * @param namespace @default "default"
 */
export async function createImagePullSecretsInNamespace(appSlug: string, env: string, clusterSlug: string, namespace: string = "default")
⋮----
// console.log("createImagePullSecretsInNamespace > options :>> ", options);
</file>

<file path="src/modules/k8s/index.ts">
import { rolloutV2 } from "../deploy/deploy-rollout";
import authCluster, { authClusterBySlug } from "./cluster-auth";
import { createImagePullSecretsInNamespace } from "./image-pull-secret";
import { currentCluster, currentContext, getKubeConfig, getKubeContextByCluster, getKubeContextByClusterSlug } from "./kube-config";
import { previewPrerelease, rollout } from "./kube-deploy";
import {
	createNamespace,
	deleteDeploy,
	deleteDeploymentsByFilter,
	deleteEnvVar,
	deleteEnvVarByFilter,
	deleteIngress,
	deleteIngressByFilter,
	deleteNamespace,
	deleteNamespaceByCluster,
	deletePersistentVolume,
	deletePersistentVolumeClaim,
	deletePersistentVolumeClaimsByFilter,
	deletePersistentVolumesByFilter,
	deletePod,
	deletePodsByFilter,
	deleteSecret,
	deleteSecretsByFilter,
	deleteService,
	deleteServiceByFilter,
	deleteStatefulSet,
	deleteStatefulSetsByFilter,
	deleteStorageClass,
	deleteStorageClassesByFilter,
	getAllDeploys,
	getAllIngresses,
	getAllNamespaces,
	getAllNodes,
	getAllPersistentVolumeClaims,
	getAllPersistentVolumes,
	getAllPods,
	getAllSecrets,
	getAllServices,
	getAllStatefulSets,
	getAllStorageClasses,
	getDeploy,
	getDeploys,
	getDeploysByFilter,
	getIngress,
	getIngressClasses,
	getIngresses,
	getNamespace,
	getPersistentVolume,
	getPersistentVolumeClaim,
	getPersistentVolumeClaims,
	getPersistentVolumeClaimsByFilter,
	getPersistentVolumes,
	getPersistentVolumesByFilter,
	getPod,
	getPods,
	getPodsByFilter,
	getSecrets,
	getService,
	getServices,
	getStatefulSet,
	getStatefulSets,
	getStatefulSetsByFilter,
	getStorageClass,
	getStorageClasses,
	getStorageClassesByFilter,
	isNamespaceExisted,
	isSecretExisted,
	kubectlAnnotateDeployment,
	kubectlApply,
	kubectlApplyContent,
	logPod,
	logPodByFilter,
	rollbackDeploy,
	rollbackDeployRevision,
	scaleDeploy,
	scaleDeployByFilter,
	setDeployImage,
	setDeployImageAll,
	setDeployImagePullSecretByFilter,
	setDeployPortAll,
	setEnvVar,
	setEnvVarByFilter,
} from "./kubectl";
import { checkCertManagerInstalled, checkNginxIngressInstalled } from "./stack-check";
import { installCertManagerStack, installNginxIngressStack } from "./stack-install";
⋮----
// cluster-helpers
⋮----
// kube-helpers
⋮----
// volumes & storages
⋮----
// deploy
⋮----
// stacks
</file>

<file path="src/modules/k8s/kube-config.ts">
import { existsSync, writeFileSync } from "fs";
import yaml from "js-yaml";
⋮----
import { KUBECONFIG_FILE } from "@/config/const";
import type { ICluster } from "@/entities";
import type { KubeConfig, KubeConfigContext } from "@/interfaces";
import { execCmd } from "@/plugins";
⋮----
export async function getKubeConfig(filePath?: string)
⋮----
/**
 * Get current context of KUBE_CONFIG
 */
export async function currentContext()
⋮----
/**
 * Get current cluster of KUBE_CONFIG
 */
export async function currentCluster()
⋮----
/**
 * Get all available Kubernetes contexts of the build server
 */
export const getAllContexts = async (filePath?: string) =>
⋮----
/**
 * Get KUBE_CONTEXT by {Cluster} instance
 * @param cluster - A cluster
 * @param filePath - [optional] - A ".kubeconfig" YAML file path
 * @returns
 */
export async function getKubeContextByCluster(cluster: ICluster, filePath?: string)
⋮----
// logWarn(`Kubernetes context not found of "${slug}" cluster (${provider}), current contexts: ${listContexts.map((ctx) => ctx.name)}.`);
⋮----
/**
 * Get KUBE_CONTEXT by cluster's short name & cloud provider's short name
 * @param slug - A cluster slug on the cloud provider (**NOT** a cluster in `kubeconfig`)
 * @param provider - A cloud provider short name. One of "digitalocean", "gcloud" or "custom"
 * @param filePath - [optional] - A service account file path
 * @returns
 */
export async function getKubeContextByClusterSlug(slug: string, provider: string, filePath?: string)
⋮----
export async function deleteClusterInKubeConfig(cluster: ICluster, filePath?: string)
⋮----
// delete cluster access credentials in KUBE_CONFIG file
⋮----
// save to "~/.kube/config"
⋮----
// log(finalKubeConfigContent);
</file>

<file path="src/modules/k8s/kube-deploy.ts">
import chalk from "chalk";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { existsSync, mkdirSync } from "fs";
import yaml from "js-yaml";
import { isArray, isEmpty } from "lodash";
import path from "path";
⋮----
import { isServerMode, IsTest } from "@/app.config";
import { cliOpts } from "@/config/config";
import { CLI_DIR } from "@/config/const";
import type { ICluster, IRelease, IUser, IWorkspace } from "@/entities";
import type { IResourceQuota, KubeIngress, KubeService } from "@/interfaces";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import { objectToDeploymentYaml, wait, waitUntil } from "@/plugins";
import { isValidObjectId, MongoDB } from "@/plugins/mongodb";
import { makeSlug } from "@/plugins/slug";
import { WebhookService } from "@/services";
⋮----
import getDeploymentName from "../deploy/generate-deployment-name";
import ClusterManager from "./index";
import { logPodByFilter } from "./kubectl";
⋮----
export interface RolloutOptions {
	isDebugging?: boolean;
	onUpdate?: (msg?: string) => void;
}
⋮----
/**
 * Clean up PRERELEASE resources by ID or release data
 * @param idOrRelease - Release ID or {Release} data
 */
export async function cleanUp(idOrRelease: string | IRelease)
⋮----
// validation
⋮----
// authenticate cluster's provider & switch kubectl to that cluster:
⋮----
// Fallback support to the deprecated "main-app" name
⋮----
// Clean up Prerelease YAML
⋮----
// Delete INGRESS to optimize cluster
⋮----
// Delete Prerelease SERVICE to optimize cluster
⋮----
// Clean up Prerelease Deployments
⋮----
// ! --- fallback support deprecated app name ---
// Delete INGRESS (fallback support deprecated app name)
⋮----
// ! --- fallback support deprecated app name ---
// Delete Prerelease SERVICE to optimize cluster (fallback support deprecated app name)
⋮----
// ! --- fallback support deprecated app name ---
// Clean up Prerelease Deployments
⋮----
// Clean up immediately & just ignore if any errors
⋮----
// * Print success:
⋮----
/**
 * Roll out a prerelease environment
 * @param  {String} id - Release ID
 */
export async function previewPrerelease(id: string, options: RolloutOptions =
⋮----
// webhook
⋮----
// authenticate cluster's provider & switch kubectl to that cluster:
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * Check if there is any prod namespace, if not -> create one
	 */
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * Create "imagePullSecrets" in a namespace
	 */
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * Delete current PRE-RELEASE deployments
	 */
⋮----
/**
	 * Apply PRE-RELEASE deployment YAML
	 */
⋮----
// dispatch/trigger webhook
⋮----
/**
 * Roll out a release
 * @param id - Release ID
 */
export async function rollout(id: string, options: RolloutOptions =
⋮----
projectSlug, // ! This is not PROJECT_ID of Google Cloud provider
⋮----
// webhook
⋮----
// log(`Rolling out the release: "${releaseSlug}" (ID: ${id})`);
⋮----
// get the app
⋮----
// log(`Rolling out > app:`, app);
⋮----
// log(`Rolling out > mainAppName:`, mainAppName);
⋮----
// authenticate cluster's provider & switch kubectl to that cluster:
⋮----
// dispatch/trigger webhook
⋮----
// log(`Rolling out > Checked connectivity of "${clusterSlug}" cluster.`);
⋮----
// dispatch/trigger webhook
⋮----
// create temporary directory to store release's yaml
⋮----
// ! NEW WAY -> LESS DOWNTIME WHEN ROLLING OUT NEW DEPLOYMENT !
⋮----
/**
	 * Check if there is any prod namespace, if not -> create one
	 */
⋮----
// dispatch/trigger webhook
⋮----
// create "imagePullSecret" in namespace:
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * 1. Create SERVICE & INGRESS
	 */
⋮----
// log(`3`, { appSlug, service, svcName, ingress, ingressName, deploymentName });
⋮----
// Always apply new service, since the PORT could be changed !!!
⋮----
// dispatch/trigger webhook
⋮----
// check ingress domain has been used yet or not:
⋮----
// console.log("domains :>> ", domains);
⋮----
// log(`5`);
⋮----
// if (onUpdate) onUpdate(`prereleaseAppName = ${prereleaseAppName}`);
⋮----
/**
	 * 2. Delete prerelease app if it contains "prerelease" (OLD WAY)
	 * and apply new app for production
	 */
⋮----
// TODO: Check crashed / failed deployments -> delete them!
⋮----
const createNewDeployment = async (appDoc) =>
⋮----
// labels
newApp.metadata.labels.phase = "live"; // mark this app as "live" phase
⋮----
// envs & quotas
⋮----
// selector
⋮----
// ! if "prerelease" was deployed in OLD WAY or there are no old deployments
⋮----
// ! if "prerelease" was deployed in NEW WAY -> add label "phase" = "live"
⋮----
// if (onUpdate) onUpdate(`Patched "${deploymentName}" deployment failure: ${e.message}`);
⋮----
/**
	 * 3. [ONLY PROD DEPLOY] Update ENV variables to PRODUCTION values
	 */
⋮----
// Wait until the deployment is ready!
const isNewDeploymentReady = async () =>
⋮----
// log(`${namespace} > ${deploymentName} > newDeploys :>>`, newDeploys);
⋮----
// log(`[ROLL OUT] deploy.status.replicas :>>`, deploy.status.replicas);
// log(`[ROLL OUT] deploy.status.unavailableReplicas :>>`, deploy.status.unavailableReplicas);
// log(`[ROLL OUT] deploy.status.readyReplicas :>>`, deploy.status.readyReplicas);
⋮----
// if (condition.type === "False") isReady = true;
// if (condition.type.toLowerCase() === "progressing")
⋮----
// if (deploy.status.unavailableReplicas && deploy.status.unavailableReplicas >= 1) {
// 	isReady = false;
// } else if (deploy.status.readyReplicas && deploy.status.readyReplicas >= 1) {
// 	isReady = true;
// }
⋮----
// TODO: check app's health instead of 15 seconds
⋮----
// Wait another 15s to make sure app is not crashing...
⋮----
// Try to get the container logs and print to the web ui
⋮----
// throw the error
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * 4. Update "selector" of PRODUCTION SERVICE to select PRERELEASE APP NAME
	 */
⋮----
/**
	 * 5. Scale replicas to PRODUCTION config
	 */
⋮----
/**
	 * 6. Apply resource quotas
	 */
⋮----
// ! ALWAYS Create new ingress
⋮----
// dispatch/trigger webhook
⋮----
// Print success:
⋮----
// Mark previous releases as "inactive":
⋮----
// Mark this latest release as "active":
⋮----
// dispatch/trigger webhook
⋮----
// Assign this release as "latestRelease" of this app's deploy environment
⋮----
/**
	 * 5. Clean up > Delete old deployments
	 * - Skip CLEAN UP task on test environment
	 */
⋮----
/**
		 * [ONLY WHEN DEPLOY TO PRODUCTION ENVIRONMENT] Clean up prerelease deployments (to optimize cluster resource quotas)
		 */
</file>

<file path="src/modules/k8s/kubectl-cli.ts">
import { logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import type InputOptions from "@/interfaces/InputOptions";
⋮----
import { askForCluster } from "../cluster/ask-for-cluster";
import { askForDeployment } from "./ask-for-deployment";
import { askForNamespace } from "./ask-for-namespace";
import { askForNewValue } from "./ask-for-new-value";
import { askForTargetProp } from "./ask-for-target-prop";
import ClusterManager from "./index";
⋮----
const kubectlCommand = (resource: string) =>
⋮----
export const execKubectl = async (options?: InputOptions) =>
</file>

<file path="src/modules/k8s/stack-check.ts">
import type { ICluster } from "@/entities";
import { contains } from "@/plugins/string";
⋮----
import ClusterManager from "./index";
⋮----
/**
 * Check the cluster has NGINX Ingress installed or not
 * @copyright https://kubernetes.github.io/ingress-nginx/
 * @returns Error message in string or TRUE
 */
export const checkNginxIngressInstalled = async (cluster: ICluster) =>
⋮----
/**
 * Check the cluster has Cert Manager installed or not
 * @copyright https://cert-manager.io/
 * @returns Error message in string or TRUE
 */
export const checkCertManagerInstalled = async (cluster: ICluster) =>
</file>

<file path="src/modules/k8s/stack-install.ts">
import { existsSync } from "fs";
import path from "path";
⋮----
import { CLI_DIR } from "@/config/const";
import type { ICluster } from "@/entities";
import { waitUntil } from "@/plugins";
⋮----
import ClusterManager from "./index";
import { checkCertManagerInstalled, checkNginxIngressInstalled } from "./stack-check";
⋮----
export interface InstallStackOptions {
	skipable?: boolean;
	onUpdate?: (msg: string, type?: "log" | "error" | "warn") => void;
}
⋮----
/**
 * Install `NGINX Ingress` stack to your cluster
 * @copyright https://kubernetes.github.io/ingress-nginx/
 */
export const installNginxIngressStack = async (cluster: ICluster, options: InstallStackOptions =
⋮----
// use Helm to install:
⋮----
// verify the installation: Pending, Running, Succeeded, Failed, Unknown
⋮----
/**
 * Install `CertManager` stack to your cluster
 * @copyright https://cert-manager.io/
 */
export const installCertManagerStack = async (cluster: ICluster, options: InstallStackOptions =
⋮----
// check stack has been installed yet or not
⋮----
// add Helm repo
⋮----
// use Helm to install:
⋮----
// verify the installation:
⋮----
// create default "ClusterIssuer" for issuing Let's Encrypt SSL certificates
</file>

<file path="src/modules/passports/bearerStrategy.ts">
import BearerStrategy from "passport-http-bearer";
// import { Config } from "@/app.config";
// import { ProviderInfo } from "@/entities/User";
// import { userSvc } from "@/routes/auth/google/index";
⋮----
// process.nextTick(async function () {
// 	console.log(profile);
// 	let user = await userSvc.findOne({ email: profile.email }, { populate: ["roles"] });
// 	if (user) {
// 		return done(null, { ...user, accessToken, refreshToken });
// 	}
// 	const provider: ProviderInfo = {
// 		name: "google",
// 		user_id: profile.id,
// 		access_token: accessToken,
// 	};
// 	user = await userSvc.create({
// 		providers: [provider],
// 		name: profile.displayName,
// 		email: profile.email,
// 		image: profile.picture,
// 		verified: profile.verified,
// 	});
// 	return done(null, { ...user, accessToken, refreshToken });
// });
</file>

<file path="src/modules/passports/googleStrategy.ts">
import { isEmpty } from "lodash";
import GoogleStrategy from "passport-google-oauth2";
⋮----
import { Config } from "@/app.config";
import type { ProviderInfo, UserDto } from "@/entities/User";
import { UserService } from "@/services";
⋮----
// console.log(`googleStrategy :>>`, { profile });
// console.log(accessToken);
// console.log(`googleStrategy :>> profile.email =`, profile.email);
⋮----
// console.log("[google login] user :>> ", user);
// console.log(`googleStrategy :>>`, { user });
⋮----
// console.log("RES Create User DX Site:", createUserRes);
// Create user successfully in DX site then continue to create DX CLI
</file>

<file path="src/modules/passports/index.ts">

</file>

<file path="src/modules/pipeline/index.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
export async function execPipeline(options)
</file>

<file path="src/modules/pipeline/pipeline.service.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import type { InputOptions } from "@/interfaces/InputOptions";
⋮----
/**
 * @param  {InputOptions} options
 * @deprecated
 */
export function generatePipeline(options: InputOptions)
⋮----
/**
 * @param  {String[]} commands
 * @param  {InputOptions} options
 * @deprecated
 */
export async function startPipeline(commands: string[], options: InputOptions)
</file>

<file path="src/modules/project/create-project.ts">
import inquirer from "inquirer";
⋮----
import type { IProject } from "@/entities/Project";
import type { InputOptions } from "@/interfaces/InputOptions";
import { containsSpecialCharacters } from "@/plugins/string";
⋮----
export async function askCreateProjectQuestions(options?: InputOptions)
⋮----
// ownership
⋮----
/**
 * Create new project & children app with pre-setup: git, cli, deployment,...
 */
export default async function createProjectByForm(options: InputOptions)
⋮----
// create project form:
⋮----
// Save this project to database
⋮----
// console.log("createProjectByForm > newProject :>> ", newProject);
</file>

<file path="src/modules/project/execInitProject.ts">
import type InputOptions from "@/interfaces/InputOptions";
⋮----
export async function execInitProject(options: InputOptions)
⋮----
// TODO: init project?
</file>

<file path="src/modules/project/frameworks.ts">
export type Framework =
	| "monorepo-all"
	| "monorepo-next-and-nest"
	| "monorepo-next-and-express"
	| "monorepo-next-and-socket"
	| "monorepo-next-and-docs"
	| "monorepo-digicms"
	| "diginext"
	| "diginext/tools/photo"
	| "diginext/tools/three"
	| "diginext/tools/backend"
	| "diginest"
	| "static"
	| "expressjs"
	| "none";
⋮----
// TODO: Add/list/update/delete new framework with CLI
</file>

<file path="src/modules/project/index.ts">

</file>

<file path="src/modules/project/printInformation.ts">
import chalk from "chalk";
⋮----
import { getCliConfig } from "@/config/config";
import type { AppConfig } from "@/interfaces/AppConfig";
⋮----
export function printInformation(finalConfig: AppConfig)
⋮----
// Deploy instruction:
</file>

<file path="src/modules/project/setupGitIgnore.ts">
import type { InputOptions } from "@/interfaces/InputOptions";
⋮----
/**
 * Setup "gitignore" for new application
 */
export const setupGitIgnore = (options: InputOptions) =>
</file>

<file path="src/modules/providers/custom.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import fs from "fs";
import yaml from "js-yaml";
import path from "path";
import yargs from "yargs";
⋮----
import { HOME_DIR } from "@/config/const";
import type { ICluster } from "@/entities";
import type { KubeConfig } from "@/interfaces";
import type { InputOptions } from "@/interfaces/InputOptions";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import type { ContainerRegistrySecretOptions } from "../registry/ContainerRegistrySecretOptions";
⋮----
/**
 * Authenticate custom Kubernetes cluster access
 */
export const authenticate = async (cluster: ICluster, options?: InputOptions &
⋮----
// test cluster connection before writing config file
⋮----
// load new kubeconfig yaml:
⋮----
// make sure it won't be duplicated in KUBE_CONFIG -> generate "context" from "cluster.slug"
⋮----
// generate current kubeconfig file:
⋮----
/** FOR TEST */
⋮----
// Only add new value if it's not existed
⋮----
// add cluster
⋮----
// compare OLD & NEW values
⋮----
// add user
⋮----
// compare OLD & NEW values
⋮----
// add context
⋮----
// console.dir(currentKubeConfig, { depth: 10 });
⋮----
// [ONLY] for "custom" cluster -> context name == slug == short name
⋮----
// currentKubeConfig["current-context"] = newKubeConfig["current-context"];
// console.log(`[CLUSTER_AUTH] KUBE_CONFIG :>>`, currentKubeConfig);
⋮----
// log(finalKubeConfigContent);
// console.log(`[CLUSTER_AUTH] KUBE_CONFIG :>>`, finalKubeConfigContent);
⋮----
// console.log(`[CLUSTER_AUTH] finalKubeConfigContent :>>`, finalKubeConfigContent);
// console.log(`[CLUSTER_AUTH] kubeConfigFile :>>`, kubeConfigFile);
⋮----
// if authentication is success -> update cluster as verified:
// console.log("currentContext :>> ", currentContext);
⋮----
// console.log("cluster :>> ", cluster);
⋮----
/**
 * Connect Docker to custom Container Registry
 * @param {InputOptions} options
 */
export const connectDockerRegistry = async (options?: InputOptions) =>
⋮----
/**
 * Create image pulling secret of custom Container Registry
 */
export const createImagePullingSecret = async (options?: ContainerRegistrySecretOptions) =>
⋮----
export const execCustomProvider = async (options?: InputOptions) =>
</file>

<file path="src/modules/providers/digitalocean.ts">
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import yaml from "js-yaml";
import { isEmpty } from "lodash";
import yargs from "yargs";
⋮----
import { Config } from "@/app.config";
import type { IContainerRegistry } from "@/entities";
import type { InputOptions } from "@/interfaces/InputOptions";
import type { KubeRegistrySecret } from "@/interfaces/KubeRegistrySecret";
import { wait } from "@/plugins";
⋮----
import type { DomainRecord } from "../../interfaces/DomainRecord";
import { askForCluster } from "../cluster/ask-for-cluster";
import ClusterManager from "../k8s";
import { getKubeContextByCluster } from "../k8s/kube-config";
import type { ContainerRegistrySecretOptions } from "../registry/ContainerRegistrySecretOptions";
⋮----
/**
 *
 * @param {InputOptions} options
 */
export const authenticate = async (options?: InputOptions) =>
⋮----
// authenticate Docker with this container registry
⋮----
// wait 5s and retry 1 more time (sometime the API on DO is unreachable)
⋮----
/**
 * @deprecated
 */
export const createRecordInDomain = async (input: DomainRecord) =>
⋮----
/**
 * Create DigitalOcean Container Registry image's pull secret
 */
export const createImagePullingSecret = async (options?: ContainerRegistrySecretOptions) =>
⋮----
// Implement create "imagePullSecret" of Digital Ocean
⋮----
// get Container Registry data:
⋮----
// Get SERVICE ACCOUNT from CONTAINER REGISTRY -> to authenticate & generate "imagePullSecrets"
⋮----
// Get "context" by "cluster" -> to create "imagePullSecrets" of "registry" in cluster's namespace
⋮----
// check namespace is existed
⋮----
// create new namespace?
⋮----
// still can't create namespace -> throw error!
⋮----
// create secret in the namespace (if needed)
⋮----
// command: "doctl registry kubernetes-manifest"
⋮----
// Save to database
⋮----
// log(`DigitalOcean.createImagePullingSecret() :>>`, { updatedRegistry });
⋮----
/**
 * Connect Docker to Digital Ocean Container Registry
 * @param {InputOptions} options
 */
export const connectDockerToRegistry = async (options?: InputOptions) =>
⋮----
// connect DOCKER to CONTAINER REGISTRY
⋮----
// connect PODMAN to CONTAINER REGISTRY
⋮----
// IF NOT EXISTED -> Save this container registry to database!
⋮----
export const execDigitalOcean = async (options?: InputOptions) =>
</file>

<file path="src/modules/providers/gcloud.ts">
import chalk from "chalk";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import fs, { createReadStream, readFileSync } from "fs";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
import yargs from "yargs";
⋮----
import { Config, isServerMode } from "@/app.config";
import { saveCliConfig } from "@/config/config";
import type { IContainerRegistry } from "@/entities";
import type { GoogleServiceAccount } from "@/interfaces/GoogleServiceAccount";
import type { InputOptions } from "@/interfaces/InputOptions";
import { createTmpFile, execCmd, isWin } from "@/plugins";
⋮----
import { askForCluster } from "../cluster/ask-for-cluster";
import ClusterManager from "../k8s";
import { getKubeContextByCluster } from "../k8s/kube-config";
import type { ContainerRegistrySecretOptions } from "../registry/ContainerRegistrySecretOptions";
⋮----
/**
 * Authenticate Google Cloud
 */
export const authenticate = async (options?: InputOptions) =>
⋮----
// const containerRegistryUrl = options.host || "asia.gcr.io";
⋮----
// authenticate Google Cloud platform with Service Account file
⋮----
// if success
⋮----
// if failed
⋮----
/**
 * Connect Docker to Google Cloud Registry
 */
export const connectDockerToRegistry = async (options?: InputOptions &
⋮----
// Validation
⋮----
// if Service Account (JSON) file is specified as "filePath" (--file / -f)
⋮----
//
⋮----
// connect DOCKER to CONTAINER REGISTRY
⋮----
// if (host) {
// 	connectRes = await execaCommand(`gcloud auth configure-docker ${host} --quiet`);
// } else {
// 	connectRes = await execaCommand(`gcloud auth configure-docker --quiet`);
// }
⋮----
// connect PODMAN to CONTAINER REGISTRY
⋮----
// IF NOT EXISTED -> Save this container registry to database!
⋮----
/**
 * Create Google Container Registry image pulling secret
 */
export const createImagePullingSecret = async (options?: ContainerRegistrySecretOptions) =>
⋮----
// log(`providerShortName :>>`, providerShortName);
⋮----
// get Container Registry data:
⋮----
// Get SERVICE ACCOUNT from CONTAINER REGISTRY -> to authenticate & generate "imagePullSecrets"
⋮----
// Get "context" by "cluster" -> to create "imagePullSecrets" of "registry" in cluster's namespace
⋮----
// write down the service account file:
⋮----
// check if namespace is existed
⋮----
// create new namespace?
⋮----
// still can't create namespace -> throw error!
⋮----
// check if the secret is existed within the namespace, try to delete it!
⋮----
// Create new "imagePullSecret":
⋮----
// delete temporary file
// unlink(serviceAccountPath, (err) => err && logError(`[REGISTRY CONTROLLER] Remove tmp file:`, err));
⋮----
// console.log("GCLOUD > createImagePullingSecret > newImagePullingSecret :>> ", newImagePullingSecret);
⋮----
// create new image pulling secret (in namespace & in database)
⋮----
// log({ secretValue });
⋮----
// save this secret to database:
⋮----
// save registry to local config:
⋮----
// console.log(JSON.stringify(updatedRegistry.imagePullSecret, null, 2));
// log(`gcloud.createImagePullingSecret() :>>`, { updatedRegistry });
⋮----
export const showHelp = (options?: InputOptions) =>
⋮----
export const execGoogleCloud = async (options?: InputOptions) =>
</file>

<file path="src/modules/providers/index.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import type { ICloudProvider } from "@/entities";
⋮----
/**
 * @deprecated
 */
export const providerAuthenticate = async (provider: ICloudProvider, options?:
</file>

<file path="src/modules/registry/add-container-registry.ts">
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
⋮----
import type { ContainerRegistryDto } from "@/entities";
import type { RegistryProviderType } from "@/interfaces/SystemTypes";
import { registryProviderList } from "@/interfaces/SystemTypes";
⋮----
import { connectRegistry } from "./connect-registry";
⋮----
export const addContainerRegistry = async (
	data: ContainerRegistryDto,
	options: {
		/**
		 * Owner's user ID
		 */
		ownerId: string;
		/**
		 * Workspace ID
		 */
		workspaceId: string;
		/**
		 * Workspace's slug
		 */
		workspace?: string;
	}
) =>
⋮----
/**
		 * Owner's user ID
		 */
⋮----
/**
		 * Workspace ID
		 */
⋮----
/**
		 * Workspace's slug
		 */
⋮----
// Input organization or confirm to use default:
⋮----
// ask serviceAccount
⋮----
// ask api access token
⋮----
// ask login credentials
</file>

<file path="src/modules/registry/ask-connect-registry.ts">
import type { InputOptions } from "@/interfaces";
⋮----
import { askForRegistry } from "./ask-for-registry";
import { connectRegistry } from "./connect-registry";
⋮----
export const askToConnectRegistry = async (options?: InputOptions) =>
⋮----
// start connecting container registry...
</file>

<file path="src/modules/registry/ask-for-registry.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
import { isEmpty } from "lodash";
⋮----
import type { IContainerRegistry } from "@/entities";
⋮----
export const askForRegistry = async () =>
</file>

<file path="src/modules/registry/connect-registry.ts">
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import { existsSync, unlink } from "fs";
⋮----
import { Config } from "@/app.config";
import type { IContainerRegistry } from "@/entities";
import { createTmpFile } from "@/plugins";
import { isMasked } from "@/plugins/mask-sensitive-info";
⋮----
import digitalocean from "../providers/digitalocean";
import gcloud from "../providers/gcloud";
import DockerRegistry from "./docker-registry";
⋮----
export type ConnectRegistryOptions = {
	userId?: any;
	workspaceId?: any;
	insertDatabase?: boolean;
	builder?: "docker" | "podman";
	filePath?: string;
	token?: string;
};
⋮----
export const connectRegistry = async (registry: IContainerRegistry, options?: ConnectRegistryOptions) =>
⋮----
// delete temporary service account
⋮----
// const doAuthResult = await digitalocean.authenticate({ ...options, key });
// if (!doAuthResult) throw new Error(`Can't authenticate with Digital Ocean using this API access token.`);
</file>

<file path="src/modules/registry/ContainerRegistrySecretOptions.ts">
export interface ContainerRegistrySecretOptions {
	/**
	 * Registry slug
	 */
	registrySlug: string;
	/**
	 * Slug of targeted cluster to create new `imagePullSecrets`
	 */
	clusterSlug: string;
	/**
	 * Targeted namespace to create new `imagePullSecrets`
	 */
	namespace?: string;
}
⋮----
/**
	 * Registry slug
	 */
⋮----
/**
	 * Slug of targeted cluster to create new `imagePullSecrets`
	 */
⋮----
/**
	 * Targeted namespace to create new `imagePullSecrets`
	 */
⋮----
export interface DockerRegistryCredentials {
	/**
	 * Your private docker registry server
	 * @default https://index.docker.io/v1/
	 */
	server?: string;
	/**
	 * Docker username
	 */
	username?: string;
	/**
	 * Docker account's password
	 */
	password?: string;
	/**
	 * `[OPTIONAL]`
	 * Docker account's email
	 */
	email?: string;
}
⋮----
/**
	 * Your private docker registry server
	 * @default https://index.docker.io/v1/
	 */
⋮----
/**
	 * Docker username
	 */
⋮----
/**
	 * Docker account's password
	 */
⋮----
/**
	 * `[OPTIONAL]`
	 * Docker account's email
	 */
</file>

<file path="src/modules/registry/docker-registry.ts">
import { log, logSuccess } from "diginext-utils/dist/xconsole/log";
import type { ExecaReturnValue } from "execa";
⋮----
import { Config, isServerMode } from "@/app.config";
import { saveCliConfig } from "@/config/config";
import type { IContainerRegistry, IUser, IWorkspace } from "@/entities";
⋮----
import ClusterManager from "../k8s";
import { getKubeContextByCluster } from "../k8s/kube-config";
import type { ContainerRegistrySecretOptions, DockerRegistryCredentials } from "./ContainerRegistrySecretOptions";
⋮----
interface DockerRegistryConnectOptions {
	workspaceId: string;
	/**
	 * Container registry slug
	 */
	registry?: string;
	/**
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Container registry slug
	 */
⋮----
/**
	 * @default false
	 */
⋮----
// connect DOCKER ENGINE to DOCKER REGISTRY
⋮----
// connect PODMAN to DOCKER REGISTRY
⋮----
// NOTE: DO NOT EXPOSE PASSWORD IN THIS LOG DUE TO SECURITY RISK !!!
⋮----
// IF NOT EXISTED -> Save this container registry to database!
⋮----
// Get "context" by "cluster" -> to create "imagePullSecrets" of "registry" in cluster's namespace
⋮----
// authenticate cluster & switch to that cluster's context
⋮----
// get Container Registry data:
⋮----
// check if namespace is existed
⋮----
// create new namespace?
⋮----
// still can't create namespace -> throw error!
⋮----
// check if the secret is existed within the namespace, try to delete it!
⋮----
// Create new "imagePullSecret":
⋮----
// kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword> --docker-email=<your-email>
⋮----
// create new image pulling secret (in namespace & in database)
⋮----
// log({ secretValue });
⋮----
// save this secret to database:
⋮----
// save registry to local config:
</file>

<file path="src/modules/registry/index.ts">
import { isJSON } from "class-validator";
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import { existsSync, readFileSync } from "fs";
⋮----
import type { ContainerRegistryDto, ICluster, IContainerRegistry } from "@/entities";
import type InputOptions from "@/interfaces/InputOptions";
⋮----
import { askForCluster } from "../cluster/ask-for-cluster";
import { askForNamespace } from "../k8s/ask-for-namespace";
import { addContainerRegistry } from "./add-container-registry";
import { askToConnectRegistry } from "./ask-connect-registry";
import { askForRegistry } from "./ask-for-registry";
⋮----
export const execRegistry = async (options: InputOptions) =>
⋮----
// parse from CLI arguments
⋮----
// switch (provider) {
// 	case "digitalocean":
// 		return digitalocean.createImagePullingSecret({
// 			clusterSlug,
// 			registrySlug,
// 			namespace,
// 		});
⋮----
// 	case "gcloud":
// 		return gcloud.createImagePullingSecret({
// 			clusterSlug,
// 			registrySlug,
// 			namespace,
// 		});
⋮----
// 	case "dockerhub":
// 		return DockerRegistry.createImagePullSecret({
// 			clusterSlug,
// 			registrySlug,
// 			namespace,
// 		});
⋮----
// 	default:
// 		logError(`Container registry provider "${provider}" is not valid.`);
// 		break;
// }
⋮----
// TODO: get "imagePullSecrets" value as JSON or YAML (from database)
</file>

<file path="src/modules/server/index.ts">
import { log, logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import { Config } from "@/app.config";
import { cliOpts } from "@/config/config";
import { CLI_DIR } from "@/config/const";
import type InputOptions from "@/interfaces/InputOptions";
⋮----
export const checkPackageDependency = async (pkg: string, cmd: string) =>
⋮----
export const startBuildServer = async () =>
⋮----
// Check package dependencies: gcloud, kubectl, doctl, git, docker
⋮----
// switch working directory to CLI directory
⋮----
export const stopBuildServer = async () =>
⋮----
// switch working directory to CLI directory
⋮----
export const restartBuildServer = async () =>
⋮----
// switch working directory to CLI directory
⋮----
export const execServer = async (options?: InputOptions) =>
</file>

<file path="src/modules/server/startup-scripts.ts">
import chalk from "chalk";
⋮----
import cronjob from "node-cron";
⋮----
import { isDevMode, IsTest } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import type { IUser } from "@/entities";
import { execCmd } from "@/plugins";
import { seedDefaultRoles } from "@/seeds";
import { seedDefaultProjects } from "@/seeds/seed-projects";
import { seedSystemInitialData } from "@/seeds/seed-system";
import { setServerStatus } from "@/server";
import { WorkspaceService } from "@/services";
⋮----
import { findAndRunCronjob } from "../cronjob/find-and-run-job";
import { markLongRunningBuildAndReleaseAsFailed } from "../deploy/mark-long-build-release-as-failed";
⋮----
/**
 * NOTE: BUILD SERVER INITIAL START-UP SCRIPTS:
 * - Create config directory in {HOME_DIR}
 * - Connect GIT providers (if any)
 * - Connect Container Registries (if any)
 * - Connect K8S clusters (if any)
 * - Start system cronjobs
 * - Seed some initial data
 */
export async function startupScripts()
⋮----
// config dir
⋮----
/**
	 * System cronjob checking every minute...
	 * [Skip for unit tests]
	 */
⋮----
// NOTE: [isDevMode == process.env.DEV_MODE == true] to make sure it won't override your current GIT config when developing Diginext
⋮----
// write initial private SSH keys if any
⋮----
/**
		 * CAUTION: DO NOT TURN OFF THIS
		 * ---
		 * Set default git config
		 */
⋮----
execCmd(`git config --global http.postBuffer 524288000`); // 524 mb
⋮----
// seed system initial data: Cloud Providers
⋮----
// seed default roles to workspace if missing:
⋮----
// seed default projects to workspace if missing:
⋮----
/**
	 * CRONJOBS
	 * ---
	 * Schedule a clean up task every 7 days at 02:00 AM
	 * (Skip for test environment)
	 */
⋮----
/**
		 * System clean up: DOCKER/PODMAN -> Not working (use server crontab currently instead)
		 */
// const repeatDays = 7; // every 7 days
// const atHour = 3; // 3AM
// console.log(chalk.green(`[SYSTEM]`), `✓ Cronjob of "System Clean Up" has been scheduled every ${repeatDays} days at ${atHour}:00 AM`);
// cronjob.schedule(`0 ${atHour} */${repeatDays} * *`, () => cleanUp());
⋮----
/**
		 * Mark all builds & releases with "in_progress" status longer than 1 hour as "failed".
		 * Run every hour.
		 */
⋮----
/**
	 * Database migration
	 */
// await migrateAllRecords();
// await migrateAllRoles();
// await migrateAllUsers();
// await migrateAllAppEnvironment();
// await migrateAllFrameworks();
// await migrateAllGitProviders();
// await migrateServiceAccountAndApiKey();
// await migrateDefaultServiceAccountAndApiKeyUser();
// await migrateAllClusters();
// await migrateAllReleases();
⋮----
/**
	 * Seed or update initial data
	 */
// await seedInitialClusters();
// await seedInitialRegistries();
⋮----
/**
	 * Mark "healthz" return true & server is ready to receive connections:
	 */
</file>

<file path="src/modules/snippets/createNewPage.ts">
import chalk from "chalk";
import { makeSlug } from "diginext-utils/dist/Slug";
import { capitalizeName, clearUnicodeCharacters } from "diginext-utils/dist/string";
import fs from "fs";
import path from "path";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
type AdditionalType = {
	_: string[];
	e: boolean;
	example: boolean;
	b: boolean;
	blank: boolean;
	t: boolean;
	three: boolean;
	p: boolean;
	pixi: boolean;
	o: boolean;
	overwrite: boolean;
};
⋮----
type ExtendedType = InputOptions & AdditionalType;
⋮----
const generateName = (name: string) =>
⋮----
//
⋮----
const generateFileName = (name: any) =>
⋮----
//
⋮----
export default async function createNewPage(options: ExtendedType)
⋮----
//
⋮----
const checkFramework = () =>
⋮----
//
⋮----
//
⋮----
//
⋮----
//
⋮----
//
⋮----
//
⋮----
//
⋮----
const createaFileAndReplaceText = async (
		list: {
			source: string;
			target: string;
			replaces: {
				source: RegExp;
				target: string;
			}[];
		}[]
) =>
⋮----
//
⋮----
//
⋮----
//
⋮----
//
</file>

<file path="src/modules/snippets/generateSnippet.ts">
import createNewPage from "@/modules/snippets/createNewPage";
⋮----
export default async function generateSnippet(options: any)
⋮----
//
⋮----
//
</file>

<file path="src/modules/storages/aws-storage.ts">
import type { PutObjectCommandInput } from "@aws-sdk/client-s3";
import { S3 } from "@aws-sdk/client-s3";
import { Upload } from "@aws-sdk/lib-storage";
⋮----
import type { ICloudStorage } from "@/entities";
import { getImageBufferFromUrl, readFileToBuffer } from "@/plugins/image";
⋮----
import { getStorageHost } from "./storage-helper";
import type { StorageUploadOptions } from "./storage-types";
⋮----
export type InitGoogleStorageOptions = { pathPrefix?: string; isDebugging?: boolean };
⋮----
export function initStorage(storage: ICloudStorage)
⋮----
export async function listBuckets(storage: ICloudStorage)
⋮----
export function getUploadFileStorageUrl(bucketName: string, destFileName: string)
⋮----
export function getUploadFilePublicUrl(storageHost: string, destFileName: string)
⋮----
export async function uploadFileBuffer(
	storage: ICloudStorage,
	buffer: Buffer,
	destFileName: string,
	options?: StorageUploadOptions
): Promise<
⋮----
ContentEncoding: options?.contentEncoding, // Set file to be gzip-encoded
CacheControl: options?.cacheControl, // Set cache-control headers
⋮----
export async function uploadFileURL(storage: ICloudStorage, url: string, destFileName: string, options?: StorageUploadOptions)
⋮----
export async function uploadFilePath(storage: ICloudStorage, filePath: string, destFileName: string, options?: StorageUploadOptions)
</file>

<file path="src/modules/storages/google-storage.ts">
// eslint-disable-next-line import/no-extraneous-dependencies
import type { Bucket } from "@google-cloud/storage";
import { Storage } from "@google-cloud/storage";
⋮----
import type { ICloudStorage } from "@/entities";
import { getImageBufferFromUrl, readFileToBuffer } from "@/plugins/image";
⋮----
import type { StorageUploadOptions } from "./storage-types";
⋮----
export type GoogleStorageBucket = Bucket & { pathPrefix: string };
⋮----
export type InitGoogleStorageOptions = { isDebugging?: boolean };
⋮----
export function initStorageByServiceAccount(serviceAccount: string, bucketName: string, options?: InitGoogleStorageOptions)
⋮----
// console.log("env.GOOGLE_SERVICE_ACCOUNT :>> ", env.GOOGLE_SERVICE_ACCOUNT);
// console.log("env.GOOGLE_SERVICE_ACCOUNT.replace() :>> ", env.GOOGLE_SERVICE_ACCOUNT?.replace(/\\n/g, "\n"));
⋮----
// console.log("googleSA :>> ", googleSA);
// console.log("googleSA.project_id :>> ", googleSA.project_id);
⋮----
export function initStorage(storage: ICloudStorage, options?: InitGoogleStorageOptions)
⋮----
export async function listBuckets(storage: ICloudStorage)
⋮----
export function getUploadFileStorageUrl(bucketName: string, destFileName: string)
⋮----
export function getUploadFilePublicUrl(storageHost: string, destFileName: string)
⋮----
export async function uploadFileBuffer(
	storage: ICloudStorage,
	buffer: Buffer,
	destFileName: string,
	options?: StorageUploadOptions
): Promise<
⋮----
// initialize storage bucket
⋮----
// Create a writable stream and specify the format of the data to be written
⋮----
contentType: "application/octet-stream", // or whichever content type your buffer should be
⋮----
// Write the buffer to the file
⋮----
export async function uploadFileURL(storage: ICloudStorage, url: string, destFileName: string, options?: StorageUploadOptions)
⋮----
export async function uploadFilePath(storage: ICloudStorage, filePath: string, destFileName: string, options?: StorageUploadOptions)
</file>

<file path="src/modules/storages/storage-helper.ts">
import type { ICloudStorage } from "@/entities";
⋮----
export function getStorageBucketOrigin(data: ICloudStorage)
⋮----
export function getStorageHost(data: ICloudStorage)
</file>

<file path="src/modules/storages/storage-types.ts">
export type StorageUploadOptions = {
	/**
	 * CDN domain
	 */
	storageHost?: string;
	/**
	 * Examples: "gzip"
	 */
	contentEncoding?: string;
	/**
	 * Example: "public, max-age=31536000"
	 */
	cacheControl?: string;
};
⋮----
/**
	 * CDN domain
	 */
⋮----
/**
	 * Examples: "gzip"
	 */
⋮----
/**
	 * Example: "public, max-age=31536000"
	 */
</file>

<file path="src/modules/workspace/check-quota.ts">
import { toNumber } from "lodash";
⋮----
import { IsSuperAccount, IsTest } from "@/app.config";
import type { IWorkspace } from "@/entities";
import type { ResourceQuotaSize } from "@/interfaces/SystemTypes";
import { AppService } from "@/services/AppService";
import { BuildService } from "@/services/BuildService";
import { ProjectService } from "@/services/ProjectService";
import { WorkspaceService } from "@/services/WorkspaceService";
⋮----
import type { CheckQuotaParams, CheckQuotaResponse } from "../diginext/dx-subscription";
import { dxCheckQuota } from "../diginext/dx-subscription";
⋮----
export async function checkQuota(workspace: IWorkspace, options:
⋮----
// SKIP on development and test environment
⋮----
export async function checkQuotaByWorkspaceId(id: string)
</file>

<file path="src/modules/framework.ts">
import detectPrivateKey from "diginext-utils/dist/file/detectPrivateKey";
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import fs, { readdirSync } from "fs";
import { mkdir } from "fs/promises";
import ora from "ora";
import path from "path";
import copy from "recursive-copy";
⋮----
import { isServerMode } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import type { InputOptions } from "@/interfaces/InputOptions";
import { cloneGitRepo, deleteFolderRecursive, pullOrCloneGitRepo, wait } from "@/plugins";
⋮----
import { parseGitRepoDataFromRepoSSH, pullOrCloneGitRepoHTTP, repoSshToRepoURL } from "./git/git-utils";
⋮----
/**
 * Delete temporary directory of the framework
 */
export const cleanUpFramework = async () =>
⋮----
// clean up
⋮----
/**
 * Copy all framework's files to application directory
 * @param destDirectory - Destination application directory
 */
export const copyFrameworkResources = async (destDirectory: string) =>
⋮----
// filter: ["**/*", "!.git"],
⋮----
export const getLatestFrameworkVersion = async (framework = "diginext") =>
⋮----
// let { data } = await bitbucket.repositories.listTags({
// 	repo_slug: config.framework[framework],
// 	workspace: config.workspace,
// 	sort: "-name",
// });
// if (typeof data.values == "undefined" || data.values.length == 0) {
// 	logError(`This framework repository doesn't have any released tags.`);
// 	return;
// }
// // exclude "beta" and "alpha" tags
// let versionList = (data.values || [{ name: "main" }]).filter((ver) => !ver.name.includes("beta"));
// return versionList && versionList.length > 0 ? versionList[0].name : "main";
⋮----
export const getFrameworkVersions = async (framework = "diginext") =>
⋮----
// let { data } = await bitbucket.repositories.listTags({
// 	repo_slug: config.framework[framework],
// 	workspace: config.workspace,
// 	sort: "-name",
// });
// if (typeof data.values == "undefined" || data.values.length == 0) {
// 	logError(`This framework repository doesn't have any released tags.`);
// 	return;
// }
// return data.values;
⋮----
export const selectFrameworkVersion = async (framework = "diginext") =>
⋮----
// TODO: What the fuck is this??
// let { data } = await bitbucket.repositories.listTags({
// 	repo_slug: config.framework[framework],
// 	workspace: config.workspace,
// 	sort: "-name",
// });
// let versionList = typeof data.values != undefined && data.values.length > 0 ? [...data.values] : ["main"];
// return versionList;
⋮----
export interface PullFrameworkVersion extends Pick<InputOptions, "framework" | "frameworkVersion" | "name" | "repoSSH" | "ci" | "isDebugging"> {}
⋮----
export const pullFrameworkVersion = async (options: PullFrameworkVersion) =>
⋮----
// create tmp dir
⋮----
// pull or clone git repo
⋮----
// delete framework git
⋮----
// If failed to pull/clone with SSH, give another try with HTTPS method:
⋮----
// USER IS MISSING PERMISSIONS
⋮----
// delete framework git
⋮----
/**
 * Change the name of "package.json" (for JS/TS apps only)
 * @param options
 * @returns
 */
export const changePackageName = async (options: InputOptions) =>
⋮----
export async function pullingFramework(options: InputOptions)
⋮----
// TODO: Select specific branch as a version?
⋮----
// @teexiii : SHOULD CHECK FOR SPECIFIC CASE AS NODE.JS ONLY!
⋮----
export const cloneGitFramework = async (options: InputOptions) =>
⋮----
//
⋮----
// create tmp dir
⋮----
// delete unneccessary files
⋮----
export async function pullingRepoToNewGitDir(options: InputOptions)
⋮----
//
⋮----
//
</file>

<file path="src/modules/test-command.ts">
import { execa } from "execa";
import { createReadStream } from "fs";
⋮----
import type { InputOptions } from "@/interfaces";
⋮----
export const testCommand = async (options?: InputOptions) =>
⋮----
// ----- PULL or CLONE GIT REPO -----
// const git = simpleGit(process.cwd());
// const remotes = ((await git.getRemotes(true)) || []).filter((remote) => remote.name === "origin");
// console.log("remotes :>> ", remotes);
// const originRemote = remotes[0] as any;
// if (!originRemote) throw new Error(`This directory doesn't have any git remotes.`);
// console.log("originRemote :>> ", originRemote);
// ---- GENERATE SSH KEY ----
// const { execa, execaCommand } = await import("execa");
// const privateIdRsaFile = "id_rsa";
// await execa("ssh-keygen", ["-b", "2048", "-t", "rsa", "-f", privateIdRsaFile, "-q", "-N", ""]);
// ---> Build 10 apps in the same time!!!
// await cliAuthenticate(options);
// for (let i = 0; i < 10; i++) {
// 	console.log("Build :>> ", i + 1);
// 	await requestBuild(options);
// 	await wait(1000);
// }
// ----- GET LATEST TAG -----
// console.log(await getLatestTagOfGitRepo());
// ----- PULL HTTP GIT ------
// await pullOrCloneGitRepoHTTP(
// 	"https://bitbucket.org/digitopvn/static-site-framework.git",
// 	path.resolve(HOME_DIR, "static-site-framework"),
// 	"master",
// 	{
// 		isDebugging: true,
// 		useAccessToken: {
// 			type: "Basic",
// 			value: "<your-base64-token>",
// 		},
// 	}
// );
// const aiSvc = new AIService();
// await aiSvc.generateDockerfile(options.targetDirectory, options);
// console.log("options.env :>> ", options.env);
// console.log("options.envs :>> ", options.envs);
// const repoSshOrUrl = "https://github.com/digitopvn/diginext-docs";
// const repoSSH = isValidRepoURL(repoSshOrUrl) ? repoUrlToRepoSSH(repoSshOrUrl) : repoSshOrUrl;
// const repoURL = isValidRepoURL(repoSshOrUrl) ? repoSshOrUrl : repoSshToRepoURL(repoSshOrUrl);
// console.log("repoSSH :>> ", repoSSH);
// console.log("repoURL :>> ", repoURL);
// const gitData = parseGitRepoDataFromRepoSSH(repoSSH);
// console.log("gitData :>> ", gitData);
⋮----
// const res = await execa("cat", [options.filePath]);
// console.log("res.stdout :>> ", res.stdout);
</file>

<file path="src/plugins/cli-md/index.ts">
import cliHtml from "cli-html";
import { marked } from "marked";
import emoji from "node-emoji";
⋮----
/**
 * @param text
 */
function insertEmojis(text)
⋮----
const markdownToCli = (markdown)
</file>

<file path="src/plugins/cloud-storage/helper.ts">
/* eslint-disable prettier/prettier */
import type { ICloudStorage } from "./types";
⋮----
/**
 * Private access URL for the storage bucket
 * @param storage
 * @returns
 */
export function getStorageBucketOrigin(storage: ICloudStorage)
⋮----
/**
 * Public access host (domain) for the storage bucket
 * @param storage
 * @returns
 */
export function getStorageHost(storage: ICloudStorage)
⋮----
// cloudflare "baseUrl" is required
⋮----
/**
 * Get the origin URL for the uploaded file (private access)
 * @param storage
 * @param destFileName
 * @returns
 */
export function getUploadFileOriginEndpointUrl(storage: ICloudStorage, destFileName: string)
⋮----
/**
 * Get the public URL for the uploaded file
 * @param storage
 * @param destFileName
 * @returns
 */
export function getUploadFilePublicUrl(storage: ICloudStorage, destFileName: string)
⋮----
export function guessMimeTypeByBuffer(buffer: Buffer): string
⋮----
// More accurate checks for MP4 and QuickTime
⋮----
return "application/octet-stream"; // Default to binary data if unknown
</file>

<file path="src/plugins/cloud-storage/index.ts">

</file>

<file path="src/plugins/cloud-storage/storage-upload.ts">
import type { PutObjectCommandInput } from "@aws-sdk/client-s3";
import { S3 } from "@aws-sdk/client-s3";
import { env } from "process";
⋮----
import { getImageBufferFromUrl, readFileToBuffer } from "../image";
import { makeSlugByName } from "../string";
import { getUploadFileOriginEndpointUrl, getUploadFilePublicUrl, guessMimeTypeByBuffer } from "./helper";
import type { CloudStorageProvider, ICloudStorage, StorageUploadOptions } from "./types";
⋮----
export function getCurrentStorage(): ICloudStorage
⋮----
export async function initStorage(storage: ICloudStorage)
⋮----
export async function listBuckets(storage: ICloudStorage)
⋮----
export async function uploadFileBuffer(
	buffer: Buffer,
	destFileName: string,
	options?: StorageUploadOptions
): Promise<
⋮----
// new file name
⋮----
CacheControl: options?.cacheControl || "max-age=31536000, s-maxage=31536000", // Set cache-control headers
ContentEncoding: options?.contentEncoding, // Set file to be gzip-encoded
⋮----
// process upload
⋮----
// New SDK:
// const command = new PutObjectCommand(uploadParams);
// const data = await s3.send(command);
⋮----
// Old SDK:
⋮----
// Even older SDK:
// const data = await new Upload({
// 	client: s3,
// 	params: uploadParams,
// }).done();
⋮----
// Log additional details if available
⋮----
export async function uploadFileURL(url: string, destFileName: string, options?: StorageUploadOptions)
⋮----
export async function uploadFilePath(filePath: string, destFileName: string, options?: StorageUploadOptions)
</file>

<file path="src/plugins/cloud-storage/types.ts">
export type CloudStorageProvider = (typeof CLOUD_STORAGE_PROVIDERS)[number];
⋮----
export type ICloudStorage = {
	provider: CloudStorageProvider;
	bucket: string;
	region: string;
	endpoint?: string;
	baseUrl?: string;
	basePath?: string;
	accessKey: string;
	secretKey: string;
};
⋮----
export type StorageUploadOptions = {
	storage?: ICloudStorage;
	debug?: boolean;

	/**
	 * CDN domain
	 */
	storageHost?: string;
	/**
	 * Examples: "gzip"
	 */
	contentEncoding?: string;
	/**
	 * Example: "public, max-age=31536000"
	 */
	cacheControl?: string;
};
⋮----
/**
	 * CDN domain
	 */
⋮----
/**
	 * Examples: "gzip"
	 */
⋮----
/**
	 * Example: "public, max-age=31536000"
	 */
</file>

<file path="src/plugins/string/code-block.ts">
/**
 * Extract text between backticks
 * @param input
 * @returns
 */
export function extractTextBetweenBackticks(input: string)
⋮----
/**
 * Separate code blocks from AI messages
 */
export function splitCodeSnippets(input: string): string[]
⋮----
// The regex pattern captures both code blocks and texts around them.
⋮----
// Initialize an array to hold the parts of the string
⋮----
// Split the input text by the regex, keeping the code blocks in the result
⋮----
// Get the text before the current code block
⋮----
// Add the code block
⋮----
// Add any remaining text after the last code block
⋮----
// Filter out any empty strings that might be present
</file>

<file path="src/plugins/string/contain.ts">
/**
 * Check if input string has characters are not a letter, digit, underscore
 */
export function containsSpecialCharacters(str: string)
⋮----
export function contains(text: string, words: string[]): boolean
⋮----
export function filterSpecialChars(str: string)
⋮----
// Biểu thức chính quy để loại bỏ các ký tự không phải là chữ cái hoặc số
⋮----
export function containsChinese(str: string)
⋮----
export function containsEmoji(str: string)
</file>

<file path="src/plugins/string/count.ts">
export function countLeadingSigns(inputString: string, characterToCount: string): number
</file>

<file path="src/plugins/string/extract.ts">
export function extractNameFromEmail(email: string): string
⋮----
// Split the email at the "@" symbol and take the first part
⋮----
// Replace dots, underscores, an‰d hyphens with spaces to normalize the name
</file>

<file path="src/plugins/string/format.ts">
export function ellipsis(str: string, length: number)
⋮----
export function formatBytes(bytes: number, decimals = 2)
⋮----
//
</file>

<file path="src/plugins/string/humanize.ts">
export type HumanizeNumberOptions = {
	/**
	 * @example 1000 => 1,000
	 * @default ","
	 */
	delimiter?: string;
	/**
	 * @example 1.1
	 * @default "."
	 */
	separator?: string;
};
⋮----
/**
	 * @example 1000 => 1,000
	 * @default ","
	 */
⋮----
/**
	 * @example 1.1
	 * @default "."
	 */
⋮----
export function humanizeNumber(n: number, options: HumanizeNumberOptions =
</file>

<file path="src/plugins/string/index.ts">

</file>

<file path="src/plugins/string/random.ts">
/**
 * Generates a random string of the specified length using only digits and alphabet characters.
 * @param length - The length of the random string to generate.
 * @returns A random string of the specified length.
 */
export function generateRandomString(length: number): string
</file>

<file path="src/plugins/string/slug.ts">
import { randomStringAndNumberByLength } from "diginext-utils/dist/string/random";
import isEmpty from "lodash/isEmpty";
⋮----
import { containsChinese, containsEmoji, filterSpecialChars } from "./contain";
⋮----
export type MakeSlugOptions = {
	delimiter?: string;
	lowercase?: boolean;
	replacements?: { [key: string]: string };
	transliterate?: boolean;
	limit?: number;
};
⋮----
// Latin
⋮----
// Latin symbols
⋮----
// Greek
⋮----
// Turkish
⋮----
// Russian
⋮----
// Ukrainian
⋮----
// Czech
⋮----
// Polish
⋮----
// Latvian
⋮----
export const makeSlug = (input: string, opt: MakeSlugOptions =
⋮----
// convert any input type to string ;)
⋮----
// Merge options
⋮----
// Vietnamese
⋮----
// Make custom replacements
⋮----
// Transliterate characters to ASCII
⋮----
// Replace non-alphanumeric characters with our delimiter
⋮----
// Remove duplicate delimiters
⋮----
// Truncate slug to max. characters
⋮----
// Remove delimiter from ends
⋮----
/**
 * Create a unique slug by input string
 * @param prismaSchema Prisma schema
 * @param input Input string
 * @param opt Make slug options
 * @returns {string} Unique slug
 */
export async function makeUniqueSlug(
	prismaSchema: any,
	input: string,
	opt: MakeSlugOptions & { field: string; atempt: number } = { field: "slug", atempt: 0 }
)
⋮----
export function makeSlugByName(name: string)
</file>

<file path="src/plugins/array.ts">
function mapAsync<T, U>(array: T[], callbackfn: (value: T, index: number, array: T[]) => Promise<U>): Promise<U[]>
⋮----
export async function filterAsync<T>(array: T[], callbackfn: (value: T, index: number, array: T[]) => Promise<boolean>): Promise<T[]>
⋮----
export function filterUniqueItems<T>(arr: T[]): T[]
⋮----
export const sortedDaysOfWeek = (daysOfWeek)
⋮----
export function filterUniqueItemWithCondition(array: any[], uniqueField: string, priorityCondition:
⋮----
/**
 * Create array of unique strings based on a given array of strings.
 * @example
 * const array = ["1", "2", "1"];
 * console.log(uniqueStrings(array)); // Should log `["1", "2"]`
 * @param array - Input array
 * @returns {string[]}
 */
export function uniqueStrings(array: string[])
⋮----
/**
 * Check whether all elements in a single array are the same.
 *
 * @example
 * const array1 = ["1", "1", "1"];
 * const array2 = ["1", "2", "1"];
 * console.log(allElementsAreEqual(array1)); // Should log `true`
 * console.log(allElementsAreEqual(array2)); // Should log `false`
 * @param array - Input array
 * @returns {boolean}
 */
export function allElementsAreEqual(array: any[])
</file>

<file path="src/plugins/detect-language.ts">
import { existsSync } from "fs";
⋮----
export type SupportedLanguage = (typeof supportedLanguages)[number];
⋮----
export const detectLanguage = (dir: string) =>
</file>

<file path="src/plugins/detect-version.ts">
import path from "path";
⋮----
import type { SupportedLanguage } from "./detect-language";
⋮----
export function findVersion(language: SupportedLanguage)
⋮----
// Check within JavaScript/TypeScript source code
⋮----
// Check within Go source code
⋮----
// Check within Rust source code
⋮----
// These languages don't have version extraction logic yet
</file>

<file path="src/plugins/freeup.ts">
import { cleanUp } from "@/build/system";
⋮----
export async function freeUp()
⋮----
// return execaCommand(`docker rmi $(docker images "asia.gcr.io/*")`, { stdio: "inherit" });
</file>

<file path="src/plugins/fs-extra.ts">
import { existsSync, readdirSync, statSync } from "fs";
import path from "path";
import tree from "tree-node-cli";
⋮----
export function getDirectoriesInDirectory(directoryPath: string): string[]
⋮----
export function getSourceTree(dir: string = process.cwd())
⋮----
export async function getFolderStructure(dir: string = process.cwd())
⋮----
// scan directory for file structure:
⋮----
// const dirs = getDirectoriesInDirectory(dir);
// files.push(...dirs.map((d) => `./${d}`));
</file>

<file path="src/plugins/gcs.ts">
import Axios from "axios";
import Configstore from "configstore";
import { log, logError, logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
import pkg from "@/../package.json";
⋮----
import { Storage } from "@google-cloud/storage";
import path from "path";
⋮----
// Creates a client
⋮----
// console.log(credFile);
⋮----
/**
 * TODO: INVALIDATE CACHE
 * Reference: https://cloud.google.com/compute/docs/reference/rest/v1/urlMaps/invalidateCache
 * Installation: npm install googleapis --save
 *  */
⋮----
// const storage = new Storage({
// 	projectId: "top-group-k8s",
// 	keyFilename: credFile,
// });
⋮----
export async function uploadFile(filename, destination)
⋮----
// Uploads a local file to the bucket
⋮----
// chunkSize: 5 * 1024 * 1024, // 5MB
// Support for HTTP requests made with `Accept-Encoding: gzip`
⋮----
// By setting the option `destination`, you can change the name of the
// object you are uploading to a bucket.
⋮----
// Enable long-lived HTTP caching headers
// Use only if the contents of the file will never change
// (If the contents will change, use cacheControl: 'no-cache')
cacheControl: "public,max-age=31536000", // 1 year
⋮----
// log(`${filename} uploaded to ${bucketName}.`);
⋮----
export const invalidateCache = async (resourcePath) =>
⋮----
// log("prevInvalidateTime", now - prevInvalidateTime);
⋮----
// uploadFile().catch(console.error);
</file>

<file path="src/plugins/generate-unique-string.ts">
import { randomBytes } from "crypto";
⋮----
export default function generateUniqueString(): string
</file>

<file path="src/plugins/image.ts">
import axios from "axios";
import { readFileSync, writeFileSync } from "fs";
import sizeOf from "image-size";
import path from "path";
⋮----
export function readFileToBuffer(filePath: string)
⋮----
/**
 * Read image url and convert to {Buffer}
 */
export async function getImageBufferFromUrl(url: string)
⋮----
/**
 * Download image from input URL
 */
export async function downloadImage(url: string, outputPath: string)
⋮----
// console.log(`Image downloaded and saved to ${outputPath}`);
⋮----
/**
 * Get image's dimentions (width, height)
 * @param url - Input image URL
 */
export async function getImageDimensions(url: string)
</file>

<file path="src/plugins/import-esm.ts">
import Module from "module";
import path, { isAbsolute } from "path";
⋮----
export async function importEsm(specifier, module)
</file>

<file path="src/plugins/index.ts">

</file>

<file path="src/plugins/is-own.ts">
import type { IUser } from "@/entities";
⋮----
import { MongoDB } from "./mongodb";
⋮----
export const isOwned = (data: any, user: IUser) =>
</file>

<file path="src/plugins/k8s-helper.ts">
export interface SimplifiedK8SResource {
	apiVersion?: string;
	kind?: string;
	metadata?: {
		creationTimestamp?: string;
		labels?: Record<string, string>;
		name?: string;
		namespace?: string;
		resourceVersion?: string;
		uid?: string;
	};
	// extras
	clusterSlug?: string;
	/**
	 * Cluster's short name
	 * @deprecated
	 */
	clusterShortName?: string;
	/**
	 * Cluster ID
	 */
	cluster?: string;
	/**
	 * Workspace ID
	 */
	workspace?: string;
}
⋮----
// extras
⋮----
/**
	 * Cluster's short name
	 * @deprecated
	 */
⋮----
/**
	 * Cluster ID
	 */
⋮----
/**
	 * Workspace ID
	 */
⋮----
export function simplifyK8SResourceData(item: any)
⋮----
/**
 * Regular expression to match Kubernetes memory format
 * It looks for digits followed by either Ei, Pi, Ti, Gi, Mi, Ki, E, P, T, G, M, K, or nothing
 */
export function isValidKubernetesMemoryFormat(value: string)
⋮----
// Test the value against the regular expression
</file>

<file path="src/plugins/log-stream.ts">
import { Writable } from "stream";
⋮----
export class LogStream extends Writable
⋮----
write(chunk: any, callback?: (error: Error)
write(chunk: any, encoding: BufferEncoding, callback?: (error: Error)
write(chunk: unknown, encoding?: unknown, callback?: unknown): boolean
</file>

<file path="src/plugins/mongodb.ts">
import mongoose, { Types } from "mongoose";
⋮----
export function isObjectId(id)
⋮----
export function isValidObjectId(id)
⋮----
export function toObjectId(id: any)
⋮----
function toString(id)
⋮----
export interface MongooseFindOptions {
	/**
	 * Simple condition that should be applied to match entities.
	 */
	where?: { [key: string]: any };
	/**
	 * Offset (paginated) where from entities should be taken.
	 */
	skip?: number;
	/**
	 * Limit (paginated) - max number of entities should be taken.
	 */
	take?: number;
}
⋮----
/**
	 * Simple condition that should be applied to match entities.
	 */
⋮----
/**
	 * Offset (paginated) where from entities should be taken.
	 */
⋮----
/**
	 * Limit (paginated) - max number of entities should be taken.
	 */
</file>

<file path="src/plugins/monorepo.ts">
import { logWarn } from "diginext-utils/dist/xconsole/log";
import { existsSync } from "fs";
import path from "path";
⋮----
import type { InputOptions } from "../interfaces/InputOptions";
⋮----
/**
 * Check if this project is a monorepo
 * @param {InputOptions} options
 * @returns {{error:string, appPath:string, appDirectory:string, isMonorepo:boolean}}
 */
function checkMonorepo(options?: InputOptions)
⋮----
// * Check if this is a MONOREPO -> select app to deploy
</file>

<file path="src/plugins/number.ts">
export const isNumeric = (num: any)
</file>

<file path="src/plugins/object.ts">
import { mapKeys } from "lodash";
import mongoose from "mongoose";
⋮----
/**
 * Flatten the object into 1-level-object (with key paths)
 * @example
 * const flattenObj = flattenObject({a: {b: [{c: 1}, {c: 2}]}, e: 3});
 * console.log(flattenObj); // {"a.b.0.c": 1, "a.b.1.c": 2, "e": 3}
 */
export function flattenObject(obj: Record<string, any>): Record<string, any>
⋮----
const flattenKeys = (_obj: Record<string, any>, prefix = ""): Record<string, any> =>
</file>

<file path="src/plugins/os.ts">
export function getOS()
⋮----
export function isWin()
⋮----
export function isMac()
⋮----
export function isLinux()
</file>

<file path="src/plugins/ownership-utils.ts">

</file>

<file path="src/plugins/params.ts">
export const paramsToObject = (params: URLSearchParams) =>
⋮----
// each 'entry' is a [key, value] tupple
</file>

<file path="src/plugins/parse-request-filter.ts">
import { cloneDeepWith } from "lodash";
⋮----
import type { IQueryFilter } from "@/interfaces";
⋮----
import { MongoDB } from "./mongodb";
⋮----
export const parseRequestFilter = (requestQuery: any) =>
⋮----
// pagination
⋮----
// options
⋮----
sort, // @example: -updatedAt,-createdAt
order, // @example: -updatedAt,-createdAt
⋮----
// others
⋮----
// filter
⋮----
// manipulate "$or" & "$and" filter:
⋮----
// console.log("[2] _filter :>> ", _filter);
⋮----
/**
	 * Traverse filter object and transform the values.
	 * Need to cast valid {ObjectId} string to {ObjectId} since Mongoose "aggregate" doesn't cast them automatically.
	 * @link https://mongoosejs.com/docs/api/aggregate.html#Aggregate()
	 */
</file>

<file path="src/plugins/slug.ts">
export type MakeSlugOptions = {
	delimiter?: string;
	lowercase?: boolean;
	replacements?: { [key: string]: string };
	transliterate?: boolean;
	limit?: number;
};
⋮----
export const makeSlug = (input: string, opt: MakeSlugOptions =
⋮----
// convert any input type to string ;)
⋮----
// Merge options
⋮----
// Latin
⋮----
// Latin symbols
⋮----
// Greek
⋮----
// Turkish
⋮----
// Russian
⋮----
// Ukrainian
⋮----
// Czech
⋮----
// Polish
⋮----
// Latvian
⋮----
// Vietnamese
⋮----
// Make custom replacements
⋮----
// Transliterate characters to ASCII
⋮----
// Replace non-alphanumeric characters with our delimiter
⋮----
// Remove duplicate delimiters
⋮----
// Truncate slug to max. characters
⋮----
// Remove delimiter from ends
</file>

<file path="src/plugins/traverse.ts">
import { MongoDB } from "./mongodb";
⋮----
export function traverseObjectAndTransformValue(obj: any, transform: (keyPair: [key: string, val: any]) => any)
⋮----
// return obj;
⋮----
export function replaceObjectIdsToStrings(obj: any): any
</file>

<file path="src/plugins/user-utils.ts">
import { upperFirst } from "lodash";
⋮----
import type { IApp, IProject, IRole, IUser, IWorkspace, UserDto } from "@/entities";
import type { IBase } from "@/entities/Base";
import type { IQueryFilter } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import type { AppService, BaseService, ProjectService } from "@/services";
import { RoleService, UserService } from "@/services";
⋮----
import { MongoDB } from "./mongodb";
⋮----
export const addUserToWorkspace = async (userId: string, workspace: IWorkspace, roleType: "admin" | "moderator" | "member" = "member") =>
⋮----
// find role (default: "member")
⋮----
// assign role
⋮----
// assign workspace
⋮----
// update user data
⋮----
export const addRoleToUser = async (roleType: "admin" | "moderator" | "member", userId: string, workspace: IWorkspace) =>
⋮----
// find user
⋮----
// find role
⋮----
// remove old roles
⋮----
// push new role
⋮----
// update database
⋮----
export const getActiveRole = async (user: IUser, workspace: IWorkspace, options?:
⋮----
// check if "roles" has not been populated:
⋮----
// populate user's roles if needed
⋮----
// check again if this user have no roles -> assign member role
⋮----
// get active role
⋮----
// if this user doesn't have any role in this workspace
⋮----
// assign "member" role if needed:
⋮----
// update database
⋮----
export const getActiveRoleByUserId = async (userId: string, workspace: IWorkspace) =>
⋮----
// find user
⋮----
export async function getActiveWorkspace(user: IUser)
⋮----
export async function assignRoleWithoutCheckingPermissions(roleId: string, toUser: IUser, ownership?: Ownership)
⋮----
// filter: same role & same workspace roles
⋮----
// push new role id
⋮----
// update user
⋮----
export async function assignRole(role: IRole, user: IUser, options?:
⋮----
// validate
⋮----
// current role "member" -> cannot assign any roles to others
⋮----
// current role "moderator" -> cannot assign "admin" role to others
⋮----
// remove old roles
⋮----
// push a new role
⋮----
// update database
⋮----
// return
⋮----
export async function assignRoleByRoleID(roleId: any, user: IUser, options?:
⋮----
export async function assignRoleByUserID(role: IRole, userId: any, options?:
⋮----
export async function assignRoleByID(roleId: any, userId: any, options?:
⋮----
export const makeWorkspaceActive = async (userId: string, workspaceId: string) =>
⋮----
export function filterSensitiveInfo(list: IUser[] = [])
⋮----
export async function filterUsersByWorkspaceRole(workspaceId: string, list: IUser[] = [])
⋮----
// console.log("wsRoles :>> ", wsRoles);
// console.log("list :>> ", list);
⋮----
// console.log("user.workspaces :>> ", user?.workspaces);
// console.log("user.roles :>> ", user?.roles);
⋮----
export function checkProjectPermissionsById(projectId: any, user?: IUser)
⋮----
export function checkProjectPermissions(project: IProject, user?: IUser)
⋮----
export async function checkProjectPermissionsByFilter(svc: ProjectService, filter: IQueryFilter<IProject>, user?: IUser)
⋮----
// check APP access permissions
⋮----
export function checkAppPermissionsById(appId: any, user?: IUser)
⋮----
export function checkAppPermissions(app: IApp, user?: IUser)
⋮----
export async function checkAppPermissionsByFilter(svc: AppService, filter: IQueryFilter<IApp>, user?: IUser)
⋮----
// check APP access permissions
⋮----
export async function checkProjectAndAppPermissions(svc: AppService, filter: IQueryFilter<IApp>, user?: IUser)
⋮----
// check PROJECT access permissions
⋮----
// check APP access permissions
⋮----
export function checkPermissionsById(
	resource: "clusters" | "cloud_databases" | "cloud_database_backups" | "gits" | "frameworks" | "container_registries",
	id: any,
	user?: IUser
)
⋮----
export function checkPermissions(
	resource: "clusters" | "cloud_databases" | "cloud_database_backups" | "gits" | "frameworks" | "container_registries",
	item: IBase,
	user?: IUser
)
⋮----
export async function checkPermissionsByFilter(
	resource: "clusters" | "cloud_databases" | "cloud_database_backups" | "gits" | "frameworks" | "container_registries",
	svc: BaseService,
	filter: IQueryFilter<any>,
	user?: IUser
)
</file>

<file path="src/plugins/utils.ts">
// import { execa } from "execa";
⋮----
import chalk from "chalk";
import { randomUUID } from "crypto";
// import { compareVersions } from "compare-versions";
import dayjs from "dayjs";
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import dns from "dns";
import dotenv from "dotenv";
import { execa, execaCommand } from "execa";
⋮----
import yaml from "js-yaml";
import _, { isArray, isEmpty, isString, toInteger, toNumber } from "lodash";
⋮----
import TerminalRenderer from "marked-terminal";
import path from "path";
import type { SimpleGit, SimpleGitProgressEvent } from "simple-git";
import { simpleGit } from "simple-git";
⋮----
import pkg from "@/../package.json";
import { cliOpts } from "@/config/config";
import type { AccessTokenInfo, IUser, IWorkspace } from "@/entities";
import type { AppConfig } from "@/interfaces/AppConfig";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { InputOptions } from "@/interfaces/InputOptions";
import type { GitProviderType } from "@/interfaces/SystemTypes";
import type { PullOrCloneGitRepoSSHOptions } from "@/modules/git/git-interfaces";
import { getCurrentGitBranch, isValidRepoURL, parseGitRepoDataFromRepoSSH, repoSshToRepoURL, repoUrlToRepoSSH } from "@/modules/git/git-utils";
⋮----
import { DIGITOP_CDN_URL, HOME_DIR } from "../config/const";
import { MongoDB } from "./mongodb";
import { checkMonorepo } from "./monorepo";
import { isNumeric } from "./number";
import { isWin } from "./os";
⋮----
export function nowStr()
⋮----
/**
 * Delay/wait a specific miliseconds
 * @param i - waiting time in miliseconds
 * @param exec - callback function
 */
⋮----
/**
 * Wait until a condition is matched
 * @param condition - Condition
 * @param interval - Re-check interval in seconds @default 10
 * @param maxWaitingTime - Max waiting time in seconds @default 30 minutes (30 * 60 = 1.800 seconds)
 */
export async function waitUntil(condition: Function, interval: number = 10, maxWaitTime: number = 30 * 60 * 1000)
⋮----
async function logBitbucket(title, message, delay)
⋮----
export const readJson = (filePath) =>
⋮----
export type SaveJsonOptions = { overwrite?: boolean; beautify?: boolean };
⋮----
export const saveJson = (data: string | any, filePath: string, options: SaveJsonOptions =
⋮----
export const showDocs = async (filePath: string) =>
⋮----
// const cliMd = await importEsm("cli-markdown", module);
// console.log("cliMd :>> ", cliMd);
⋮----
// log(cliMd(content));
⋮----
/**
 * Create temporary file with provided content
 * @param fileName - File name (include the extension)
 * @param content - Content of the file
 * @returns Path to the file
 */
export const createTmpFile = (
	fileName: string,
	content: string,
	options: { recursive?: boolean; encoding?: BufferEncoding } = { recursive: true, encoding: "utf8" }
) =>
⋮----
/**
 * Convert string-array-like to array
 * @example "1" -> ["1"] | "123,555,abc,def" -> ["123","555","abc","def"]
 */
export const stringToArray = (
	str: string,
	options: {
		/**
		 * Convert items to number if it's valid
		 * @default false
		 * @example "1,a,2" -> [1, "a", 2]
		 */
		typeTransform?: boolean;
		/**
		 * @default ","
		 */
		divider?: string;
	} = { typeTransform: false, divider: "," }
) =>
⋮----
/**
		 * Convert items to number if it's valid
		 * @default false
		 * @example "1,a,2" -> [1, "a", 2]
		 */
⋮----
/**
		 * @default ","
		 */
⋮----
/**
 * Get full name of the environment, such as: `development`, `production` (instead of `dev`, `prod`)
 * @param {String} env
 * @returns {String}
 */
export const getLongEnv = (env) =>
⋮----
/**
 * @param  {String} filePath
 * @param  {[{keyword:(RegExp|String), replacement:String}]} replacement=[]
 * @return {String} - New content
 */
export const replaceInFile = async (filePath, replacement:
⋮----
function toBase64(str)
⋮----
export function logVersion()
⋮----
type ErrorCallback = (e: string) => void;
⋮----
export type CmdOptions = { isDebugging?: boolean; onProgress?: (msg: string) => void };
export const progressCmd = async (command: string, options?: CmdOptions) =>
⋮----
export async function execCmd(cmd: string, errorMsgOrCallback: string | ErrorCallback = "")
⋮----
// console.log(`[execCmd]`, { stdout });
⋮----
// if it's a callback function
⋮----
/**
 * Get current CLI version
 */
export function currentVersion()
⋮----
/**
 * Get latest version of the CLI from NPM
 */
export async function getLatestCliVersion()
⋮----
/**
 * Check if CLI version is latest or not, if not -> return FALSE
 */
export async function shouldNotifyCliUpdate()
⋮----
if (lastestBreaking > curBreaking) return false; // no need to notify when there is a new breaking change version
⋮----
async function logBitbucketError(error: any, delay?: number, location?: string, shouldExit = false)
⋮----
export const parseRepoSlugFromUrl = (url) =>
⋮----
// https://digitop-duynguyen@bitbucket.org/digitopvn/diginext-cli.git
⋮----
export const deleteFolderRecursive = async (dir: string) =>
⋮----
// for (let entry of await afs.readdir(dir)) {
// 	const filePath = path.resolve(dir, entry);
// 	// use "unlink" to delete every single file
// 	if ((await afs.lstat(filePath)).isDirectory()) await deleteFolderRecursive(filePath);
// 	else await afs.unlink(filePath);
// }
// remove the directory itself
⋮----
/**
 * Flatten the object into 1-level-object (with key paths)
 * @example {a: {b: [{c: 1}, {c: 2}]}, e: 3} -> {"a.b[0].c": 1, "a.b[1].c": 2, "e": 3}
 */
export function flattenObjectToPost(object: any =
⋮----
// console.log("_arr :>> ", _arr);
⋮----
// console.log("res :>> ", res);
⋮----
/**
 * Flatten the object into 1-level-object (with key paths)
 * @example {a: {b: [{c: 1}, {c: 2}]}, e: 3} -> {"a.b.0.c": 1, "a.b.1.c": 2, "e": 3}
 */
export function flattenObjectPaths(object: any =
⋮----
// console.log("_arr :>> ", _arr);
⋮----
// console.log("res :>> ", res);
⋮----
type SaveOpts = {
	/**
	 * Absolute path to project directory
	 */
	directory?: string;
	/**
	 * Set to `TRUE` will create new `dx.json` file if not existed.
	 */
	create?: boolean;
	ignoreIfNotExisted?: boolean;
};
⋮----
/**
	 * Absolute path to project directory
	 */
⋮----
/**
	 * Set to `TRUE` will create new `dx.json` file if not existed.
	 */
⋮----
/**
 * Get object of project configuration from "dx.json"
 * @param  {String} [directory] - Absolute path to project directory
 */
export const getAppConfig = (directory?: string) =>
⋮----
/**
 * Save object of project configuration to "dx.json"
 * @param  {Object} appConfig - Object data of the config
 * @param  {SaveOpts} [options] - Save options
 * @param  {String} [options.directory] - Absolute path to project directory @default process.cwd()
 * @param  {Boolean} [options.create] - TRUE will create new file if not existed. @default false
 */
export const saveAppConfig = (appConfig: AppConfig, options: SaveOpts =
⋮----
/**
 * Update values of app config ("dx.json")
 * @param updatedData - updated data
 */
export const updateAppConfig = (updatedData: AppConfig, options: SaveOpts =
⋮----
/**
 * Get object of project configuration from "package.json"
 * @param  {Object} [options] - Options
 * @param  {String} [options.directory] - Absolute path to project directory
 * @param  {Boolean} [options.ignoreIfNotExisted] - TRUE ignore the error if not existed.
 * @return {Object}
 */
export const getPackageConfig = (options: SaveOpts) =>
⋮----
/**
 * Save object of project configuration to "package.json"
 * @param  {Object} _config - Object data of the config
 * @param  {SaveOpts} [options] - Options
 * @param  {String} [options.directory] - Absolute path to project directory
 * @param  {Boolean} [options.create] - TRUE will create new file if not existed.
 * @param  {Boolean} [options.ignoreIfNotExisted] - TRUE ignore the error if not existed.
 */
export const savePackageConfig = (_config, options: SaveOpts) =>
⋮----
/**
 * Process `npm install` or `yarn install` or `pnpm install` on current directory
 */
export const installPackages = async () =>
⋮----
// Install dependencies
⋮----
// console.log(stdout);
⋮----
export const cloneGitRepo = async (repoSSH: string, dir: string, options: PullOrCloneGitRepoSSHOptions =
⋮----
//
⋮----
const onProgress = (
⋮----
//
⋮----
export const pullOrCloneGitRepo = async (repoSSH: string, dir: string, branch: string, options: PullOrCloneGitRepoSSHOptions =
⋮----
// TMP DIRECTORY NOT EXISTS
⋮----
// remove git on finish
⋮----
// TMP DIRECTORY -> EXISTS
⋮----
// try pull
⋮----
// -----------------------
// ! DO NOT SET TO "FALSE"
// -----------------------
⋮----
// remove git on finish
⋮----
// if PULL failed -> delete dir -> try CLONE
⋮----
// just for sure...
⋮----
// for CLI create new app from a framework
⋮----
// remove git on finish
⋮----
/**
 * Get current remote SSH & URL
 */
export const getCurrentGitRepoData = async (dir = process.cwd(), options?:
⋮----
// -----------------------
// ! DO NOT SET TO "FALSE"
// -----------------------
⋮----
export const getGitProviderFromRepoSSH = (repoSSH: string): GitProviderType =>
⋮----
// if (repoSSH.indexOf("gitlab") > -1) return "gitlab";
⋮----
export const isUsingExpressjsFramework = (options) =>
⋮----
// framework name
⋮----
// TODO: check if using express js
⋮----
export const isUsingNodejsFramework = (options) =>
⋮----
// framework name
⋮----
export const isUsingDiginextFramework = async (options) =>
⋮----
// framework name
⋮----
export const isUsingDiginestAPIFramework = async (options) =>
⋮----
// framework name
⋮----
export const isUsingStaticHtmlFramework = async (options) =>
⋮----
/**
 * Get current using framework of the project.
 * @return {("unknown"|"diginest"|"diginext"|"nodejs"|"expressjs"|"static")}
 */
export const getCurrentFramework = (options) =>
⋮----
export const getImageFromYaml = (docs) =>
⋮----
// log("doc", doc);
⋮----
export const getReplicasFromYaml = (docs) =>
⋮----
// log("doc", doc);
⋮----
/**
 * Completely remove the first / of the string
 * @param {String} input
 * @returns {String}
 */
export const trimFirstSlash = (input) =>
⋮----
// trim first slash of BASE_PATH:
⋮----
/**
 * Convert {Object} to environment variables of Kuberketes container
 * @param {Object} object - Input raw object, **not containing any methods**
 */
export const objectToKubeEnvVars = (object: any) =>
⋮----
/**
 * Convert {Object} to .env content
 * @param {Object} object - Input raw object, **not containing any methods**
 * @returns {String}
 */
export const objectToDotenv = (object) =>
⋮----
/**
 * Load ENV file (.env.*) and parse to array of K8S container environment variables
 */
export const loadEnvFileAsContainerEnvVars = (filePath: string) =>
⋮----
/**
 * Grab value of Kube ENV variables by name
 */
export const getValueOfKubeEnvVarsByName = (name: string, envVars: KubeEnvironmentVariable[]) =>
⋮----
/**
 * Convert K8S container's ENV to .env content
 * @param {[{name,value}]} inputEnvs - Input raw object, **not containing any methods**
 * @returns {String}
 */
export const kubeEnvToDotenv = (inputEnvs: KubeEnvironmentVariable[]) =>
⋮----
export const objectToDeploymentYaml = (deploymentCfg) =>
⋮----
export const strToArray = (str, splitter = ",") =>
⋮----
export const getDiginextEnvVars = (env, projectSlug, domains) =>
⋮----
export const objToEnv = (obj =
⋮----
export const sequentialExec = async (array, func) =>
⋮----
interface ResolveApplicationFilePathOptions {
	targetDirectory?: string;
	env?: string;
	ignoreIfNotExisted?: boolean;
	msg?: string;
}
⋮----
/**
 * Resolve a location path of the file within the application.
 */
export const resolveFilePath = (fileNamePrefix: string, options: ResolveApplicationFilePathOptions) =>
⋮----
/**
 * Resolve a location path of the "Dockerfile".
 */
export const resolveDockerfilePath = (options: ResolveApplicationFilePathOptions)
⋮----
/**
 * Resolve a location path of the DOTENV (`.env.*`) file.
 */
export const resolveEnvFilePath = (options: ResolveApplicationFilePathOptions)
⋮----
/**
 * Execute an command within a Docker container
 * @deprecated
 */
export const cliContainerExec = async (command, options) =>
⋮----
// restart the CLI container to update the environment:
// if (!options.pipelineReady) {
// 	await startPipeline([], options);
// 	await wait(2000);
// 	options.pipelineReady = true;
// }
⋮----
async function logHelp(options?: InputOptions)
⋮----
export const getIPFromDomain = async (domain) =>
⋮----
export const getClusterIP = async (options) =>
⋮----
export const getIngress = async (ingName: string, namespace = "default", options =
⋮----
export const getIngressEndpoint = async (ingName: string, namespace = "default", options =
⋮----
export const getIngressIP = async (ingName: string, namespace = "default", index = 0, options =
⋮----
export const getCurrentDeployment = async (deployName: string, namespace = "default", options =
⋮----
export const getCurrentImageName = async (deployName: string, namespace = "default", options =
⋮----
export const getCurrentContainerEnvs = async (deployName: string, namespace = "default", options =
⋮----
export const extractWorkspaceSlugFromUrl = (url: string) =>
⋮----
export const extractWorkspaceIdFromUser = (user: IUser) =>
⋮----
export function getUnexpiredAccessToken(access_token: string)
⋮----
// assign "access_token" info to request:
⋮----
export const generateWorkspaceApiAccessToken = () =>
</file>

<file path="src/routes/api/v1/api_key.ts">
import express from "express";
⋮----
import ApiKeyUserController from "@/controllers/ApiKeyUserController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/app.ts">
import express from "express";
⋮----
import AppController from "@/controllers/AppController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)))
// environment
⋮----
// deploy_environment
⋮----
// volumes
⋮----
// logs
⋮----
// domains
⋮----
// environment variables
</file>

<file path="src/routes/api/v1/basic-auth.ts">
import bcrypt from "bcrypt";
import express from "express";
// eslint-disable-next-line import/no-extraneous-dependencies
import { OAuth2Client } from "google-auth-library";
import { isEmpty } from "lodash";
import { model } from "mongoose";
⋮----
import { Config } from "@/app.config";
import type { IRole, IUser, IWorkspace, ProviderInfo, UserDto } from "@/entities";
import { userSchema } from "@/entities";
import { respondFailure, respondSuccess } from "@/interfaces";
import { extractAccessTokenInfo, generateJWT } from "@/modules/passports";
import { MongoDB } from "@/plugins/mongodb";
import { UserService, WorkspaceService } from "@/services";
⋮----
/**
 * Basic auth - REGISTER: /api/v1/register
 */
⋮----
// const { DB } = await import("@/modules/api/DB");
⋮----
// validation
⋮----
// validation
⋮----
// return res.json(respondFailure(`Workspace ID `));
⋮----
// Hash the password
⋮----
// auto-generated name
⋮----
// Create/update a new user
⋮----
// <-- invited user
⋮----
// await console.log("REGISTER > updateData :>> ", updateData);
⋮----
// TODO: NOT SURE WHY THE FIRST LINE IS NOT WORKING!!! ---> DEBUG LATER
// const updatedUser = await userSvc.updateOne({ _id: existingUser._id }, updateData, { populate: ["workspaces", "roles"] });
⋮----
// console.log("REGISTER > updatedUser :>> ", updatedUser);
⋮----
// console.log("REGISTER > newUser :>> ", newUser);
⋮----
// sign JWT and redirect
⋮----
// if this user only have 1 workspace -> make it active!
⋮----
// active role
⋮----
// sign JWT
⋮----
// update tokens to user info
⋮----
// assign JWT access token to cookie and request headers:
⋮----
// if this user has no workspaces or multiple workspaces -> select one!
⋮----
// sign JWT (without "workspaceId")
⋮----
// update tokens to user info
⋮----
// assign JWT access token to cookie and request headers:
⋮----
/**
 * Basic auth - LOGIN: /api/v1/login
 */
⋮----
// recaptcha.middleware.verify,
⋮----
// validation
⋮----
// account was authenticated by other methods
⋮----
// Compare the provided password with the stored hashed password
⋮----
// sign JWT and redirect
⋮----
// if this user only have 1 workspace -> make it active!
⋮----
// active role
⋮----
// sign JWT
⋮----
// update current user
⋮----
// assign JWT access token to cookie and request headers:
⋮----
// if this user has no workspaces or multiple workspaces -> select one!
⋮----
// assign JWT access token to cookie and request headers:
⋮----
// if this user only have 1 workspace -> make it active!
⋮----
// active role
⋮----
// sign JWT
⋮----
// update tokens to user info
⋮----
// if this user has no workspaces or multiple workspaces -> select one!
⋮----
// update tokens to user info
</file>

<file path="src/routes/api/v1/build.ts">
import express from "express";
⋮----
import BuildController from "@/controllers/BuildController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// TODO: add view build logs
⋮----
.get("/", registerController(controller), processApiRequest(controller.read.bind(controller))) // ! PUBLIC ACCESS
.get("/logs", registerController(controller), processApiRequest(controller.getLogs.bind(controller))) // ! PUBLIC ACCESS
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)))
</file>

<file path="src/routes/api/v1/cluster.ts">
import express from "express";
⋮----
import ClusterController from "@/controllers/ClusterController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest, processApiRequestWithoutMasking } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/cronjob.ts">
import express from "express";
⋮----
import CronjobController from "@/controllers/CronjobController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
</file>

<file path="src/routes/api/v1/database-backup.ts">
import express from "express";
⋮----
import CloudDatabaseBackupController from "@/controllers/CloudDatabaseBackupController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/database.ts">
import express from "express";
⋮----
import CloudDatabaseController from "@/controllers/CloudDatabaseController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/deploy.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import DeployController from "@/controllers/DeployController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
/**
	 * Deploy from a source code (git repository)
	 */
⋮----
/**
	 * Build container image first, then deploy that build to target deploy environment.
	 * - `Alias of "/api/v1/deploy/build-first"`
	 */
⋮----
/**
	 * Build container image first, then deploy that build to target deploy environment.
	 * - `Alias of "/api/v1/deploy/from-source"`
	 */
⋮----
/**
	 * Deploy from a build instance.
	 */
⋮----
/**
	 * Build & deploy from an app.
	 */
⋮----
/**
	 * Build & deploy from a git repo.
	 */
⋮----
/**
	 * Promote an origin deploy environment to target deploy environment.
	 */
⋮----
/**
 * Deploy from an image URL
 */
// .post(
// 	"/from-image",
// 	authenticate,
// 	// authorization,
// 	processApiRequest(controller.deployFromImage.bind(controller))
// );
</file>

<file path="src/routes/api/v1/framework.ts">
import express from "express";
⋮----
import FrameworkController from "@/controllers/FrameworkController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/git.ts">
import express from "express";
⋮----
import GitProviderController from "@/controllers/GitProviderController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// crud
⋮----
// git provider apis
⋮----
// ssh keys
⋮----
// for dev
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/media.ts">
import express from "express";
⋮----
import MediaController from "@/controllers/MediaController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/monitor.ts">
import express from "express";
⋮----
import MonitorController from "@/controllers/MonitorController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// nodes
⋮----
// namespaces
⋮----
// services
⋮----
// ingresses
⋮----
// deployments
⋮----
// statefulsets
⋮----
// pods
⋮----
// secrets
</file>

<file path="src/routes/api/v1/notification.ts">
import express from "express";
⋮----
import NotificationController from "@/controllers/NotificationController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/project.ts">
import express from "express";
⋮----
import ProjectController from "@/controllers/ProjectController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/provider.ts">
import express from "express";
⋮----
import CloudProviderController from "@/controllers/CloudProviderController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/registry.ts">
import express from "express";
⋮----
import ContainerRegistryController from "@/controllers/ContainerRegistryController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/release.ts">
import express from "express";
⋮----
import ReleaseController from "@/controllers/ReleaseController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
/**
 * Roll out release schema
 * @typedef {object} ReleaseRollout
 * @property {string} id.required - The release's unique ID
 */
⋮----
.get("/", registerController(controller), processApiRequest(controller.read.bind(controller))) // ! PUBLIC ACCESS
⋮----
// .patch("/preview", processApiRequest(controller.previewPrerelease.bind(controller)));
// Turn this migration off
// .get("/migrate", authenticate, controller.migrate.bind(controller));
</file>

<file path="src/routes/api/v1/role.ts">
import express from "express";
⋮----
import RoleController from "@/controllers/RoleController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/route.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import RouteController from "@/controllers/RouteController";
import { authenticate } from "@/middlewares/authenticate";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// create new domain
</file>

<file path="src/routes/api/v1/service_account.ts">
import express from "express";
⋮----
import ServiceAccountController from "@/controllers/ServiceAccountController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/stats.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import StatsController from "@/controllers/StatsController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// version
⋮----
// middlewares
⋮----
// statistics
</file>

<file path="src/routes/api/v1/storage.ts">
import express from "express";
⋮----
import CloudStorageController from "@/controllers/CloudStorageController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/team.ts">
import express from "express";
⋮----
import TeamController from "@/controllers/TeamController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/user.ts">
import express from "express";
⋮----
import UserController from "@/controllers/UserController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)))
</file>

<file path="src/routes/api/v1/utility.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import UtilityController from "@/controllers/UtilityController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// export pdf, capture screenshot,...
</file>

<file path="src/routes/api/v1/webhook.ts">
import express from "express";
⋮----
import WebhookController from "@/controllers/WebhookController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)));
</file>

<file path="src/routes/api/v1/workspace.ts">
import express from "express";
⋮----
import WorkspaceController from "@/controllers/WorkspaceController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
.use(authorize) // <-- do authorize the following routes:
⋮----
// .delete("/empty", processApiRequest(controller.empty.bind(controller)))
</file>

<file path="src/routes/api/index.ts">
import { isJSON } from "class-validator";
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import { Response } from "diginext-utils/dist/response";
import { logWarn } from "diginext-utils/dist/xconsole/log";
import express from "express";
⋮----
import pkg from "@/../package.json";
import { Config } from "@/app.config";
import { sendLog } from "@/modules/build";
import { testBuild } from "@/modules/build/build";
import { execCmd } from "@/plugins";
// import userRouter from "./user";
⋮----
// initialize socket io server:
// let io;
// export const getIO = () => io;
⋮----
// if (server) {
// 	io = new Server(server);
// 	global.socketServer = io;
// }
⋮----
/**
 * Default route - HOME
 */
⋮----
/**
 * Health check route
 */
⋮----
/**
 * Register API routes
 */
⋮----
// log(io);
// io.to("2021-08-18-18-33-20").emit("message", { action: "start", message: "Hello" });
</file>

<file path="src/routes/auth/google/index.ts">
import type { NextFunction, Request, Response } from "express";
import express from "express";
import { endsWith } from "lodash";
import passport from "passport";
⋮----
import { Config } from "@/app.config";
import { generateJWT } from "@/modules/passports/jwtStrategy";
import { MongoDB } from "@/plugins/mongodb";
⋮----
// http://localhost:6969/auth/google?redirect_url=http://localhost:6969/auth/profile
⋮----
export const signAndRedirect = async (res: Response, data:
⋮----
// console.log("[2] signAndRedirect > data :>> ", data);
⋮----
// console.log("[2] signAndRedirect > access_token :>>", access_token);
⋮----
// assign JWT access token to cookie and request headers:
⋮----
// console.log("[2] signAndRedirect > redirectUrl :>> ", redirectUrl);
// logged in successfully -> redirect to workspace:
⋮----
// const params = new URLSearchParams(url.search);
// params.set("access_token", access_token);
⋮----
// callback function
⋮----
// sign JWT, save tokens to cookies
</file>

<file path="src/routes/auth/logout.ts">
import type { NextFunction, Response } from "express";
import express from "express";
⋮----
import { respondFailure, respondSuccess } from "@/interfaces";
import type { AppRequest } from "@/interfaces/SystemTypes";
import { authenticate } from "@/middlewares/authenticate";
⋮----
// Auth with session
// import { authenticate } from "@/middlewares/authenticate";
</file>

<file path="src/routes/auth/profile.ts">
import { Response as ApiResponse } from "diginext-utils/dist/response";
import type { NextFunction, Response } from "express";
import express from "express";
⋮----
import type { AppRequest } from "@/interfaces/SystemTypes";
import { authenticate } from "@/middlewares/authenticate";
⋮----
// Auth with session
// import { authenticate } from "@/middlewares/authenticate";
</file>

<file path="src/routes/auth/refresh.ts">
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { Response as ApiResponse } from "diginext-utils/dist/response";
import type { NextFunction, Response } from "express";
import express from "express";
import { isEmpty } from "lodash";
⋮----
import { respondFailure } from "@/interfaces";
import type { AppRequest } from "@/interfaces/SystemTypes";
// Auth with JWT
import jwt_auth from "@/middlewares/auth-jwt";
import { extractAccessTokenInfo } from "@/modules/passports/jwtStrategy";
import { MongoDB } from "@/plugins/mongodb";
⋮----
// Auth with session
// import { authenticate } from "@/middlewares/authenticate";
⋮----
// 1. Extract token info
⋮----
// 2. Assign token to user
⋮----
// 3. Assign token to response headers
</file>

<file path="src/routes/routes.ts">
import dayjs from "dayjs";
import timezone from "dayjs/plugin/timezone";
import express from "express";
⋮----
import { Config } from "../app.config";
⋮----
import apiV1 from "@/routes/api/v1";
⋮----
import googleAuth from "./auth/google";
import authLogout from "./auth/logout";
import authProfileApi from "./auth/profile";
import refreshTokenApi from "./auth/refresh";
⋮----
/**
 * Register routes
 */
</file>

<file path="src/seeds/index.ts">
import type { IUser, IWorkspace } from "@/entities";
⋮----
import { seedApiKeys } from "./seed-api-key";
import { seedFrameworks } from "./seed-frameworks";
import { seedDefaultProjects } from "./seed-projects";
import { seedDefaultRoles } from "./seed-roles";
import { seedServiceAccounts } from "./seed-service-account";
⋮----
// seed workspace initial data here...
const seedWorkspaceInitialData = async (workspace: IWorkspace, owner: IUser) =>
⋮----
// [1] Default roles & permisions first, because Service Account & API_KEY need role
⋮----
// [2] Create default API access token for this workspace
// [3] Create default service account for this workspace
// [4] Create default frameworks for this workspace
// [5] Create default project for this workspace
⋮----
// seedClusters(workspace, owner),
</file>

<file path="src/seeds/seed-all-routes.ts">
import listEndpoints from "express-list-endpoints";
import { isEmpty, upperFirst } from "lodash";
⋮----
import type { IRoute, RouteDto } from "@/entities/Route";
import type { RequestMethodType } from "@/interfaces/SystemTypes";
import { app } from "@/server";
⋮----
export const seedSystemRoutes = async () =>
⋮----
// get routes from the database
⋮----
// console.log("dbRoutes >>", dbRoutes.length);
⋮----
// get all routes of Express
⋮----
// console.log("expressRoutes >>", expressRoutes);
⋮----
// if (expressRoutes.length > 0) return;
⋮----
// compare database's routes with all routes of Express
⋮----
// console.log("missingRoutes >>", missingRoutes);
⋮----
// log(`[MIGRATION] migrateAllRoutes > Found ${missingRoutes.length} missing routes.`);
⋮----
// const results = (await Promise.all(missingRoutes.map(async (route) => DB.create("route", route)))).filter(
// 	(item) => typeof item !== "undefined"
// );
⋮----
// log(`[MIGRATION] migrateAllRoutes > FINISH MIGRATION >> Created ${results.length} missing routes.`);
⋮----
// compare methods of database routes with methods of Express routes
dbRoutes = await DB.find("route", {}); // <-- fetch database routes again to get latest ones
⋮----
// log(`[MIGRATION] migrateAllRoutes > Update "${_route.path}" route's methods from [${routeMethods}] to [${expRouteMethods}]`);
⋮----
// log(`[MIGRATION] migrateAllRoutes > Found ${updateRoutes.length} routes that need to update methods.`);
⋮----
// log(`[MIGRATION] migrateAllRoutes > Update methods of ${results.length} routes.`);
</file>

<file path="src/seeds/seed-api-key.ts">
// import { Role } from "@/entities";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IUser, IWorkspace } from "@/entities";
import type { IApiKeyAccount } from "@/entities/ApiKeyAccount";
import { generateWorkspaceApiAccessToken, getUnexpiredAccessToken } from "@/plugins";
⋮----
export const seedApiKeys = async (workspace: IWorkspace, owner: IUser) =>
⋮----
// seed default API ACCESS TOKEN:
</file>

<file path="src/seeds/seed-clusters.ts">
import yaml from "js-yaml";
⋮----
import { Config } from "@/app.config";
import type { ICluster, IUser, IWorkspace } from "@/entities";
import type { KubeConfig } from "@/interfaces";
import ClusterManager from "@/modules/k8s";
⋮----
export const addInitialBareMetalCluster = async (kubeConfig: string, workspace?: IWorkspace, owner?: IUser) =>
⋮----
// validate YAML
⋮----
// extract cluster server URL & IP address
⋮----
// skip if it's existed
⋮----
// console.log("kubeConfigObject :>> ", kubeConfigObject);
// console.log("clusterIP :>> ", clusterIP);
⋮----
// get custom provider
⋮----
// console.log("customCloudProvider :>> ", customCloudProvider);
⋮----
// insert new cluster
⋮----
// console.log("initialCluster.slug :>> ", initialCluster.slug);
⋮----
// verfify cluster
⋮----
// done
⋮----
export const seedClusters = async (workspace: IWorkspace, owner: IUser) =>
</file>

<file path="src/seeds/seed-frameworks.ts">
import type { FrameworkDto, IUser, IWorkspace } from "@/entities";
⋮----
// isPrivate: false,
⋮----
// isPrivate: false,
⋮----
export const seedFrameworks = async (workspace: IWorkspace, owner: IUser) =>
</file>

<file path="src/seeds/seed-projects.ts">
import type { IUser, IWorkspace, ProjectDto } from "@/entities";
⋮----
export const seedDefaultProjects = async (workspace: IWorkspace, owner: IUser) =>
</file>

<file path="src/seeds/seed-roles.ts">
import { Config } from "@/app.config";
import type { IRole, IUser, IWorkspace } from "@/entities";
import { credentialFields, guestRoleRoutes, memberRoleRoutes, moderatorRoleRoutes } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
⋮----
// seed default roles of a workspace
export const seedDefaultRoles = async (workspace: IWorkspace, owner: IUser) =>
⋮----
// console.log("Seeding default roles...");
⋮----
// ADMIN
⋮----
// assign admin role to the "owner" user
⋮----
// update role ids
⋮----
// MEMBER
⋮----
// Update maskFields if it's not correct
⋮----
// compare routes & permissions, if it doesn't match -> update!
⋮----
// console.log("defaultMemberRoleRoutes :>> ", defaultMemberRoleRoutes);
// console.log("dbMemberRoleRoutes :>> ", dbMemberRoleRoutes);
⋮----
// MODERATOR
⋮----
// Update maskedFields if it is incorrect
⋮----
// compare routes & permissions, if it doesn't match -> update!
⋮----
// GUEST
⋮----
// Update maskedFields if it is incorrect
⋮----
// compare name, if it doesn't match -> update!
⋮----
// compare routes & permissions, if it doesn't match -> update!
</file>

<file path="src/seeds/seed-service-account.ts">
// import { Role } from "@/entities";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IUser, IWorkspace } from "@/entities";
import type { IServiceAccount } from "@/entities/ServiceAccount";
import { generateWorkspaceApiAccessToken, getUnexpiredAccessToken } from "@/plugins";
⋮----
export const seedServiceAccounts = async (workspace: IWorkspace, owner: IUser) =>
⋮----
// seed default service account:
</file>

<file path="src/seeds/seed-system.ts">
import type { ICloudProvider } from "@/entities";
import { seedSystemRoutes } from "@/seeds/seed-all-routes";
⋮----
export const seedDefaultCloudProviders = async () =>
⋮----
export const seedSystemInitialData = async () =>
⋮----
// cloud providers
⋮----
// system routes
</file>

<file path="src/services/ActivityService.ts">
import type { IActivity } from "@/entities/Activity";
import { activitySchema } from "@/entities/Activity";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export default class ActivityService extends BaseService<IActivity>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/ApiKeyUserService.ts">
import type { ApiKeyAccountDto, IApiKeyAccount } from "@/entities/ApiKeyAccount";
import { apiKeyAccountSchema } from "@/entities/ApiKeyAccount";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class ApiKeyUserService extends BaseService<IApiKeyAccount>
⋮----
constructor(ownership?: Ownership)
⋮----
async find(filter?: IQueryFilter, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination)
⋮----
async create(data: ApiKeyAccountDto)
⋮----
async update(filter: IQueryFilter, data: Partial<IApiKeyAccount>, options?: IQueryOptions)
</file>

<file path="src/services/BuildService.ts">
import path from "path";
⋮----
import { Config } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import type { IBuild } from "@/entities/Build";
import { buildSchema } from "@/entities/Build";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { BuildStatus, DeployStatus, Ownership } from "@/interfaces/SystemTypes";
import type { RerunBuildParams, StartBuildParams } from "@/modules/build";
import { generateBuildTagBySourceDir } from "@/modules/build/generate-build-tag";
import { checkQuota } from "@/modules/workspace/check-quota";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { AppService } from "./AppService";
import BaseService from "./BaseService";
import { ContainerRegistryService } from "./ContainerRegistryService";
import { WorkspaceService } from "./WorkspaceService";
⋮----
export class BuildService extends BaseService<IBuild>
⋮----
constructor(ownership?: Ownership)
⋮----
async find(filter?: IQueryFilter<IBuild>, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination): Promise<IBuild[]>
⋮----
// options.isDebugging = true;
⋮----
async findOne(filter?: IQueryFilter<IBuild>, options?: IQueryOptions): Promise<IBuild>
⋮----
async startBuild(data: StartBuildParams, ownership: Ownership)
⋮----
// validates
⋮----
// get workspace & check quotas
⋮----
// check dx quota
⋮----
// default values
⋮----
// app build directory
⋮----
// start the build
⋮----
async stopBuild(slug: string, buildStatus: BuildStatus, deployStatus: DeployStatus = "pending")
⋮----
// const { slug } = data;
// console.log("slug :>> ", slug);
// return ApiResponse.failed(res, `${slug}`);
⋮----
async rerunBuild(build: IBuild, options: RerunBuildParams, ownership?: Ownership)
⋮----
// validate
⋮----
// find registry
⋮----
// build params
</file>

<file path="src/services/CloudDatabaseBackupService.ts">
import { existsSync } from "fs";
import { rm } from "fs/promises";
⋮----
import { Config } from "@/app.config";
import type { CloudDatabaseBackupDto, ICloudDatabaseBackup } from "@/entities/CloudDatabaseBackup";
import { cloudDatabaseBackupSchema } from "@/entities/CloudDatabaseBackup";
import type { IQueryFilter, IQueryOptions } from "@/interfaces";
import type { BackupStatus, Ownership } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import BaseService from "./BaseService";
import { SystemLogService } from "./SystemLogService";
import { WorkspaceService } from "./WorkspaceService";
⋮----
export class CloudDatabaseBackupService extends BaseService<ICloudDatabaseBackup>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: CloudDatabaseBackupDto &
⋮----
// check expired backups and deleted expired ones
⋮----
async updateStatus(id: any, data:
⋮----
async delete(filter?: IQueryFilter<ICloudDatabaseBackup>, options?: IQueryOptions): Promise<
⋮----
async softDelete(filter?: IQueryFilter<ICloudDatabaseBackup>, options?: IQueryOptions): Promise<
⋮----
async deleteExpiredBackups(workspaceId: string)
⋮----
// Mark as deleted based on duration
⋮----
// Count backups that would be marked as deleted
⋮----
// Now, perform the update if there are any backups to be marked as deleted
⋮----
// Mark as deleted based on item count
⋮----
// We need to delete the oldest items, so we sort by 'createdAt'
</file>

<file path="src/services/CloudDatabaseService.ts">
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logError } from "diginext-utils/dist/xconsole/log";
import { existsSync } from "fs";
import { toString } from "lodash";
import path from "path";
⋮----
import { Config } from "@/app.config";
import type { CloudDatabaseDto, ICloudDatabase } from "@/entities/CloudDatabase";
import { cloudDatabaseSchema } from "@/entities/CloudDatabase";
import type { ICloudDatabaseBackup } from "@/entities/CloudDatabaseBackup";
import type { CronjobRepeat, CronjobRequest, CronjonRepeatCondition } from "@/entities/Cronjob";
import { cronjobRepeatUnitList } from "@/entities/Cronjob";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import { respondFailure } from "@/interfaces";
import type { CloudDatabaseType, Ownership } from "@/interfaces/SystemTypes";
import { cloudDatabaseList } from "@/interfaces/SystemTypes";
import { createCronjobRepeat } from "@/modules/cronjob/schedule";
import MySQL from "@/modules/db/mysql";
import PostgreSQL from "@/modules/db/pg";
import { MongoDB } from "@/plugins/mongodb";
import { checkPermissionsByFilter } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
import { CloudDatabaseBackupService } from "./CloudDatabaseBackupService";
⋮----
export type DatabaseConnectionInfo = {
	type: CloudDatabaseType;
	host: string;
	port?: string;
	/**
	 * @default root
	 */
	user?: string;
	pass: string;
};
⋮----
/**
	 * @default root
	 */
⋮----
export type DatabaseBackupParams = DatabaseConnectionInfo & {
	/**
	 * @default all-databases
	 */
	dbName?: string;
	/**
	 * For MongoDB only
	 * @default admin
	 */
	authDb?: string;
	/**
	 * Output directory
	 */
	outDir?: string;
};
⋮----
/**
	 * @default all-databases
	 */
⋮----
/**
	 * For MongoDB only
	 * @default admin
	 */
⋮----
/**
	 * Output directory
	 */
⋮----
export type DatabaseRestoreParams = {
	/**
	 * @default all-databases
	 */
	dbName?: string;
	/**
	 * For MongoDB only
	 * @default admin
	 */
	authDb?: string;
	/**
	 * Backup path
	 */
	path?: string;
};
⋮----
/**
	 * @default all-databases
	 */
⋮----
/**
	 * For MongoDB only
	 * @default admin
	 */
⋮----
/**
	 * Backup path
	 */
⋮----
export class CloudDatabaseService extends BaseService<ICloudDatabase>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: CloudDatabaseDto)
⋮----
// validate
⋮----
// console.log("data :>> ", data);
// test connection
⋮----
// insert
⋮----
async find(
		filter?: IQueryFilter<ICloudDatabase>,
		options?: IQueryOptions & IQueryPagination,
		pagination?: IQueryPagination
): Promise<ICloudDatabase[]>
⋮----
// check access permissions
⋮----
async update(filter: IQueryFilter<ICloudDatabase>, data: any, options?: IQueryOptions): Promise<ICloudDatabase[]>
⋮----
// check permissions
⋮----
async updateOne(filter: IQueryFilter<ICloudDatabase>, data: any, options?: IQueryOptions): Promise<ICloudDatabase>
⋮----
// check permissions
⋮----
async delete(filter?: IQueryFilter<ICloudDatabase>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
async softDelete(filter?: IQueryFilter<ICloudDatabase>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
// healthz
async checkHealthById(id: string)
⋮----
async checkHealth(db: ICloudDatabase)
⋮----
// validate
⋮----
// test connection
⋮----
async backupById(id: string)
⋮----
async backup(db: ICloudDatabase, options?:
⋮----
// validate
⋮----
// backup
⋮----
// check if this process has been done by other pods, if yes, ignore this.
⋮----
// create backup in db
⋮----
// ownerships
⋮----
async restoreFromBackupId(backupId: string, dbId: string)
⋮----
async restoreFromBackup(backup: ICloudDatabaseBackup, db: ICloudDatabase)
⋮----
// download the backup url to server...
⋮----
async restoreById(options: DatabaseRestoreParams, id: string)
⋮----
async restore(options: DatabaseRestoreParams, toDatabase: ICloudDatabase)
⋮----
// validate destination
⋮----
// validate backup
⋮----
// backup
⋮----
async scheduleAutoBackup(
		id: string,
		repeat: CronjobRepeat,
		condition?: CronjonRepeatCondition,
		ownership?: { owner: string; workspace: string }
)
⋮----
// validate
⋮----
// create new cronjob
⋮----
// update cronjob ID to database:
</file>

<file path="src/services/CloudProviderService.ts">
import type { ICloudProvider } from "@/entities/CloudProvider";
import { cloudProviderSchema } from "@/entities/CloudProvider";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class CloudProviderService extends BaseService<ICloudProvider>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/CloudStorageService.ts">
import { isObject } from "lodash";
⋮----
import type { ICloudStorage } from "@/entities/CloudStorage";
import { cloudStorageSchema } from "@/entities/CloudStorage";
import type { IQueryFilter, IQueryOptions } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import { getStorageBucketOrigin } from "@/modules/storages/storage-helper";
import type { StorageUploadOptions } from "@/modules/storages/storage-types";
⋮----
import BaseService from "./BaseService";
⋮----
export class CloudStorageService extends BaseService<ICloudStorage>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: any, options?: IQueryOptions): Promise<ICloudStorage>
⋮----
// validate
⋮----
// generate origin
⋮----
// verify
⋮----
// save to db
⋮----
async update(filter: IQueryFilter<ICloudStorage>, data: any, options?: IQueryOptions): Promise<ICloudStorage[]>
⋮----
// only re-verify if authentication data changed
⋮----
async verify(item: ICloudStorage)
⋮----
// validate
⋮----
// processing
⋮----
// update db
// const _item = await this.updateOne({ _id: item._id }, { verified: true });
// result: updated item
⋮----
// error
⋮----
async uploadFileFromUrl(storage: ICloudStorage, url: string, destFileName: string, options?: StorageUploadOptions)
⋮----
async uploadFileFromBuffer(storage: ICloudStorage, buffer: Buffer, destFileName: string, options?: StorageUploadOptions)
⋮----
async uploadFileFromFilePath(storage: ICloudStorage, filePath: string, destFileName: string, options?: StorageUploadOptions)
</file>

<file path="src/services/ClusterService.ts">
import type { ICloudProvider } from "@/entities";
import type { ICluster } from "@/entities/Cluster";
import { clusterSchema } from "@/entities/Cluster";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import type { ClusterAuthOptions } from "@/modules/k8s/cluster-auth";
import { createImagePullSecrets } from "@/modules/k8s/image-pull-secret";
import { deleteClusterInKubeConfig } from "@/modules/k8s/kube-config";
import type { InstallStackOptions } from "@/modules/k8s/stack-install";
import type { ContainerRegistrySecretOptions } from "@/modules/registry/ContainerRegistrySecretOptions";
import { checkPermissions, checkPermissionsByFilter, checkPermissionsById } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
⋮----
export class ClusterService extends BaseService<ICluster>
⋮----
constructor(ownership?: Ownership)
⋮----
find(filter?: IQueryFilter<ICluster>, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination): Promise<ICluster[]>
⋮----
// include all public clusters
// if (!filter.workspace) {
⋮----
// includePublicFilter.$or.push({ ...filter, workspace: { $exists: false } }, { ...filter, workspace: null });
// }
⋮----
// check access permissions
⋮----
// if none of the above conditions -> filter normally
⋮----
// console.log("includePublicFilter :>> ", includePublicFilter);
⋮----
findAll(filter?: IQueryFilter<ICluster>, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination): Promise<ICluster[]>
⋮----
// include all public clusters
// if (!filter.workspace) {
⋮----
// }
⋮----
// check access permissions
⋮----
// if none of the above conditions -> filter normally
⋮----
// console.log("includePublicFilter :>> ", includePublicFilter);
⋮----
async findOne(filter?: IQueryFilter<ICluster>, options?: IQueryOptions): Promise<ICluster>
⋮----
async update(filter: IQueryFilter<ICluster>, data: any, options?: IQueryOptions): Promise<ICluster[]>
⋮----
// check permissions
⋮----
async updateOne(filter: IQueryFilter<ICluster>, data: any, options?: IQueryOptions): Promise<ICluster>
⋮----
// check permissions
⋮----
// get cloud provider of this cluster
⋮----
// validation - check cluster accessibility
⋮----
// update to database
⋮----
async delete(filter?: IQueryFilter<ICluster>, options?: IQueryOptions): Promise<
⋮----
// try to delete "context" in "~/.kube/config"
⋮----
// check permissions
⋮----
// verify accessibility...
async authCluster(cluster: ICluster, options?: ClusterAuthOptions)
⋮----
/**
	 * Check if required stacks are installed within the cluster
	 * @param cluster
	 */
async checkStackInstalled(cluster: ICluster, options?: InstallStackOptions)
⋮----
/**
		 * Check for required stack installations, if not -> install them:
		 */
⋮----
// [1] NGINX Ingress
⋮----
// [2] Cert Manager
⋮----
/**
	 * Create "imagePullSecret" in a namespace of a cluster
	 */
async createImagePullSecret(filter: IQueryFilter<any>, data: ContainerRegistrySecretOptions, options?:
⋮----
// find cluster
⋮----
// check permissions
</file>

<file path="src/services/ContainerRegistryService.ts">
import type { IContainerRegistry } from "@/entities/ContainerRegistry";
import { containerRegistrySchema } from "@/entities/ContainerRegistry";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class ContainerRegistryService extends BaseService<IContainerRegistry>
⋮----
constructor(ownership?: Ownership)
⋮----
findAll(
		filter?: IQueryFilter<IContainerRegistry>,
		options?: IQueryOptions & IQueryPagination,
		pagination?: IQueryPagination
): Promise<IContainerRegistry[]>
⋮----
// include all public clusters
// if (!filter.workspace) {
⋮----
// }
⋮----
// check access permissions
⋮----
// if none of the above conditions -> filter normally
⋮----
// console.log("includePublicFilter :>> ", includePublicFilter);
</file>

<file path="src/services/CronjobService.ts">
import dayjs from "dayjs";
⋮----
import type { CronjobDto, ICronjob } from "@/entities/Cronjob";
import { cronjobRepeatUnitList, cronjobSchema, weekDays } from "@/entities/Cronjob";
import type { IQueryOptions } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { calculateNextRunAt } from "@/modules/cronjob/calculate-next-run-at";
import { filterUniqueItems, sortedDaysOfWeek } from "@/plugins/array";
⋮----
import BaseService from "./BaseService";
⋮----
class CronjobService extends BaseService<ICronjob>
⋮----
constructor(ownership?: Ownership)
⋮----
create(data: CronjobDto, options?: IQueryOptions): Promise<ICronjob>
⋮----
// validate
⋮----
/**
		 * Examples:
		 * ✓ Every month (monthly), at [weekdays: "mon", "tue", "fri"] ?
		 * ✓ Every day (daily), at [weekdays: "mon", "tue", "fri"] ?
		 * ✓ Every 5 minutes, at [hours: 13,14,18] ?
		 * ✓ Every 2 hours, at [minutes: 5,10] and [weekdays: mon,wed,thu,sat] ?
		 */
// if (data.repeat.unit === "minute") data.repeatCondition.atMins = undefined;
// if (data.repeat.unit === "hour") data.repeatCondition.atHours = undefined;
// if (data.repeat.unit === "day") data.repeatCondition.atDays = undefined;
// if (data.repeat.unit === "month") data.repeatCondition.atMonths = undefined;
⋮----
// validate repeat conditions
// repeat conditions should be unique arrays
⋮----
// validate
⋮----
.sort((a, b) => a - b); // <-- SORT
⋮----
// validate
⋮----
.sort((a, b) => a - b); // <-- SORT
⋮----
// validate
⋮----
.sort((a, b) => a - b); // <-- SORT
⋮----
// validate
⋮----
.sort((a, b) => a - b); // <-- SORT
⋮----
// validate
⋮----
// validate end date
⋮----
// calculate next run schedule:
⋮----
// return
</file>

<file path="src/services/DeployService.ts">
import { Config } from "@/app.config";
import type { DeployBuildParams } from "@/controllers/DeployController";
import type { IBuild, IRelease, IUser, IWorkspace } from "@/entities";
import type { Ownership } from "@/interfaces/SystemTypes";
import type { StartBuildParams } from "@/modules/build";
import { buildAndDeploy } from "@/modules/build/build-and-deploy";
import { createBuildSlug } from "@/modules/deploy/create-build-slug";
import type { DeployBuildOptions } from "@/modules/deploy/deploy-build";
import { deployBuild } from "@/modules/deploy/deploy-build";
import type { DeployBuildV2Options } from "@/modules/deploy/deploy-build-v2";
import { deployBuildV2 } from "@/modules/deploy/deploy-build-v2";
import { deployRelease } from "@/modules/deploy/deploy-release";
import type { PromoteDeployEnvironmentOptions } from "@/modules/deploy/promote-deploy-environment";
import { promoteDeployEnvironment } from "@/modules/deploy/promote-deploy-environment";
import { currentVersion } from "@/plugins";
⋮----
export default class DeployService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
/**
	 * Build container image first, then deploy that build to target deploy environment.
	 */
async buildAndDeploy(buildParams: StartBuildParams, deployParams: DeployBuildParams, ownership: Ownership)
⋮----
// but why???
⋮----
// change cluster (if needed)
⋮----
// change container registry (if needed)
⋮----
// ownership
⋮----
// check for version compatibility between CLI & SERVER:
⋮----
// if (typeof buildParams.buildWatch === "undefined") buildParams.buildWatch = true;
⋮----
// start build in background process:
// log(`buildAndDeploy > buildParams.buildTag :>>`, buildParams.buildTag);
⋮----
/**
	 * Deploy from a build (V2 - Deprecated soon)
	 * @deprecated
	 */
async deployBuild(build: IBuild, options: DeployBuildOptions)
⋮----
/**
	 * Deploy from a build (V2)
	 */
async deployBuildV2(build: IBuild, options: DeployBuildV2Options)
⋮----
/**
	 * Deploy from a release (V2)
	 */
async deployRelease(release: IRelease, options: DeployBuildV2Options)
⋮----
/**
	 * Promote a deploy environment to another deploy environment (default: "production").
	 */
async promoteDeployEnvironment(options: PromoteDeployEnvironmentOptions)
</file>

<file path="src/services/FrameworkService.ts">
import type { FrameworkDto, IFramework } from "@/entities/Framework";
import { frameworkSchema } from "@/entities/Framework";
import type { IQueryFilter, IQueryOptions } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { fetchTrendingRepos } from "@/modules/frameworks/github-trends";
import { checkPermissionsByFilter } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
⋮----
export class FrameworkService extends BaseService<IFramework>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: FrameworkDto, options?: IQueryOptions)
⋮----
// validate
⋮----
// create
⋮----
async update(filter: IQueryFilter<IFramework>, data: any, options?: IQueryOptions): Promise<IFramework[]>
⋮----
// check permissions
⋮----
async updateOne(filter: IQueryFilter<IFramework>, data: any, options?: IQueryOptions): Promise<IFramework>
⋮----
// check permissions
⋮----
async delete(filter?: IQueryFilter<IFramework>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
async softDelete(filter?: IQueryFilter<IFramework>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
async getGithubTrends()
</file>

<file path="src/services/GitProviderService.ts">
import axios from "axios";
import { randomStringByLength } from "diginext-utils/dist/string/random";
import { upperCase } from "lodash";
⋮----
import type { IRole } from "@/entities";
import type { IGitProvider } from "@/entities/GitProvider";
import { gitProviderSchema } from "@/entities/GitProvider";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import { type Ownership, gitProviderDomain } from "@/interfaces/SystemTypes";
import GitProviderAPI from "@/modules/git/git-provider-api";
import { makeSlug } from "@/plugins/slug";
import { checkPermissionsByFilter } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
⋮----
export class GitProviderService extends BaseService<IGitProvider>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: any, options?: IQueryOptions): Promise<IGitProvider>
⋮----
// validation
⋮----
// if (!name) throw new Error(`Git provider name is required.`);
⋮----
// check app passwords
⋮----
// check OAuth consumer
⋮----
// generate access_token & refresh_token
⋮----
// if (!name) throw new Error(`Git provider name is required.`);
// check personal access token
⋮----
// check OAuth app (client_id & client_secret)
⋮----
// access_token will be processed via client browser and automatically saved after that
⋮----
// auto generated fields
⋮----
// Fallback support "gitWorkspace" === "org" -> will be removed soon
⋮----
// generate repo info
⋮----
// grab data to create:
⋮----
// mark as organization git provider or not
⋮----
// verify connection
⋮----
// save
⋮----
async find(
		filter?: IQueryFilter<IGitProvider>,
		options?: IQueryOptions & IQueryPagination,
		pagination?: IQueryPagination
): Promise<IGitProvider[]>
⋮----
// check access permissions
⋮----
async findOne(filter?: IQueryFilter<IGitProvider>, options?: IQueryOptions): Promise<IGitProvider>
⋮----
async update(filter: IQueryFilter<IGitProvider>, data: any, options?: IQueryOptions): Promise<IGitProvider[]>
⋮----
// check permissions
⋮----
// regenerate slug
⋮----
async function generateUniqueSlug(input, attempt = 1)
⋮----
// check unique again
⋮----
// verify connection
⋮----
// update to db
⋮----
async updateOne(filter: IQueryFilter<IGitProvider>, data: any, options?: IQueryOptions): Promise<IGitProvider>
⋮----
// check permissions
⋮----
async delete(filter?: IQueryFilter<IGitProvider>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
async softDelete(filter?: IQueryFilter<IGitProvider>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
async verify(provider: IGitProvider, options?:
⋮----
// process
// console.log("GitProviderService > provider :>> ", provider);
⋮----
async listGitRepository(provider: IGitProvider, options?: IQueryOptions)
⋮----
async deleteGitRepository(provider: IGitProvider, slug: string, options?: IQueryOptions)
</file>

<file path="src/services/MediaService.ts">
import type { IMedia } from "@/entities/Media";
import { mediaSchema } from "@/entities/Media";
import type { Ownership } from "@/interfaces/SystemTypes";
import { uploadFileBuffer } from "@/plugins/cloud-storage";
⋮----
import BaseService from "./BaseService";
⋮----
export default class MediaService extends BaseService<IMedia>
⋮----
constructor(ownership?: Ownership)
⋮----
async uploadToCloudStorage(file: Buffer, fileName: string)
</file>

<file path="src/services/MonitorDeploymentService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubeDeployment } from "@/interfaces";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorDeploymentService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/MonitorIngressService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubeIngress } from "@/interfaces";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorIngressService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
// TODO: compact or full
// if (options?.full)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/MonitorNamespaceService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { IQueryFilter, IQueryOptions, KubeNamespace } from "@/interfaces";
import type {
	MonitoringCreateOptions,
	MonitoringNamespaceQueryFilter,
	MonitoringQueryFilter,
	MonitoringQueryOptions,
} from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export type MonitorNamespaceCreateData = {
	/**
	 * Namespace's name
	 */
	name: string;
	/**
	 * Cluster's ID or SLUG
	 */
	cluster?: string;
	/**
	 * Filter by labels
	 */
	labels?: Record<string, string>;
};
⋮----
/**
	 * Namespace's name
	 */
⋮----
/**
	 * Cluster's ID or SLUG
	 */
⋮----
/**
	 * Filter by labels
	 */
⋮----
export class MonitorNamespaceService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: MonitorNamespaceCreateData, options?: MonitoringCreateOptions)
⋮----
// check name existed
⋮----
// namespace.workspace = MongoDB.toString(this.workspace._id);
// namespace.clusterSlug = clusterSlug;
// namespace.cluster = MongoDB.toString(cluster._id);
⋮----
async find(filter: MonitoringNamespaceQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringNamespaceQueryFilter, options?: MonitoringQueryOptions)
⋮----
async update(filter: IQueryFilter<any>, data: any, options?: IQueryOptions): Promise<KubeNamespace[]>
⋮----
// check permissions
// await checkPermissionsByFilter("frameworks", this, filter, this.user);
// return super.update(filter, data, options);
⋮----
async allResources(filter: MonitoringNamespaceQueryFilter, options?: MonitoringQueryOptions)
⋮----
// pvc
⋮----
// get ingresses
⋮----
// get services
⋮----
// get deployments
⋮----
// get statefulsets
⋮----
// get pods
⋮----
// get persistent volume claims
⋮----
// get secrets
⋮----
async delete(params: MonitoringNamespaceQueryFilter)
⋮----
// check name existed
⋮----
// namespace.workspace = MongoDB.toString(this.workspace._id);
// namespace.clusterSlug = clusterSlug;
// namespace.cluster = MongoDB.toString(cluster._id);
</file>

<file path="src/services/MonitorPodService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubePod } from "@/interfaces/KubePod";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorPodService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/MonitorSecretService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubeSecret } from "@/interfaces";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorSecretService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/MonitorService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
export class MonitorService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/MonitorServiceService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubeService } from "@/interfaces";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorServiceService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/MonitorStatefulSetService.ts">
import type { IUser, IWorkspace } from "@/entities";
import type { KubeStatefulSet } from "@/interfaces";
import type { MonitoringQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { objectToFilterLabels } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import { ClusterService } from "./ClusterService";
⋮----
export class MonitorStatefulSetService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		filter: MonitoringQueryFilter,
		data: {
			/**
			 * Namespace's name
			 */
			name: string;
		}
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
async find(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async findOne(filter: MonitoringQueryFilter, options?: MonitoringQueryOptions)
⋮----
async delete(params: MonitoringQueryParams)
</file>

<file path="src/services/ReleaseService.ts">
import type { IRelease } from "@/entities";
import { releaseSchema } from "@/entities";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class ReleaseService extends BaseService<IRelease>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/RoleService.ts">
import type { IRole } from "@/entities/Role";
import { roleSchema } from "@/entities/Role";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class RoleService extends BaseService<IRole>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/RouteService.ts">
import type { IRoute } from "@/entities/Route";
import { routeSchema } from "@/entities/Route";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class RouteService extends BaseService<IRoute>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/ServiceAccountService.ts">
import type { IServiceAccount } from "@/entities/ServiceAccount";
import { serviceAccountSchema } from "@/entities/ServiceAccount";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class ServiceAccountService extends BaseService<IServiceAccount>
⋮----
constructor(ownership?: Ownership)
⋮----
async find(filter?: IQueryFilter, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination)
⋮----
async create(data: IServiceAccount)
⋮----
async update(filter: IQueryFilter, data: IServiceAccount, options?: IQueryOptions)
</file>

<file path="src/services/SystemLogService.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import { type ISystemLog, systemLogSchema } from "@/entities/SystemLog";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export type SaveLogOptions = Pick<ISystemLog, "type" | "level" | "name"> & Partial<Ownership>;
⋮----
export class SystemLogService extends BaseService<ISystemLog>
⋮----
constructor(ownership?: Ownership)
⋮----
async saveLog(message: string | undefined, options: SaveLogOptions =
⋮----
// check expired logs and deleted expired ones
⋮----
async saveError(error: any, options?: SaveLogOptions)
⋮----
async deleteExpiredLogs()
⋮----
// Mark as deleted based on duration
⋮----
// Count system logs that would be marked as deleted
⋮----
// Now, perform the update if there are any system logs to be marked as deleted
⋮----
// Mark as deleted based on item count
⋮----
// We need to delete the oldest items, so we sort by 'createdAt'
</file>

<file path="src/services/TeamService.ts">
import type { ITeam } from "@/entities/Team";
import { teamSchema } from "@/entities/Team";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class TeamService extends BaseService<ITeam>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/UserService.ts">
import type { IRole } from "@/entities";
import type { IUser, UserDto } from "@/entities/User";
import { userSchema } from "@/entities/User";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { dxCreateUser } from "@/modules/diginext/dx-user";
import { MongoDB } from "@/plugins/mongodb";
import { getActiveRole } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
import { RoleService } from "./RoleService";
⋮----
export interface UserJoinWorkspaceParams {
	/**
	 * User ID
	 */
	userId: string;
	/**
	 * Workspace's ID or slug
	 */
	workspace: string;
}
⋮----
/**
	 * User ID
	 */
⋮----
/**
	 * Workspace's ID or slug
	 */
⋮----
export class UserService extends BaseService<IUser>
⋮----
constructor(ownership?: Ownership)
⋮----
async find(filter?: IQueryFilter<IUser>, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination)
⋮----
// if (filter) filter.type = { $nin: ["service_account", "api_key"] };
⋮----
async findOne(filter?: IQueryFilter<IUser>, options?: IQueryOptions & IQueryPagination)
⋮----
// if (filter) filter.type = { $nin: ["service_account", "api_key"] };
⋮----
async create(data, options: IQueryOptions =
⋮----
// create user on "dxup.dev" via "dxApi"
⋮----
async update(filter: IQueryFilter<IUser>, data: IUser | any, options?: IQueryOptions)
⋮----
async assignRole(role: IRole, user: IUser, options?:
⋮----
// validate
⋮----
// remove old roles
⋮----
// push a new role
⋮----
// update database
⋮----
// return
⋮----
async assignRoleByRoleID(roleId: any, user: IUser, options?:
⋮----
async assignRoleByUserID(role: IRole, userId: any, options?:
⋮----
async assignRoleByID(roleId: any, userId: any, options?:
⋮----
async updateAccessPermissions(userSlug: string, resource:
⋮----
// validation
⋮----
// process
⋮----
// result
⋮----
async joinWorkspace(data: UserJoinWorkspaceParams, options?: IQueryOptions)
⋮----
// parse input params
⋮----
// workspace in query could be "_id" and also "slug":
⋮----
// return undefined if can't convert to "ObjectId" -> it's a "slug" !!! (lol)
⋮----
// find the workspace
⋮----
// find the user
⋮----
// console.dir(user, { depth: 10 });
// create user on "dxup.dev" via "dxApi"
⋮----
// check if this is a private workspace:
⋮----
// if this user hasn't joined yet:
⋮----
// add this workspace to user's workspace list
⋮----
// set active workspace of this user -> this workspace
⋮----
// set active role
</file>

<file path="src/services/UserTokenService.ts">
import type { IUserToken } from "@/entities/UserToken";
import { userTokenSchema } from "@/entities/UserToken";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class UserTokenService extends BaseService<IUserToken>
⋮----
constructor(ownership?: Ownership)
</file>

<file path="src/services/WebhookService.ts">
import humanizeDuration from "humanize-duration";
⋮----
import { Config } from "@/app.config";
import type { IApp, IBuild, IProject, IUser, IWorkspace } from "@/entities";
import type { IDataReferences, IWebhook } from "@/entities/Webhook";
import { webhookSchema } from "@/entities/Webhook";
import type { IQueryOptions } from "@/interfaces";
import type { Ownership, SystemEvent, WebhookChannel, WebhookEventStatus } from "@/interfaces/SystemTypes";
import { createBuildSlug } from "@/modules/deploy/create-build-slug";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import BaseService from "./BaseService";
import { NotificationService } from "./NotificationService";
⋮----
export interface WebhookDto extends IDataReferences {
	/**
	 * Array of webhook events to subscribe to
	 */
	events: SystemEvent[];
	/**
	 * Array of User ID
	 * @default []
	 */
	consumers?: string[];
	/**
	 * Array of webhook channels to receive
	 * @default ["email"]
	 */
	channels?: WebhookChannel[];
}
⋮----
/**
	 * Array of webhook events to subscribe to
	 */
⋮----
/**
	 * Array of User ID
	 * @default []
	 */
⋮----
/**
	 * Array of webhook channels to receive
	 * @default ["email"]
	 */
⋮----
export class WebhookService extends BaseService<IWebhook>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: WebhookDto, options?: IQueryOptions)
⋮----
/**
	 * Trigger a webhook & send the notification
	 * @param id - Webhook ID
	 * @param status - Webhook event status
	 */
async trigger(id: string, status: WebhookEventStatus, options?: IQueryOptions)
⋮----
// validate
⋮----
// process
⋮----
/**
	 * Subscribe a consumer to a webhook
	 * @param id - Webhook ID
	 * @param data - Subscription data
	 */
async subscribe(id: string, consumers: string[], options?: IQueryOptions)
⋮----
// validate
⋮----
// add consumers to existing webhook if it's not exists
</file>

<file path="src/views/index.html">
<!DOCTYPE html>
<html>
    <head>
        <title>Basic Page</title>
    </head>
	<body>
		<h1>My First Heading</h1>
		<p>My first paragraph.</p>
	</body>
</html>
</file>

<file path="src/index.ts">
// import Configstore from "configstore";
import { log, logError, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import { execConfig } from "@/config/config";
import type { InputOptions } from "@/interfaces/InputOptions";
import { execAnalytics } from "@/modules/analytics";
import createApp from "@/modules/apps/new-app";
import transferRepo from "@/modules/apps/transferRepo";
import { execCDN } from "@/modules/cdn";
import { cliAuthenticate, cliLogin, cliLogout, parseCliOptions, showProfile } from "@/modules/cli";
import { execDatabase } from "@/modules/db";
⋮----
import { execDomain } from "@/modules/domains/execDomain";
import { execGit, generateSSH } from "@/modules/git";
import { execPipeline } from "@/modules/pipeline";
import CustomProvider, { execCustomProvider } from "@/modules/providers/custom";
import DigitalOcean, { execDigitalOcean } from "@/modules/providers/digitalocean";
import GCloud, { execGoogleCloud } from "@/modules/providers/gcloud";
import { execRegistry } from "@/modules/registry";
import { execServer } from "@/modules/server";
import generateSnippet from "@/modules/snippets/generateSnippet";
import { currentVersion } from "@/plugins";
⋮----
import { execAI } from "./modules/ai/exec-ai";
import { execInitApp } from "./modules/apps/init-app";
import { viewAppLogs } from "./modules/apps/view-logs";
import { requestBuild } from "./modules/build/request-build";
import { startBuildAndRun } from "./modules/build/start-build-and-run";
import { showClientInfo } from "./modules/cli/show-cli-info";
import { updateCli } from "./modules/cli/update-cli";
import { execCluster } from "./modules/cluster/cli-cluster";
import { execDotenvCommand } from "./modules/deploy/dotenv-exec";
import { parseOptionsToAppConfig } from "./modules/deploy/parse-options-to-app-config";
import { requestDeploy } from "./modules/deploy/request-deploy";
import { execKubectl } from "./modules/k8s/kubectl-cli";
import { testCommand } from "./modules/test-command";
⋮----
/**
 * Initialize CONFIG STORE (in document directory of the local machine)
 */
// export const conf = new Configstore(pkg.name);
⋮----
export async function processCLI(options?: InputOptions)
⋮----
// debugging info
⋮----
await generateSSH(); // make sure we got the PUBLIC KEY and PRIVATE KEY for SSH setup later on
⋮----
// request server to build & deploy from source
⋮----
// deploy to multiple deploy envs
⋮----
// deploy to single deploy env
⋮----
// Only start a server mode when needed
⋮----
// Otherwise, parse & execute CLI commands...
</file>

<file path="templates/cert-manager/cluster-issuer.yaml">
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: system@dxup.dev
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    # Enable the HTTP-01 challenge provider
    solvers:
      - http01:
          ingress:
            class: nginx
</file>

<file path="templates/diginext/.env">
TZ=Asia/Ho_Chi_Minh

# cái này của NEXT.JS luôn để là "production", khác với cái NEXT_PUBLIC_ENV ở dưới là để xác định môi trường deploy
NODE_ENV=production
PORT={{port}}
NODE_PORT={{port}}

NEXT_PUBLIC_ENV="{{env_long}}"
NEXT_PUBLIC_BASE_PATH="{{base_path}}"
NEXT_PUBLIC_API_BASE_PATH="https://dev1.digitop.vn/{{app_slug}}/backend"
NEXT_PUBLIC_CDN_BASE_PATH="https://google-cdn.digitop.vn/{{app_slug}}/{{env}}"
NEXT_PUBLIC_BASE_URL="https://{{base_url}}"
IRON_SESSION_SECRET="SHPfrs9nuSdutAw2mn8trxCVG93YVGVR"
</file>

<file path="templates/diginext/deployment.yml">
# NAMESPACE CONFIGURATION
apiVersion: v1
kind: Namespace
metadata:
  name: "{{namespace}}"
  labels:
    project: example
    owner: topgroup

---
# INGRESS CONFIGURATION
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  namespace: "{{namespace}}"
  labels:
    project: example
    owner: topgroup
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/proxy-body-size: 50m
    # nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - example.com
      secretName: prod-secret-example-com # this must be unique
    - hosts:
        - www.example.com
      secretName: prod-secret-www-example-com # this must be unique
  rules:
    - host: example.com
      http:
        paths:
          - path: /
            backend:
              serviceName: example-svc
              servicePort: 80
    - host: www.example.com
      http:
        paths:
          - path: /
            backend:
              serviceName: example-svc
              servicePort: 80
---
# SERVICE CONFIGURATION
apiVersion: v1
kind: Service
metadata:
  name: example-svc
  namespace: "{{namespace}}"
  labels:
    app: example
    # project label
    project: example
    owner: topgroup
spec:
  # type: NodePort
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: example
---
# POD DEPLOYMENT CONFIGURATION
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example
  namespace: "{{namespace}}"
  labels:
    project: example
    owner: topgroup
spec:
  replicas: 2
  selector:
    matchLabels:
      app: example
  template:
    metadata:
      labels:
        app: example
        # project label
        project: example
        owner: topgroup
    spec:
      containers:
        - name: example
          image: "{{image_name}}"
          ports:
            - containerPort: 80
          # resource quota
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 300m
              memory: 512Mi
          # ==================================
          # NEED TO BE CONFIGURED BY DEVELOPER
          # ==================================
          env:
            - name: NEXT_PUBLIC_ENV
              value: production
            - name: NEXT_PUBLIC_BASE_PATH
              value: example
            - name: NEXT_PUBLIC_BASE_URL
              value: "https://example.com"
            - name: NEXT_PUBLIC_API_BASE_PATH
              value: "https://api.example.com"
            - name: NEXT_PUBLIC_CDN_BASE_PATH
              value: >-
                https://google-cdn.digitop.vn/example/prod
            - name: IRON_SESSION_SECRET
              value: "SHPfrs9nuSdutexampleAw2mn8trxCVG93YVGVR"
          # ==================================
</file>

<file path="templates/diginext/Dockerfile">
# Base on offical Node.js Alpine image
FROM  asia.gcr.io/top-group-k8s/framework/diginext:{{base_image_version}}

# Set working directory
WORKDIR /usr/app

# Copy package.json and package-lock.json before other files
# Utilise Docker cache to save re-installing dependencies if unchanged
COPY ./package*.json ./

# Install dependencies
RUN yarn install --production=true
RUN yarn add --dev eslint eslint-config-next

# Delete all files in "pages" directory
RUN rm -rf ./pages/
RUN rm -rf ./plugins/
RUN rm -rf ./components/
RUN rm -rf ./.next/
RUN rm -rf ./next.config.js
RUN rm -rf ./dx.json
RUN rm -rf ./package.json
RUN rm -rf ./package-lock.json

# Copy all files
COPY ./ ./

# Delete env if any
RUN rm -rf ./.env.local
RUN rm -rf ./.env.production
RUN rm -rf ./.env

# Build app
RUN yarn build

# Expose the listening port
EXPOSE 3000

# Run npm start script when container starts
CMD [ "yarn", "start" ]
</file>

<file path="templates/diginext/Dockerfile.staging">
# Base on offical Node.js Alpine image
FROM asia.gcr.io/top-group-k8s/framework/diginext:latest

# Set working directory
WORKDIR /usr/app

# Copy package.json and package-lock.json before other files
# Utilise Docker cache to save re-installing dependencies if unchanged
COPY ./package*.json ./

# Install dependencies
RUN yarn install --production=true

# Delete all files in "pages" directory
RUN rm -rf ./pages/
RUN rm -rf ./plugins/
RUN rm -rf ./components/
RUN rm -rf ./.next/
RUN rm -rf ./next.config.js
RUN rm -rf ./dx.json
RUN rm -rf ./package.json
RUN rm -rf ./package-lock.json

# Copy all files
COPY ./ ./

# Delete env if any
RUN rm -rf ./.env.local
RUN rm -rf ./.env.production
RUN rm -rf ./.env

# Copy ENV file
COPY ./deployment/.env.staging ./.env

# Build app
RUN yarn build

# Expose the listening port
EXPOSE 3000

# Run npm start script when container starts
CMD [ "yarn", "start" ]
</file>

<file path="templates/diginext/gitignore.txt">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules/
/.pnp
.pnp.js

# testing
/coverage

# next.js
/out/
out/
.next
.next/

# diginext
.fw/
optimizer/node_modules/
optimizer/yarn.lock
yarn.lock

# production
/build

# misc
.DS_Store

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
yarn.lock

# local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env*.local

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Storage
storage
public/uploads

# Deployment
deployment/
.env
.env.dev
.env.prod
.env.local
.env.canary
deployment.yaml
deployment.dev.yaml
deployment.prerelease.yaml
deployment.prod.yaml
deployment.canary.yaml
</file>

<file path="templates/express/.env">
TZ="Asia/Ho_Chi_Minh"
PORT={{port}}
NODE_PORT={{port}}
NODE_ENV="{{env_long}}"
BASE_PATH="{{base_path}}"
</file>

<file path="templates/express/Dockerfile">
FROM mhart/alpine-node:14.17.3

# Set working directory
WORKDIR /app

# Install app dependencies
COPY package*.json ./
# COPY yarn*.lock ./

# Install node_modules
RUN yarn install --only=production

# Copy existing application directory contents
COPY . .

RUN yarn build

EXPOSE 80
CMD [ "yarn", "start" ]
</file>

<file path="templates/monorepo/Dockerfile">
# ===================================
#       PHASE 1 - BUILDER
# ===================================

FROM node:17.4.0-alpine AS BUILD_IMAGE

ENV NODE_OPTIONS=--max_old_space_size=8192

# Because ALPINE base image don't have python pre-installed 
RUN apk update && apk add bash curl python3 make g++ && rm -rf /var/cache/apk/*

# install node-prune (https://github.com/tj/node-prune)
RUN curl -sf https://gobinaries.com/tj/node-prune | sh

WORKDIR /usr/app

COPY package.json .
COPY turbo.json .
COPY .yarnrc.yaml .

COPY ./apps/diginext/package.json ./apps/diginext/package.json

# packages
COPY ./packages ./packages

# install the packages & dependencies
RUN yarn set version berry

# remove unneccessary packages
COPY ./tools/remove-package-not-using ./tools/remove-package-not-using
RUN cd ./tools/remove-package-not-using && npm install && npm run startup

# Only install production packages
# RUN yarn workspaces focus --all --production
RUN echo "" >> yarn.lock
RUN yarn

# apps
COPY ./apps/diginext ./apps/diginext

# Start building
RUN yarn build:diginext

# Remove cache directory of "turbo" -> lighter docker image:
RUN rm -rf ./node_modules/.cache

# run node-prune to scan for other unused node_modules packages
RUN /usr/local/bin/node-prune

# ===================================
#       PHASE 2 - RUNNER
# ===================================

FROM node:17.4.0-alpine AS RUNNER

WORKDIR /usr/app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Only copy build files & neccessary files to run:
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/next.config.js .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.next/standalone .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.next/static ./.next/static
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/public ./public
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/node_modules ./node_modules
# COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/next-i18next.config.js .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.env .

EXPOSE 3000 80

CMD node server.js
</file>

<file path="templates/monorepo/Dockerfile.diginest">
# ===================================
#       PHASE 1 - BUILDER
# ===================================

FROM node:17.4.0-alpine

ENV NODE_OPTIONS=--max_old_space_size=8192

# Because ALPINE base image don't have python pre-installed 
RUN apk update && apk add bash curl python3 make g++ && rm -rf /var/cache/apk/*

# install node-prune (https://github.com/tj/node-prune)
# RUN curl -sfL https://install.goreleaser.com/github.com/tj/node-prune.sh | bash -s -- -b /usr/local/bin
RUN curl -sf https://gobinaries.com/tj/node-prune | sh

WORKDIR /usr/app

# remove unneccessary packages
COPY ./tools/remove-package-not-using ./tools/remove-package-not-using
RUN cd ./tools/remove-package-not-using && npm install && npm run build
# RUN cd /usr/app

# Base dependencies
COPY package.json .
COPY turbo.json .
COPY .yarnrc.yaml .

COPY ./apps/diginest/package.json ./apps/diginest/package.json

# packages
COPY ./packages ./packages

RUN rm -rf ./node_modules ./yarn.lock ./package-lock.json ./yarn.lock* ./.yarn ./**/node_modules ./**/.turbo

RUN echo "" >> yarn.lock

# install the packages & dependencies
RUN yarn set version berry

RUN yarn install

# Start building
RUN yarn build:diginest

# ===================================
#       PHASE 2 - RUNNER
# ===================================

FROM node:17.4.0-alpine AS RUNNER

WORKDIR /usr/app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginest/dist ./dist
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginest/storage ./storage
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/node_modules ./node_modules
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginest/.env .

EXPOSE 3000 80 4000

CMD node dist/main.js
</file>

<file path="templates/monorepo/Dockerfile.diginext">
# ===================================
#       PHASE 1 - BUILDER
# ===================================

FROM node:17.4.0-alpine AS BUILD_IMAGE

ENV NODE_OPTIONS=--max_old_space_size=8192

# Because ALPINE base image don't have python pre-installed 
RUN apk update && apk add bash curl python3 make g++ && rm -rf /var/cache/apk/*

# install node-prune (https://github.com/tj/node-prune)
RUN curl -sf https://gobinaries.com/tj/node-prune | sh

WORKDIR /usr/app

COPY package.json .
COPY turbo.json .
COPY .yarnrc.yaml .

COPY ./apps/diginext/package.json ./apps/diginext/package.json

# packages
COPY ./packages ./packages

# install the packages & dependencies
RUN yarn set version berry

# remove unneccessary packages
COPY ./tools/remove-package-not-using ./tools/remove-package-not-using
RUN cd ./tools/remove-package-not-using && npm install && npm run startup

# Only install production packages
# RUN yarn workspaces focus --all --production
RUN echo "" >> yarn.lock
RUN yarn

# apps
COPY ./apps/diginext ./apps/diginext

# Start building
RUN yarn build:diginext

# Remove cache directory of "turbo" -> lighter docker image:
RUN rm -rf ./node_modules/.cache

# run node-prune to scan for other unused node_modules packages
RUN /usr/local/bin/node-prune

# ===================================
#       PHASE 2 - RUNNER
# ===================================

FROM node:17.4.0-alpine AS RUNNER

WORKDIR /usr/app

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
USER nextjs

# Only copy build files & neccessary files to run:
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/next.config.js .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.next/standalone .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.next/static ./.next/static
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/public ./public
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/node_modules ./node_modules
# COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/next-i18next.config.js .
COPY --from=BUILD_IMAGE --chown=nextjs:nodejs /usr/app/apps/diginext/.env .

EXPOSE 3000 80

CMD node server.js
</file>

<file path="templates/nextjs/ts/0.1/components/blank.txt">
import type { ReactNode } from "react";
import React from "react";

interface IPage@@PAGE_FILE_NAME {
\tchildren?: ReactNode;
}

const Page@@PAGE_FILE_NAME = (props: IPage@@PAGE_FILE_NAME) => {
\treturn (
\t\t<>
\t\t\t{/*  */}
\t\t\t{props.children}
\t\t</>
\t);
};

export default Page@@PAGE_FILE_NAME;
</file>

<file path="templates/nextjs/ts/0.1/components/page-name.txt">
import type { ReactNode } from "react";
import React, { useEffect, useState } from "react";

import { useListener } from "@/components/context/ListenerProvider";

interface IPage@@PAGE_FILE_NAME {
\tchildren?: ReactNode;
}

const Page@@PAGE_FILE_NAME = (props: IPage@@PAGE_FILE_NAME) => {
\tconst listener = useListener();

\tconst onListen = (e: any) => {
\t\tconst { type } = e;
\t\tswitch (type) {
\t\t\tcase "":
\t\t\t\tbreak;

\t\t\tdefault:
\t\t\t\tbreak;
\t\t}
\t};

\tif (listener) {
\t\tlistener.useSubscription((e: any) => {
\t\t\tonListen(e);
\t\t});
\t}

\tconst init = async () => {
\t\t//
\t};

\tuseEffect(() => {
\t\t// effect
\t\treturn () => {
\t\t\t// cleanup
\t\t};
\t}, []);

\treturn (
\t\t<>
\t\t\t{/*  */}
\t\t\t{props.children}
\t\t</>
\t);
};

export default Page@@PAGE_FILE_NAME;
</file>

<file path="templates/nextjs/ts/0.1/components/pixi.txt">
/* eslint-disable @typescript-eslint/no-use-before-define */
import { BasicApp, Event } from "diginext-pixi/dist";
import type * as PIXI from "pixi.js";
import type { ReactNode } from "react";
import { useEffect, useState } from "react";

import { useListener } from "@/components/context/ListenerProvider";
import @@PAGE_FILE_NAMEScene from "@/modules/pixi/scenes/@@PAGE_FILE_NAMEScene";

interface IPage@@PAGE_FILE_NAME {
\tchildren?: ReactNode;
}

const Page@@PAGE_FILE_NAME = (props: IPage@@PAGE_FILE_NAME) => {
\tconst [main, setMain] = useState(<> </>);

\tconst listener = useListener();

\tconst onListen = (e: any) => {
\t\tconst { type } = e;
\t\tswitch (type) {
\t\t\tcase Event.LOADED_BASIC_COMP:
\t\t\t\t{
\t\t\t\t\tinit();
\t\t\t\t}
\t\t\t\tbreak;

\t\t\tdefault:
\t\t\t\tbreak;
\t\t}
\t};

\tif (listener) {
\t\tlistener.useSubscription((e: any) => {
\t\t\tonListen(e);
\t\t});
\t}

\tconst init = async () => {
\t\t//
\t\tconst app = (window as any).uData?.app as any;
\t\tif (!app) return;

\t\tconst stage = app.stage as PIXI.Container;
\t\tif (!stage) return;

\t\tconst scene = new @@PAGE_FILE_NAMEScene();
\t\tstage.addChild(scene);
\t};

\tuseEffect(() => {
\t\t// effect
\t\tsetMain(
\t\t\t<>
\t\t\t\t<BasicApp listener={listener} />
\t\t\t\t{/* {IsLocal() ? <ButtonDebug listener={listener} /> : <></>} */}
\t\t\t</>
\t\t);
\t\treturn () => {
\t\t\t// cleanup
\t\t};
\t}, []);

\treturn (
\t\t<>
\t\t\t{/* <div className="holder absolute h-[730px] w-[530px] resize overflow-auto ">{main}</div> */}
\t\t\t<div className="holder absolute h-full w-full overflow-hidden ">{main}</div>
\t\t\t{props.children}
\t\t</>
\t);
};

export default Page@@PAGE_FILE_NAME;
</file>

<file path="templates/nextjs/ts/0.1/components/three.txt">
/* eslint-disable @typescript-eslint/no-use-before-define */
import AppThree from "diginext-three/dist/components/AppThree";
import AppEvent from "diginext-three/dist/data/AppEvent";
import type { ReactNode } from "react";
import React, { useEffect, useState } from "react";

import { useListener } from "@/components/context/ListenerProvider";
import @@PAGE_FILE_NAMEScene from "@/modules/three/scenes/@@PAGE_FILE_NAMEScene";

interface IPage@@PAGE_FILE_NAME {
\tchildren?: ReactNode;
}

const Page@@PAGE_FILE_NAME = (props: IPage@@PAGE_FILE_NAME) => {
\tconst [main, setMain] = useState(<></>);

\tconst listener = useListener();

\tconst onListen = (e: any) => {
\t\tconst { type } = e;
\t\tswitch (type) {
\t\t\tcase AppEvent.LOADED_APP_THREE:
\t\t\t\t{
\t\t\t\t\tinit();
\t\t\t\t}
\t\t\t\tbreak;

\t\t\tdefault:
\t\t\t\tbreak;
\t\t}
\t};

\tif (listener) {
\t\tlistener.useSubscription((e: any) => {
\t\t\tonListen(e);
\t\t});
\t}

\tconst init = async () => {
\t\t//

\t\tconst uData = (window as any).uData;
\t\tif (!uData) return;

\t\tconst { scene } = uData;
\t\tif (!scene) return;

\t\tconst root = new @@PAGE_FILE_NAMEScene();
\t\tscene.add(root);
\t};

\tuseEffect(() => {
\t\t// effect
\t\tsetMain(<AppThree listener={listener} />);

\t\treturn () => {
\t\t\t// cleanup
\t\t};
\t}, []);

\treturn (
\t\t<>
\t\t\t{main}

\t\t\t{props.children}
\t\t</>
\t);
};

export default Page@@PAGE_FILE_NAME;
</file>

<file path="templates/nextjs/ts/0.1/modules/pixi.txt">
import { Event } from 'diginext-pixi';
import type * as PIXI from 'pixi.js';
import { Container } from 'pixi.js';

export default class @@PAGE_FILE_NAMEScene extends Container {
\tconstructor(props?: any) {
\t\tsuper();
\t\tthis.props = { ...this.props, props };

\t\tthis.#awake();
\t}

\tprops: any;

\t#awake() {
\t\t//
\t\tconst app = (window as any).uData?.app as any;
\t\tif (!app) return;

\t\tconst stage = app.stage as PIXI.Container;
\t\tif (!stage) return;

\t\tstage.on(Event.RESIZE as any, this.resize.bind(this));

\t\t// app.ticker.add(this.update.bind(this));
\t}

\tresize({ data }: any) {
\t\tconst { width, height } = data;
\t}

\tupdate() {
\t\t//
\t}
}
</file>

<file path="templates/nextjs/ts/0.1/modules/three.txt">
//import * as THREE from 'three'
import Object3DExtend from "diginext-three/dist/core/Object3DExtend";

export default class @@PAGE_FILE_NAMEScene extends Object3DExtend {
\tconstructor(props?: any) {
\t\tsuper(props);

\t\tObject.assign(this, props);

\t\tthis.#awake();
\t}

\t#awake() {
\t\tconst scope = this;
\t}
}
</file>

<file path="templates/nextjs/ts/0.1/pages/blank.txt">
import dynamic from "next/dynamic";

import MasterPage from "@/components/layouts/MasterPage";

const Page@@PAGE_FILE_NAME = dynamic(() => import("@@PATH_COMPONENT"), { ssr: false });

// @@URL
const @@PAGE_FILE_NAME = () => {
\treturn (
\t\t<>
\t\t\t<style global jsx>{``}</style>
\t\t\t<MasterPage
\t\t\t\tmeta={{
\t\t\t\t\ttitle: "@@PAGE_NAME",
\t\t\t\t}}
\t\t\t>
\t\t\t\t<Page@@PAGE_FILE_NAME />
\t\t\t</MasterPage>
\t\t</>
\t);
};

export default @@PAGE_FILE_NAME;
</file>

<file path="templates/nextjs/ts/0.1/pages/page-name.txt">
import dynamic from "next/dynamic";

import MasterPage from "@/components/layouts/MasterPage";

const Page@@PAGE_FILE_NAME = dynamic(() => import("@@PATH_COMPONENT"), { ssr: false });

// @@URL
const @@PAGE_FILE_NAME = () => {
\treturn (
\t\t<>
\t\t\t<style global jsx>{`
\t\t\t\thtml,
\t\t\t\tbody {
\t\t\t\t\toverflow: hidden;
\t\t\t\t}

\t\t\t\t* {
\t\t\t\t\t-webkit-touch-callout: none; /* iOS Safari */
\t\t\t\t\t-webkit-user-select: none; /* Safari */
\t\t\t\t\t-khtml-user-select: none; /* Konqueror HTML */
\t\t\t\t\t-moz-user-select: none; /* Old versions of Firefox */
\t\t\t\t\t-ms-user-select: none; /* Internet Explorer/Edge */
\t\t\t\t\tuser-select: none; /* Non-prefixed version, currently
\t\t\t\t\t\t\t\t  supported by Chrome, Edge, Opera and Firefox */
\t\t\t\t\ttouch-action: none;
\t\t\t\t}
\t\t\t`}</style>

\t\t\t<MasterPage
\t\t\t\tmeta={{
\t\t\t\t\ttitle: "@@PAGE_NAME",
\t\t\t\t}}
\t\t\t>
\t\t\t\t<Page@@PAGE_FILE_NAME />
\t\t\t</MasterPage>
\t\t</>
\t);
};

export default @@PAGE_FILE_NAME;
</file>

<file path="templates/nginx-conf/nginx.conf">
server {
        listen 80;
        listen [::]:80;
        server_name build.digitop.vn;

        location ~ /.well-known/acme-challenge {
          allow all;
          root /var/www/html;
        }

        location / {
                rewrite ^ https://$host$request_uri? permanent;
        }
}

server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name build.digitop.vn;

        server_tokens off;

        ssl_certificate /etc/letsencrypt/live/build.digitop.vn/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/build.digitop.vn/privkey.pem;

        ssl_buffer_size 8k;

        ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

        ssl_protocols TLSv1.2;
        ssl_prefer_server_ciphers on;

        ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

        ssl_ecdh_curve secp384r1;
        ssl_session_tickets off;

        ssl_stapling on;
        ssl_stapling_verify on;
        resolver 8.8.8.8;

        location / {
                try_files $uri @diginext_cli;
        }

        location @diginext_cli {
                proxy_pass http://diginext_cli:6969;
                add_header X-Frame-Options "SAMEORIGIN" always;
                add_header X-XSS-Protection "1; mode=block" always;
                add_header X-Content-Type-Options "nosniff" always;
                add_header Referrer-Policy "no-referrer-when-downgrade" always;
                add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
                #add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
                # enable strict transport security only if you understand the implications
        }

        root /var/www/html;
        index index.html index.htm index.nginx-debian.html;
}
</file>

<file path="templates/nodejs/.env">
TZ="Asia/Ho_Chi_Minh"
PORT={{port}}
NODE_PORT={{port}}
NODE_ENV="{{env_long}}"
BASE_PATH="{{base_path}}"
</file>

<file path="templates/nodejs/Dockerfile">
#FROM node:12.13-alpine
FROM mhart/alpine-node:14.17.3

# Set working directory
WORKDIR /app

# Install app dependencies
COPY package*.json ./
COPY yarn*.lock ./

# Install node_modules
RUN yarn install --only=production

# Copy existing application directory contents
COPY . .

EXPOSE 80
CMD [ "yarn", "start" ]
</file>

<file path="templates/static/docker-compose.yml">
version: "3"
services:
  diginext-framework:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_ENV: "development"
        NEXT_PUBLIC_BASE_PATH: "diginext"
        NEXT_PUBLIC_BASE_URL: "dev5.digitop.vn/diginext"
        # NEXT_PUBLIC_API_BASE_PATH: https://diginext.zii.vn
        NEXT_PUBLIC_CDN_BASE_PATH: "storage.googleapis.com/digitop-cdn-sg/diginext/dev"
        BACKEND_DOMAIN: "diginext.zii.vn"
        IRON_SESSION_SECRET: "SHPfrs9nuSdutAw2mn8trxCVG93YVGVR"
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_ENV=development
      - NEXT_PUBLIC_BASE_PATH=diginext
      - IRON_SESSION_SECRET=SHPfrs9nuSdutAw2mn8trxCVG93YVGVR
      - BACKEND_DOMAIN="diginext.zii.vn"
      - NEXT_PUBLIC_BASE_URL="dev5.digitop.vn/diginext"
    # volumes:
    # - .:/usr/app
</file>

<file path="templates/static/Dockerfile">
FROM nginx

ARG NEXT_PUBLIC_BASE_PATH="{{base_path}}"

COPY build /usr/share/nginx/html/$NEXT_PUBLIC_BASE_PATH
COPY nginx.conf /etc/nginx/nginx.conf
</file>

<file path="templates/static/index.html">
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>Static page</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body>
    <h1>Hello, world!</h1>
  </body>
</html>
</file>

<file path="templates/static/nginx.conf">
user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
	worker_connections 1024;
}

http {
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	log_format main '$remote_addr - $remote_user [$time_local] "$request" '
	'$status $body_bytes_sent "$http_referer" '
	'"$http_user_agent" "$http_x_forwarded_for"';

	access_log /var/log/nginx/access.log main;

	sendfile on;
	#tcp_nopush     on;

	keepalive_timeout 65;

	gzip on;

	server {
		listen {{port}};
		root /usr/share/nginx/html/{{base_path}};
		index index.html;
		server_name localhost;
		client_max_body_size 16m;
	}

	include /etc/nginx/conf.d/*.conf;
}
</file>

<file path="templates/.env">
TZ="Asia/Ho_Chi_Minh"
PORT={{port}}
NODE_PORT={{port}}
NODE_ENV="{{env_long}}"
BASE_PATH="{{base_path}}"
</file>

<file path="templates/github-action-template.yaml">
name: Deploy Workflow

# TRIGGERS
on:
  push:
    branches:
      - {{branch}}

# ENVIRONMENT VARIABLES
env:
  DX_API_KEY: ${{ secrets.DX_API_KEY }}
  GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref }}

# CI/CD STEPS
jobs:
  deploy:
    name: Deploy to [{{deploy_env_url}}]
    runs-on: ubuntu-latest
    if: always() && !cancelled() && !failure() && contains(github.ref, '{{branch}}')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy to Diginext
        uses: digitopvn/diginext-actions@v0
        with:
          workspace_url: https://apps.dxup.dev
          api_key: ${{ env.DX_API_KEY }}
          cluster: {{cluster}}
          registry: {{registry}}
          deploy_env: {{env}}
          port: {{port}}
</file>

<file path="templates/gitignore.txt">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules/

# diginext
.fw/
optimizer/node_modules/
optimizer/yarn.lock
yarn.lock

# production
build/

# misc
.DS_Store

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
yarn.lock

# local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local
.env*.local

# IDEs and editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace

# IDE - VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Kubernetes Deployment
deployment/
.env
.env.dev
.env.prod
.env.local
.env.canary
deployment.yaml
deployment.dev.yaml
deployment.prerelease.yaml
deployment.prod.yaml
deployment.canary.yaml
</file>

<file path="templates/namespace.yaml">
# NAMESPACE CONFIGURATION
apiVersion: v1
kind: Namespace
metadata:
  name: "{{namespace}}"
  annotations: {}
  labels:
    owner: topgroup
</file>

<file path="templates/patch_remove_dev1_ingress.json">
[
	{
		"op": "remove",
		"path": "/spec/rules/0/http/paths/${i}"
	}
]
</file>

<file path="templates/readme-template.md">
# {{repo_slug}}

An empty application created by [Diginext](https://dxup.dev/?ref=cli).
</file>

<file path=".babelrc.js">

</file>

<file path=".dependency-cruiser.js">
/** @type {import('dependency-cruiser').IConfiguration} */
⋮----
/* rules from the 'recommended' preset: */
⋮----
'(^|/)\\.[^/]+\\.(js|cjs|mjs|ts|json)$', // dot files
'\\.d\\.ts$',                            // TypeScript declaration files
'(^|/)tsconfig\\.json$',                 // TypeScript config
'(^|/)(babel|webpack)\\.config\\.(js|cjs|mjs|ts|json)$' // other configs
⋮----
// as it's pretty common to have a type import be a type only import
// _and_ (e.g.) a devDependency - don't consider type-only dependency
// types for this rule
⋮----
/* rules you might want to tweak for your specific situation: */
⋮----
/* conditions specifying which files not to follow further when encountered:
       - path: a regular expression to match
       - dependencyTypes: see https://github.com/sverweij/dependency-cruiser/blob/main/doc/rules-reference.md#dependencytypes-and-dependencytypesnot
       for a complete list
    */
⋮----
/* conditions specifying which dependencies to exclude
       - path: a regular expression to match
       - dynamic: a boolean indicating whether to ignore dynamic (true) or static (false) dependencies.
          leave out if you want to exclude neither (recommended!)
    */
// exclude : {
//   path: '',
//   dynamic: true
// },
⋮----
/* pattern specifying which files to include (regular expression)
       dependency-cruiser will skip everything not matching this pattern
    */
// includeOnly : '',
⋮----
/* dependency-cruiser will include modules matching against the focus
       regular expression in its output, as well as their neighbours (direct
       dependencies and dependents)
    */
// focus : '',
⋮----
/* list of module systems to cruise */
// moduleSystems: ['amd', 'cjs', 'es6', 'tsd'],
⋮----
/* prefix for links in html and svg output (e.g. 'https://github.com/you/yourrepo/blob/develop/'
       to open it on your online repo or `vscode://file/${process.cwd()}/` to 
       open it in visual studio code),
     */
// prefix: '',
⋮----
/* false (the default): ignore dependencies that only exist before typescript-to-javascript compilation
       true: also detect dependencies that only exist before typescript-to-javascript compilation
       "specify": for each dependency identify whether it only exists before compilation or also after
     */
⋮----
/* 
       list of extensions to scan that aren't javascript or compile-to-javascript. 
       Empty by default. Only put extensions in here that you want to take into
       account that are _not_ parsable. 
    */
// extraExtensionsToScan: [".json", ".jpg", ".png", ".svg", ".webp"],
⋮----
/* if true combines the package.jsons found from the module up to the base
       folder the cruise is initiated from. Useful for how (some) mono-repos
       manage dependencies & dependency definitions.
     */
// combinedDependencies: false,
⋮----
/* if true leave symlinks untouched, otherwise use the realpath */
// preserveSymlinks: false,
⋮----
/* TypeScript project file ('tsconfig.json') to use for
       (1) compilation and
       (2) resolution (e.g. with the paths property)

       The (optional) fileName attribute specifies which file to take (relative to
       dependency-cruiser's current working directory). When not provided
       defaults to './tsconfig.json'.
     */
⋮----
/* Webpack configuration to use to get resolve options from.

       The (optional) fileName attribute specifies which file to take (relative
       to dependency-cruiser's current working directory. When not provided defaults
       to './webpack.conf.js'.

       The (optional) `env` and `arguments` attributes contain the parameters to be passed if
       your webpack config is a function and takes them (see webpack documentation
       for details)
     */
// webpackConfig: {
//  fileName: './webpack.config.js',
//  env: {},
//  arguments: {},
⋮----
/* Babel config ('.babelrc', '.babelrc.json', '.babelrc.json5', ...) to use
      for compilation (and whatever other naughty things babel plugins do to
      source code). This feature is well tested and usable, but might change
      behavior a bit over time (e.g. more precise results for used module 
      systems) without dependency-cruiser getting a major version bump.
     */
// babelConfig: {
//   fileName: './.babelrc'
⋮----
/* List of strings you have in use in addition to cjs/ es6 requires
       & imports to declare module dependencies. Use this e.g. if you've
       re-declared require, use a require-wrapper or use window.require as
       a hack.
    */
// exoticRequireStrings: [],
/* options to pass on to enhanced-resolve, the package dependency-cruiser
       uses to resolve module references to disk. You can set most of these
       options in a webpack.conf.js - this section is here for those
       projects that don't have a separate webpack config file.

       Note: settings in webpack.conf.js override the ones specified here.
     */
⋮----
/* List of strings to consider as 'exports' fields in package.json. Use
         ['exports'] when you use packages that use such a field and your environment
         supports it (e.g. node ^12.19 || >=14.7 or recent versions of webpack).

         If you have an `exportsFields` attribute in your webpack config, that one
         will have precedence over the one specified here.
      */
⋮----
/* List of conditions to check for in the exports field. e.g. use ['imports']
         if you're only interested in exposed es6 modules, ['require'] for commonjs,
         or all conditions at once `(['import', 'require', 'node', 'default']`)
         if anything goes for you. Only works when the 'exportsFields' array is
         non-empty.

        If you have a 'conditionNames' attribute in your webpack config, that one will
        have precedence over the one specified here.
      */
⋮----
/*
         The extensions, by default are the same as the ones dependency-cruiser
         can access (run `npx depcruise --info` to see which ones that are in
         _your_ environment. If that list is larger than what you need (e.g. 
         it contains .js, .jsx, .ts, .tsx, .cts, .mts - but you don't use 
         TypeScript you can pass just the extensions you actually use (e.g. 
         [".js", ".jsx"]). This can speed up the most expensive step in 
         dependency cruising (module resolution) quite a bit.
       */
// extensions: [".js", ".jsx", ".ts", ".tsx", ".d.ts"],
/* 
         If your TypeScript project makes use of types specified in 'types'
         fields in package.jsons of external dependencies, specify "types"
         in addition to "main" in here, so enhanced-resolve (the resolver
         dependency-cruiser uses) knows to also look there. You can also do
         this if you're not sure, but still use TypeScript. In a future version
         of dependency-cruiser this will likely become the default.
       */
⋮----
/* pattern of modules that can be consolidated in the detailed
           graphical dependency graph. The default pattern in this configuration
           collapses everything in node_modules to one folder deep so you see
           the external modules, but not the innards your app depends upon.
         */
⋮----
/* Options to tweak the appearance of your graph.See
           https://github.com/sverweij/dependency-cruiser/blob/main/doc/options-reference.md#reporteroptions
           for details and some examples. If you don't specify a theme
           don't worry - dependency-cruiser will fall back to the default one.
        */
// theme: {
//   graph: {
//     /* use splines: "ortho" for straight lines. Be aware though
//       graphviz might take a long time calculating ortho(gonal)
//       routings.
//    */
//     splines: "true"
//   },
//   modules: [
//     {
//       criteria: { matchesFocus: true },
//       attributes: {
//         fillcolor: "lime",
//         penwidth: 2,
//       },
//     },
⋮----
//       criteria: { matchesFocus: false },
⋮----
//         fillcolor: "lightgrey",
⋮----
//       criteria: { matchesReaches: true },
⋮----
//       criteria: { matchesReaches: false },
⋮----
//       criteria: { source: "^src/model" },
//       attributes: { fillcolor: "#ccccff" }
⋮----
//       criteria: { source: "^src/view" },
//       attributes: { fillcolor: "#ccffcc" }
⋮----
//   ],
//   dependencies: [
⋮----
//       criteria: { "rules[0].severity": "error" },
//       attributes: { fontcolor: "red", color: "red" }
⋮----
//       criteria: { "rules[0].severity": "warn" },
//       attributes: { fontcolor: "orange", color: "orange" }
⋮----
//       criteria: { "rules[0].severity": "info" },
//       attributes: { fontcolor: "blue", color: "blue" }
⋮----
//       criteria: { resolved: "^src/model" },
//       attributes: { color: "#0000ff77" }
⋮----
//       criteria: { resolved: "^src/view" },
//       attributes: { color: "#00770077" }
//     }
//   ]
// }
⋮----
/* pattern of modules that can be consolidated in the high level
          graphical dependency graph. If you use the high level graphical
          dependency graph reporter (`archi`) you probably want to tweak
          this collapsePattern to your situation.
        */
⋮----
/* Options to tweak the appearance of your graph.See
           https://github.com/sverweij/dependency-cruiser/blob/main/doc/options-reference.md#reporteroptions
           for details and some examples. If you don't specify a theme
           for 'archi' dependency-cruiser will use the one specified in the
           dot section (see above), if any, and otherwise use the default one.
         */
⋮----
// generated: dependency-cruiser@13.1.1 on 2023-07-19T09:14:30.883Z
</file>

<file path=".dockerignore">
node_modules/
yarn.lock

.env
.env.*

# pnpm-lock.yaml
Dockerfile
Dockerfile.*
.git
deployment.*.yaml
docker-compose.*.yaml

00-namespace.yaml
01-cert-secret.yaml
02-cert-issuer.yaml
03-certificate.yaml
04-ingress.yaml
05-podman-fuse-device-plugin.yaml
gcloud-secret.yaml
KUBECONFIG
# diginext
dx.json

# dev api
thunder-tests/
thunder-tests/**

# ignore directories which already mounted volume "storage"
storage/
# public/
docs/
# dist/
</file>

<file path=".env.example">
TZ=Asia/Ho_Chi_Minh
PORT=6969
# development, production, test, test_ci 
NODE_ENV=development

# -------- FOR CLI --------

# LOCAL TESTING - Comment this line when release production
DEV_MODE=true
BASE_URL=http://localhost:6969

# this will be skip when we start build server
# CLI_MODE=client

# -------- FOR BUILD SERVER --------

# Container engine: "docker" or "podman"
BUILDER=podman 
JWT_SECRET=somerandom64digitsstringlength
JWT_REFRESH_SECRET=somerandom64digitsstringlength

# Diginext URL & API
DX_SITE_URL=http://localhost:4000
DX_API_URL=http://localhost:4000/api

# GOOGLE SSO
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# MONGODB CONNECTION STRING
DB_NAME=diginext
DB_URI=

# Share resource credentials (secrets, passwords, keys,...) accross workspaces? - Default: "true"
# If "false" -> Only the server can read cloud resource's credentials, others (CLI & API) won't, even Workspace Administrators or Moderators.
# SHARE_RESOURCE_CREDENTIAL="false"

# ------------------------------------
# INITIAL CLUSTER (IF ANY)
# ------------------------------------

INITIAL_CLUSTER_NAME=
INITIAL_CLUSTER_KUBECONFIG=

# ------------------------------------
# INITIAL SSH KEY (IF ANY)
# ------------------------------------
ID_RSA=
</file>

<file path=".eslintignore">
**/dist/**
**/node_modules/**
*.js
.yarn
**/templates/**
**/storage/**
storage/**
__tests__/**/*

podman/**/*
**/podman/**
**/*.conf
podman/
**/podman/**
</file>

<file path=".eslintrc">
{
	"env": {
		"browser": true,
		"es2021": true,
		"node": true
	},
	"parserOptions": {
		"parser": "@typescript-eslint/parser",
		"project": "./tsconfig.json",
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 13,
		"sourceType": "module"
	},
	"parser": "@typescript-eslint/parser",
	"plugins": ["@typescript-eslint", "unused-imports", "simple-import-sort"],
	"extends": ["airbnb-typescript", "plugin:prettier/recommended", "plugin:import/recommended", "plugin:import/typescript"],
	"rules": {
		"react/destructuring-assignment": "off", // Vscode doesn't support automatically destructuring, it's a pain to add a new variable
		"react/require-default-props": "off", // Allow non-defined react props as undefined
		"react-hooks/exhaustive-deps": "off",
		"react/jsx-props-no-spreading": "off", // _app.tsx uses spread operator and also, react-hook-form
		"react/jsx-filename-extension": "off", //
		"react/no-unescaped-entities": "off",
		"react/display-name": "off",
		"@typescript-eslint/naming-convention": "off",
		"@typescript-eslint/comma-dangle": "off", // Avoid conflict rule between Eslint and Prettier
		"@typescript-eslint/consistent-type-imports": "error", // Ensure `import type` is used when it's necessary
		"import/prefer-default-export": "off", // Named export is easier to refactor automatically
		"simple-import-sort/imports": "error", // Import configuration for `eslint-plugin-simple-import-sort`
		"simple-import-sort/exports": "error", // Export configuration for `eslint-plugin-simple-import-sort`
		"@typescript-eslint/no-unused-vars": "off",
		"unused-imports/no-unused-imports": "error",
		// "unused-imports/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
		"unused-imports/no-unused-vars": "off",
		"import/extensions": ["error", "always", { "": "never", "ts": "never", "js": "never" }], // This is problem about airbnb -> override with this
		"import/no-unresolved": "off",
		"import/no-named-as-default-member": "off",
		"import/no-named-as-default": "off",
		"import/no-extraneous-dependencies": ["error", { "devDependencies": true }]
	}
}
</file>

<file path=".gitignore">
# node modules & cache
.idea/

# package,json
package-old.json
package-new.json
yarn.lock
package-lock.json
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.yarn
.yarnrc
.yarnrc.yaml
.yarnrc.yml
# pnpm-lock.yaml
.pnpm-store/
/.pnpm-store

# dependencies
node_modules/
optimizer/node_modules/
optimizer/yarn.lock
/.pnp
.pnp.js

# testing
/coverage

# build
/out/
out/
.next
.next/
dist/
fw/
.fw/

# misc / macos
.DS_Store

# IDEs and code editors
/.idea
.project
.classpath
.c9/
*.launch
.settings/
*.sublime-workspace
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# Storage
storage
./storage
storage/**/*
!storage/containers
!./storage/containers
!./storage/containers/**/*
!storage/note.txt

# public/uploads
./redis_data/*
redis_data/
public/logs
public/upload
public/upload/*
public/swagger.json
redis_data/
# /public.__image-compressed__
!public/assets/images/nextjs-starter-banner.png

# credentials
keys
# diginext-new.json
# dx.json
KUBECONFIG

# local env files
.env.*
!.env.example

# docker
!templates/deployment.yaml
docker-compose*.yaml
!docker-compose.example.yaml
!templates/docker-compose*.yaml
Dockerfile.podman

# kubernetes
deployment.yaml
deployment-*.yaml
deployment.*.yaml

00-namespace.yaml
01-cert-secret*.yaml
02-cert-issuer*.yaml
03-certificate.yaml
04-ingress.yaml
05-podman-fuse-device-plugin.yaml
gcloud-secret.yaml

# diginext
dx.json

# exclude examples
!*.example.yaml

# dev api
thunder-tests/
thunder-tests/**

.temp
dependency-graph.svg
</file>

<file path=".npmignore">
keys/
src/
redis_data/
shells/
scripts/
thunder-tests/
test/
.husky
gcloud_access_token.txt
.env
.env.dev
.env.client
</file>

<file path=".prettierignore">
# Ignore artifacts:
dist
coverage
thunder-tests
redis_data
storage
**/storage/**

.next
**/.next
node_modules
**/node_modules
.yarn
.out
**/.out
.turbo

**/.git

*.js

*.yaml
**/*.yaml
*.yml
**/*.yml
**/templates/**
KUBECONFIG

# __tests__/**
# **/__tests__/**

podman/**/*
**/podman/**
*.conf
podman/
</file>

<file path=".prettierrc.json">
{
	"trailingComma": "es5",
	"tabWidth": 4,
	"useTabs": true,
	"semi": true,
	"singleQuote": false,
	"endOfLine": "lf",
	"printWidth": 150
}
</file>

<file path="CODE_OF_CONDUCT.md">
# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment include:

- Using welcoming and inclusive language
- Being respectful of differing viewpoints and experiences
- Gracefully accepting constructive criticism
- Focusing on what is best for the community
- Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

- The use of sexualized language or imagery and unwelcome sexual attention or advances
- Trolling, insulting/derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or electronic address, without explicit permission
- Other conduct which could reasonably be considered inappropriate in a professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [dev@dxup.dev](mailto:dev@dxup.dev) The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version].

[homepage]: http://contributor-covenant.org
[version]: http://contributor-covenant.org/version/1/4/
</file>

<file path="CONTRIBUTING.md">
The following is a set of guidelines for contributing to Diginext. Please spend several minutes reading these guidelines before you create an issue or pull request.

## Code of Conduct

We have adopted a [Code of Conduct](CODE_OF_CONDUCT.md) that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.

## Open Development

All work on Diginext happens directly on [GitHub](https://github.com/digitopvn/diginext). Both core team members and external contributors send pull requests which go through the same review process.

Wanna give me a hand? Get started here: [DEVELOPER.md](DEVELOPER.md)

## Branch Organization

According to our [release schedule](changelog#release-schedule), we maintain two branches, `main` and `feature`. If you send a bugfix pull request, please do it against the `main` branch, if it's a feature pull request, please do it against the `feature` branch.

## Bugs

We are using [GitHub Issues](https://github.com/digitopvn/diginext/issues) for bug tracking. The best way to get your bug fixed is by providing reproduction steps with this [template](https://github.com/digitopvn/diginext/issues/new?assignees=&labels=&template=bug_report.md&title=%5BBUG%5D).

Before you report a bug, please make sure you've searched existing issues, and read our [FAQ](FAQ.md).

## Proposing a Change

If you intend to change the public API or introduce new feature, we also recommend you use our [issue helper](https://github.com/digitopvn/diginext/issues/new?assignees=&labels=&template=propose_change.md&title=) to create a proposal issue.

## Your First Pull Request

Working on your first Pull Request? You can learn how from this free video series:

[How to Contribute to an Open Source Project on GitHub](https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github)

To help you get your feet wet and get you familiar with our contribution process, we have a list of [good first issues](https://github.com/digitopvn/diginext/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22) that contain bugs or small features that have a relatively limited scope. This is a great place to get started.

If you decide to fix an issue, please be sure to check the comment thread in case somebody is already working on a fix. If nobody is working on it at the moment, please leave a comment stating that you intend to work on it so other people don't accidentally duplicate your effort.

If somebody claims an issue but doesn't follow up for more than two weeks, it's fine to take over it but you should still leave a comment.

## Sending a Pull Request

The core team is monitoring for pull requests. We will review your pull request and either merge it, request changes to it, or close it with an explanation.

**Before submitting a pull request**, please make sure the following is done:

1. Fork the repository and create your branch from the [correct branch](#branch-organization).
1. Run `npm install` in the repository root.
   > For Windows 10 development environment, if you run into error `gyp err! find vs msvs_version not set from command line or npm config`, please install [the latest Python v3](https://www.python.org/downloads/) and **Desktop development with C++** through [Visual Studio Installer](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2019#step-3---install-the-visual-studio-installer) before running `npm install`
1. If you've fixed a bug or added code that should be tested, add tests!
1. Ensure the test suite passes (npm run test). Tip: `npm test -- --watch TestName` is helpful in development.
1. Run `npm test -- -u` to update the [jest snapshots](http://facebook.github.io/jest/docs/en/snapshot-testing.html#snapshot-testing-with-jest) and commit these changes as well (if there are any updates).
1. Ensure the UI change passes `npm run test-image`，Run `npm run test-image -- -u` to update UI snapshots and commit these changes as well (if there are any updates), **UI test base on [Docker](https://docs.docker.com/get-docker/), need download the corresponding installation according to the platform**
1. Make sure your code lints (npm run lint). Tip: Lint runs automatically when you `git commit` (Use [Git Hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)).

Sending a Pull Request to [react-component](https://github.com/react-component/):

If it's a bugfix pull request, after it's merged, the core team will release a patch release for that component as soon as possible, then you only need to reinstall Diginext (DX) in your project to get the latest patch release. If it's a feature pull request, after it's merged, the core team will release a minor release, then you need raise another pull request to [Diginext](https://github.com/digitopvn/diginext/) to update dependencies, document and TypeScript interfaces (if needed).

## Development Workflow

After cloning `dx`, run `npm install` to fetch its dependencies. Then, you can run several commands:

1. `npm start` runs Diginext website locally.
1. `npm run lint` checks the code style.
2. `npm test` runs the complete test suite.

## Development Tools

- Docker: https://www.docker.com/

## Being a collaborator

If you are an active contributor and are willing to work with Diginext Team in our opensource workflow, you can [apply to be a outside collaborator](https://github.com/digitopvn/diginext/wiki/Collaborators#how-to-apply-for-being-a-collaborator).

---

**Working on your first Pull Request?** You can learn how from this *free* series [How to Contribute to an Open Source Project on GitHub](https://kcd.im/pull-request)
</file>

<file path="deployment.docker.example.yaml">
# SERVICE CONFIGURATION
apiVersion: v1
kind: Service
metadata:
  name: diginext-svc
  namespace: diginext
  labels:
    app: diginext
spec:
  # type: NodePort
  ports:
    - port: 6969
  selector:
    app: diginext
---
# POD DEPLOYMENT CONFIGURATION
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diginext
  namespace: diginext
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: diginext
  template:
    metadata:
      labels:
        app: diginext
    spec:
      containers:
        - name: diginext
          image: digitop/diginext:latest
          ports:
            - containerPort: 6969
          securityContext:
            # this is required for Docker but very dangerous !
            privileged: true
            runAsUser: 0
          env:
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: PORT
              value: "6969"
            - name: NODE_ENV
              value: production
            - name: CLI_MODE
              value: server
            - name: DEV_MODE
              value: "false"
            - name: BASE_URL
              value: https://api.dxup.dev
            - name: DB_URI
              value: # mongodb://... insert here
            - name: JWT_SECRET
              value: # insert here
            - name: JWT_EXPIRE_TIME
              value: 48h
            - name: GOOGLE_CLIENT_ID
              value: # insert here
            - name: GOOGLE_CLIENT_SECRET
              value: # insert here
            - name: BUILDER
              value: docker
          volumeMounts:
            # this is required for Docker but very dangerous !
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: storage
              mountPath: /var/app/storage
            # - name: home
            #   mountPath: /root
      volumes:
        # this is required for Docker but very dangerous !
        - name: docker-sock
          hostPath:
            path: "/var/run/docker.sock"
        - name: storage
          hostPath:
            path: /home/dev/diginext/storage
        - name: home
          hostPath:
            path: /home/dev/diginext/storage/home
</file>

<file path="deployment.podman.example.yaml">
# SERVICE CONFIGURATION
apiVersion: v1
kind: Service
metadata:
  name: diginext-svc
  namespace: diginext
  labels:
    app: diginext
spec:
  ports:
    - port: 6969
  selector:
    app: diginext
---
# POD DEPLOYMENT CONFIGURATION
apiVersion: apps/v1
kind: Deployment
metadata:
  name: diginext
  namespace: diginext
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: diginext
  template:
    metadata:
      labels:
        app: diginext
    spec:
      containers:
        - name: diginext
          image: digitop/diginext:latest
          ports:
            - containerPort: 6969
          # Security for PODMAN to run in rootless mode
          securityContext:
            priviledged: true
            runAsUser: 1000
            runAsGroup: 1000
          # Required for PODMAN to run (kubectl apply -f 05-podman-fuse-device-plugin.yaml)
          resources:
            limits:
              github.com/fuse: 1
          env:
            - name: TZ
              value: Asia/Ho_Chi_Minh
            - name: PORT
              value: "6969"
            - name: NODE_ENV
              value: production
            - name: CLI_MODE
              value: server
            - name: DEV_MODE
              value: "false"
            - name: BASE_URL
              value: https://api.dxup.dev
            - name: DB_URI
              value: # mongodb://...
            - name: JWT_SECRET
              value: # JWT_SECRET
            - name: JWT_EXPIRE_TIME
              value: 48h
            - name: GOOGLE_CLIENT_ID
              value: # GOOGLE_CLIENT_ID
            - name: GOOGLE_CLIENT_SECRET
              value: # GOOGLE_CLIENT_SECRET
            - name: BUILDER
              value: podman
          volumeMounts:
            - name: storage
              mountPath: /usr/app/storage
            - name: home
              mountPath: /usr/app
            # PODMAN
            # - name: podman-local
            #   mountPath: /home/podman/.local/share/containers
      volumes:
        # - name: podman-local
        #   hostPath:
        #     path: /home/dev/.local/share/containers
        - name: storage
          hostPath:
            path: /home/dev/diginext/storage
        - name: home
          hostPath:
            path: /home/dev/diginext/storage/home
---
# persistent volume
</file>

<file path="DEVELOPER.md">
# Development Workflow

This document describes how to set up your development environment.

## With Docker Compose

The fastest way to start developing Diginext is using Docker Compose, since mostly everything (like developer tools) is pre-installed and pre-configurated inside the container images.

You can use this example `docker-compose.dev.example.yaml`

```yaml
version: "3"
networks:
    bridge:
        driver: bridge
volumes:
		mongo:
    home:
    node:
services:
    mongo:
        ports:
            - '27017:27017'
        container_name: mongo
        restart: always
        logging:
            driver: none
        networks:
            - bridge
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
        image: mongo
        volumes:
            - mongo:/data/db
    diginext:
        container_name: diginext
        build:
            context: .
            dockerfile: Dockerfile.dev
        working_dir: /usr/app/
        ports:
            - "6969:6969"
        networks:
            - bridge
        entrypoint: /usr/app/scripts/startup-dev.sh
        volumes:
            # docker.sock -> comment this out if you're using PODMAN
            - "/var/run/docker.sock:/var/run/docker.sock"
            # Persist NODE_MODULES & HOME DIR with named Docker volume
            - node:/usr/app/node_modules/
            - home:/home/app/
            # Persist data with host path -> HOST:CONTAINER
            - ./src:/usr/app/src
            - ./public:/usr/app/public
            - ./storage:/var/app/storage
            - ./scripts:/usr/app/scripts
        environment:
            - NODE_ENV=development
            - PORT=6969
            - BASE_URL=http://localhost:6969
            - DB_URI=mongodb://root:diginext@mongo:27017/diginext?authSource=admin
            - CLI_MODE=server
            - JWT_SECRET=
            - JWT_EXPIRE_TIME=48h
            - GOOGLE_CLIENT_ID=
            - GOOGLE_CLIENT_SECRET=
```

Start your development environment with: `docker compose -f docker-compose.dev.yaml up --attach diginext`

Check out your server endpoint at: [http://localhost:6969](http://localhost:6969) 

## Manual

Developing inside a Docker Container environment sometime consumes a lot of your computer’s resources, or you just want to start from scratch. There you go:

> *I use `pnpm` instead of `npm` because I find it a bit faster. Therefore, I recommend that you also use `pnpm`, especially since I have set up some scripts in `package.json` that utilize `pnpm`.*
> 

### Diginext Server & CLI

After cloning `[digitopvn/diginext](https://github.com/digitopvn/diginext)`, run `npm install` to fetch its dependencies. Then, you can run several commands:

1. `npm run dev` runs Diginext Server locally, the Dashboard UI should be: [http://localhost:6969](http://localhost:6969) 
2. `npm run lint` checks the code style.
3. `npm run build` to build the TypeScript to JavaScript at `dist/` and link the current directory to global `node_modules`, so you can test your CLI commands locally.

#### Development Tools

- Git
- Node.js (16+)
- Docker
    - Docker BuildX
- Podman
- OpenSSH
- kubectl
    - google-cloud-sdk-gke-gcloud-auth-plugin
- helm
- gcloud
- doctl

### Workspace Dashboard

The repository of workspace dashboard is located at `[digitopvn/diginext-admin](https://github.com/digitopvn/diginext-admin)`, clone it to your computer and place at the same level of the Diginext Server source code. 

For example:

```bash
- **diginext/**
    - src/
    - dist/
    - …
- **diginext-admin/**
    - src/
    - pages/
    - …
```

Run `npm install` and `npm run dev` to start development, your dev link should be [http://localhost:3000](http://localhost:3000) 

1. `npm run dev` runs Workspace Dashboard website locally.
2. `npm run lint` checks the code style.
3. `npm run export-to-cli` to export Workspace Dashboard to static HTML files and copy to `../diginext/public` directory

## Initial Setup

When you spin up a new development environment, there will be a couple things you should be aware of:

### Authenticate with your Git Providers

Assuming you are familiar with Git workflow and understand SSH keys, if not, [read here](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/about-ssh). To pull and push to the Git repository, the keys on your machine have to match those in the Git provider's settings. The same applies to Diginext Server. In order to pull your git repositories for building container images, Diginext Server requires access to your repositories via SSH keys.

#### 1. Using Diginext Server generated key

(TBU)

#### 2. Using your machine’s key

(TBU)

#### 3. Using custom private key & public key

(TBU)

## Running Tests Locally

It would be greatly appreciated if PRs that change code come with appropriate tests.

To create a test for a specific issue opened on github, create a file: `test/github-issues/<num>/issue-<num>.ts` where
`<num>` is the corresponding github issue. For example, if you were creating a PR to fix github issue #363, you'd
create `test/github-issues/363/issue-363.ts`.

Most tests will benefit from using this template as a starting point:

```ts
import "reflect-metadata";
import { createTestingConnections, closeTestingConnections, reloadTestingDatabases } from "../../utils/test-utils";
import { DataSource } from "../../../src/data-source/DataSource"
import { expect } from "chai";

describe("github issues > #<issue number> <issue title>", () => {

    let dataSources: DataSource[];
    before(async () => dataSources = await createTestingConnections({
        entities: [__dirname + "/entity/*{.js,.ts}"],
        schemaCreate: true,
        dropSchema: true,
    }));
    beforeEach(() => reloadTestingDatabases(dataSources));
    after(() => closeTestingConnections(dataSources));

    it("should <put a detailed description of what it should do here>", () => Promise.all(dataSources.map(async dataSource => {

       // tests go here

    })));

    // you can add additional tests if needed

});
```

To run the tests:

```shell
npm test
```

You should execute test suites before submitting a PR to github.
All the tests are executed on our Continuous Integration infrastructure and a PR could only be merged once the tests pass.

**Executing only some tests**: When you are creating tests to some specific code, you may want only execute the tests that you're creating, so you waste less time to verify your code. To do this, you can temporarily modify your tests definitions adding `.only` *mocha* commands **(describe, it)**. Example:

```
describe.only('your describe test', ....)
```

>**Hint:** you can use the `--grep` flag to pass a Regex to `gulp-mocha`. Only the tests have have `describe`/`it`
>statements that match the Regex will be run. For example:
>
>```shell
>npm test -- --grep="github issues > #363"
>```
>
>This is useful when trying to get a specific test or subset of tests to pass.

### Faster developer cycle for editing code and running tests

The `npm test` script works by deleting built TypeScript code, rebuilding the codebase, and then running tests. This can take a long time.

Instead, for a quicker feedback cycle, you can run `npm run compile -- --watch` to make a fresh build and instruct TypeScript to watch for changes and only compile what code you've changed.

Once TypeScript finishes compiling your changes, you can run `npm run test-fast` (instead of `test`), to trigger a test without causing a full recompile, which allows you to edit and check your changes much faster.
</file>

<file path="diginext.code-workspace">
{
	"folders": [
		{
			"path": "."
		}
	],
	"settings": {
		"yaml.schemas": {
			"file:///Users/duynguyen/.vscode/extensions/atlassian.atlascode-2.10.12/resources/schemas/pipelines-schema.json": "bitbucket-pipelines.yml",
			"https://json.schemastore.org/github-workflow.json": [
				"file:///Users/duynguyen/www/diginext/scripts/github-actions/deploy.yml",
				"file:///Users/duynguyen/www/diginext/scripts/github-actions/docker-build-push.yml"
			]
		}
	}
}
</file>

<file path="docker-compose.dev.example.yaml">
version: "3"
networks:
    bridge:
        driver: bridge
volumes:
    home:
    node:
services:
    mongo:
        ports:
            - '27017:27017'
        container_name: mongo
        restart: always
        logging:
            driver: none
        networks:
            - bridge
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
        image: mongo
        volumes:
            - ./storage/mongo:/data/db
    diginext:
        container_name: diginext
        build:
            context: .
            dockerfile: Dockerfile.dev
        working_dir: /usr/app/
        ports:
            - "6969:6969"
        networks:
            - bridge
        entrypoint: /usr/app/scripts/startup-dev.sh
        volumes:
            # docker.sock -> comment this out if you're using PODMAN
            - "/var/run/docker.sock:/var/run/docker.sock"
            # Persist NODE_MODULES & HOME DIR with anomyous volumes
            # - /usr/app/node_modules/
            # - /home/app/
            # Persist NODE_MODULES & HOME DIR with named Docker volume
            - node:/usr/app/node_modules/
            - home:/home/app/
            # Persist data with host path -> HOST:CONTAINER
            - ./src:/usr/app/src
            - ./public:/usr/app/public
            - ./storage:/var/app/storage
            - ./scripts:/usr/app/scripts
        environment:
            - NODE_ENV=development
            - PORT=6969
            - BASE_URL=http://localhost:6969
            - DB_URI=mongodb://root:diginext@mongo:27017/diginext?authSource=admin
            - CLI_MODE=server
            - JWT_SECRET= # <--- insert here
            - JWT_EXPIRE_TIME=48h
            - GOOGLE_CLIENT_ID= # <--- insert here
            - GOOGLE_CLIENT_SECRET= # <--- insert here
</file>

<file path="docker-compose.example.yaml">
version: "3"
networks:
    bridge:
        driver: bridge
volumes:
    mongo:
        name: mongo
    home:
    node:
services:
    mongo:
        ports:
            - '27017'
        container_name: mongo
        restart: always
        logging:
            options:
                max-size: 1g
        networks:
            - bridge
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
        image: mongo
        volumes:
            - mongo:/data/db
    diginext:
        image: "digitop/diginext:latest"
        container_name: diginext
        working_dir: /usr/app/
        ports:
            - "6969:6969"
        restart: unless-stopped
        depends_on:
            - mongo
        networks:
            - bridge
        privileged: true
        user: root
        entrypoint: /usr/app/scripts/startup.sh
        volumes:
            # DOCKER SOCK
            - "/var/run/docker.sock:/var/run/docker.sock"
            # CACHE NODE_MODULES & HOME DIR
            - node:/usr/app/node_modules/
            - home:/home/app/
            # HOST:CONTAINER
            - ./storage:/var/app/storage
        environment:
            - NODE_ENV=production
            - PORT=6969
            - BASE_URL=http://localhost:6969
            - DB_URI=mongodb://root:diginext@mongo:27017/diginext?authSource=admin
            - CLI_MODE=server
            - BUILDER=docker
            - JWT_SECRET= # <--- insert here
            - JWT_EXPIRE_TIME=48h
            - GOOGLE_CLIENT_ID= # <--- insert here
            - GOOGLE_CLIENT_SECRET= # <--- insert here
</file>

<file path="docker-compose.mongo.example.yaml">
# MONGODB STANDALONE VERSION
version: "3"
volumes:
    mongo:
services:
    mongo:
        image: mongo
        container_name: mongo
        ports:
            - '27017:27017'
        restart: always
        logging:
            options:
                max-size: 1g
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
        volumes:
            - mongo:/data/db
</file>

<file path="docker-compose.mongors.example.yaml">
# =======================
# ----- INSTRUCTION -----
# =======================

# 1. Generate one with: "openssl rand -base64 756 > storage/replica.key"
# 2. Start the container by: "docker compose -f docker-compose.mongors.yaml up -d"
# 3. After the container run the first time (AND ONLY THE FIRST TIME), exec in the container and run these commands:
#   $ docker exec -it mongo bash
#   $ mongosh mongodb://root:diginext@localhost:27017
#   $ rs.initiate({_id: 'rs0', members: [{_id: 0, host: 'localhost:27017'}]})
#   Should receive: "{ ok: 1 }"
# 4. Check the replica set status again:
#   $ rs.status()
# If everything's ok, you are good to go!

# Connection URI: mongodb://root:diginext@localhost:27017/?authSource=admin&replicaSet=rs0

version: '3.8'
volumes:
    home:
    node:
services:
    mongo:
        image: mongo
        container_name: mongo
        expose:
            - 27017
        ports:
            - '27017:27017'
        restart: always
        environment:
            - MONGO_USERNAME
            - MONGO_PASSWORD
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
        volumes:
            - ./storage/mongors:/data/db
            - ./storage/replica.key:/data/replica.key
        command: mongod --replSet rs0 --keyFile /data/replica.key
</file>

<file path="docker-compose.podman.dev.example.yaml">
version: "3"
networks:
    bridge:
        driver: bridge
services:
    # build server
    diginext:
        container_name: diginext
        build:
            context: .
            dockerfile: Dockerfile.dev
        working_dir: /usr/app/
        ports:
            - "6969:6969"
        networks:
            - bridge
        # ----------- [START] FOR PODMAN TO RUN INSIDE DOCKER WITHOUT PRIVILEDGE MODE ----------
        devices:
            - "/dev/fuse"
        security_opt:
            - "seccomp=unconfined"
            - "label=disable"
        cap_add:
            - sys_admin
            - mknod
        # ----------- [END] FOR PODMAN TO RUN INSIDE DOCKER WITHOUT PRIVILEDGE MODE ----------
        entrypoint: /usr/app/scripts/startup-dev.sh
        volumes:
            # PERSIST NODE_MODULES & HOME DIR
            - /usr/app/node_modules/
            - /home/app/
            # HOST:CONTAINER
            - ./dist:/usr/app/dist
            - ./templates:/usr/app/templates
            - ./public:/usr/app/public
            - ./storage:/var/app/storage
        environment:
            - NODE_ENV=development
            - PORT=6969
            - BASE_URL=http://localhost:6969
            - DB_URI=mongodb://root:diginext@mongo:27017/diginext?authSource=admin
            - CLI_MODE=server
            - BUILDER=podman # <---- select PODMAN as a main builder here
            - JWT_SECRET= # <--- insert here
            - JWT_EXPIRE_TIME=48h
            - GOOGLE_CLIENT_ID= # <--- insert here
            - GOOGLE_CLIENT_SECRET= # <--- insert here
</file>

<file path="docker-compose.podman.example.yaml">
version: "3"
networks:
    bridge:
        driver: bridge
volumes:
    mongo:
        external: true
        name: mongo
services:
    # mongo database
    mongo:
        image: mongo
        container_name: mongo
        restart: always
        ports:
            - '27017'
        networks:
            - bridge
        logging:
            options:
                max-size: 1g
        volumes:
            - mongo:/data/db
        environment:
            - MONGO_INITDB_ROOT_USERNAME=root
            - MONGO_INITDB_ROOT_PASSWORD=diginext
    # build server
    diginext:
        image: digitop/diginext:beta
        container_name: diginext
        working_dir: /usr/app/
        ports:
            - "6969:6969"
        restart: unless-stopped
        networks:
            - bridge
        depends_on:
            - mongo
        # ----------- [START] FOR PODMAN TO RUN INSIDE DOCKER WITHOUT PRIVILEDGE MODE ----------
        devices:
            - "/dev/fuse"
        security_opt:
            - "seccomp=unconfined"
            - "label=disable"
        cap_add:
            - sys_admin
            - mknod
        # ----------- [END] FOR PODMAN TO RUN INSIDE DOCKER WITHOUT PRIVILEDGE MODE ----------
        volumes:
            # PERSIST NODE_MODULES & HOME DIR
            - /usr/app/node_modules/
            - /home/app/
            # HOST:CONTAINER
            - ./storage:/var/app/storage
        environment:
            - NODE_ENV=production
            - PORT=6969
            - BASE_URL=http://localhost:6969
            - DB_URI=mongodb://root:diginext@mongo:27017/diginext?authSource=admin
            - CLI_MODE=server
            - JWT_SECRET= # <--- insert here
            - JWT_EXPIRE_TIME=48h
            - GOOGLE_CLIENT_ID= # <--- insert here
            - GOOGLE_CLIENT_SECRET= # <--- insert here
            - BUILDER=podman # <---- select PODMAN as a main builder here
</file>

<file path="Dockerfile">
# Use Debian as the base image
# FROM digitop/diginext-base:5
FROM digitop/diginext-base:6

# Additional extensions for edit file
RUN apt-get install -y vim iputils-ping
RUN alias ll="ls -al"

# Set user and group
ARG user=app
ARG group=app
ARG uid=1000
ARG gid=1000
RUN groupadd -g ${gid} ${group} && \
  useradd -u ${uid} -g ${group} -s /bin/sh -m ${user}

# Set working directory
WORKDIR /usr/app

# Copy package.json and package-lock.json before other files
COPY package*.json ./

# Install dependencies
RUN npm i --production

# Copy scripts
COPY ./scripts ./scripts
RUN chmod -R +x /usr/app/scripts

# Permissions
RUN mkdir -p /home/${user}/.config && \
  mkdir -p /home/${user}/.local && \
  chown -R ${uid}:${gid} /home/${user} && \
  chmod -R ug+rwx /home/${user}

# podman storage directory 
RUN mkdir -p /run/user/1000 && chmod 700 /run/user/1000 
RUN chown -R ${uid}:${gid} /run/user/1000 
RUN chmod -R ug+rwx /run/user/1000

# Configuration files for PODMAN to resolve "docker.io" registry shortname alias
COPY ./podman/containers/registries.conf /etc/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/share/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/.config/containers/registries.conf

# PODMAN's image storage
COPY ./podman/containers/storage.conf /home/${user}/share/containers/storage.conf
COPY ./podman/containers/storage.conf /home/${user}/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /root/.config/containers/storage.conf

# PODMAN's container conf
COPY ./podman/containers/containers.conf /etc/containers/containers.conf

RUN chmod -R ug+rwx /home/${user}/.config/containers/storage.conf
RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage
RUN chmod -R ug+rwx /var/tmp/${user}/containers/storage

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage

RUN touch /etc/sub{u,g}id
RUN chmod 755 /etc/subuid
RUN chmod 755 /etc/subgid

# Copy necessary files
COPY ./dist ./dist
COPY ./public ./public
COPY ./templates ./templates

RUN chown -R ${uid}:${gid} /usr/app && \
  chmod -R ug+rwx /usr/app

# GCloud kubectl auth plugin
ENV USE_GKE_GCLOUD_AUTH_PLUGIN=True

# Puppeteer
ENV CHROMIUM_PATH /usr/bin/chromium
RUN chmod +x /usr/bin/chromium

# Set user
ENV USER=${user}
USER ${uid}:${gid}

# Set the entrypoint
ENTRYPOINT ["/usr/app/scripts/startup.sh"]
</file>

<file path="Dockerfile.base">
# Use Debian as the base image
FROM debian:latest

# Switch to "root" user
USER root

# Install build dependencies
RUN apt-get update && apt-get install -y curl wget git sed jq openssh-client

# Upgrade Node.js to version 16.x
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
RUN apt-get install -y nodejs

# Install GCLOUD CLI / SDK
RUN apt-get install -y apt-transport-https ca-certificates gnupg lsb-release && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update && apt-get install -y google-cloud-sdk

# Install Kubernetes Gcloud Authentication plugin
RUN apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

# Install "chromium" for Puppeteer
ENV CHROMIUM_PATH /usr/bin/chromium
RUN apt-get update && \
    apt-get install -y chromium && \
    rm -rf /var/lib/apt/lists/*

# Install KUBECTL
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    chmod +x kubectl && \
    mv ./kubectl /usr/bin/kubectl

# Install Helm
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh

# Install Docker
RUN apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose

# Install Podman
RUN apt-get install -y podman iptables xfsprogs vim iputils-ping

# Install Digital Ocean CLI
RUN cd ~ && \
    wget https://github.com/digitalocean/doctl/releases/download/v1.78.0/doctl-1.78.0-linux-amd64.tar.gz && \
    tar xf doctl-1.78.0-linux-amd64.tar.gz && \
    mv ~/doctl /usr/local/bin/doctl

# Install MongoDB client tools
RUN curl -fsSL https://pgp.mongodb.com/server-6.0.asc | gpg -o /usr/share/keyrings/mongodb-server-6.0.gpg --dearmor \
    && echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-6.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list \
    && apt-get update && apt-get install -y mongodb-org

# Install MySQL client tools
RUN apt-get update && apt-get install -y default-mysql-client

# Install PostgreSQL client tools
# Add the repository for PostgreSQL
RUN apt-get update && apt-get install -y gnupg2 && \
    sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list' && \
    apt-key adv --fetch-keys https://www.postgresql.org/media/keys/ACCC4CF8.asc
RUN apt-get update && apt-get install -y postgresql-client
RUN apt-get update && \
    apt-get install -y postgresql-client-14 \
    postgresql-client-15 \
    postgresql-client-16

# Clean up the apt cache -> smaller docker image size
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /usr/app

# Install dependencies
RUN npm install -g pnpm

# Copy docker buildx
COPY --from=docker/buildx-bin /buildx /usr/local/bin/docker-buildx
# Set permissions for the binary
RUN chmod +x /usr/local/bin/docker-buildx

# plugin to set environment variable
COPY ./scripts/set_env /usr/bin/set_env
RUN chmod +x /usr/bin/set_env

# podman storage directory 
RUN mkdir -p /run/user/1000 && chmod 700 /run/user/1000 
RUN chown -R ${uid}:${gid} /run/user/1000 
RUN chmod -R ug+rwx /run/user/1000

ENV user=app

# Configuration files for PODMAN to resolve "docker.io" registry shortname alias
COPY ./podman/containers/registries.conf /etc/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/share/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/.config/containers/registries.conf

# PODMAN's image storage
COPY ./podman/containers/storage.conf /home/${user}/share/containers/storage.conf
COPY ./podman/containers/storage.conf /home/${user}/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /root/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /etc/containers/storage.conf

# PODMAN's container conf
COPY ./podman/containers/containers.conf /etc/containers/containers.conf

RUN chmod -R ug+rwx /home/${user}/.config/containers/storage.conf
RUN mkdir -p /home/${user}/containers/storage
RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage
RUN chmod -R ug+rwx /var/tmp/${user}/containers/storage

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage

RUN touch /etc/sub{u,g}id
RUN chmod 755 /etc/subuid
RUN chmod 755 /etc/subgid

# end
</file>

<file path="Dockerfile.dev">
FROM debian:latest

# Switch to "root" user
# <--- Usually you won't be needed it - Depends on base image --->
USER root
# Enable password for "root" user
# RUN echo "root:pass" | chpasswd

# <-- Run privileged commands -->
# RUN apt install <packages>
# RUN apt <privileged command>

# Install all APT-GET packages from scratch...
# RUN apt-get clean
# RUN apt-get update -yq

# Git, kubectl & Open SSH
RUN apt-get update -yq \
  && apt-get install curl wget -yq \
  && apt-get install git sed jq openssh-client -yq

# Node.js & NPM
RUN curl -sL https://deb.nodesource.com/setup_16.x | bash \
  && apt-get update -yq \
  && apt-get install nodejs -yq

# Install GCLOUD CLI / SDK
RUN apt-get install apt-transport-https ca-certificates gnupg -yq \
  && echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
  && curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | tee /usr/share/keyrings/cloud.google.gpg \
  && apt-get update -yq \
  && apt-get install google-cloud-sdk -y

# Install KUBECTL
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" \
  && chmod +x kubectl \
  && mv ./kubectl /usr/bin/kubectl

# Kubernetes Gcloud Authentication plugin
RUN apt-get install google-cloud-sdk-gke-gcloud-auth-plugin

# Helm
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 \
  && chmod 700 get_helm.sh \
  && ./get_helm.sh

# Docker
RUN apt-get install lsb-release -yq \
  && mkdir -m 0755 -p /etc/apt/keyrings \
  && curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
  && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null \
  && apt-get update -yq \
  && apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -yq

# Docker Buildx
COPY ./binaries/buildx-v0.9.1.linux-amd64 .

RUN chmod a+x buildx-v0.9.1.linux-amd64 \
  && mkdir -p ~/.docker/cli-plugins \
  && mv buildx-v0.9.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx

# RUN wget https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-amd64 \
#     && chmod a+x buildx-v0.9.1.linux-amd64 \
#     && mkdir -p ~/.docker/cli-plugins \
#     && mv buildx-v0.9.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx

# Podman
RUN apt install fuse-overlayfs -yq
RUN apt-get -y install podman iptables

# Install Digital Ocean CLI
RUN cd ~ \
  && wget https://github.com/digitalocean/doctl/releases/download/v1.78.0/doctl-1.78.0-linux-amd64.tar.gz \
  && tar xf ~/doctl-1.78.0-linux-amd64.tar.gz \
  && mv ~/doctl /usr/local/bin

# Install PNPM (instead of YARN as the previous version)
# RUN npm install -g yarn
RUN npm install -g pnpm

# MongoDB Client Shell
RUN wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | apt-key add - \
  && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list \
  && apt-get update -yq \
  && apt-get install -y mongodb-mongosh

# FOR DEVELOPMENT ONLY
RUN apt-get install vim iputils-ping -yq

# CLEAN UP
RUN apt-get autoremove -y \
  && apt-get clean -y

# Set working directory
WORKDIR /usr/app

# Copy package.json and package-lock.json before other files
# Utilise Docker cache to save re-installing dependencies if unchanged
COPY ./package*.json ./

# Install dependencies
RUN pnpm i

# Copy neccessary files
# COPY ./dist ./dist
# COPY ./scripts ./scripts
# COPY ./public ./public
# COPY ./templates ./templates

# Copy all files
# COPY . .
# COPY ./.git ./.git
COPY ./src ./src
COPY ./dist ./dist
COPY ./__tests__ ./__tests__
COPY ./scripts ./scripts
COPY ./public ./public
COPY ./templates ./templates
COPY ./.husky ./.husky
COPY ./.babelrc.js \
  ./.eslintignore \
  ./.eslintrc \
  ./.gitignore \
  ./.npmignore \
  ./.prettierignore \
  ./.prettierrc.json \
  ./commitlint.config.js \
  ./lint-staged.config.js \
  ./jest.config.js \
  ./tsconfig.json \
  ./tsoa.json \
  ./

# Set user and group
ARG user=app
ARG group=app
ARG uid=1000
ARG gid=1000
RUN groupadd -g ${gid} ${group}
RUN useradd -u ${uid} -g ${group} -s /bin/sh -m ${user} 
# <--- the '-m' create a user home directory

# ----- HANDLING PERMISIONS ------

# Permissions of DOCKER BUILDX
RUN mkdir -p /home/${user}/.docker/cli-plugins && cp ~/.docker/cli-plugins/docker-buildx /home/${user}/.docker/cli-plugins/docker-buildx

# Startup scripts permission
RUN chmod -R +x /usr/${user}/scripts

# Podman permisions
RUN mkdir -p /home/${user}/.config
RUN mkdir -p /home/${user}/.local

# Make "app" user has rights to its home directory
RUN chown -R ${uid}:${gid} /home/${user}
RUN chmod -R ug+rwx /home/${user}

# Make "app" user has rights to "/usr/app" directory
RUN chown -R ${uid}:${gid} /usr/app
RUN chmod -R ug+rwx /usr/app

# podman storage directory
RUN mkdir -p /run/user/1000 && chmod 700 /run/user/1000
RUN chown -R ${uid}:${gid} /run/user/1000
RUN chmod -R ug+rwx /run/user/1000

COPY ./podman/containers/storage.conf /home/${user}/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /root/.config/containers/storage.conf
RUN chmod -R ug+rwx /home/${user}/.config/containers/storage.conf

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage
RUN chmod -R ug+rwx /var/tmp/${user}/containers/storage

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage

RUN touch /etc/sub{u,g}id
# RUN usermod --add-subuids 10000-75535 ${user}
# RUN usermod --add-subgids 10000-75535 ${user}
RUN chmod 755 /etc/subuid
RUN chmod 755 /etc/subgid

# [SECURITY] Switch to "app" user before starting container !!!
ENV USER=${user}
USER ${uid}:${gid}

# CMD [ "/bin/sh", "-c", "sleep infinity" ]
ENTRYPOINT [ "/usr/app/scripts/startup-dev.sh" ]
</file>

<file path="Dockerfile.prerelease">
# Use Debian as the base image
FROM digitop/diginext-base:5

# Set user and group
ARG user=app
ARG group=app
ARG uid=1000
ARG gid=1000
RUN groupadd -g ${gid} ${group} && \
  useradd -u ${uid} -g ${group} -s /bin/sh -m ${user}

# Puppeteer ENV configuration
ENV CHROMIUM_PATH /usr/bin/chromium

# Set working directory
WORKDIR /usr/app

# Copy package.json and package-lock.json before other files
COPY package*.json ./

# Install dependencies
RUN npm i --production

# Copy scripts
COPY ./scripts ./scripts
RUN chmod -R +x /usr/app/scripts

# Permissions
RUN mkdir -p /home/${user}/.config && \
  mkdir -p /home/${user}/.local && \
  chown -R ${uid}:${gid} /home/${user} && \
  chmod -R ug+rwx /home/${user}

# podman storage directory 
RUN mkdir -p /run/user/1000 && chmod 700 /run/user/1000 
RUN chown -R ${uid}:${gid} /run/user/1000 
RUN chmod -R ug+rwx /run/user/1000

# Configuration files for PODMAN to resolve "docker.io" registry shortname alias
COPY ./podman/containers/registries.conf /etc/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/share/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/.config/containers/registries.conf

# PODMAN's image storage
COPY ./podman/containers/storage.conf /home/${user}/share/containers/storage.conf
COPY ./podman/containers/storage.conf /home/${user}/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /root/.config/containers/storage.conf

# PODMAN's container conf
COPY ./podman/containers/containers.conf /etc/containers/containers.conf

RUN chmod -R ug+rwx /home/${user}/.config/containers/storage.conf
RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage
RUN chmod -R ug+rwx /var/tmp/${user}/containers/storage

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage

RUN touch /etc/sub{u,g}id
RUN chmod 755 /etc/subuid
RUN chmod 755 /etc/subgid

# Copy necessary files
COPY ./dist ./dist
COPY ./public ./public
COPY ./templates ./templates

RUN chown -R ${uid}:${gid} /usr/app && \
  chmod -R ug+rwx /usr/app

# Set user
ENV USER=${user}
USER ${uid}:${gid}

# Set the entrypoint
ENTRYPOINT ["/usr/app/scripts/startup.sh"]
</file>

<file path="FAQ.md">
Here are the frequently asked questions about **Diginext (DX)** and antd that you should look up before you ask in the community or create a new issue. We also maintain a [FAQ issues label](http://dxup.dev/faq) for common github issues.

---

## Can I use internal API which is not documented on the site?

NOT RECOMMEND. Internal API is not guaranteed to be compatible with future versions. It may be removed or changed in some versions. If you really need to use it, you should to make sure these API is still valid when upgrading to a new version or just lock version for usage.

## Why API request should be strict discussion?

We are cautious when adding APIs because some APIs may not be abstract enough to become historical debt. For example, when there is a need to change the way of interaction, these poor abstractions may cause breaking changes. To avoid such problems, we recommend that new features be implemented through HOCs first.

## How to avoid breaking change when update version?

antd will avoid breaking change in minor & patch version. You can safe do follow things:

- Official demo usage
- FAQ suggestion. Including codesandbox sample, marked as FAQ issue

And which you should avoid to do:

- Bug as feature. It will break in any other case (e.g. Use div as Tabs children)
- Use magic code to realize requirement but which can be realized with normal API

## How to spell Diginext (DX) correctly?

- ✅ **Diginext**: Capitalized first character, for the identification name.
- ✅ **DX** or **dx**: for the CLI name, and the top priority mission of it - `Developer Experience`.

Here are some typical wrong examples:

- ❌ DigiNext
- ❌ Digi Next
- ❌ digi next
- ❌ DigiX
- ❌ next cli
- ❌ dx cli

## Do you guys have any channel or website for submitting monetary donations, like through PayPal or Alipay?

This is a **ONE-MAN** project & I've been spending a lot of time for it, although it's my hobby project, I still need beers to keep the momentum.
If you enjoyed this project — or just feeling generous, consider buying me some beers. Cheers! 🍻

<a href="https://www.buymeacoffee.com/duynguyen" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-green.png" alt="Buy Me A Coffee" height=48 ></a>

<a href="https://paypal.me/mrgoonie/" target="_blank"><img src="https://github.com/andreostrovsky/donate-with-paypal/blob/master/blue.svg" height=48></a>

<a href="https://opencollective.com/diginext/donate" target="_blank">
  <img src="https://opencollective.com/diginext/donate/button@2x.png?color=blue" height=48 />
</a>

<a href="https://me.momo.vn/mrgoonie" target="_blank">
  <img src="https://github.com/digitopvn/diginext/blob/main/docs/momo-button.png" height=48 />
</a>

Thank you!
</file>

<file path="jest.config.js">
/**
 * @type {import("ts-jest").JestConfigWithTsJest}
 */
⋮----
// testRegex: "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
⋮----
coverageReporters: ["json", "lcov", "text", "clover"], // "text-summary"
⋮----
// bail: 1,
</file>

<file path="LICENSE">
GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</file>

<file path="lint-staged.config.js">

</file>

<file path="skaffold.yaml">
apiVersion: skaffold/v4beta1
kind: Config
metadata:
  name: diginext
build:
  platforms: ["linux/amd64"]
  tagPolicy:
    gitCommit: 
      ignoreChanges: true
  artifacts:
    - image: digitop/diginext
      docker:
        dockerfile: Dockerfile
manifests:
  rawYaml:
    - deployment.yaml
deploy:
  kubeContext: topgroup-k3s
</file>

<file path="tsconfig.jest.json">
{
	"compilerOptions": {
		"strict": false,
		"outDir": "dist",
		"lib": ["ES6"],
		"target": "ES6",
		"module": "commonjs",
		"moduleResolution": "node",
		"noImplicitReturns": false,
		"strictPropertyInitialization": false,
		"forceConsistentCasingInFileNames": true,
		"emitDecoratorMetadata": true,
		"experimentalDecorators": true,
		"allowSyntheticDefaultImports": true,
		"allowJs": true,
		"composite": false,
		"declaration": true,
		"declarationMap": true,
		"esModuleInterop": true,
		"inlineSources": false,
		"isolatedModules": true,
		"noUnusedLocals": false,
		"noUnusedParameters": false,
		"preserveWatchOutput": true,
		"skipLibCheck": true,
		"resolveJsonModule": true,
		"baseUrl": ".",
		"paths": {
			"@/*": ["./src/*"],
			"libs/*": ["./libs/*"]
		}
	},
	"include": ["./src/*", "./src/**/*", "node_modules/execa/index.d.ts"],
	"exclude": ["dist", "build", "node_modules", "storage", "./storage"],
	"ts-node": {
		"require": ["tsconfig-paths/register"]
	}
}
</file>

<file path="tsconfig.json">
{
	"compilerOptions": {
		"strict": false,
		"outDir": "dist",
		"target": "ES2018",
		"lib": ["ES2018", "DOM"],
		"module": "commonjs",
		"moduleResolution": "node",
		"noImplicitReturns": false,
		"noImplicitAny": false,
		"strictPropertyInitialization": false,
		"forceConsistentCasingInFileNames": true,
		"emitDecoratorMetadata": true,
		"experimentalDecorators": true,
		"allowSyntheticDefaultImports": true,
		"allowJs": true,
		"composite": false,
		"declaration": true,
		"declarationMap": true,
		"esModuleInterop": true,
		"inlineSources": false,
		"isolatedModules": true,
		"noUnusedLocals": false,
		"noUnusedParameters": false,
		"preserveWatchOutput": true,
		"skipLibCheck": true,
		"resolveJsonModule": true,
		"preserveSymlinks": true,
		"baseUrl": ".",
		"paths": {
			"@/*": ["./src/*"],
			"libs/*": ["./libs/*"]
		}
	},
	"include": ["./src/*", "./src/**/*", "node_modules/execa/index.d.ts", "./__tests__/**/*"],
	"exclude": ["dist", "build", "node_modules", "storage", "./storage"],
	"ts-node": {
		"require": ["tsconfig-paths/register"]
	}
}
</file>

<file path="tsoa.json">
{
	"entryFile": "src/server.ts",
	"noImplicitAdditionalProperties": "throw-on-extras",
	"controllerPathGlobs": ["src/**/*Controller.ts"],
	"spec": {
		"basePath": "api/v1",
		"outputDirectory": "public",
		"specVersion": 3,
		"securityDefinitions": {
			"api_key": {
				"type": "apiKey",
				"name": "x-api-key",
				"in": "header"
			},
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		},
		"operationIdTemplate": "{{titleCase method.name}}"
	},
	"routes": {
		"authenticationModule": "./src/middlewares/swagger_auth.ts",
		"basePath": "api/v1",
		"routesDir": "./src",
		"middleware": "express"
	},
	"ignore": ["**/node_modules/**"],
	"compilerOptions": {
		"baseUrl": "./",
		"paths": {
			"@/*": ["./src/*"]
		}
	}
}
</file>

<file path="__tests__/flows/test-flow-1.ts">
import { IApp, ICluster, IContainerRegistry, IFramework, IGitProvider, IRole, IUser, IWorkspace } from "@/entities";
import { MongoDB } from "../../src/plugins/mongodb";
import {
	CLI_TEST_DIR,
	apiKeySvc,
	appSvc,
	clusterSvc,
	createFakeUser,
	createWorkspace,
	currentWorkspace,
	dxCmd,
	frameworkCtl,
	frameworkSvc,
	getCurrentUser,
	gitCtl,
	gitSvc,
	loginUser,
	registryCtl,
	roleSvc,
	serviceAccountSvc,
	userSvc,
	workspaceSvc,
} from "../helpers";
⋮----
import GitProviderAPI from "@/modules/git/git-provider-api";
import { initialFrameworks } from "@/seeds/seed-frameworks";
import { connectRegistry } from "@/modules/registry/connect-registry";
import { existsSync, readdirSync, rmdirSync, rmSync } from "fs";
import { addInitialBareMetalCluster } from "@/seeds/seed-clusters";
import ClusterManager from "@/modules/k8s";
import { DB } from "@/modules/api/DB";
import path from "path";
import { wait } from "@/plugins";
import { fetchApi } from "@/modules/api";
import { makeSlug } from "@/plugins/slug";
import { Config } from "@/app.config";
⋮----
export function testFlow1()
⋮----
// it("Builder: PODMAN", async () => {
// 	const podmanVersion = await dxCmd(`podman version`);
// 	console.log("Current PODMAN version :>> \n", podmanVersion);
// });
⋮----
// create user
⋮----
// query db
⋮----
// first login (no workspace selected)
⋮----
// query db
⋮----
// create workspace
⋮----
// reload fake user
⋮----
// check user data
⋮----
// second login (has workspace)
⋮----
// check user data after login
⋮----
// current authenticated user:
⋮----
// current workspace
⋮----
// check 3 initial roles
⋮----
// console.log("initialRoles :>> ", initialRoles);
⋮----
// check default API key
⋮----
// check default service account
⋮----
// seed git provider: bitbucket
⋮----
// console.log("[TEST] Git Provider > Bitbucket > createRes :>> ", createRes);
⋮----
// verify bitbucket api
⋮----
// check...
⋮----
// test api
⋮----
// seed git provider: github
⋮----
// console.log("[TEST] Git Provider > Github > createRes :>> ", createRes);
⋮----
// verify github api
⋮----
// check...
⋮----
// test api
⋮----
// add new "public" framework
⋮----
// console.log("FRAMEWORK > PUBLIC > createRes :>> ", createRes);
// if (!createRes.status) throw new Error(createRes.messages.join("."));
⋮----
// check...
⋮----
// add new "public" framework
⋮----
// console.log("FRAMEWORK > PRIVATE > createRes :>> ", createRes);
// if (!createRes.status) console.log("FRAMEWORK > createRes :>> ", createRes);
⋮----
// check...
⋮----
// seed Container Registry: GCR
⋮----
// registry = createRes.data;
⋮----
}, // timeout: 4 mins
⋮----
// const curUser = await getCurrentUser();
⋮----
// seed Container Registry: Docker Hub
⋮----
// assign global registry -> to test "dx up" later
⋮----
// timeout: 4 mins
⋮----
// seed cluster: Bare-metal
⋮----
// const cluster = await addInitialBareMetalCluster(process.env.TEST_METAL_CLUSTER_KUBECONFIG);
⋮----
// verify cluster connection
⋮----
// print CLI information
⋮----
// TODO: Change cluster CLI to API fetching
// it(
// 	"CLI: Cluster management (BARE-METAL)",
// 	async () => {
// 		console.log("[TESTING] CLI: Cluster management (BARE-METAL)");
⋮----
// 		// get bare-metal cluster (default)
// 		// bareMetalCluster = await clusterSvc.findOne({ _id: bareMetalCluster._id });
// 		// expect(bareMetalCluster.contextName).toBeDefined();
// 		// expect(bareMetalCluster.provider).toBeDefined();
// 		// expect(bareMetalCluster.isVerified).toBeTruthy();
// 		// console.log("bareMetalCluster :>> ", bareMetalCluster);
⋮----
// 		// const context = bareMetalCluster.contextName;
// 		// if (!context) throw new Error(`Cluster is not verified (no "contextName")`);
⋮----
// 		// switch context to this cluster
// 		// const switchCtxRes = await dxCmd(`dx cluster connect --cluster=${bareMetalCluster.slug} ${cliDebugFlag}`);
// 		// expect(switchCtxRes.toLowerCase().indexOf("connected")).toBeGreaterThan(-1);
⋮----
// 		// check test namespace exists
// 		// const namespace = "diginext-test";
// 		// let isNamespaceExisted = await ClusterManager.isNamespaceExisted(namespace, { context });
// 		// if (isNamespaceExisted) await ClusterManager.deleteNamespace(namespace, { context });
// 		// await ClusterManager.createNamespace(namespace, { context });
⋮----
// 		// check again
// 		// isNamespaceExisted = await ClusterManager.isNamespaceExisted(namespace, { context });
// 		// expect(isNamespaceExisted).toBeTruthy();
⋮----
// 		// create imagePullSecrets
// 		// const dockerhub = await DB.findOne("registry", { provider: "dockerhub" });
// 		// console.log("dockerhub :>> ", dockerhub);
⋮----
// 		// const createIPS = await dxCmd(`dx registry allow --registry=${dockerhub.slug} --cluster=${cluster.slug} --namespace=${namespace}`);
// 		// console.log("createIPS :>> ", createIPS);
⋮----
// 		// const secrets = await dxCmd(`kubectl get secret -n ${namespace}`);
// 		// console.log("secrets :>> ", secrets);
⋮----
// 		// expect(secrets).toContain("docker-registry-key");
⋮----
// 		// clean up test namespace
// 		// await ClusterManager.deleteNamespace(namespace, { context });
// 	},
// 	// timeout: 3 mins
// 	3 * 60000
// );
⋮----
// const github = await gitSvc.findOne({ type: "github" });
// const framework = await frameworkSvc.findOne({ repoURL: initialFrameworks[0].repoURL });
⋮----
// create new app...
⋮----
// reload app's data
⋮----
// console.log("appOnGithub :>> ", appOnGithub);
⋮----
// console.log("sourceCodeDirs :>> ", sourceCodeDirs);
⋮----
// console.log("sourceCodeFiles :>> ", sourceCodeFiles);
⋮----
// it(
// 	"CLI: Create new app (Bitbucket)",
// 	async () => {
// 		console.log("[TESTING] CLI: Create new app (Bitbucket)");
⋮----
// 		// const bitbucket = await gitSvc.findOne({ type: "bitbucket" });
// 		// const framework = await frameworkSvc.findOne({ repoURL: initialFrameworks[0].repoURL });
⋮----
// 		// create new app...
// 		const res = await dxCmd(
// 			`dx new --projectName=TestBitbucketProject --name=web --framework=${framework.slug} --git=${bitbucket.slug} --force ${cliDebugFlag}`
// 		);
// 		expect(res).toBeDefined();
// 		// expect(res.toLowerCase()).not.toContain("error");
⋮----
// 		const sourceCodeDirs = readdirSync(CLI_TEST_DIR);
// 		// console.log("sourceCodeDirs :>> ", sourceCodeDirs);
// 		expect(sourceCodeDirs.join(",").indexOf(appOnGithub.projectSlug)).toBeGreaterThan(-1);
⋮----
// 		const appDir = path.resolve(CLI_TEST_DIR, `${appOnGithub.projectSlug}-${appOnGithub.slug}`);
// 		const sourceCodeFiles = readdirSync(appDir);
// 		// console.log("testbitbucketproject-web > files :>> ", sourceCodeFiles);
// 		expect(sourceCodeFiles.length).toBeGreaterThan(0);
// 		expect(sourceCodeFiles.includes("Dockerfile")).toBeTruthy();
⋮----
// 		// assign variable
// 		appOnBitbucket = await appSvc.findOne({}, { order: { createdAt: -1 } });
// 		// console.log("appOnBitbucket :>> ", appOnBitbucket);
// 	},
// 	// 5 mins
// 	5 * 60000
// );
⋮----
// console.log("appOnGithub :>> ", appOnGithub);
⋮----
// get app directory
⋮----
/**
			 * Deploy app to dev environment:
			 * - App directory: "app created on github"
			 * - Cluster: Bare-metal Cluster
			 * - Container registry: My Docker Registry
			 * - Deploy environment: DEV
			 * - Exposed port: 80
			 * - Use SSL: true
			 * - SSL Provider: Let's Encrypt
			 * - Use genereted domain: true
			 * - Follow the logs
			 * @example
			 * dx up --cluster=<cluster_slug> --registry=<registry_slug> --port=<number> --ssl --domain --tail
			 */
⋮----
// get app info
⋮----
// timeout: 5 minutes
⋮----
// register fake user #2 with "basic auth" method:
⋮----
// invite this user to current workspace
⋮----
// isDebugging: true,
⋮----
// console.log("Add member > inviteRes :>> ", inviteRes);
⋮----
workspace: wsId, // <-- make this workspace active for this user
⋮----
// isDebugging: true,
⋮----
// await wait(60000);
// console.log("Basic auth > registerRes :>> ", registerRes);
⋮----
// login to workspace #1 with "basic auth" method:
// const loginRes = await fetchApi({
// 	url: "/api/v1/login",
// 	method: "POST",
// 	data: { email: fakeUser2.email, password: "123456" },
// });
// console.log("Basic auth > loginRes :>> ", loginRes);
// reload user
// fakeUser2 = loginRes.data.user;
⋮----
// login back to fake user #1 ???
⋮----
// timeout: 5 minutes
⋮----
// delete & take down all test app
⋮----
// delete app directories
⋮----
// const dirBitbucketApp = path.resolve(CLI_TEST_DIR, `${appOnBitbucket.projectSlug}-${appOnBitbucket.slug}`);
// rmSync(dirBitbucketApp, { recursive: true, force: true });
⋮----
// delete git repo
⋮----
// const deleteBitbucketAppRes = await appSvc.deleteGitRepo({ slug: appOnBitbucket.slug });
⋮----
// console.log("[CLEAN UP] deleteBitbucketAppRes :>> ", deleteBitbucketAppRes);
⋮----
// delete all "custom" test clusters & access credentials
⋮----
// wait another 10 secs before closing tests, just to be sure :)
⋮----
// timeout: 5 mins
</file>

<file path=".github/workflows/test.yml">
name: Test Workflow

# TRIGGERS
on:
  # push:
  #   branches:
  #     - '*'             # matches every branch that doesn't contain a '/'
  #     - '*/*'           # matches every branch containing a single '/'
  #     - '**'            # matches every branch
  #     - "!main"         # exclude "main"
  #     - "!beta"         # exclude "beta"
  #     - "!prerelease"   # exclude "prerelease"
  pull_request:
    # types: [synchronize]
    branches:
      - main
      - beta
      - prerelease

# ENVIRONMENT VARIABLES
env:
  PORT: 6969
  NODE_ENV: test_ci
  DEV_MODE: false
  CLI_MODE: server
  DB_URI: mongodb://localhost:27017
  BUILDER: podman
  BASE_URL: http://localhost:6969
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
  # TEST_DEBUG: "1"
  TEST_BITBUCKET_ORG: ${{ vars.TEST_BITBUCKET_ORG }}
  TEST_BITBUCKET_USER: ${{ vars.TEST_BITBUCKET_USER }}
  TEST_BITBUCKET_APP_PASS: ${{ secrets.TEST_BITBUCKET_APP_PASS }}
  TEST_DOCKERHUB_USER: ${{ vars.TEST_DOCKERHUB_USER }}
  TEST_DOCKERHUB_PASS: ${{ secrets.TEST_DOCKERHUB_PASS }}
  TEST_DO_CLUSTER_NAME: ${{ vars.TEST_DO_CLUSTER_NAME }}
  TEST_DO_API_TOKEN: ${{ secrets.TEST_DO_API_TOKEN }}
  TEST_GCLOUD_CLUSTER_NAME: ${{ vars.TEST_GCLOUD_CLUSTER_NAME }}
  TEST_GCLOUD_SERVICE_ACCOUNT: ${{ secrets.TEST_GCLOUD_SERVICE_ACCOUNT }}
  TEST_GITHUB_PAT: ${{ secrets.TEST_GITHUB_PAT }}
  TEST_GITHUB_ORG: ${{ vars.TEST_GITHUB_ORG }}
  TEST_GITHUB_USER: ${{ vars.TEST_GITHUB_USER }}
  TEST_METAL_CLUSTER_NAME: ${{ vars.TEST_METAL_CLUSTER_NAME }}
  TEST_METAL_CLUSTER_KUBECONFIG: ${{ secrets.TEST_METAL_CLUSTER_KUBECONFIG }}
  ID_RSA: ${{ secrets.ID_RSA }}
  ID_RSA_PUB: ${{ secrets.ID_RSA_PUB }}
  REDIS_HOST: "51.79.231.184"
  REDIS_PORT: "31913"
  REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}

# CI/CD STEPS
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: startsWith(github.event.head_commit.message, 'ci(') == false
    
    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      # - run: echo $ID_RSA > ~/.ssh/id_rsa
      # - run: echo $ID_RSA_PUB > ~/.ssh/id_rsa.pub

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: |
            ${{ secrets.ID_RSA }}

      - name: Write custom ID_RSA
        run: ./scripts/custom_rsa.sh

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
      
      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.8.0

      # - name: Install MicroK8S
      #   uses: balchua/microk8s-actions@v0.3.2
      #   with:
      #     channel: 'latest/stable'
      #     addons: '["dns", "rbac", "registry", "dashboard", "dns", "ingress", "metrics-server", "helm", "helm3", "cert-manager", "hostpath-storage", "prometheus"]'
      
      # - run: sudo usermod -a -G microk8s runner
      # - run: sudo chown -R runner ~/.kube
      # - run: newgrp microk8s
      # - run: mkdir -p ~/.kube
      # - run: microk8s config
      # - run: microk8s config > ~/kubeconfig
      # # - run: microk8s config > ~/.kube/config
      # # - run: cat ~/.kube/config
      
      - name: Setup Kubernetes Tools
        uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          kubectl: '1.24.10'
        
      # - run: kubectl get namespace

      # - name: 'Set up Google Cloud SDK'
      #   uses: 'google-github-actions/setup-gcloud@v1'
      #   with:
      #     version: '>= 363.0.0'

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.TEST_DO_API_TOKEN }}

      - name: Docker login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Podman log in to Docker Hub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          registry: docker.io

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: |
          pnpm install --no-frozen-lockfile
      
      # - name: Update AWS SDK
      #   run: pnpm add @aws-sdk/client-s3@latest @aws-sdk/types@latest

      - name: Run tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm test:build
</file>

<file path="src/config/config.ts">
import { log } from "diginext-utils/dist/xconsole/log";
import type execa from "execa";
import { existsSync, mkdirSync, writeFileSync } from "fs";
⋮----
import { Config } from "@/app.config";
import type { ICloudDatabase } from "@/entities/CloudDatabase";
import type { ICloudProvider } from "@/entities/CloudProvider";
import type { ICluster } from "@/entities/Cluster";
import type { IContainerRegistry } from "@/entities/ContainerRegistry";
import type { IFramework } from "@/entities/Framework";
import type { IGitProvider } from "@/entities/GitProvider";
import type { IUser } from "@/entities/User";
import type { IWorkspace } from "@/entities/Workspace";
import type InputOptions from "@/interfaces/InputOptions";
import type { ResourceQuotaSize } from "@/interfaces/SystemTypes";
⋮----
import { readJson, saveJson } from "../plugins";
import { CLI_CONFIG_DIR, CLI_CONFIG_FILE } from "./const";
⋮----
// export const cliOpts: execa.Options = isWin() ? {} : { shell: "bash" };
⋮----
export type ResourceQuota = {
	requests: { cpu: string | null; memory: string | null };
	limits: { cpu: string | null; memory: string | null };
};
⋮----
export function getContainerResource(cpu: string | null, memory: string | null)
⋮----
// function getQuotaByScale(origin: number, scale: number) {
// 	let result = origin;
// 	for (let i = 1; i < scale; i++) result *= 2;
// 	return result;
// }
⋮----
export const getContainerResourceBySize = (size: ResourceQuotaSize) =>
⋮----
// export const getContainerResourceBySize = (size: ResourceQuotaSize) => {
// 	if (size == "none") return {};
// 	const scale = toNumber(size.substring(0, size.length - 1));
// 	return {
// 		requests: {
// 			cpu: `${getQuotaByScale(originalCPU, scale)}m`,
// 			memory: `${getQuotaByScale(originalMemory, scale)}Mi`,
// 		},
// 		limits: {
// 			cpu: `${getQuotaByScale(originalCPU, scale)}m`,
// 			memory: `${getQuotaByScale(originalMemory, scale)}Mi`,
// 		},
// 	};
// };
⋮----
export type CliConfig = {
	buildServerUrl?: string;

	access_token?: string;
	refresh_token?: string;
	apiToken?: string;

	currentUser?: IUser;
	currentWorkspace?: IWorkspace;

	defaultFramework?: IFramework;

	github_access_token?: string;

	currentGitProvider?: IGitProvider;
	currentRegistry?: IContainerRegistry;
	currentProvider?: ICloudProvider;
	currentCluster?: ICluster;
	currentDatabase?: ICloudDatabase;

	gitProviders?: IGitProvider[];
	k8sClusters?: ICluster[];
	containerRegistries?: IContainerRegistry[];
	providers?: ICloudProvider[];
	databases?: ICloudDatabase[];
	frameworks?: IFramework[];
};
⋮----
/**
 * Get local CLI config
 */
export const getCliConfig = () =>
⋮----
// Create new config file if it's not existed
⋮----
/**
 * Save/update CLI config locally
 * @param {CliConfig} updatedConfig
 */
export const saveCliConfig = (updatedConfig: CliConfig) =>
⋮----
export const execConfig = async (options?: InputOptions) =>
⋮----
// const { secondAction, thirdAction } = options;
⋮----
// switch (secondAction) {
// 	case "get":
// 		const conf = getCliConfig();
// 		log(conf);
// 		return conf;
⋮----
// 	default:
// 		log(`Huh?`);
// 		break;
// }
</file>

<file path="src/controllers/AskAiController.ts">
import { Body, Get, Post, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IUser, IWorkspace } from "@/entities";
import type { IQueryFilter, IQueryOptions, IResponsePagination } from "@/interfaces";
import { respondSuccess } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { AIService } from "@/services/AIService";
⋮----
export default class AskAiController
⋮----
async get()
⋮----
/**
	 * Ask AI to generate a Dockerfile
	 */
⋮----
async generateDockerfile(
		@Body()
		body: {
			/**
			 * Directory structure in string
			 */
			directoryStructure: string;
		}
)
⋮----
/**
			 * Directory structure in string
			 */
</file>

<file path="src/controllers/BaseController.ts">
// import { Response as ApiResponse } from "diginext-utils/dist/response";
import type { NextFunction, Response } from "express";
import { isEmpty } from "lodash";
⋮----
import { Config } from "@/app.config";
import type { IUser, IWorkspace } from "@/entities";
import type { IBase } from "@/entities/Base";
import type { AppRequest, Ownership } from "@/interfaces/SystemTypes";
import { preprocessInputData } from "@/plugins";
import { parseFilterAndOptions, parsePagination } from "@/plugins/controller-parser";
import { type BaseService } from "@/services/BaseService";
⋮----
import type { IQueryFilter, IQueryOptions, IResponsePagination } from "../interfaces/IQuery";
import type { ResponseData } from "../interfaces/ResponseData";
import { respondFailure, respondSuccess } from "../interfaces/ResponseData";
⋮----
export default class BaseController<T extends IBase = any, S extends BaseService<T> = BaseService>
⋮----
constructor(service?: S)
⋮----
async read()
⋮----
// if (isEmpty(data)) return this.filter.owner ? respondFailure({ msg: `Unauthorized.` }) : respondFailure({ msg: "" });
⋮----
async create(inputData)
⋮----
async update(updateData)
⋮----
async delete()
⋮----
async softDelete()
⋮----
async empty()
⋮----
parseDateRange(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// TODO: process date range filter: from_date, to_date, from_time, to_time, date
⋮----
parseBody(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// log("req.body [1] >>", req.body);
⋮----
/**
	 * Parse the filter option from the URL:
	 * - List (first page, 10 item per page, sort "desc" by "updatedAt" first, then "desc" by "createdAt"): `https://example.com/api/v1/user?page=1&size=10&sort=-updatedAt,-createdAt`
	 * - Search (by username that contains "john"): `https://example.com/api/v1/user?page=1&size=10&username=john&search=true`
	 */
parseFilter(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// assign to controller:
⋮----
async parsePagination(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// log(`this.pagination >>`, this.pagination);
</file>

<file path="src/controllers/DomainController.ts">
import { Body, Delete, Get, Patch, Path, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import BaseController from "./BaseController";
⋮----
export default class DomainController extends BaseController
⋮----
/**
	 * Create new Diginext domain
	 */
⋮----
async createDiginextDomain(@Body() body: dxDomain.CreateDiginextDomainParams, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
// validate
⋮----
// process
⋮----
/**
	 * Get all Diginext domains
	 */
⋮----
async getDiginextDomains()
⋮----
/**
	 * Get all Diginext domain records
	 */
⋮----
async getDiginextDomainRecords(@Queries() queryParams?:
⋮----
/**
	 * Get a Diginext domain record by name
	 */
⋮----
async getDiginextDomainRecordByName(@Path() recordName: string, @Queries() queryParams?:
⋮----
// Detailed debugging
⋮----
// Explicit extraction and validation
⋮----
/**
	 * Update a Diginext domain record
	 */
⋮----
async updateDiginextDomainRecord(
		@Path() recordName: string,
		@Body() body: dxDomain.UpdateDiginextDomainData,
		@Queries() queryParams?: { type?: string }
)
⋮----
// Explicit extraction and validation
⋮----
/**
	 * Delete a Diginext domain record
	 */
⋮----
async deleteDiginextDomainRecord(@Path() recordName: string, @Queries() queryParams?:
⋮----
// Explicit extraction and validation
</file>

<file path="src/controllers/EnvVarController.ts">
import { Body, Delete, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IUser, IWorkspace } from "@/entities";
import { EnvVarDto, IEnvVar } from "@/entities/EnvVar";
import { type IQueryFilter, type IQueryOptions, type IResponsePagination, IDeleteQueryParams, IPostQueryParams } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { EnvVarService } from "@/services/EnvVarService";
⋮----
import BaseController from "./BaseController";
// import { DeployEnvironmentService } from "@/services/DeployEnvironmentService";
⋮----
export default class EnvVarController extends BaseController<IEnvVar, EnvVarService>
⋮----
constructor()
⋮----
/**
	 * Get list of env vars
	 */
// @Security("api_key")
// @Security("jwt")
// @Get("/")
// async read(
// 	@Queries()
// 	queryParams: {
// 		appId?: string;
// 		projectId?: string;
// 		workspaceId?: string;
// 		env?: string;
// 	}
// ) {
// 	return super.read();
// }
⋮----
async create(@Body() body: IEnvVar)
⋮----
update(@Body() body: EnvVarDto, @Queries() queryParams?: IPostQueryParams)
⋮----
delete(@Queries() queryParams?: IDeleteQueryParams)
</file>

<file path="src/controllers/MonitorController.ts">
import type { NextFunction } from "express-serve-static-core";
import { Body, Delete, Get, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IUser, IWorkspace } from "@/entities";
import type { IResponsePagination, KubeService } from "@/interfaces";
import { respondFailure, respondSuccess } from "@/interfaces";
import type { KubeNode } from "@/interfaces/KubeNode";
import type { MonitoringQueryFilter } from "@/interfaces/MonitoringQuery";
import { MonitoringNamespaceQueryFilter, MonitoringQueryOptions, MonitoringQueryParams } from "@/interfaces/MonitoringQuery";
import type { AppRequest, Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { parseFilterAndOptions } from "@/plugins/controller-parser";
import { MongoDB } from "@/plugins/mongodb";
import { ClusterService } from "@/services";
import { MonitorNamespaceCreateData, MonitorService } from "@/services/MonitorService";
⋮----
export default class MonitorController
⋮----
/**
	 * Parse the filter & option from the URL
	 */
parseFilter(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// assign to controller:
⋮----
/**
	 * List of nodes in a cluster
	 */
⋮----
async getNodes(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// console.log("this.filter :>> ", this.filter);
⋮----
// authenticate cluster
⋮----
// fetch list
⋮----
// authenticate cluster
⋮----
// fetch list
⋮----
// process
⋮----
/**
	 * List of namespaces in a cluster
	 */
⋮----
async getNamespaces(@Queries() queryParams?: MonitoringNamespaceQueryFilter)
⋮----
// process
⋮----
/**
	 * List of all resources of a namespace in a cluster
	 */
⋮----
async allNamespaceResources(@Queries() queryParams?: MonitoringNamespaceQueryFilter)
⋮----
// process
⋮----
// return respondSuccess({ data: 1 });
⋮----
/**
	 * Create namespace in a cluster
	 */
⋮----
async createNamespace(@Body() body?: MonitorNamespaceCreateData)
⋮----
// process
⋮----
/**
	 * Create namespace in a cluster
	 */
⋮----
async deleteNamespace(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * List of K8S services
	 */
⋮----
async getServices(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Create service in a namespace
	 */
⋮----
async createService(
		@Body()
		body?: {
			/**
			 * Namespace's name
			 */
			name: string;
			/**
			 * @default "default"
			 */
			namespace?: string;
			/**
			 * Labels
			 */
			labels?: {
				[key: string]: string;
			};
			/**
			 * Spec
			 */
			spec: KubeService["spec"];
		},
		@Queries()
		queryParams?: MonitoringQueryParams
)
⋮----
/**
			 * Namespace's name
			 */
⋮----
/**
			 * @default "default"
			 */
⋮----
/**
			 * Labels
			 */
⋮----
/**
			 * Spec
			 */
⋮----
/**
	 * Delete service in a namespace
	 */
⋮----
async deleteService(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
/**
	 * List of K8S Ingress
	 */
⋮----
async getIngresses(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Delete K8S Ingress
	 */
⋮----
async deleteIngresses(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * List of K8S Deployment
	 */
⋮----
async getDeploys(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Delete K8S Deployment
	 */
⋮----
async deleteDeploys(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * List of K8S StatefulSet
	 */
⋮----
async getStatefulSets(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Delete K8S StatefulSet
	 */
⋮----
async deleteStatefulSets(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * List of K8S Pod
	 */
⋮----
async getPods(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Delete K8S Pod
	 */
⋮----
async deletePods(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * List of K8S Secret
	 */
⋮----
async getSecrets(@Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
⋮----
/**
	 * Delete K8S Secret
	 */
⋮----
async deleteSecrets(@Body() body?: MonitoringQueryOptions, @Queries() queryParams?: MonitoringQueryParams)
⋮----
// process
</file>

<file path="src/entities/Base.ts">
import type { Types } from "mongoose";
import { Schema } from "mongoose";
⋮----
import type { IProject, IWorkspace } from "./index";
import type { IUser } from "./User";
⋮----
export interface IBase {
	_id?: Types.ObjectId | string;
	/**
	 * Slug of an item, generated automatically by its "name"
	 */
	slug?: string;
	active?: boolean;
	/**
	 * `TRUE` -> any members can read
	 * `FALSE` -> only admins can read
	 * @default true
	 */
	public?: boolean;
	metadata?: any;
	/**
	 * Owner's username
	 */
	ownerSlug?: string;
	/**
	 * Owner ID of the app
	 *
	 * @remarks This can be populated to {IUser} data
	 */
	owner?: Types.ObjectId | IUser | string;
	ownerId?: Types.ObjectId | string;
	/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {IProject} data
	 */
	project?: Types.ObjectId | IProject | string;
	projectId?: Types.ObjectId | string;
	/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {IWorkspace} data
	 */
	workspace?: Types.ObjectId | IWorkspace | string;
	workspaceId?: Types.ObjectId | string;
	/**
	 * SLUG of the workspace
	 *
	 * @remarks This can be populated to {IWorkspace} data
	 */
	workspaceSlug?: string;
	/**
	 * Created date
	 */
	createdAt?: Date;
	/**
	 * Deleted date
	 */
	deletedAt?: Date;
	/**
	 * Updated date
	 */
	updatedAt?: Date;
	/**
	 * Migrated date
	 */
	migratedAt?: Date;
	updatedBy?: Types.ObjectId | IUser | string;
	updatedById?: Types.ObjectId | string;
	deletedBy?: Types.ObjectId | IUser | string;
	deletedById?: Types.ObjectId | string;
}
⋮----
/**
	 * Slug of an item, generated automatically by its "name"
	 */
⋮----
/**
	 * `TRUE` -> any members can read
	 * `FALSE` -> only admins can read
	 * @default true
	 */
⋮----
/**
	 * Owner's username
	 */
⋮----
/**
	 * Owner ID of the app
	 *
	 * @remarks This can be populated to {IUser} data
	 */
⋮----
/**
	 * ID of the project
	 *
	 * @remarks This can be populated to {IProject} data
	 */
⋮----
/**
	 * ID of the workspace
	 *
	 * @remarks This can be populated to {IWorkspace} data
	 */
⋮----
/**
	 * SLUG of the workspace
	 *
	 * @remarks This can be populated to {IWorkspace} data
	 */
⋮----
/**
	 * Created date
	 */
⋮----
/**
	 * Deleted date
	 */
⋮----
/**
	 * Updated date
	 */
⋮----
/**
	 * Migrated date
	 */
⋮----
export interface EntityConstructor {
	new (...args: any[]): {};
}
</file>

<file path="src/entities/EnvVar.ts">
import mongoose, { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface IEnvVar extends IBase {
	name: string;
	value: string;
	description?: string;
	env?: string;
	appId?: string;
}
export type EnvVarDto = Omit<IEnvVar, keyof HiddenBodyKeys>;
</file>

<file path="src/entities/Workspace.ts">
import { Schema } from "mongoose";
⋮----
import type { HiddenBodyKeys } from "@/interfaces";
import type { RetentionType } from "@/interfaces/SystemTypes";
import type { CloudStorageProvider } from "@/plugins/cloud-storage";
⋮----
import type { IBase } from "./Base";
import { baseSchemaDefinitions } from "./Base";
⋮----
export interface IWorkspace extends IBase {
	/**
	 * Workspace name
	 */
	name?: string;
	/**
	 * Workspace slug: auto-generated by "name" column
	 * @readonly
	 */
	slug?: string;
	/**
	 * Is this a `public` workspace that anyone can join, otherwise it's a `private` workspace that needs approval on joining request.
	 */
	public?: boolean;
	/**
	 * Workspace profile picture
	 */
	image?: string;
	/**
	 * Workspace domain name
	 */
	domain?: string;

	/**
	 * DXSITE API Key
	 */
	dx_key?: string;
	/**
	 * DXSITE Workspace ID
	 */
	dx_id?: string;

	/**
	 * Workspace Settings
	 */
	settings?: {
		ai?: {
			enabled: boolean;
			apiBaseUrl: string;
			model: string;
			apiKey: string;
		};
		database?: any;
		activity?: {
			/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
			retention?: {
				type: RetentionType;
				value: number;
			};
		};
		database_backup?: {
			/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
			retention?: {
				type: RetentionType;
				value: number;
			};
		};
		system_log?: {
			/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
			retention?: {
				type: RetentionType;
				value: number;
			};
		};
		cloud_storage?: {
			provider: CloudStorageProvider;
			region: string;
			bucket: string;
			accessKey: string;
			secretKey: string;
			endpoint: string;
			baseUrl: string;
			basePath: string;
		};
		notification?: {
			jojo?: {
				enabled: boolean;
				apiKey: string;
				events: string[];
			};
			elasticEmail?: {
				enabled: boolean;
				apiKey: string;
				events: string[];
			};
		};
	};
}
⋮----
/**
	 * Workspace name
	 */
⋮----
/**
	 * Workspace slug: auto-generated by "name" column
	 * @readonly
	 */
⋮----
/**
	 * Is this a `public` workspace that anyone can join, otherwise it's a `private` workspace that needs approval on joining request.
	 */
⋮----
/**
	 * Workspace profile picture
	 */
⋮----
/**
	 * Workspace domain name
	 */
⋮----
/**
	 * DXSITE API Key
	 */
⋮----
/**
	 * DXSITE Workspace ID
	 */
⋮----
/**
	 * Workspace Settings
	 */
⋮----
/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
⋮----
/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
⋮----
/**
			 * Data retention information
			 * - `type` is "duration", value is "miliseconds"
			 * - `type` is "limit", value is "MAX AMOUNT OF BACKUPS"
			 */
⋮----
export type WorkspaceDto = Omit<IWorkspace, keyof HiddenBodyKeys>;
</file>

<file path="src/interfaces/AppInterfaces.ts">
import type { SslType } from "./DeployEnvironment";
import type { KubeEnvironmentVariable } from "./EnvironmentVariable";
import type { ResourceQuotaSize } from "./SystemTypes";
⋮----
export interface CreateEnvVarsDto {
	/**
	 * App slug
	 */
	slug: string;
	/**
	 * Deploy environment name
	 * @example "dev" | "prod"
	 */
	env: string;
	/**
	 * Array of variables to be created on deploy environment in JSON format
	 */
	envVars: string;
}
⋮----
/**
	 * App slug
	 */
⋮----
/**
	 * Deploy environment name
	 * @example "dev" | "prod"
	 */
⋮----
/**
	 * Array of variables to be created on deploy environment in JSON format
	 */
⋮----
export interface UpdateEnvVarsDto {
	/**
	 * App slug
	 */
	slug: string;
	/**
	 * Deploy environment name
	 * @example "dev" | "prod"
	 */
	env: string;
	/**
	 * Array of variables to be created on deploy environment in JSON format
	 */
	envVars: KubeEnvironmentVariable[];
}
⋮----
/**
	 * App slug
	 */
⋮----
/**
	 * Deploy environment name
	 * @example "dev" | "prod"
	 */
⋮----
/**
	 * Array of variables to be created on deploy environment in JSON format
	 */
⋮----
export interface AppInputSchema {
	/**
	 * `REQUIRES`
	 * ---
	 * App's name
	 */
	name: string;

	/**
	 * `REQUIRES`
	 * ---
	 * Project's ID or slug
	 */
	project: string;

	/**
	 * `REQUIRES`
	 * ---
	 * Git provider ID
	 */
	gitProvider: string;

	/**
	 * OPTIONAL
	 * ---
	 * Framework's ID or slug or {Framework} instance
	 */
	// framework?: string | IFramework;

	/**
	 * `OPTIONAL`
	 * ---
	 * A SSH URI of the source code repository or a detail information of this repository
	 * @example git@bitbucket.org:digitopvn/example-repo.git
	 */
	// git?: string | AppGitInfo;

	/**
	 * `OPTIONAL`
	 * ---
	 * Should create new git repository on the selected git provider
	 * @default false
	 */
	shouldCreateGitRepo?: boolean;

	/**
	 * `OPTIONAL`
	 * ---
	 * ### [CAUTION]
	 * If `TRUE`, it will delete the existing git repo, then create a new one.
	 * @default false
	 */
	force?: boolean;
}
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * App's name
	 */
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Project's ID or slug
	 */
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Git provider ID
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Framework's ID or slug or {Framework} instance
	 */
// framework?: string | IFramework;
⋮----
/**
	 * `OPTIONAL`
	 * ---
	 * A SSH URI of the source code repository or a detail information of this repository
	 * @example git@bitbucket.org:digitopvn/example-repo.git
	 */
// git?: string | AppGitInfo;
⋮----
/**
	 * `OPTIONAL`
	 * ---
	 * Should create new git repository on the selected git provider
	 * @default false
	 */
⋮----
/**
	 * `OPTIONAL`
	 * ---
	 * ### [CAUTION]
	 * If `TRUE`, it will delete the existing git repo, then create a new one.
	 * @default false
	 */
⋮----
export interface DeployEnvironmentData {
	/**
	 * `REQUIRES`
	 * ---
	 * Container registry's slug
	 * @requires
	 */
	registry: string;

	/**
	 * `REQUIRES`
	 * ---
	 * Cluster's short name
	 * @requires
	 */
	cluster: string;

	/**
	 * `REQUIRES`
	 * ---
	 * Container's port
	 * @requires
	 */
	port: number;

	/**
	 * `REQUIRES`
	 * ---
	 * Image URI of this app on the Container Registry (without `TAG`).
	 * - Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 * - **Don't** specify `tag` at the end! (eg. `latest`, `beta`,...)
	 * @default <registry-image-base-url>/<project-slug>/<app-name-slug>
	 * @example "asia.gcr.io/my-workspace/my-project/my-app"
	 */
	imageURL: string;

	/**
	 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
	 * @example latest, v01, prerelease, alpha, beta,...
	 */
	buildTag: string;

	/**
	 * OPTIONAL
	 * ---
	 * Container's scaling replicas
	 * @default 1
	 */
	replicas?: number;

	/**
	 * OPTIONAL
	 * ---
	 * Destination namespace name, will be generated automatically by `<project-slug>-<env>` if not specified.
	 */
	namespace?: string;

	/**
	 * OPTIONAL [DEPRECATED SOON]
	 * ---
	 * ### [DEPRECATED SOON] Use `cpu` and `memory` instead.
	 * Container quota resources
	 * @default 1x
	 * @deprecated
	 * @example
	 * "none" - {}
	 * "1x" - { requests: { cpu: "20m", memory: "128Mi" }, limits: { cpu: "20m", memory: 128Mi" } }
	 * "2x" - { requests: { cpu: "40m", memory: "256Mi" }, limits: { cpu: "40m", memory: "256Mi" } }
	 * "3x" - { requests: { cpu: "80m", memory: "512Mi" }, limits: { cpu: "80m", memory: "512Mi" } }
	 * "4x" - { requests: { cpu: "160m", memory: "1024Mi" }, limits: { cpu: "160m", memory: "1024Mi" } }
	 * "5x" - { requests: { cpu: "320m", memory: "2048Mi" }, limits: { cpu: "320m", memory: "2048Mi" } }
	 * "6x" - { requests: { cpu: "640m", memory: "4058Mi" }, limits: { cpu: "640m", memory: "4058Mi" } }
	 * "7x" - { requests: { cpu: "1280m", memory: "2048Mi" }, limits: { cpu: "1280m", memory: "2048Mi" } }
	 * "8x" - { requests: { cpu: "2560m", memory: "8116Mi" }, limits: { cpu: "2560m", memory: "8116Mi" } }
	 * "9x" - { requests: { cpu: "5120m", memory: "16232Mi" }, limits: { cpu: "5120m", memory: "16232Mi" } }
	 * "10x" - { requests: { cpu: "10024m", memory: "32464Mi" }, limits: { cpu: "10024m", memory: "32464Mi" } }
	 */
	size?: ResourceQuotaSize;

	/**
	 * OPTIONAL
	 * ---
	 * Container's CPU
	 */
	cpu?: string;

	/**
	 * OPTIONAL
	 * ---
	 * Container's memory
	 */
	memory?: string;

	/**
	 * OPTIONAL
	 * ---
	 * Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment
	 * @default true
	 */
	shouldInherit?: boolean;

	/**
	 * OPTIONAL
	 * ---
	 * Set to `false` if you don't want to redirect all the secondary domains to the primary domain.
	 * @default true
	 */
	redirect?: boolean;

	/**
	 * OPTIONAL
	 * ---
	 * Set `true` if you want to use a generated domain for this deploy environment.
	 * @default false
	 */
	useGeneratedDomain?: boolean;

	/**
	 * OPTIONAL
	 * ---
	 * List of application's domains.
	 * @default []
	 */
	domains?: string[];

	/**
	 * OPTIONAL
	 * ---
	 * Flag to enable CDN for this application
	 * @default false
	 */
	cdn?: boolean;

	/**
	 * OPTIONAL
	 * ---
	 * Select your SSL Certificate Issuer, one of:
	 * - `letsencrypt`
	 * - `custom`
	 * - `none`
	 * @default letsencrypt
	 */
	ssl?: SslType;

	/**
	 * OPTIONAL
	 * ---
	 * Secret name to hold the key of SSL, will be automatically generated with the primary domain.
	 * Only need to specify when using "custom" SSL (which is the SSL from third-party issuer)
	 */
	tlsSecret?: string;

	/**
	 * OPTIONAL
	 * ---
	 * Kubernetes Ingress Class
	 * @default nginx
	 * @example "nginx" | "kong"
	 */
	ingress?: string;

	/**
	 * OPTIONAL
	 * ---
	 * Username of the person who update the app
	 */
	lastUpdatedBy?: string;
}
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Container registry's slug
	 * @requires
	 */
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Cluster's short name
	 * @requires
	 */
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Container's port
	 * @requires
	 */
⋮----
/**
	 * `REQUIRES`
	 * ---
	 * Image URI of this app on the Container Registry (without `TAG`).
	 * - Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 * - **Don't** specify `tag` at the end! (eg. `latest`, `beta`,...)
	 * @default <registry-image-base-url>/<project-slug>/<app-name-slug>
	 * @example "asia.gcr.io/my-workspace/my-project/my-app"
	 */
⋮----
/**
	 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
	 * @example latest, v01, prerelease, alpha, beta,...
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Container's scaling replicas
	 * @default 1
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Destination namespace name, will be generated automatically by `<project-slug>-<env>` if not specified.
	 */
⋮----
/**
	 * OPTIONAL [DEPRECATED SOON]
	 * ---
	 * ### [DEPRECATED SOON] Use `cpu` and `memory` instead.
	 * Container quota resources
	 * @default 1x
	 * @deprecated
	 * @example
	 * "none" - {}
	 * "1x" - { requests: { cpu: "20m", memory: "128Mi" }, limits: { cpu: "20m", memory: 128Mi" } }
	 * "2x" - { requests: { cpu: "40m", memory: "256Mi" }, limits: { cpu: "40m", memory: "256Mi" } }
	 * "3x" - { requests: { cpu: "80m", memory: "512Mi" }, limits: { cpu: "80m", memory: "512Mi" } }
	 * "4x" - { requests: { cpu: "160m", memory: "1024Mi" }, limits: { cpu: "160m", memory: "1024Mi" } }
	 * "5x" - { requests: { cpu: "320m", memory: "2048Mi" }, limits: { cpu: "320m", memory: "2048Mi" } }
	 * "6x" - { requests: { cpu: "640m", memory: "4058Mi" }, limits: { cpu: "640m", memory: "4058Mi" } }
	 * "7x" - { requests: { cpu: "1280m", memory: "2048Mi" }, limits: { cpu: "1280m", memory: "2048Mi" } }
	 * "8x" - { requests: { cpu: "2560m", memory: "8116Mi" }, limits: { cpu: "2560m", memory: "8116Mi" } }
	 * "9x" - { requests: { cpu: "5120m", memory: "16232Mi" }, limits: { cpu: "5120m", memory: "16232Mi" } }
	 * "10x" - { requests: { cpu: "10024m", memory: "32464Mi" }, limits: { cpu: "10024m", memory: "32464Mi" } }
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Container's CPU
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Container's memory
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment
	 * @default true
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Set to `false` if you don't want to redirect all the secondary domains to the primary domain.
	 * @default true
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Set `true` if you want to use a generated domain for this deploy environment.
	 * @default false
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * List of application's domains.
	 * @default []
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Flag to enable CDN for this application
	 * @default false
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Select your SSL Certificate Issuer, one of:
	 * - `letsencrypt`
	 * - `custom`
	 * - `none`
	 * @default letsencrypt
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Secret name to hold the key of SSL, will be automatically generated with the primary domain.
	 * Only need to specify when using "custom" SSL (which is the SSL from third-party issuer)
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Kubernetes Ingress Class
	 * @default nginx
	 * @example "nginx" | "kong"
	 */
⋮----
/**
	 * OPTIONAL
	 * ---
	 * Username of the person who update the app
	 */
</file>

<file path="src/interfaces/IQuery.ts">
import type { FilterQuery, QueryWithHelpers } from "mongoose";
⋮----
export interface IQueryGeneral {
	[key: string]: any;
}
⋮----
export interface IPaginationQueryParams {
	page?: number;
	size?: number;
	limit?: number;
	skip?: number;
}
⋮----
export interface IPostQueryParams {
	/**
	 * Fields to populate, seperated by commas, for example: `owner,workspace`
	 */
	populate?: string;
	select?: string;
	/**
	 * @example "-updatedAt,-createdAt"
	 */
	order?: string;
	/**
	 * Disable the default `{$set: body}` of "update" query & update `{body}` directly to the items
	 * @default false
	 */
	raw?: boolean;
}
⋮----
/**
	 * Fields to populate, seperated by commas, for example: `owner,workspace`
	 */
⋮----
/**
	 * @example "-updatedAt,-createdAt"
	 */
⋮----
/**
	 * Disable the default `{$set: body}` of "update" query & update `{body}` directly to the items
	 * @default false
	 */
⋮----
export interface IPatchQueryParams extends IPostQueryParams {
	/**
	 * Find one item by `{ObjectID}`
	 */
	_id?: string;

	/**
	 * Find one item by slug
	 */
	slug?: string;
}
⋮----
/**
	 * Find one item by `{ObjectID}`
	 */
⋮----
/**
	 * Find one item by slug
	 */
⋮----
export interface IDeleteQueryParams {
	/**
	 * Delete one item by `{ObjectID}`
	 */
	id?: string;
	/**
	 * Delete one item by `{slug}`
	 */
	slug?: string;
}
⋮----
/**
	 * Delete one item by `{ObjectID}`
	 */
⋮----
/**
	 * Delete one item by `{slug}`
	 */
⋮----
export interface IGetQueryParams extends IPostQueryParams, IPaginationQueryParams {
	/**
	 * Find one item by `{ObjectID}`
	 */
	id?: string;
	_id?: string;
	/**
	 * Mark this request as search (return the similar results based on the filter query params)
	 * @default true
	 */
	search?: boolean;
	/**
	 * If `true`, return the excel binary file to download.
	 * @default false
	 */
	download?: boolean;
}
⋮----
/**
	 * Find one item by `{ObjectID}`
	 */
⋮----
/**
	 * Mark this request as search (return the similar results based on the filter query params)
	 * @default true
	 */
⋮----
/**
	 * If `true`, return the excel binary file to download.
	 * @default false
	 */
⋮----
export interface IQueryOptions extends IQueryGeneral {
	_id?: any;
	/**
	 * @example { populate: ["owner", "workspace"] }
	 */
	populate?: string[];
	/**
	 * @example { select: ["_id", "name", "slug"] }
	 */
	select?: string[];
	/**
	 * @example { order: { createdAt: -1 } }
	 */
	order?: { [key: string]: 1 | -1 };
	/**
	 * If `TRUE`, return the closest results of filter
	 * @default false
	 */
	search?: boolean;
	/**
	 * @default false
	 */
	download?: boolean;
	/**
	 * If `TRUE`, return the full data, otherwise only return optimal data.
	 * @default false
	 */
	full?: boolean;
	/**
	 * Disable the default `{$set: body}` of "update" query & update `{body}` directly to the items
	 * @default false
	 */
	raw?: boolean;
	/**
	 * Should check for item's status
	 * @default false
	 */
	status?: boolean;
	/**
	 * Should include deleted items
	 */
	deleted?: boolean;
	/**
	 * Cache
	 */
	cache?: boolean;
	/**
	 * Debug
	 * @default false
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * @example { populate: ["owner", "workspace"] }
	 */
⋮----
/**
	 * @example { select: ["_id", "name", "slug"] }
	 */
⋮----
/**
	 * @example { order: { createdAt: -1 } }
	 */
⋮----
/**
	 * If `TRUE`, return the closest results of filter
	 * @default false
	 */
⋮----
/**
	 * @default false
	 */
⋮----
/**
	 * If `TRUE`, return the full data, otherwise only return optimal data.
	 * @default false
	 */
⋮----
/**
	 * Disable the default `{$set: body}` of "update" query & update `{body}` directly to the items
	 * @default false
	 */
⋮----
/**
	 * Should check for item's status
	 * @default false
	 */
⋮----
/**
	 * Should include deleted items
	 */
⋮----
/**
	 * Cache
	 */
⋮----
/**
	 * Debug
	 * @default false
	 */
⋮----
export interface IQueryPagination extends IQueryGeneral {
	limit?: number;
	page?: number;
	size?: number;
	skip?: number;
	total?: number;
	total_items?: number;
	total_pages?: number;
	current_page?: number;
	page_size?: number;
	next_page?: string;
	prev_page?: string;
}
⋮----
export type IQueryFilter<T = any> = FilterQuery<T>;
export interface ServiceFilter<ResultType, DocType> extends QueryWithHelpers<ResultType, DocType> {}
⋮----
export interface IResponsePagination {
	total_items?: number;
	total_pages?: number;
	current_page?: number;
	page_size?: number;
	prev_url?: string;
	next_url?: string;
}
⋮----
export interface HiddenBodyKeys {
	id?: unknown;
	_id?: unknown;
	metadata?: unknown;
	owner?: unknown;
	workspace?: unknown;
	createdAt?: unknown;
	deletedAt?: unknown;
	updatedAt?: unknown;
}
</file>

<file path="src/interfaces/SystemTypes.ts">
import type express from "express";
⋮----
import type BaseController from "@/controllers/BaseController";
import type { IRole, IUser, IWorkspace, RoleRoute } from "@/entities";
import { filterUniqueItems } from "@/plugins/array";
⋮----
// express.js
export interface AppRequest extends express.Request {
	query: any;
	user?: IUser;
	role?: IRole;
	workspace?: IWorkspace;
	ownership?: Ownership;
	controller?: BaseController;
}
⋮----
export interface AppResponse extends express.Response {
	body?: string;
}
⋮----
// ownership
export interface Ownership {
	workspace: IWorkspace;
	owner: IUser;
}
⋮----
// log type
⋮----
export type LogType = (typeof logTypes)[number];
⋮----
// data retention
⋮----
export type RetentionType = (typeof retentionTypes)[number];
⋮----
// http methods
⋮----
export type RequestMethodType = (typeof requestMethodList)[number];
⋮----
// cloud providers
⋮----
export type CloudProviderType = (typeof cloudProviderList)[number];
⋮----
// database providers
⋮----
export type CloudDatabaseType = (typeof cloudDatabaseList)[number];
⋮----
// container registry providers
⋮----
export type RegistryProviderType = (typeof registryProviderList)[number];
⋮----
// cloud storage providers
⋮----
export type StorageProviderType = (typeof storageProviderList)[number];
⋮----
// git providers
export const availableGitProviders = ["bitbucket", "github" /**, "gitlab" */] as const;
export type GitProviderType = (typeof availableGitProviders)[number];
⋮----
// resource types
⋮----
/**
 * Container quota resources
 * @example
 * "none" - {}
 * "1x" - { requests: { cpu: "20m", memory: "128Mi" }, limits: { cpu: "20m", memory: 128Mi" } }
 * "2x" - { requests: { cpu: "40m", memory: "256Mi" }, limits: { cpu: "40m", memory: "256Mi" } }
 * "3x" - { requests: { cpu: "80m", memory: "512Mi" }, limits: { cpu: "80m", memory: "512Mi" } }
 * "4x" - { requests: { cpu: "160m", memory: "1024Mi" }, limits: { cpu: "160m", memory: "1024Mi" } }
 * "5x" - { requests: { cpu: "320m", memory: "2048Mi" }, limits: { cpu: "320m", memory: "2048Mi" } }
 * "6x" - { requests: { cpu: "640m", memory: "4058Mi" }, limits: { cpu: "640m", memory: "4058Mi" } }
 * "7x" - { requests: { cpu: "1280m", memory: "2048Mi" }, limits: { cpu: "1280m", memory: "2048Mi" } }
 * "8x" - { requests: { cpu: "2560m", memory: "8116Mi" }, limits: { cpu: "2560m", memory: "8116Mi" } }
 * "9x" - { requests: { cpu: "5120m", memory: "16232Mi" }, limits: { cpu: "5120m", memory: "16232Mi" } }
 * "10x" - { requests: { cpu: "10024m", memory: "32464Mi" }, limits: { cpu: "10024m", memory: "32464Mi" } }
 */
export type ResourceQuotaSize = (typeof availableResourceSizes)[number];
⋮----
// git provider domains
⋮----
export type GitProviderDomain = (typeof gitProviderDomainList)[number];
⋮----
// build status
⋮----
export type BuildStatus = (typeof buildStatusList)[number];
⋮----
// deploy status
⋮----
export type DeployStatus = (typeof deployStatusList)[number];
⋮----
// backup status
⋮----
export type BackupStatus = (typeof backupStatusList)[number];
⋮----
// cronjob status
⋮----
export type CronjobStatus = (typeof cronjobStatusList)[number];
⋮----
/**
 * App status:
 * - `deploying`: App is being deployed.
 * - `healthy`: App's containers are running well.
 * - `partial_healthy`: Some of the app's containers are unhealthy.
 * - `undeployed`: App has not been deployed yet.
 * - `failed`: App's containers are unable to deploy due to image pull back-off or image pulling errors.
 * - `crashed`: App's containers are facing some unexpected errors.
 * - `unknown`: Other unknown errors.
 */
⋮----
export type AppStatus = (typeof appStatusList)[number];
⋮----
/**
 * @default "letsencrypt"
 */
⋮----
export type SslIssuer = (typeof sslIssuerList)[number];
⋮----
// build platforms
⋮----
export type BuildPlatform = (typeof buildPlatformList)[number];
⋮----
// system status
// export const systemStatusList = ["incident", "recover"] as const;
// export type SystemStatus = typeof systemStatusList[number];
⋮----
// webhook events
⋮----
// "system_status",
⋮----
export type SystemEvent = (typeof systemEventList)[number];
⋮----
// webhook channels
⋮----
export type WebhookChannel = (typeof webhookChannelList)[number];
⋮----
export type WebhookEventStatus = (typeof webhookEventStatusList)[number];
⋮----
/**
 * Credential fields / maskFields / sensitive fields
 */
⋮----
// account
⋮----
// clusters & registries
⋮----
// git
⋮----
// metadata
⋮----
/**
 * ROLES & PERMISSIONS: API Routes
 */
</file>

<file path="src/middlewares/auth-api-key.ts">
import { Response as ApiResponse } from "diginext-utils/dist/response";
import type { NextFunction, Response as ExpressResponse } from "express";
import { isEmpty } from "lodash";
⋮----
import type { IRole, IWorkspace } from "@/entities";
import type { AppRequest } from "@/interfaces/SystemTypes";
import { MongoDB } from "@/plugins/mongodb";
⋮----
export const apiAccessTokenHandler = async (req: AppRequest, res: ExpressResponse, next: NextFunction) =>
⋮----
// extract API key from headers
⋮----
// check active workspace
⋮----
// role
⋮----
// WHY????
⋮----
// if (isEmpty(apiKeyAccount.activeWorkspace) && isEmpty(apiKeyAccount.activeRole)) return Response.rejected(res, "Permissions denied.");
⋮----
// user
⋮----
// next();
⋮----
// return res.status(401).json({ message: "Invalid token" });
</file>

<file path="src/middlewares/process-api-request.ts">
import type { NextFunction } from "express";
⋮----
import { Config } from "@/app.config";
import type { ResponseData } from "@/interfaces";
import type { AppRequest, AppResponse } from "@/interfaces/SystemTypes";
import { maskSensitiveInfo } from "@/plugins/mask-sensitive-info";
⋮----
import { saveActivityLog } from "./activity-log";
⋮----
export const processApiRequest =
(executor: (...params) => Promise<ResponseData>) => async (req: AppRequest, res: AppResponse, next: NextFunction) =>
⋮----
// mask sensitive information before responding (only for data which the current user doesn't own):
⋮----
// save activity log here...
⋮----
// respond data...
⋮----
// forward the error to Express.js Error Handling Route
⋮----
export const processApiRequestWithoutMasking =
(executor: (...params) => Promise<ResponseData>) => async (req: AppRequest, res: AppResponse, next: NextFunction) =>
⋮----
// save activity log here...
⋮----
// respond data...
⋮----
// forward the error to Express.js Error Handling Route
</file>

<file path="src/middlewares/register-controller.ts">
import type { NextFunction, Response } from "express";
⋮----
import type { IWorkspace } from "@/entities";
import type { AppRequest } from "@/interfaces/SystemTypes";
⋮----
export const registerController = (controller: any) =>
⋮----
// assign Express request
⋮----
// assign current user to the controller
⋮----
// get current workspace
⋮----
// assign ownership
⋮----
// assign ownership, express.Request to service
⋮----
// parse filter, body and pagination data:
⋮----
// forward the error to Express.js Error Handling Route
</file>

<file path="src/modules/ai/openrouter-api.ts">
import type { AxiosRequestConfig } from "axios";
import axios from "axios";
import { isEmpty } from "lodash";
⋮----
import { Config } from "@/app.config";
⋮----
"qwen/qwen-2.5-coder-32b-instruct", // 2024-11-14
⋮----
export type AIModel = (typeof aiModels)[number];
⋮----
export interface AIDto {
	model?: AIModel;
	messages: { role: "system" | "user"; content: string }[];
}
⋮----
export interface OpenRouterResponseData {
	model: AIModel;
	choices: { message: { role: string; content: string } }[];
}
⋮----
export async function aiApi<T = OpenRouterResponseData>(
	options: AxiosRequestConfig & { baseUrl?: string; apiKey?: string; data?: AIDto; isDebugging?: boolean }
)
⋮----
// default headers
⋮----
// Authentication
⋮----
// if (options.data) options.data = new URLSearchParams(options.data);
</file>

<file path="src/modules/db/mongo.ts">
/* eslint-disable prettier/prettier */
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logError, logSuccess } from "diginext-utils/dist/xconsole/log";
import { existsSync, mkdirSync, rmSync } from "fs";
import generator from "generate-password";
import { MongoClient } from "mongodb";
import path from "path";
⋮----
import { CLI_DIR, STORAGE_DIR } from "@/config/const";
⋮----
export type MongoConnectionInfo = {
	url?: string;
	host?: string;
	/**
	 * @default 27017
	 */
	port?: string;
	/**
	 * @default root
	 */
	user?: string;
	pass?: string;
};
⋮----
/**
	 * @default 27017
	 */
⋮----
/**
	 * @default root
	 */
⋮----
// import { execaSync } from "execa";
⋮----
export const checkConnection = async (options: Partial<MongoConnectionInfo> &
⋮----
export const backup = async (
	options: Partial<MongoConnectionInfo> & {
		/**
		 * @default all
		 */
		dbName?: string;
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * Output directory
		 */
		outDir?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * @default all
		 */
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * Output directory
		 */
⋮----
// compress backup folder
⋮----
// keep the compressed file, remove the directory to save disk space...
⋮----
export const restore = async (
	options: Partial<MongoConnectionInfo> & {
		/**
		 * Database name
		 * @default all-databases
		 */
		dbName?: string;
		/**
		 * @default admin
		 */
		authDb?: string;
		/**
		 * From a directory
		 */
		dir?: string;
	} & { isDebugging?: boolean }
) =>
⋮----
/**
		 * Database name
		 * @default all-databases
		 */
⋮----
/**
		 * @default admin
		 */
⋮----
/**
		 * From a directory
		 */
⋮----
export const connect = async (
⋮----
// config[provider].database.mongo[env] || config[provider].database.mongo.default;
⋮----
export const addUser = async (
⋮----
export const addDefaultUser = async (
⋮----
export const createNewDatabase = async (
⋮----
// create initial collection:
⋮----
// add users
let host = ""; //TODO: find host
// config.database.mongo[env].host;
</file>

<file path="src/modules/deploy/generate-deployment.ts">
import type { V1PersistentVolumeClaim } from "@kubernetes/client-node";
import { log, logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import yaml from "js-yaml";
import _, { isEmpty, isObject, toNumber } from "lodash";
⋮----
import { getContainerResourceBySize } from "@/config/config";
import { DIGINEXT_DOMAIN, FULL_DEPLOYMENT_TEMPLATE_PATH, NAMESPACE_TEMPLATE_PATH } from "@/config/const";
import type { IContainerRegistry, IUser, IWorkspace } from "@/entities";
import type { AppConfig, DeployEnvironment, KubeDeployment, KubeNamespace } from "@/interfaces";
import type { KubeIngress } from "@/interfaces/KubeIngress";
import { objectToDeploymentYaml } from "@/plugins";
import { formatEnvVars } from "@/plugins/env-var";
import { makeSlug } from "@/plugins/slug";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import ClusterManager from "../k8s";
import { createImagePullSecretsInNamespace } from "../k8s/image-pull-secret";
import getDeploymentName from "./generate-deployment-name";
import { generateDomains } from "./generate-domain";
⋮----
export type GenerateDeploymentParams = {
	appSlug: string;
	env: string;
	username: string;
	user: IUser;
	workspace: IWorkspace;
	/**
	 * Skip replacing origin domain of "prerelease" environment.
	 *
	 * @default false
	 */
	skipPrerelease?: boolean;
	/**
	 * Requires if generate deployment files from image URL.
	 */
	appConfig?: AppConfig;
	/**
	 * Requires if generate deployment files from source code.
	 */
	targetDirectory?: string;
	/**
	 * Requires if generate deployment files from source code.
	 */
	buildTag?: string;
	// debug
	isDebugging?: boolean;
};
⋮----
/**
	 * Skip replacing origin domain of "prerelease" environment.
	 *
	 * @default false
	 */
⋮----
/**
	 * Requires if generate deployment files from image URL.
	 */
⋮----
/**
	 * Requires if generate deployment files from source code.
	 */
⋮----
/**
	 * Requires if generate deployment files from source code.
	 */
⋮----
// debug
⋮----
export type GenerateDeploymentResult = {
	// namespace
	namespaceContent: string;
	namespaceObject: KubeNamespace;
	// deployment (ingress, service, pods,...)
	deploymentContent: string;
	deploymentCfg: KubeDeployment;
	// prerelease (ingress, service, pods,...)
	// prereleaseYamlObject: any[];
	// prereleaseDeploymentContent: string;
	// prereleaseUrl: string;
	// accessibility
	buildTag: string;
	IMAGE_NAME: string;
	endpoint: string;
};
⋮----
// namespace
⋮----
// deployment (ingress, service, pods,...)
⋮----
// prerelease (ingress, service, pods,...)
// prereleaseYamlObject: any[];
// prereleaseDeploymentContent: string;
// prereleaseUrl: string;
// accessibility
⋮----
export const generateDeployment = async (params: GenerateDeploymentParams) =>
⋮----
// validate inputs
⋮----
// DEFINE DEPLOYMENT PARTS:
⋮----
// let deploymentName = project + "-" + appSlug.toLowerCase();
⋮----
// Prepare for building docker image
⋮----
// TODO: Replace BUILD_NUMBER so it can work with Skaffold
⋮----
// get container registry
⋮----
// console.log("registry :>> ", registry);
⋮----
// get destination cluster
⋮----
// get registry secret as image pulling secret:
⋮----
// prerelease:
⋮----
// Setup a domain for prerelease
⋮----
// * [NEW TACTIC] Fetch ENV variables from database:
⋮----
// console.log("generate deployment > deployEnvironment :>> ", deployEnvironment);
⋮----
// console.log("[1] containerEnvs :>> ", containerEnvs);
⋮----
// FIXME: magic?
⋮----
// kubernetes YAML only accept string as env variable value
⋮----
// console.log("[2] containerEnvs :>> ", containerEnvs);
⋮----
// prerelease ENV variables (is the same with PROD ENV variables, except the domains/origins if any):
⋮----
// DO NOT replace origin domain of PRERELEASE env:
⋮----
// replace all production domains with PRERELEASE domains
⋮----
// console.log("[3] prereleaseEnvs :>> ", prereleaseEnvs);
⋮----
// Should inherit the "Ingress" config from the previous deployment?
⋮----
// get available ingress class
⋮----
// write namespace.[env].yaml
⋮----
// write deployment.[env].yaml (ing, svc, deployment)
⋮----
// Make sure all objects stay in the same namespace:
⋮----
// INGRESS
⋮----
// inherit config from previous deployment
⋮----
// ingress class
⋮----
// OLD
// ingCfg.metadata.annotations["kubernetes.io/ingress.class"] = ingressClass;
// NEW
⋮----
// block some specific paths
⋮----
// limit file upload & body size
⋮----
// limit requests per minute (DEV ONLY)
⋮----
// labels
⋮----
// redirect
⋮----
// tls
⋮----
// rules
⋮----
// delete SSL config if have to:
⋮----
// pre-release
⋮----
// block some specific paths
⋮----
// Routing traffic to the same pod base on ClientIP
⋮----
// clone svc to prerelease:
⋮----
// development environment
⋮----
// canary, production, staging,...
⋮----
// * Add roll out strategy -> Rolling Update
⋮----
// container replicas
⋮----
// deployment's labels
⋮----
// pod's labels
⋮----
// container
⋮----
// Inject "imagePullSecrets" to pull image from the container registry
⋮----
// CAUTION: PORT 80 sẽ không sử dụng được trên cluster của Digital Ocean
⋮----
// readinginessProbe & livenessProbe
// RUNNING: Sometimes, applications are temporarily unable to serve traffic
⋮----
// STARTUP: The application is considered unhealthy after a certain number of consecutive failures
⋮----
initialDelaySeconds: 30, // chờ 30s rồi mới bắt đầu check
⋮----
periodSeconds: 10, // check lại mỗi 10s
successThreshold: 1, // chỉ cần 1 lần success -> app is ready
failureThreshold: 30, // check 30 lần fail x 10s = 300s (5 phút)
⋮----
// add persistent volumes
⋮----
// persistent volume claim
⋮----
// mount to container
⋮----
// "nodeAffinity" -> to make sure pods are scheduled to the same node with the persistent volume
⋮----
// prerelease's deployment:
⋮----
// prerelease's app selector
⋮----
// ! no need roll out strategy for prerelease:
⋮----
// add persistent volumes if needed
⋮----
// get storage class name
⋮----
// assign labels
⋮----
// persistent volume claim
⋮----
/**
	 * PRE-RELEASE DEPLOYMENT:
	 */
⋮----
// End point của ứng dụng:
⋮----
// namespace
⋮----
// deployment (ingress, service, pods,...)
⋮----
// prerelease (ingress, service, pods,...)
⋮----
// accessibility
</file>

<file path="src/modules/deploy/request-deploy.ts">
import { readFileSync } from "node:fs";
⋮----
import chalk from "chalk";
import { log, logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { io } from "socket.io-client";
⋮----
import { getCliConfig } from "@/config/config";
import type { DeployBuildParams } from "@/controllers/DeployController";
import type { InputOptions } from "@/interfaces/InputOptions";
import { fetchApi } from "@/modules/api/fetchApi";
import { currentVersion, resolveDockerfilePath, resolveFilePath } from "@/plugins";
⋮----
import type { StartBuildParams } from "../build";
import { generateBuildTagBySourceDir } from "../build/generate-build-tag";
import { getServerInfo } from "../cli/get-server-info";
import { isUnstagedFiles } from "../git/git-utils";
import { askAiGenerateDockerfile } from "./ask-ai-generate-dockerfile";
import { askForDeployEnvironmentInfo } from "./ask-deploy-environment-info";
import { createBuildSlug } from "./create-build-slug";
import { parseOptionsToAppConfig } from "./parse-options-to-app-config";
⋮----
/**
 * Request the build server to start building & deploying
 */
export async function requestDeploy(options: InputOptions)
⋮----
// check Dockerfile -> no dockerfile, no build -> failed
⋮----
// ask to use AI for generating "Dockerfile"
⋮----
// [SECURITY] Check ".dockerignore"
⋮----
// Warn about uncommited files
⋮----
/**
	 * [1] Parse cli options, validate the input params
	 *     and save it to deploy environment config on Diginext workspace
	 */
⋮----
/**
	 * [2] Compare LOCAL & SERVER App Config,
	 *     then upload local app config to server.
	 */
// console.log("requestDeploy() > options.author :>> ", options.author);
⋮----
/**
	 * [3] Generate build number & build image as docker image tag
	 */
⋮----
/**
	 * [5] Notify the commander & call API to request server build:
	 */
⋮----
/**
	 * [6] Get server info
	 */
⋮----
// Make an API to request server to build:
⋮----
// check errors
⋮----
// update the project so it can be sorted on top
⋮----
// friendly reminder
⋮----
const ping = () =>
⋮----
// process.exit(1);
⋮----
// process.exit(0);
⋮----
// Max build duration: 60 mins
</file>

<file path="src/modules/diginext/dx-domain.ts">
import { IsTest } from "@/app.config";
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { ResponseData } from "@/interfaces";
⋮----
import { dxApi } from "./dx-api";
⋮----
export type CreateDiginextDomainParams = {
	/**
	 * Subdomain name
	 * @example myworkspace, yourworkspace, ourteam
	 */
	name: string;
	data: string;
	/**
	 * DXSITE User ID
	 */
	userId: string;
};
⋮----
/**
	 * Subdomain name
	 * @example myworkspace, yourworkspace, ourteam
	 */
⋮----
/**
	 * DXSITE User ID
	 */
⋮----
export type DiginextDomainRecordQuery = {
	/**
	 * Record name
	 */
	name: string;
	/**
	 * Record type (A, TXT, CNAME, MX,...)
	 */
	type: string;
};
⋮----
/**
	 * Record name
	 */
⋮----
/**
	 * Record type (A, TXT, CNAME, MX,...)
	 */
⋮----
export type UpdateDiginextDomainData = Partial<DiginextDomainRecordQuery> & {
	/**
	 * Value of "A" record
	 * @example 192.168.127.12
	 */
	data: string;
	/**
	 * DXSITE User ID
	 */
	userId: string;
};
⋮----
/**
	 * Value of "A" record
	 * @example 192.168.127.12
	 */
⋮----
/**
	 * DXSITE User ID
	 */
⋮----
export type CreateDiginextDomainResponse = ResponseData & {
	data: { domain: string; domain_record: string };
};
⋮----
export type GetDiginextDomainsResponse = ResponseData & {
	data: {
		domains: {
			id: string;
			name: string;
		}[];
	};
};
⋮----
export type UpdateDiginextDomainResponse = ResponseData & {
	data: {
		id: string;
		/**
		 * Subdomain name
		 * @example myworkspace, yourworkspace, ourteam
		 */
		name: string;
		/**
		 * Record type (A, TXT, CNAME, MX,...)
		 */
		type: string;
		/**
		 * Value of "A" record
		 * @example 192.168.127.12
		 */
		data: string;
	};
};
⋮----
/**
		 * Subdomain name
		 * @example myworkspace, yourworkspace, ourteam
		 */
⋮----
/**
		 * Record type (A, TXT, CNAME, MX,...)
		 */
⋮----
/**
		 * Value of "A" record
		 * @example 192.168.127.12
		 */
⋮----
export type GetDiginextDomainRecordsResponse = ResponseData & {
	data: {
		records: {
			id: string;
			name: string;
			type: string;
			data: string;
		}[];
	};
};
⋮----
export async function dxCreateDomain(params: CreateDiginextDomainParams, dxKey: string, options?:
⋮----
export async function dxGetDomains(dxKey: string, options?:
⋮----
export async function dxGetAllDomainRecords(dxKey: string, options?:
⋮----
export async function dxGetDomainRecordByName(recordQuery: DiginextDomainRecordQuery, dxKey: string, options?:
⋮----
export async function dxUpdateDomainRecord(
	recordQuery: DiginextDomainRecordQuery,
	recordData: UpdateDiginextDomainData,
	dxKey: string,
	options?: { isDebugging?: boolean }
)
⋮----
export async function dxDeleteDomainRecord(recordQuery: DiginextDomainRecordQuery, dxKey: string, options?:
</file>

<file path="src/modules/k8s/kube-metrics.ts">
import axios from "axios";
import dayjs from "dayjs";
import { z } from "zod";
⋮----
type MetricDataPoint = z.infer<typeof MetricDataPointSchema>;
type TimeSeriesMetric = z.infer<typeof TimeSeriesMetricSchema>;
⋮----
export class KubernetesMetricsService
⋮----
constructor(prometheusUrl: string)
⋮----
async getMetricsTimeSeries(query: string, start: Date, end: Date, step: number = 60): Promise<TimeSeriesMetric[]>
⋮----
// Example method for memory metrics
async getMemoryMetrics(): Promise<TimeSeriesMetric[]>
⋮----
const start = new Date(end.getTime() - 10 * 60000); // Last 10 minutes
</file>

<file path="src/modules/k8s/kubectl.ts">
/* eslint-disable prettier/prettier */
import type { V1PersistentVolume, V1PersistentVolumeClaim, V1StorageClass } from "@kubernetes/client-node";
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logError, logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { execa, execaCommandSync } from "execa";
import { existsSync, mkdirSync, unlinkSync, writeFileSync } from "fs";
import { isEmpty, isUndefined, round, startsWith, toInteger } from "lodash";
import path from "path";
⋮----
import { CLI_DIR } from "@/config/const";
import type { KubeDeployment, KubeIngress, KubeNamespace, KubeSecret, KubeService, KubeStatefulSet } from "@/interfaces";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { KubeIngressClass } from "@/interfaces/KubeIngressClass";
import type { KubeNode } from "@/interfaces/KubeNode";
import type { KubePod } from "@/interfaces/KubePod";
import { execCmd } from "@/plugins";
⋮----
import ClusterManager from "./index";
⋮----
interface KubeGenericOptions {
	/**
	 * Output type (JSON or YAML)
	 * @default "json"
	 */
	output?: "json" | "yaml";
	/**
	 * A context name in KUBECONFIG
	 */
	context?: string;
	/**
	 * Should skip when error?
	 * @default false
	 */
	skipOnError?: boolean;
	/**
	 * Debug
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * Output type (JSON or YAML)
	 * @default "json"
	 */
⋮----
/**
	 * A context name in KUBECONFIG
	 */
⋮----
/**
	 * Should skip when error?
	 * @default false
	 */
⋮----
/**
	 * Debug
	 */
⋮----
interface KubeCommandOptions extends KubeGenericOptions {
	/**
	 * Filter resources by label
	 * @example "phase!=prerelease,app=abc-xyz"
	 */
	filterLabel?: string;
}
⋮----
/**
	 * Filter resources by label
	 * @example "phase!=prerelease,app=abc-xyz"
	 */
⋮----
/**
 * Convert filter object to filter labels string
 * - Use ! for different than value
 * @example { phase: "!prerelease", app: "abc-xyz" } -> "phase!=prerelease,app=abc-xyz"
 */
export function objectToFilterLabels(obj: Record<string, string>)
⋮----
/**
 * Similar to `kubectl apply -f deployment.yaml`
 * @param filePath - Path to Kubernetes YAML file or URL of Kubernetes YAML file
 * @param namespace - Target namespace of the cluster
 * @param options - kubectl command options
 * @returns
 */
export async function kubectlApply(filePath: string, options: KubeGenericOptions =
⋮----
export async function kubectlApplyContent(yamlContent: string, options: KubeCommandOptions =
⋮----
// create temporary YAML file
⋮----
// process kubectl apply command which point to that temporary YAML file:
⋮----
export interface NodeUsage {
	name: string;
	cpu: string;
	cpuPercent: string;
	cpuCapacity: string;
	memory: string;
	memoryPercent: string;
	memoryCapacity: string;
}
⋮----
/**
 * Get all nodes of a cluster
 */
export async function getAllNodes(options: KubeCommandOptions =
⋮----
// get metrics
⋮----
// get resource usage
⋮----
// get pod count
⋮----
// usage
⋮----
/**
 * Get all namepsaces of a cluster
 */
export async function getAllNamespaces(options: KubeCommandOptions =
⋮----
/**
 * Get a namepsace of a cluster
 */
export async function getNamespace(name: string, options: KubeCommandOptions =
⋮----
/**
 * Create new namespace of a cluster
 */
export async function createNamespace(namespace: string, options: KubeGenericOptions =
⋮----
/**
 * Delete a namespace of a cluster
 */
export async function deleteNamespace(namespace: string, options: KubeCommandOptions =
⋮----
/**
 * Delete a namespace of a cluster
 */
export async function deleteNamespaceByCluster(namespace: string, clusterSlug: string)
⋮----
/**
 * Check whether this namespace was existed
 */
export async function isNamespaceExisted(namespace: string, options: KubeCommandOptions =
⋮----
/**
 * Get all secrets of a namespace
 */
export async function getSecrets(namespace: string = "default", options: KubeCommandOptions =
⋮----
/**
 * Get all secrets of a cluster
 */
export async function getAllSecrets(options: KubeCommandOptions =
⋮----
/**
 * Check whether this secret was existed in the namespace
 */
export async function isSecretExisted(name: string, namespace: string = "default", options: KubeCommandOptions =
⋮----
/**
 * Delete a secret in a namespace
 */
export async function deleteSecret(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Delete secrets in a namespace by filter
 */
export async function deleteSecretsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Get all ingresses of a cluster
 */
export async function getAllIngresses(options: KubeGenericOptions =
⋮----
export async function getIngressClasses(options: KubeGenericOptions =
⋮----
export async function getIngress(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get ingress list of a namespace
 * @param namespace
 */
export async function getIngresses(namespace = "default", options: KubeCommandOptions =
⋮----
export async function deleteIngress(name, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deleteIngressByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
export interface GetKubeDeployOptions extends KubeCommandOptions {
	/**
	 * If `TRUE`, it will get metrics of pods and include in the response.
	 *
	 * @default true
	 */
	metrics?: boolean;
}
⋮----
/**
	 * If `TRUE`, it will get metrics of pods and include in the response.
	 *
	 * @default true
	 */
⋮----
/**
 * Get all deployments of a namespace
 * @param namespace @default "default"
 */
export async function getDeploys(namespace = "default", options: GetKubeDeployOptions =
⋮----
// get pods usage
⋮----
// resource usage average
⋮----
// resource usage recommend
⋮----
// resource usage capacity
⋮----
/**
 * Get all deployments of a cluster
 */
export async function getAllDeploys(options: GetKubeDeployOptions =
⋮----
// get pods usage
⋮----
// resource usage average
⋮----
// resource usage recommend
⋮----
// resource usage capacity
⋮----
/**
 * Get a deployment in a namespace
 */
export async function getDeploy(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get deployments in a namespace by filter labels
 */
export async function getDeploysByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Scale replicas of a deployment in a namespace
 */
export async function scaleDeploy(name: string, replicas: number, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Scale replicas of multiple deployments in a namespace by label filter
 * @param name - Deployment's name
 */
export async function scaleDeployByFilter(replicas: number, namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Set image to a container of a deployment in a namespace
 */
export async function setDeployImage(name: string, container: string, imageURL: string, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Set image to all containers of a deployment in a namespace
 * @param name - Deployment's name
 */
export async function setDeployImageAll(name: string, imageURL: string, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Set port to all containers of a deployment in a namespace
 * @param name - Deployment's name
 * @param port - New port
 */
export async function setDeployPortAll(name: string, port: string, namespace = "default", options: KubeGenericOptions =
⋮----
// get all container names
⋮----
/**
 * Set "imagePullSecrets" name to deployments in a namespace by filter
 */
export async function setDeployImagePullSecretByFilter(imagePullSecretName: string, namespace = "default", options: KubeCommandOptions =
⋮----
// kubectl patch deployment valid-deployment  --type json   -p='[{"op": "replace", "path": "/spec/containers/0/image", "value":"new image"}]'
⋮----
/**
 * Delete a deployment in a namespace
 */
export async function deleteDeploy(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Delete a deployments in a namespace by label filter
 */
export async function deleteDeploymentsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Get all StatefulSets of a namespace
 * @param namespace @default "default"
 */
export async function getStatefulSets(namespace = "default", options: GetKubeDeployOptions =
⋮----
// get pods usage
⋮----
// resource usage average
⋮----
// resource usage recommend
⋮----
// resource usage capacity
⋮----
/**
 * Get all statefulsets of a cluster
 */
export async function getAllStatefulSets(options: GetKubeDeployOptions =
⋮----
// get pods usage
⋮----
// resource usage average
⋮----
// resource usage recommend
⋮----
// resource usage capacity
⋮----
/**
 * Get a StatefulSet in a namespace
 */
export async function getStatefulSet(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get StatefulSets in a namespace by filter labels
 */
export async function getStatefulSetsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Scale replicas of a StatefulSet in a namespace
 */
export async function scaleStatefulSet(name: string, replicas: number, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Delete a StatefulSet in a namespace
 */
export async function deleteStatefulSet(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Delete StatefulSets in a namespace by label filter
 */
export async function deleteStatefulSetsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Create service by name
 * @param namespace @default "default"
 */
export async function createService(name, namespace = "default", options: KubeGenericOptions =
⋮----
// const { execa, execaCommand, execaSync, execaCommandSync } = await import("execa");
// const { context, skipOnError } = options;
// try {
// 	const args = [];
// 	if (context) args.push(`--context=${context}`);
⋮----
// 	args.push("-n", namespace, "get", "svc", name);
⋮----
// 	args.push("-o", "json");
⋮----
// 	const { stdout } = await execa("kubectl", args);
// 	return JSON.parse(stdout) as KubeService;
// } catch (e) {
// 	if (!skipOnError) logError(`[KUBE_CTL] getService >`, e);
// 	return;
// }
⋮----
/**
 * Get service by name
 * @param namespace @default "default"
 */
export async function getService(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get services in a namespace
 * @param namespace @default "default"
 * @param labelFilter Filter by labels @example "phase!=prerelease,app=abc-xyz"
 */
export async function getServices(namespace = "default", options: KubeCommandOptions =
⋮----
/**
 * Get all services in a cluster
 * @param labelFilter Filter by labels @example "phase!=prerelease,app=abc-xyz"
 */
export async function getAllServices(options: KubeCommandOptions =
⋮----
/**
 * Delete service by name
 * @param namespace @default "default"
 */
export async function deleteService(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Delete service by label filter
 * @param namespace @default "default"
 */
export async function deleteServiceByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
export async function getPod(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get pods in a namespace
 * @param namespace @default "default"
 */
export async function getPods(namespace = "default", options: GetKubeDeployOptions =
⋮----
// console.log(`[GET PODS] Command :>> kubectl ${args.join(" ")}`);
⋮----
// get resource usage
⋮----
// usage
⋮----
/**
 * Get all pods in a cluster
 */
export async function getAllPods(options: KubeCommandOptions =
⋮----
// get resource usage
⋮----
// console.log("usage :>> ", usage);
⋮----
// usage
⋮----
/**
 * Alias function of `getPods()`
 */
⋮----
export async function deletePod(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deletePodsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
export async function logPod(
	name,
	namespace = "default",
	options: KubeGenericOptions & { timestamps?: boolean; prefix?: boolean; previous?: boolean } = {}
)
⋮----
// options
⋮----
export async function logPodByFilter(
	namespace = "default",
	options: KubeCommandOptions & { timestamps?: boolean; prefix?: boolean; previous?: boolean } = {}
)
⋮----
// options
⋮----
export async function setEnvVar(envVars: KubeEnvironmentVariable[], deploy: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function setEnvVarByFilter(envVars: KubeEnvironmentVariable[], namespace = "default", options: KubeCommandOptions =
⋮----
export async function deleteEnvVar(envVarNames: string[], deploy: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deleteEnvVarByFilter(envVarNames: string[], namespace = "default", options: KubeCommandOptions =
⋮----
export async function rollbackDeploy(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function rollbackDeployRevision(name: string, revision: number, namespace = "default", options: KubeGenericOptions =
⋮----
// ------------------- PERSISTENT VOLUME -----------------------
⋮----
/**
 * Get PersistentVolume by name
 */
export async function getPersistentVolume(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get PersistentVolumes in a namespace
 * @param namespace @default "default"
 */
export async function getPersistentVolumes(namespace = "default", options: GetKubeDeployOptions =
⋮----
/**
 * Get all PersistentVolumes in a cluster
 */
export async function getAllPersistentVolumes(options: KubeCommandOptions =
⋮----
/**
 * Alias function of `getPods()`
 */
⋮----
export async function deletePersistentVolume(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deletePersistentVolumesByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
// ------------------- PERSISTENT VOLUME CLAIM -----------------------
⋮----
/**
 * Get PersistentVolumeClaim by name
 */
export async function getPersistentVolumeClaim(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get PersistentVolumeClaims in a namespace
 * @param namespace @default "default"
 */
export async function getPersistentVolumeClaims(namespace = "default", options: GetKubeDeployOptions =
⋮----
/**
 * Get all PersistentVolumes in a cluster
 */
export async function getAllPersistentVolumeClaims(options: KubeCommandOptions =
⋮----
/**
 * Alias function of `getPods()`
 */
⋮----
export async function deletePersistentVolumeClaim(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deletePersistentVolumeClaimsByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
// ------------------- STORAGE CLASS -----------------------
⋮----
/**
 * Get Storage Class by name
 */
export async function getStorageClass(name, namespace = "default", options: KubeGenericOptions =
⋮----
/**
 * Get pods in a namespace
 * @param namespace @default "default"
 */
export async function getStorageClasses(namespace = "default", options: GetKubeDeployOptions =
⋮----
/**
 * Get all pods in a cluster
 */
export async function getAllStorageClasses(options: KubeCommandOptions =
⋮----
/**
 * Alias function of `getPods()`
 */
⋮----
export async function deleteStorageClass(name: string, namespace = "default", options: KubeGenericOptions =
⋮----
export async function deleteStorageClassesByFilter(namespace = "default", options: KubeCommandOptions =
⋮----
export async function kubectlAnnotateDeployment(
	keyAndValue: string,
	deploymentName: string = "",
	namespace = "default",
	options: KubeCommandOptions & { overwrite?: boolean } = { overwrite: true }
)
⋮----
// annotation: key=value
⋮----
// args.push(`kubernetes.io/change-cause="${keyAndValue}"`);
// args.push(`description='${keyAndValue}'`);
</file>

<file path="src/modules/AppDatabase.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import mongoose from "mongoose";
⋮----
import { Config } from "@/app.config";
⋮----
export async function connect(onConnected?: (_db?: typeof mongoose, connection?: mongoose.Connection) => void)
⋮----
// console.log("Config.DB_URI :>> ", Config.DB_URI);
// console.log("Config.DB_NAME :>> ", Config.DB_NAME);
⋮----
serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s
⋮----
connectTimeoutMS: 10000, // Give more time to connect
socketTimeoutMS: 45000, // Socket timeout
maxPoolSize: 10, // Limit connection pool size
minPoolSize: 5, // Minimum connections to maintain
⋮----
// Retry connection after a delay
⋮----
process.exit(1); // passing 1 - will exit the proccess with error
⋮----
export async function disconnect()
</file>

<file path="src/plugins/controller-parser.ts">
import { isBooleanString, isNumberString } from "class-validator";
import { toInt } from "diginext-utils/dist/object";
import { isBoolean, isDate, isEmpty, isNumber, isString, trim } from "lodash";
⋮----
import type { IQueryOptions, IQueryPagination } from "@/interfaces";
import type { AppRequest } from "@/interfaces/SystemTypes";
import { DEFAULT_PAGE_SIZE } from "@/services";
⋮----
import { isValidObjectId } from "./mongodb";
import { parseRequestFilter } from "./parse-request-filter";
⋮----
export function parseFilterAndOptions(req: AppRequest)
⋮----
sort, // @example: -updatedAt,-createdAt
order, // @example: -updatedAt,-createdAt
⋮----
// parse "populate" & "select"
⋮----
// parse "search"
⋮----
// parse "sort" (or "order") from the query url:
⋮----
// parse "pagination"
⋮----
// assign to controller:
⋮----
export async function parsePagination(service: any, req: AppRequest)
⋮----
// log(`pageOptions >>`, pageOptions);
⋮----
// const totalSkip = skip > 0 ? pageOptions.skip : current_page > 0 ? (current_page - 1) * page_size : undefined;
⋮----
// if (totalSkip) page_size = totalSkip;
// log(`totalSkip >>`, totalSkip);
</file>

<file path="src/plugins/logger.ts">
import path from "path";
⋮----
import { CLI_DIR } from "@/config/const";
⋮----
export class Logger
⋮----
constructor(name: string)
⋮----
static find(name: string)
⋮----
static getLogs(slug: string): string | undefined
⋮----
read()
⋮----
append(str)
</file>

<file path="src/plugins/mask-sensitive-info.ts">
import _, { isArray } from "lodash";
⋮----
import type { IRole, IUser } from "@/entities";
⋮----
export interface MaskOptions {
	/**
	 * @default *
	 */
	char?: string;
}
⋮----
/**
	 * @default *
	 */
⋮----
export function isMasked(value: string)
⋮----
export const mask = (str: string, leftUnmaskLength = 0, rightUnmaskLength?: number, options: MaskOptions =
⋮----
export const maskSensitiveInfo = (data: any, user?: IUser, role?: IRole, route?: string) =>
⋮----
// console.log("[mask-sensitive-info] typeof data :>> ", typeof data);
// console.log("[mask-sensitive-info] route :>> ", route);
⋮----
// exclude masking data for some specific routes
⋮----
// skip and return data as is if it's a boolean, number, or string
⋮----
// console.log("[mask-sensitive-info] user :>> ", user);
// console.log("[mask-sensitive-info] user.name :>> ", user.name);
// console.log("[mask-sensitive-info] user.activeRole :>> ", user.activeRole);
⋮----
// console.log("[mask-sensitive-info] role :>> ", role);
⋮----
// console.log("[mask-sensitive-info] maskedFields :>> ", maskedFields);
⋮----
// mask fields
⋮----
/**
			 * ONLY Mask fields for NOT-owned items
			 */
// if (!isOwned(item, user)) {
// 	maskedFields.map((maskedField) => {
// 		if (_.has(item, maskedField)) item = _.set(item, maskedField, "");
// 	});
// }
⋮----
/**
			 * Mask all fields
			 */
⋮----
/**
		 * ONLY Mask fields for NOT-owned items
		 */
// if (!isOwned(data, user))
// 	maskedFields.map((maskedField) => {
// 		if (_.has(data, maskedField)) data = _.set(data, maskedField, "");
// 	});
⋮----
/**
		 * Mask all fields
		 */
⋮----
/**
 * Mask fields of an object
 * @param data - The object to mask
 * @param options - The options
 * @returns The masked object
 */
export const maskObject = (data: any, options:
</file>

<file path="src/routes/api/v1/ask-ai.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import AskAiController from "@/controllers/AskAiController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
/**
	 * Ask AI: generate a Dockerfile
	 */
</file>

<file path="src/routes/api/v1/deploy-environment.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import DeployEnvironmentController from "@/controllers/DeployEnvironmentController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
</file>

<file path="src/routes/api/v1/domain.ts">
import dayjs from "dayjs";
import localizedFormat from "dayjs/plugin/localizedFormat";
import express from "express";
⋮----
import DomainController from "@/controllers/DomainController";
import { authenticate } from "@/middlewares/authenticate";
import { authorize } from "@/middlewares/authorize";
import { processApiRequest } from "@/middlewares/process-api-request";
import { registerController } from "@/middlewares/register-controller";
⋮----
// create new domain
</file>

<file path="src/routes/api/v1/index.ts">
import express from "express";
⋮----
import { isServerReady } from "@/server";
⋮----
import apiKeyUserRouter from "./api_key";
import appRouter from "./app";
import askAiRouter from "./ask-ai";
import buildRouter from "./build";
import clusterRouter from "./cluster";
import cronjobRouter from "./cronjob";
import databaseRouter from "./database";
import databaseBackupRouter from "./database-backup";
import deployRouter from "./deploy";
import deployEnvironmentRouter from "./deploy-environment";
import domainRouter from "./domain";
import frameworkRouter from "./framework";
import gitRouter from "./git";
import mediaRouter from "./media";
import monitorRouter from "./monitor";
import notificationRouter from "./notification";
import projectRouter from "./project";
import providerRouter from "./provider";
import registryRouter from "./registry";
import releaseRouter from "./release";
import roleRouter from "./role";
import routeRouter from "./route";
import serviceAccountRouter from "./service_account";
import statsRouter from "./stats";
import storageRouter from "./storage";
import teamRouter from "./team";
import userRouter from "./user";
import utilityRouter from "./utility";
import webhookRouter from "./webhook";
import workspaceRouter from "./workspace";
⋮----
/**
 * Healh check
 */
⋮----
/**
 * Register API routes
 */
</file>

<file path="src/services/BaseService.ts">
/* eslint-disable prettier/prettier */
import { clearUnicodeCharacters } from "diginext-utils/dist/string/index";
import { randomStringByLength } from "diginext-utils/dist/string/random";
import { logError } from "diginext-utils/dist/xconsole/log";
import { cloneDeepWith } from "lodash";
import type { Model, PipelineStage, Schema } from "mongoose";
import { model } from "mongoose";
⋮----
import type { IRole, IUser, IWorkspace } from "@/entities";
import { roleSchema, workspaceSchema } from "@/entities";
import type { AppRequest, Ownership } from "@/interfaces/SystemTypes";
import { isValidObjectId, MongoDB } from "@/plugins/mongodb";
import { parseRequestFilter } from "@/plugins/parse-request-filter";
import { makeSlug } from "@/plugins/slug";
import { replaceObjectIdsToStrings } from "@/plugins/traverse";
⋮----
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "../interfaces/IQuery";
⋮----
/**
 * ![DANGEROUS]
 * This pass phrase is ONLY being used to empty a database,
 * and should not being used for production evironment.
 */
⋮----
export default class BaseService<T = any>
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(schema: Schema, ownership?: Ownership)
⋮----
async getActiveWorkspace(user: IUser)
⋮----
async getActiveRole(user: IUser)
⋮----
async count(filter?: IQueryFilter<T>, options: IQueryOptions =
⋮----
async create(data: any, options: IQueryOptions =
⋮----
// generate slug (if needed)
⋮----
async function generateUniqueSlug(input, attempt = 1)
⋮----
// check unique again
⋮----
// generate metadata (for searching)
⋮----
// assign item ownership:
⋮----
/**
			 * Preprocess data before create:
			 * - Convert all valid "ObjectId" string to ObjectId()
			 * - Convert "undefined" or "null" to null
			 */
⋮----
// set created/updated date:
⋮----
// strip unneccessary fields
⋮----
// convert all {ObjectId} to {string}:
⋮----
async find(filter: IQueryFilter<T> =
⋮----
// if (options.isDebugging) console.log(`BaseService > "${this.model.collection.name}" > find :>> filter:`, filter);
⋮----
// where
⋮----
// populate
⋮----
// use $lookup to find relation field
⋮----
// if there are many results, return an array, if there are only 1 result, return an object
⋮----
// sort
⋮----
// select
⋮----
// exclude metadata on query result
⋮----
// skip & limit (take)
⋮----
// console.log(`"${this.model.collection.name}" > results >>`, results);
⋮----
// convert all {ObjectId} to {string}:
⋮----
// console.log("isArray(results) :>> ", isArray(results));
⋮----
async findOne(filter?: IQueryFilter<T>, options: IQueryOptions =
⋮----
// if (!result) throw new Error("No data found.");
⋮----
/**
	 * Looking for unique "field" path of the documents in a collection
	 * @param path - Document path (field) to be groupped
	 */
async distinct(path: string, filter: IQueryFilter<T> =
⋮----
// where
⋮----
// populate
⋮----
// use $lookup to find relation field
⋮----
// if there are many results, return an array, if there are only 1 result, return an object
⋮----
// sort
⋮----
// distinct
⋮----
// skip & limit (take)
⋮----
// console.log(`"${this.model.collection.name}" > results >>`, results);
⋮----
// convert all {ObjectId} to {string}:
⋮----
// console.log("isArray(results) :>> ", isArray(results));
⋮----
async update(filter: IQueryFilter<T>, data: any, options: IQueryOptions =
⋮----
/**
		 * Preprocess data before update:
		 * - Convert all valid "ObjectId" string to ObjectId()
		 * - Convert "undefined" or "null" to null
		 */
⋮----
// set updated date
⋮----
// Notes: keep the square brackets in [updateData] -> it's the pipelines for update query
⋮----
// response > results
⋮----
async updateOne(filter: IQueryFilter<T>, data: any, options: IQueryOptions =
⋮----
async softDelete(filter?: IQueryFilter<T>, options: IQueryOptions =
⋮----
async delete(filter?: IQueryFilter<T>, options: IQueryOptions =
⋮----
async empty(filter?: IQueryFilter<T>)
</file>

<file path="src/services/EnvVarService.ts">
import type { IEnvVar } from "@/entities/EnvVar";
import { envVarSchema } from "@/entities/EnvVar";
import type { Ownership } from "@/interfaces/SystemTypes";
⋮----
import BaseService from "./BaseService";
⋮----
export class EnvVarService extends BaseService<IEnvVar>
⋮----
constructor(ownership?: Ownership)
⋮----
async getByWorkspaceId(workspaceId: string)
⋮----
async getByProjectId(projectId: string)
⋮----
async getByAppId(appId: string)
⋮----
async getByDeployEnvironment(appId: string, env: string)
⋮----
// async getByEnvironmentId(environmentId: string) {
// 	return super.find({ environmentId });
// }
⋮----
async getByAppIdAndEnvironmentId(appId: string, environmentId: string)
</file>

<file path="src/services/ProjectService.ts">
import { logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
import type { IProject } from "@/entities/Project";
import { projectSchema } from "@/entities/Project";
import type { IQueryFilter, IQueryOptions, IQueryPagination } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import ClusterManager from "@/modules/k8s";
import { MongoDB } from "@/plugins/mongodb";
import { containsSpecialCharacters } from "@/plugins/string";
import { checkProjectPermissions, checkProjectPermissionsByFilter } from "@/plugins/user-utils";
⋮----
import { AppService } from "./AppService";
import BaseService from "./BaseService";
⋮----
export class ProjectService extends BaseService<IProject>
⋮----
constructor(ownership?: Ownership)
⋮----
async find(filter?: IQueryFilter<IProject>, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination): Promise<IProject[]>
⋮----
async create(data: any, options?: IQueryOptions): Promise<IProject>
⋮----
// validate
⋮----
// process
⋮----
async update(filter: IQueryFilter<IProject>, data: any, options?: IQueryOptions): Promise<IProject[]>
⋮----
// check access permissions
⋮----
async updateOne(filter: IQueryFilter<IProject>, data: any, options?: IQueryOptions): Promise<IProject>
⋮----
// check permissions
⋮----
async delete(filter?: IQueryFilter<IProject>, options?: IQueryOptions): Promise<
⋮----
// check permissions
⋮----
// Delete all apps & deploy environments!
⋮----
async softDelete(filter?: IQueryFilter)
⋮----
// find the project:
⋮----
// check access permissions
⋮----
// check access permissions
⋮----
// find all apps & environments, then take down all namespaces:
⋮----
// delete all workloads of each deploy environment in an app:
⋮----
// delete namespace
⋮----
// find all related apps and delete them all:
⋮----
// delete the project in the database:
</file>

<file path="src/services/WorkspaceService.ts">
import type { Types } from "mongoose";
⋮----
import { Config, IsTest } from "@/app.config";
import type { IRole } from "@/entities";
import type { IWorkspace } from "@/entities/Workspace";
import { workspaceSchema } from "@/entities/Workspace";
import type { IQueryFilter, IQueryOptions } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import { DB } from "@/modules/api/DB";
import { dxSendEmail } from "@/modules/diginext/dx-email";
import { dxCreateUser } from "@/modules/diginext/dx-user";
import type { CreateWorkspaceParams } from "@/modules/diginext/dx-workspace";
import { dxCreateWorkspace, dxJoinWorkspace } from "@/modules/diginext/dx-workspace";
import { filterUniqueItems } from "@/plugins/array";
import { uploadFileBuffer } from "@/plugins/cloud-storage";
import { MongoDB } from "@/plugins/mongodb";
import { addUserToWorkspace, makeWorkspaceActive } from "@/plugins/user-utils";
import seedWorkspaceInitialData from "@/seeds";
⋮----
import BaseService from "./BaseService";
⋮----
export interface WorkspaceInputData {
	/**
	 * Name of the workspace.
	 */
	name: string;
	/**
	 * User ID of the owner (default is the current authenticated user)
	 */
	owner?: string;
	/**
	 * Set privacy mode for this workspace
	 * @default true
	 */
	public?: boolean;
	/**
	 * DXUP API Key
	 */
	dx_key?: string;
	/**
	 * DXUP Workspace ID
	 */
	dx_id?: string;
}
⋮----
/**
	 * Name of the workspace.
	 */
⋮----
/**
	 * User ID of the owner (default is the current authenticated user)
	 */
⋮----
/**
	 * Set privacy mode for this workspace
	 * @default true
	 */
⋮----
/**
	 * DXUP API Key
	 */
⋮----
/**
	 * DXUP Workspace ID
	 */
⋮----
export interface InviteMemberData {
	emails: string[];
	role?: string;
}
⋮----
export interface AddUserToWorkspaceParams {
	userId: Types.ObjectId;
	workspaceId: Types.ObjectId;
	roleId?: Types.ObjectId;
}
⋮----
export class WorkspaceService extends BaseService<IWorkspace>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(data: WorkspaceInputData, options?: IQueryOptions): Promise<IWorkspace>
⋮----
// find owner
⋮----
// Assign some default values if it's missing
⋮----
// ----- VERIFY DX KEY -----
⋮----
// Create a workspace in "dxup.dev"
⋮----
// create user on "dxup.dev" via "dxApi"
⋮----
// create workspace on "dxup.dev" via "dxApi"
⋮----
// assign DXSITE workspace ID and key to the workspace
⋮----
// console.log("Config.SERVER_TYPE :>> ", Config.SERVER_TYPE);
⋮----
// ----- END VERIFYING -----
⋮----
// [1] Create new workspace:
⋮----
/**
		 * [2] SEED INITIAL DATA TO THIS WORKSPACE
		 * - Default roles
		 * - Default permissions of routes
		 * - Default API_KEY
		 * - Default Service Account
		 * - Default Frameworks
		 * - Default Clusters (if any)
		 */
⋮----
// [3] Ownership: add this workspace to the creator {User} if it's not existed:
⋮----
// [4] Set this workspace as "activeWorkspace" for this creator:
⋮----
async update(filter: IQueryFilter<IWorkspace>, data: any, options?: IQueryOptions): Promise<IWorkspace[]>
⋮----
async delete(filter?: IQueryFilter<IWorkspace>, options?: IQueryOptions): Promise<
⋮----
// delete workspace in user:
⋮----
// delete related data:
⋮----
async inviteMember(data: InviteMemberData, options?: IQueryOptions): Promise<IWorkspace>
⋮----
// console.log(`[WS_Controller] Invite Member > Workspace :>>`, workspace);
⋮----
// check if this user is admin of the workspace:
⋮----
// console.log("assignedRole :>> ", assignedRole);
⋮----
// create temporary users of invited members:
⋮----
// Set user to workspace in Dx site
⋮----
// FIXME: check API error
⋮----
// send invitation emails to those users:
⋮----
// send invitation email to those users:
⋮----
async addUser(data: AddUserToWorkspaceParams)
⋮----
async testCloudStorage()
</file>

<file path="commitlint.config.js">
ignores: [(message) => /chore/m.test(message)],
</file>

<file path="readme.md">
# DXUP

### **A developer-focused platform for app deployment & centralized cloud resource management.**

https://dxup.dev

***Developers should not be frustrated by deploying apps to the infrastructure, or bothering the DevOps engineers to help deploying it, they should fully focus on developing apps, they don't need to understand the servers, the domains, or infrastructure related stuffs.***

> *Focus on building your apps, shipping fast, and shinning, and leave your cloud infrastructure to DXUP.*

> `dx` also means **Developer Experience**, and this is my number one goal - create the best experience for developers - let's make coding great again.

<p align="center">
  <img src="dx-banner.png?raw=true" alt="DXUP Build Server & CLI">
</p>

## Features

- **Overcoming Kubernetes complexity by stripping Kubernetes away**
- One-click deploy to any Kubernetes clusters of any cloud providers
    - ✅ GCP
    - ✅ DigitalOcean
    - ✅ Bare Metal K8S cluster
    - 🔜 AWS
    - 🔜 Azure
- Simple deploy of any public or private Docker image
- Application rollback to previously deployed versions
- Start developing new applications with frameworks or boilerplates
- Manage, auto-backup & restore databases:
    - ✅ Postgres
    - ✅ MySQL
    - ✅ MongoDB
- Manage & upload files to:
    - ✅ Google Storage
    - ✅ AWS S3 Block Storage
    - ✅ Digital Ocean Space
- Zero-downtime deploy and health checks
- Cronjobs for automation tasks
- Monitor CPU, RAM, and Network usage per deployment, per node & per cluster
- Marketplace for one click add-ons (e.g. MongoDB, Redis, PostgreSQL)

## Demo Video

[![Watch the video](https://raw.githubusercontent.com/digitopvn/diginext/main/demo.png)](https://www.youtube.com/watch?v=Q2jJ555Mc2k)

## Benefits

### For Developers

- Fully focus on development
- Deploy apps to any Kubernetes cluster (without understanding Kubernetes 🤯 ).
- Enhance your daily basis workflows with additional helpful commands for `k8s`, `git` and `database`
- Start new project quickly with a set of useful Frameworks.

### For DevOps

- If you’re managing multiple cluster, `dx` is definitely for you.
- Enhance your daily basis tasks with helpful commands to manage clusters, namespaces, secrets, deployments, workloads, etc…
- Monitoring your infrastructure with ease!
    - Manage Kubernetes clusters
    - Manage, backup & restore databases: MongoDB, MariaDB, PostgreSQL,…
- Automations, CI/CD, cronjobs, notifications, alerts,…

### Tech Leads, Managers, Company & Startups

- Manage & monitoring your projects easily.
- Overview of your teams & cloud resources.
- Faster diagnose, better logs, fewer stresses.
- Overview of your organization, your teams, your members, your projects, your apps and your investment in cloud resources.
- Better understanding about what your team is doing.
- Especially if you are poor, like us, but still want to adopt the mighty Kubernetes, `dx` is for you.

**Still not convinced?**

- [I turn my company’s PC into my own “Vercel-like” platform](https://dev.to/mrgoonie/i-turn-my-companys-pc-into-my-own-vercel-like-platform-351o)
- [Kubernetes for the poor](https://dev.to/mrgoonie/kubernetes-for-the-poor-2ne)
- [Speed test building Next.js T3 App with Github Actions, Circle CI, Vercel & DXUP](https://dev.to/mrgoonie/speed-test-building-nextjs-t3-app-with-github-actions-circle-ci-vercel-diginext-473i)
- [Developer-First Platforms - Overcoming K8S Complexity](https://dev.to/mrgoonie/developer-first-platforms-overcoming-k8s-complexity-1lf9)
- [“GitDevSecOps”](https://dev.to/mrgoonie/gitdevsecops-49gp)

## Roadmap

- Check out [this link](https://topgroup.notion.site/Roadmap-6a8266c2929c48ad8d4c11c954e9d852?pvs=4).

---

## Getting Started

- [DXUP website](https://dxup.dev/?ref=github)
- [Official Workspace](https://app.dxup.dev/?ref=github)
- [Documentation](https://docs.dxup.dev/?ref=github)

#### CLI Installation

Install the package globally:

```bash
npm i @topgroup/diginext --location=global
```

#### CLI Update

- To update your CLI to the latest version: `dx update` or `npm update @topgroup/diginext --location=global`.

---

Login to your DXUP workspace:

```bash
dx login 
# is similar with:
# $ dx login https://app.dxup.dev
# in case you hosted DXUP server yourself:
# $ dx login https://<your-diginext-workspace-domain>
cd /path/to/your/app
dx init
dx up

# custom deploy
dx up --prod
dx up --prod --rollout
dx up --prod --rollout --replicas=5
dx up --prod --rollout --replicas=5 --port=3000
dx up --prod --rollout --replicas=5 --port=3000 --select-cluster
# deploy to custom environment
dx up --staging
# deploy to other cluster
dx up --cluster=[cluster-name]
# deploy without SSL
dx up --no-ssl
# deploy with custom domain
dx up --domain=[your-domain]
# deploy with custom container size
dx up --size=2x
# deploy with DX API key
dx up --api-key=[your-dx-api-key]
# redirect all other domains to the first domain (for example: no-www -> www)
dx up --redirect
# upload local .env to dxup deployment
dx up --upload-env
# delete old deployments and deploy new
dx up --fresh
```

That's it!

---

Start developing a new app from boilerplate frameworks:

```bash
dx new
```

Available frameworks:
✓ Next.js (Page Router)
✓ Next.js (App Router)
✓ Nest.js
✓ Bun.js Starter
✓ Express.js Starter
✓ Static website with NGINX
✓ More to come!

## Running DXUP platform on your own infrastructure

**Requirements:**
- A server: any computers with Ubuntu, Debian or CentOS

### 1. With installation script

Access into your server (directly or via SSH), then run this script:

```bash
curl -sfL https://dxup.dev/install/microk8s | sh -
```

👉 [Detailed instruction](https://dev.to/mrgoonie/i-turn-my-companys-pc-into-my-own-vercel-like-platform-351o)

### 2. With Docker Engine

-   **DXUP** requires a MongoDB database to run the build server.

For fastest installation, I recommend to use our `docker-compose.yaml`, you will need to fill in some environment variables:

```yaml
...
  # Add your credentials so you can use Google Sign-in to authenticate with your workspace later on:
  - GOOGLE_CLIENT_ID=
  - GOOGLE_CLIENT_SECRET=
```

Then spin up the build server with: `docker compose up`, it will be available at: `http://localhost:6969`

Access the admin (`http://localhost:6969`) to configure your new workspace.

On the client side, use the CLI command `dx login http://your-workspace-domain.com` to login to your workspace and start new app with `dx new` or start deploying with `dx up` (or `dx deploy`).

👉 Read the [docs here](https://docs.dxup.dev/?ref=github).

### Other installation guides

- [Installation guide](https://topgroup.notion.site/Installation-6de7bda045224ed4b4ee5f4cc5681814?pvs=4)

---

## Changelog

- Visit our [changelog here](CHANGELOG.md)

## Admin UI

- Official workspace: https://app.dxup.dev
- Visit our [source code here](https://github.com/digitopvn/diginext-admin)

## Contributing [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](https://makeapullrequest.com)

Read our [contributing guide](CONTRIBUTING.md) and let's build a better build platform together.

We welcome all contributions. Please read our [CONTRIBUTING.md](CONTRIBUTING.md) first. You can submit any ideas as [pull requests](https://github.com/digitopvn/diginext/pulls) or as [GitHub issues](https://github.com/digitopvn/diginext/issues). If you'd like to improve code, check out the [Development Instructions](https://github.com/digitopvn/diginext/wiki/Development) and have a good time! :)

If you are a collaborator, please follow our [Pull Request principle](https://github.com/digitopvn/diginext/wiki/PR-principle) to create a Pull Request with [collaborator template](https://github.com/digitopvn/diginext/compare?expand=1&template=collaborator.md).


## Community and Support:

Join our community on [Discord](https://discord.gg/xMuW5pN2Kn)!

Suggest improvements and report problems.

---

## Credits / Donations

This is a **ONE-MAN** project & I've been spending a lot of time for it, although it's my hobby project, I still need beers to keep the momentum.
If you enjoyed this project — or just feeling generous, consider buying me some beers. Cheers! 🍻

<a href="https://www.buymeacoffee.com/duynguyen" target="_blank"><img src="https://cdn.buymeacoffee.com/buttons/v2/default-green.png" alt="Buy Me A Coffee" height=48 ></a>

<a href="https://paypal.me/mrgoonie/" target="_blank"><img src="https://github.com/andreostrovsky/donate-with-paypal/blob/master/PNG/blue.png" height=48></a>

<a href="https://opencollective.com/diginext/donate" target="_blank">
  <img src="https://opencollective.com/diginext/donate/button@2x.png?color=blue" height=48 />
</a>

<a href="https://me.momo.vn/mrgoonie" target="_blank">
  <img src="https://github.com/digitopvn/diginext/blob/main/docs/momo-button.png?raw=true" height=48 />
</a>

- Author: Duy Nguyen <duynguyen@wearetopgroup.com>
- CTO at [TOP GROUP](https://wearetopgroup.com)

Thank you!

## My other products

- [DigiCord AI](https://digicord.site) - The Most Useful AI Chatbot on Discord
- [IndieBacklink.com](https://indiebacklink.com) - Indie Makers Unite: Feature, Support, Succeed
- [TopRanking.ai](https://topranking.ai) - AI Directory, listing AI products
- [ZII.ONE](https://zii.one) - Personalized Link Shortener
- [VidCap.xyz](https://vidcap.xyz) - Extract Youtube caption, download videos, capture screenshot, summarize,…
- [ReadTube.me](https://readtube.me) - Write blog articles based on Youtube videos
- [BoostTogether.com](https://boosttogether.com) - The Power of WE in Advertising
- [AIVN.Site](https://aivn.site) - Face Swap, Remove BG, Photo Editor,…
- [DxUp.dev](https://dxup.dev) - Developer-focused platform for app deployment & centralized cloud resource management.
</file>

<file path=".github/workflows/release.yml">
name: Release All Workflow

# TRIGGERS
on:
  push:
    branches:
      - main
      - prerelease
      - beta

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref }} 

# CI/CD STEPS
jobs:
  release:
    name: Release Github & NPM
    runs-on: ubuntu-latest
    steps:
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"

      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Release GITHUB & NPM
        run: npx semantic-release
      
      - name: Update "package.json" version
        run: pnpm pkg-version

      - name: Commit and push latest "package.json" file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(package.json): update version [skip ci]"
          commit_options: '--allow-empty --no-verify --signoff'

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - uses: actions/upload-artifact@v4
        with:
          name: swagger-artifact
          path: public/swagger.json

      - uses: actions/upload-artifact@v4
        with:
          name: packagejson-artifact
          path: package.json
      
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"
      - name: Show current ref
        run: echo "${{ github.ref }}"

  docker-base:
    name: Build Diginext Docker Base Image
    runs-on: ubuntu-latest
    # needs: release
    if: contains(github.event.head_commit.message, 'docker base')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Build Docker & push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: digitop/diginext-base:latest,digitop/diginext-base:6
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext-base:cache
          cache-to: type=registry,ref=digitop/diginext-base:cache,mode=max

  docker-release-main:
    name: Release Docker Image (MAIN)
    runs-on: ubuntu-latest
    needs: [release,docker-base]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"
      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - name: Download swagger.json
        uses: actions/download-artifact@v4
        with:
          name: swagger-artifact
          path: public

      - name: Download package.json
        uses: actions/download-artifact@v4
        with:
          name: packagejson-artifact

      # - name: Display structure of downloaded files
      #   run: ls -R

      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo $LATEST_TAG
      - run: echo ${{env.LATEST_TAG}}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (main)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: digitop/diginext:${{env.LATEST_TAG}},digitop/diginext:latest
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext:cache
          cache-to: type=registry,ref=digitop/diginext:cache,mode=max
  
  docker-release-beta:
    name: Release Docker Image (BETA)
    runs-on: ubuntu-latest
    needs: [release,docker-base]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'prerelease')
    steps:
      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo ${LATEST_TAG}
      - run: echo ${{env.LATEST_TAG}}
          
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - name: Download swagger.json
        uses: actions/download-artifact@v4
        with:
          name: swagger-artifact
          path: public

      - name: Download package.json
        uses: actions/download-artifact@v4
        with:
          name: packagejson-artifact

      - name: Display structure of downloaded files
        run: ls -R

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (BETA)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.prerelease
          push: true
          tags: digitop/diginext:${{env.LATEST_TAG}},digitop/diginext:prerelease
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext:cache-beta
          cache-to: type=registry,ref=digitop/diginext:cache-beta,mode=max

  deploy-topgroup:
    name: Deploy to [app.dxup.dev]
    runs-on: ubuntu-latest
    needs: [docker-release-main]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}
      
      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo $LATEST_TAG
      - name: Get list of commits
        run: |
          COMMIT_TITLES=$(git log --format=%s ${GITHUB_BASE_REF}..${GITHUB_SHA})
          echo "$COMMIT_TITLES" >> $GITHUB_ENV

      - run: echo "${{ github.ref }}"
      - run: echo "${{ github.ref_name }}"
      - run: mkdir ~/.kube
      - run: echo "${{ secrets.KUBE_CONFIG }}" >> ~/.kube/config

      - name: Setup Kubernetes Tools
        uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          kubectl: '1.24.10'

      - run: kubectl version --client
      - run: kubectl config get-contexts
      - run: kubectl config current-context
      # - run: kubectl config use-context topgroup-dev

      # Deploy to TOPGROUP DEV cluster (APP.DIGINEXT.SITE - DEPRECATED)
      # - name: Set image to [app.diginext.site / OLD] deployment
      #   continue-on-error: true
      #   run: kubectl --context=topgroup-dev -n diginext-cli set image deployment/diginext-cli diginext-cli=digitop/diginext:$LATEST_TAG

      # Deploy to TOPGROUP DEV cluster (APP.DXUP.DEV)
      - name: Set image to [app.dxup.dev / TOP Group Local] deployment
        continue-on-error: true
        run: kubectl --context=topgroup-dev -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG
        
      # Deploy to LONGVAN PROD cluster (DEPRECATED)
      # - name: Set image to [app.dxup.dev / Long Van PROD] deployment
      #   continue-on-error: true
      #   run: kubectl --context=longvan-cluster -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # Deploy to DXUP FPT cluster
      # - name: Set image to [app.dxup.dev / DXUP FPT] deployment
      #   continue-on-error: true
      #   run: kubectl --context=dxup-vn -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # Deploy to DXUP OVH cluster
      - name: Set image to [app.dxup.dev / DXUP OVH] deployment
        run: kubectl --context=dxupprod -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG
        
      # Deploy to LONGVAN STAGING cluster (DEPRECATED)
      # - name: Set image to [app.dxup.dev / Long Van STAGING] deployment
      #   run: kubectl --context=topgroup-staging -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # DEPRECATED
      # - name: Set image to [hobby.dxup.dev] deployment
      #   run: kubectl --context=topgroup-k3s -n diginext-hobby set image deployment/diginext-hobby diginext-hobby=digitop/diginext:$LATEST_TAG

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "[APP.DXUP.DEV] Deploy version ${{ env.LATEST_TAG }}"
          description: ${{ env.COMMIT_TITLES }}

  # deploy-diginext-staging:
  #   name: Deploy to [staging.app.dxup.dev]
  #   runs-on: ubuntu-latest
  #   needs: [docker-release-beta]
  #   if: always() && !cancelled() && !failure() && contains(github.ref, 'prerelease')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.CI_GITHUB_TOKEN }}
      
  #     - name: Checkout latest release tag
  #       run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
  #     - run: echo $LATEST_TAG

  #     - run: echo "${{ github.ref }}"
  #     - run: echo "${{ github.ref_name }}"
  #     - run: mkdir ~/.kube
  #     - run: echo "${{ secrets.KUBE_CONFIG }}" >> ~/.kube/config

  #     - name: Setup Kubernetes Tools
  #       uses: yokawasa/action-setup-kube-tools@v0.9.3
  #       with:
  #         kubectl: '1.24.10'
      
  #     - run: kubectl version --client
  #     - run: kubectl config get-contexts
  #     - run: kubectl config current-context

  #     - run: kubectl config use-context topgroup-k3s
  #     - name: Set image to K8S deployment
  #       run: kubectl -n diginext-staging set image deployment/diginext diginext=digitop/diginext:$LATEST_TAG
</file>

<file path="src/controllers/AppController.ts">
/* eslint-disable prettier/prettier */
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "@tsoa/runtime";
import { isJSON } from "class-validator";
import { log, logWarn } from "diginext-utils/dist/xconsole/log";
import { isArray, isBoolean, isEmpty, isNumber, isUndefined, trim } from "lodash";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IApp, IBuild, ICluster, IProject } from "@/entities";
import { AppDto } from "@/entities";
import { IDeleteQueryParams, IGetQueryParams, IPatchQueryParams, IPostQueryParams } from "@/interfaces";
import { AppInputSchema, CreateEnvVarsDto, DeployEnvironmentData, UpdateEnvVarsDto } from "@/interfaces/AppInterfaces";
import type { DeployEnvironmentVolume } from "@/interfaces/DeployEnvironmentVolume";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { ResponseData } from "@/interfaces/ResponseData";
import { respondFailure, respondSuccess } from "@/interfaces/ResponseData";
import { getAppConfigFromApp } from "@/modules/apps/app-helper";
import { getDeployEvironmentByApp } from "@/modules/apps/get-app-environment";
import { createReleaseFromApp } from "@/modules/build/create-release-from-app";
import { fetchDeploymentFromContent } from "@/modules/deploy";
import getDeploymentName from "@/modules/deploy/generate-deployment-name";
import { generateDeploymentV2 } from "@/modules/deploy/generate-deployment-v2";
import { dxCreateDomain, dxDeleteDomainRecord, dxGetDomainRecordByName, dxUpdateDomainRecord } from "@/modules/diginext/dx-domain";
import ClusterManager from "@/modules/k8s";
import { currentVersion } from "@/plugins";
import { formatEnvVars } from "@/plugins/env-var";
import { MongoDB } from "@/plugins/mongodb";
import { makeSlug } from "@/plugins/slug";
import { ClusterService, ContainerRegistryService, ReleaseService } from "@/services";
⋮----
import { AppService } from "../services/AppService";
import BaseController from "./BaseController";
⋮----
export default class AppController extends BaseController<IApp, AppService>
⋮----
constructor()
⋮----
/**
	 * List of apps
	 */
⋮----
async read(@Queries() queryParams?: IGetQueryParams)
⋮----
// console.log("apps :>> ", apps);
⋮----
async create(@Body() body: AppInputSchema, @Queries() queryParams?: IPostQueryParams)
⋮----
// delete body.force;
// delete body.shouldCreateGitRepo;
⋮----
/**
	 * Create new app from a git repo SSH url
	 */
⋮----
async createFromSshURL(
		@Body()
		body: {
			/**
			 * Git repo SSH url
			 * @example git@github.com:digitopvn/diginext.git
			 */
			sshUrl: string;
			/**
			 * Git provider ID to host the new repo of this app
			 */
			gitProviderID: string;
			/**
			 * ### CAUTION
			 * If `TRUE`, it will delete existing git repo and create a new one.
			 */
			force?: boolean;
		}
)
⋮----
/**
			 * Git repo SSH url
			 * @example git@github.com:digitopvn/diginext.git
			 */
⋮----
/**
			 * Git provider ID to host the new repo of this app
			 */
⋮----
/**
			 * ### CAUTION
			 * If `TRUE`, it will delete existing git repo and create a new one.
			 */
⋮----
/**
	 * Import a git repo SSH url & create new app from it
	 */
⋮----
async importFromGitSshURL(
		@Body()
		body: {
			/**
			 * App's name
			 */
			name?: string;
			/**
			 * Git repo SSH url
			 * @example git@github.com:digitopvn/diginext.git
			 */
			sshUrl: string;
			/**
			 * Git provider ID to host the new repo of this app
			 */
			gitProviderID: string;
			/**
			 * Select git branch to pull
			 */
			gitBranch?: string;
			/**
			 * Project ID of this app
			 */
			projectID?: string;
			/**
			 * `DANGER`
			 * ---
			 * Delete app and git repo if they were existed.
			 * @default false
			 */
			force?: boolean;
		}
)
⋮----
/**
			 * App's name
			 */
⋮----
/**
			 * Git repo SSH url
			 * @example git@github.com:digitopvn/diginext.git
			 */
⋮----
/**
			 * Git provider ID to host the new repo of this app
			 */
⋮----
/**
			 * Select git branch to pull
			 */
⋮----
/**
			 * Project ID of this app
			 */
⋮----
/**
			 * `DANGER`
			 * ---
			 * Delete app and git repo if they were existed.
			 * @default false
			 */
⋮----
async update(@Body() body: AppDto, @Queries() queryParams?: IPatchQueryParams)
⋮----
async delete(@Queries() queryParams?: IDeleteQueryParams)
⋮----
/**
	 * List of participants in an app
	 */
⋮----
async participants(@Queries() queryParams?: IGetQueryParams)
⋮----
/**
	 * Take down all deploy environments of this app on the clusters, then mark this app as "archived" in database.
	 */
⋮----
async archiveApp(@Queries() queryParams?: IGetQueryParams)
⋮----
/**
	 * Mark this app as "unarchived" in database.
	 */
⋮----
async unarchiveApp(@Queries() queryParams?: IGetQueryParams)
⋮----
async getAppConfig(@Queries() queryParams?:
⋮----
/**
	 * Get new deploy environment of the application.
	 */
⋮----
async getDeployEnvironmentV2(
		@Queries()
		queryParams: {
			/**
			 * App slug
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
	 * [V2] Get new deploy environment of the application.
	 */
⋮----
async getDeployEnvironment(
		@Queries()
		queryParams: {
			/**
			 * App slug
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
	 * [V2] Create new deploy environment of the application.
	 */
⋮----
async createDeployEnvironmentV2(
		/**
		 * `REQUIRES`
		 * ---
		 * Deploy environment configuration
		 */
		@Body()
		body: DeployEnvironmentData,
		@Queries()
		queryParams?: {
			/**
			 * App slug
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
		 * `REQUIRES`
		 * ---
		 * Deploy environment configuration
		 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
	 * [V2] Update new deploy environment of the application.
	 */
⋮----
async updateDeployEnvironmentV2(
		/**
		 * `REQUIRES`
		 * ---
		 * Deploy environment configuration
		 */
		@Body()
		body: DeployEnvironmentData,
		@Queries()
		queryParams?: {
			/**
			 * App slug
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
		 * `REQUIRES`
		 * ---
		 * Deploy environment configuration
		 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
	 * [V2] Update new deploy environment of the application.
	 */
⋮----
async deleteDeployEnvironmentV2(
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			id?: string;
			/**
			 * App's SLUG
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App's SLUG
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
	 * Create new deploy environment of the application.
	 */
⋮----
async createDeployEnvironment(
		@Body()
		body: {
			/**
			 * `REQUIRES`
			 * ---
			 * App slug
			 */
			appSlug: string;
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
			env: string;
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
			deployEnvironmentData: DeployEnvironmentData;
		},
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * App slug
			 */
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
⋮----
/**
	 * Create new deploy environment of the application.
	 */
⋮----
async updateDeployEnvironment(
		@Body()
		body: {
			/**
			 * `REQUIRES`
			 * ---
			 * App slug
			 */
			appSlug: string;
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
			env: string;
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
			deployEnvironmentData: DeployEnvironmentData;
		},
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * App slug
			 */
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
⋮----
// get app data:
⋮----
// build number
⋮----
// "sometime" there are no "active" release, so just get the "success" release instead :)
⋮----
// finish checking build number
⋮----
// Check DX quota
// TODO: Check quota based on CPU & memory (NEW)
// if (deployEnvironmentData.size) {
// 	const quotaRes = await checkQuota(this.workspace, { resourceSize: deployEnvironmentData.size });
// 	if (!quotaRes.status) return respondFailure(quotaRes.messages.join(". "));
// 	if (quotaRes.data && quotaRes.data.isExceed)
// 		return respondFailure(
// 			`You've exceeded the limit amount of container size (${quotaRes.data.type} / Max size: ${quotaRes.data.limits.size}x).`
// 		);
// }
⋮----
// Validate deploy environment data:
⋮----
// cluster
⋮----
// check if change cluster:
⋮----
// no cluster changed -> get current cluster
⋮----
// namespace
⋮----
// Check if namespace is existed...
⋮----
// container registry
⋮----
// Domains & SSL certificate...
// if (!deployEnvironmentData.domains) deployEnvironmentData.domains = [];
⋮----
// check if the domain is existed:
⋮----
// update the domain record
⋮----
// create the domain record
⋮----
// Exposing ports, enable/disable CDN, and select Ingress type
⋮----
// deployEnvironmentData.ingress = "nginx";
⋮----
// create deploy environment in the app:
⋮----
// console.log("updatedApp :>> ", updatedApp);
⋮----
// update app again
⋮----
// generate deployment files and apply new config
⋮----
// update data to deploy environment:
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// get workloads on cluster
⋮----
// Fallback support for deprecated mainAppName
⋮----
// if (workloads && workloads.length > 0) {
⋮----
// create new release and roll out
⋮----
// apply deployment YAML
⋮----
// delete deprecated workloads
⋮----
/**
	 * Delete a deploy environment of the application.
	 */
⋮----
async deleteDeployEnvironment(
		@Body()
		body?: {
			/**
			 * App's ID (no need `slug` if using `id` or `_id`)
			 */
			_id?: string;
			/**
			 * [alias] App's ID (no need `slug` if using `id` or `_id`)
			 */
			id?: string;
			/**
			 * App's slug (no need `id` or `_id` if using `slug`)
			 */
			slug?: string;
			/**
			 * Short name of deploy environment
			 * @example "dev", "prod",...
			 */
			env?: string;
		}
)
⋮----
/**
			 * App's ID (no need `slug` if using `id` or `_id`)
			 */
⋮----
/**
			 * [alias] App's ID (no need `slug` if using `id` or `_id`)
			 */
⋮----
/**
			 * App's slug (no need `id` or `_id` if using `slug`)
			 */
⋮----
/**
			 * Short name of deploy environment
			 * @example "dev", "prod",...
			 */
⋮----
// input validation
⋮----
// find the app
⋮----
// check if the environment is existed
⋮----
// take down the deploy environment
⋮----
// delete diginext domain record (if any)
⋮----
// update the app (delete the deploy environment)
⋮----
// respond the results
⋮----
/**
	 * Get list of variables on the deploy environment of the application.
	 */
⋮----
async getEnvVarsOnDeployEnvironment(@Queries() queryParams?:
⋮----
/**
	 * Create new variables on the deploy environment of the application.
	 */
⋮----
async createEnvVarsOnDeployEnvironment(
		@Body()
		body: CreateEnvVarsDto,
		@Queries() queryParams?: IPostQueryParams
)
⋮----
// console.log("updateEnvVars :>> ", updateEnvVars);
⋮----
// generate deployment files and apply new config
⋮----
// update data to deploy environment:
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// Set environment variables to deployment in the cluster
// if the workload has been deployed before -> update the environment variables
⋮----
// Fallback support for deprecated mainAppName
⋮----
/**
	 * Update environment variables on the deploy environment.
	 */
⋮----
async updateEnvVarsOnDeployEnvironment(@Body() body: UpdateEnvVarsDto, @Queries() queryParams?: IPostQueryParams)
⋮----
/**
	 * Delete variables on the deploy environment of the application.
	 */
⋮----
async deleteEnvVarsOnDeployEnvironment(
		@Body()
		body: {
			/**
			 * App slug
			 */
			slug: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		},
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
// check if deployment is existed in the cluster / namespace
⋮----
// Fallback support for deprecated mainAppName
⋮----
// delete in database
⋮----
// Set environment variables to deployment in the cluster
⋮----
/**
	 * Update a variable on the deploy environment of the application.
	 */
⋮----
async addEnvironmentDomain(
		@Body()
		body: {
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
			/**
			 * New domains to be added into this deploy environment
			 * @example ["example.com", "www.example.com"]
			 */
			domains: string[];
		},
		@Queries() queryParams?: IPostQueryParams
)
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
			 * New domains to be added into this deploy environment
			 * @example ["example.com", "www.example.com"]
			 */
⋮----
// validate
⋮----
// find app
⋮----
// validate domain
⋮----
// check if added domains are existed
⋮----
// add new domains
⋮----
// update diginext domain record (if any)
⋮----
// check existed
⋮----
// if existed, update it
⋮----
// if not existed, create it
⋮----
// generate deployment files and apply new config
⋮----
// update data to deploy environment:
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// Fallback support for deprecated mainAppName
⋮----
// create new release and roll out
⋮----
// apply deployment YAML
⋮----
/**
	 * View app's container logs
	 */
⋮----
async viewLogs(
		@Queries()
		queryParams?: {
			/**
			 * App's slug
			 */
			slug: string;
			/**
			 * App's deploy environment code (dev, prod,...)
			 * @default "dev"
			 */
			env?: string;
		}
)
⋮----
/**
			 * App's slug
			 */
⋮----
/**
			 * App's deploy environment code (dev, prod,...)
			 * @default "dev"
			 */
⋮----
/**
	 * Take down a deploy environment of the application.
	 */
⋮----
async takeDownDeployEnvironment(
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			_id?: string;
			/**
			 * App slug
			 */
			slug?: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
// write to system logs
⋮----
/**
	 * Sleep a deploy environment of the application.
	 */
⋮----
async sleepDeployEnvironment(
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			_id?: string;
			/**
			 * App slug
			 */
			slug?: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
// write to system logs
⋮----
/**
	 * Awake a sleeping deploy environment of the application.
	 */
⋮----
async awakeDeployEnvironment(
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			_id?: string;
			/**
			 * App slug
			 */
			slug?: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
// write to system logs
⋮----
/**
	 * Add new volume to app's deploy environment.
	 */
⋮----
async addVolumeToDeployEnvironment(
		/**
		 * `REQUIRES`
		 * ---
		 * Volume configuration
		 */
		@Body()
		body: Pick<DeployEnvironmentVolume, "name" | "size" | "mountPath">,
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			_id?: string;
			/**
			 * App slug
			 */
			slug?: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
		}
)
⋮----
/**
		 * `REQUIRES`
		 * ---
		 * Volume configuration
		 */
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
// write to system logs
⋮----
/**
	 * Remove the volume of an app's deploy environment.
	 */
⋮----
async removeVolumeToDeployEnvironment(
		@Queries()
		queryParams?: {
			/**
			 * App's ID
			 */
			_id?: string;
			/**
			 * App slug
			 */
			slug?: string;
			/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
			env: string;
			/**
			 * Volume name
			 */
			name: string;
		}
)
⋮----
/**
			 * App's ID
			 */
⋮----
/**
			 * App slug
			 */
⋮----
/**
			 * Deploy environment name
			 * @example "dev" | "prod"
			 */
⋮----
/**
			 * Volume name
			 */
⋮----
// write to system logs
</file>

<file path="src/controllers/NotificationController.ts">
import { Body, Delete, Get, Patch, Post, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import { INotification } from "@/entities/Notification";
⋮----
import { NotificationService } from "@/services/NotificationService";
⋮----
import BaseController from "./BaseController";
⋮----
export default class NotificationController extends BaseController<INotification, NotificationService>
⋮----
constructor()
⋮----
read(@Queries() queryParams?: interfaces.IGetQueryParams)
⋮----
async create(@Body() body: INotification, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async update(@Body() body: INotification, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
delete(@Queries() queryParams?: interfaces.IDeleteQueryParams)
⋮----
async markAsRead(@Body() body: INotification, @Queries() queryParams?: interfaces.IPostQueryParams)
⋮----
async sendToJojo(@Body() body: any, @Queries() queryParams?: interfaces.IPostQueryParams)
</file>

<file path="src/interfaces/DeployEnvironment.ts">
import type { ObjectId } from "mongodb";
⋮----
import type { IApp, IUser } from "@/entities";
⋮----
import type { DeployEnvironmentVolume } from "./DeployEnvironmentVolume";
import type { KubeEnvironmentVariable } from "./EnvironmentVariable";
import type { AppStatus, ResourceQuotaSize } from "./SystemTypes";
⋮----
/**
 * @default "letsencrypt"
 */
export type SslType = (typeof availableSslTypes)[number];
⋮----
export interface ClientDeployEnvironmentConfig {
	/**
	 * Image URI of this app on the Container Registry.
	 * - Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 * - If you build from the source code, don't specify `tag` at the end! (eg. `latest`, `beta`,...)
	 * @example
	 * asia.gcr.io/google-project-id/my-project-slug/my-app-slug
	 */
	imageURL?: string;

	/**
	 * Destination namespace name
	 */
	namespace?: string;

	/**
	 * Container registry slug
	 */
	registry?: string;

	/**
	 * Cloud provider's short name
	 */
	provider?: string;

	/**
	 * Cluster's slug
	 */
	cluster?: string;

	/**
	 * [Google Cloud] PROJECT_ID
	 * @deprecated
	 */
	project?: string;

	/**
	 * [Google Cloud] Region
	 * @deprecated
	 */
	region?: string;

	/**
	 * [Google Cloud] Zone
	 * @deprecated
	 */
	zone?: string;

	/**
	 * Container quota resources
	 * @example
	 * "none" - {}
	 * "1x" - { requests: { cpu: `50m`, memory: `256Mi` }, limits: { cpu: `50m`, memory: `256Mi` } }
	 * "2x" - { requests: { cpu: `100m`, memory: `512Mi` }, limits: { cpu: `100m`, memory: `512Mi` } }
	 */
	size?: ResourceQuotaSize;

	/**
	 * Container's CPU
	 */
	cpu?: string;

	/**
	 * Container's memory
	 */
	memory?: string;

	/**
	 * Container's resources
	 */
	resources?: {
		usage?: {
			cpu?: string;
			memory?: string;
		};
		limits?: {
			cpu?: string;
			memory?: string;
		};
	};

	/**
	 * Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment
	 * @default true
	 */
	shouldInherit?: boolean;

	/**
	 * Set to `false` if you don't want to redirect all the secondary domains to the primary domain.
	 * @default true
	 */
	redirect?: boolean;

	/**
	 * Container's scaling replicas
	 * @default 1
	 */
	replicas?: number;

	/**
	 * Container's port
	 * @requires
	 */
	port?: number;

	/**
	 * Application base path in the endpoint URL
	 * @default "/"
	 * @example `http://example.com/${base_bath_here}`
	 */
	basePath?: string;

	/**
	 * List of application's domains
	 */
	domains?: string[];

	/**
	 * Flag to enable CDN for this application
	 * @default false;
	 */
	cdn?: boolean;

	/**
	 * SSL Certificate Issuer
	 * @default "letsencrypt"
	 */
	ssl?: SslType;

	/**
	 * Healthz path
	 * @example "/", "/healthz"
	 */
	healthzPath?: string | null;
	/**
	 * Healthz port
	 * @default `port`
	 */
	healthzPort?: number | null;

	/**
	 * Secret name to hold the key of SSL, will be automatically generated.
	 * Only need to specify when using "custom" SSL (which is the SSL from third-party issuer)
	 */
	tlsSecret?: string;

	/**
	 * Kubernetes Ingress Class
	 * @example "nginx" | "kong"
	 */
	ingress?: string;
}
⋮----
/**
	 * Image URI of this app on the Container Registry.
	 * - Combined from: `<registry-image-base-url>/<project-slug>/<app-name-slug>`
	 * - If you build from the source code, don't specify `tag` at the end! (eg. `latest`, `beta`,...)
	 * @example
	 * asia.gcr.io/google-project-id/my-project-slug/my-app-slug
	 */
⋮----
/**
	 * Destination namespace name
	 */
⋮----
/**
	 * Container registry slug
	 */
⋮----
/**
	 * Cloud provider's short name
	 */
⋮----
/**
	 * Cluster's slug
	 */
⋮----
/**
	 * [Google Cloud] PROJECT_ID
	 * @deprecated
	 */
⋮----
/**
	 * [Google Cloud] Region
	 * @deprecated
	 */
⋮----
/**
	 * [Google Cloud] Zone
	 * @deprecated
	 */
⋮----
/**
	 * Container quota resources
	 * @example
	 * "none" - {}
	 * "1x" - { requests: { cpu: `50m`, memory: `256Mi` }, limits: { cpu: `50m`, memory: `256Mi` } }
	 * "2x" - { requests: { cpu: `100m`, memory: `512Mi` }, limits: { cpu: `100m`, memory: `512Mi` } }
	 */
⋮----
/**
	 * Container's CPU
	 */
⋮----
/**
	 * Container's memory
	 */
⋮----
/**
	 * Container's resources
	 */
⋮----
/**
	 * Set to `false` if you DON'T want to inherit the Ingress YAML config from the previous deployment
	 * @default true
	 */
⋮----
/**
	 * Set to `false` if you don't want to redirect all the secondary domains to the primary domain.
	 * @default true
	 */
⋮----
/**
	 * Container's scaling replicas
	 * @default 1
	 */
⋮----
/**
	 * Container's port
	 * @requires
	 */
⋮----
/**
	 * Application base path in the endpoint URL
	 * @default "/"
	 * @example `http://example.com/${base_bath_here}`
	 */
⋮----
/**
	 * List of application's domains
	 */
⋮----
/**
	 * Flag to enable CDN for this application
	 * @default false;
	 */
⋮----
/**
	 * SSL Certificate Issuer
	 * @default "letsencrypt"
	 */
⋮----
/**
	 * Healthz path
	 * @example "/", "/healthz"
	 */
⋮----
/**
	 * Healthz port
	 * @default `port`
	 */
⋮----
/**
	 * Secret name to hold the key of SSL, will be automatically generated.
	 * Only need to specify when using "custom" SSL (which is the SSL from third-party issuer)
	 */
⋮----
/**
	 * Kubernetes Ingress Class
	 * @example "nginx" | "kong"
	 */
⋮----
/**
 * A deployment's environment of the application.
 */
export interface DeployEnvironment extends ClientDeployEnvironmentConfig {
	/**
	 * Name of the deploy environment
	 * @example "dev" | "prod" | "staging"
	 */
	name?: string;
	/**
	 * App
	 */
	app?: IApp;
	appSlug?: string;
	appName?: string;
	projectSlug?: string;
	/**
	 * ObjectID of the build associated with this deploy environment.
	 */
	buildId?: string;
	/**
	 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
	 * @example latest, v01, prerelease, alpha, beta,...
	 */
	buildTag: string;
	/**
	 * A incremental number digit of a build.
	 */
	buildNumber?: string;

	/**
	 * The app version
	 */
	appVersion?: string;

	/**
	 * ID of the latest release associated with this deploy environment.
	 */
	latestRelease?: string;

	/**
	 * The CLI version
	 */
	cliVersion?: string;

	/**
	 * Content of namespace YAML file
	 */
	namespaceYaml?: string;

	/**
	 * Name of the deployment
	 */
	deploymentName?: string;

	/**
	 * Content of deployment YAML file
	 */
	deploymentYaml?: string;

	/**
	 * Content of prerelease deployment YAML file
	 */
	prereleaseDeploymentYaml?: string;

	/**
	 * Prerelease endpoint URL
	 */
	prereleaseUrl?: string;

	/**
	 * Collection array of environment variables
	 */
	envVars?: KubeEnvironmentVariable[];

	/**
	 * User name of the first person who deploy on this environment.
	 */
	createdBy?: string;

	/**
	 * User name of the last person who deploy or update this environment.
	 */
	lastUpdatedBy?: string;

	/**
	 * Owner
	 */
	owner?: string;
	ownerSlug?: string;

	/**
	 * ID of the creator
	 * ! DO NOT REMOVE THIS, OTHERWISE "TSOA" (Swagger) WILL BE BROKEN (I DON'T KNOW WHY...)
	 */
	creator?: ObjectId | IUser;

	/**
	 * Update time
	 */
	updatedAt?: Date;

	/**
	 * Date when it's put to sleep
	 */
	sleepAt?: Date;

	/**
	 * Date when it's awaken
	 */
	awakeAt?: Date;

	/**
	 * Date when it's taken down
	 */
	tookDownAt?: Date;

	/**
	 * Deployment's status
	 */
	status?: AppStatus;

	/**
	 * Amount of ready instances
	 */
	readyCount?: number;

	/**
	 * A screenshot URL from build success
	 */
	screenshot?: string;

	/**
	 * Persistent Volume
	 */
	volumes?: DeployEnvironmentVolume[];

	/**
	 * Health check path
	 * @default "/"
	 */
	healthzPath?: string | null;

	/**
	 * Healthz port
	 * @default `port`
	 */
	healthzPort?: number | null;
}
⋮----
/**
	 * Name of the deploy environment
	 * @example "dev" | "prod" | "staging"
	 */
⋮----
/**
	 * App
	 */
⋮----
/**
	 * ObjectID of the build associated with this deploy environment.
	 */
⋮----
/**
	 * Build tag is image's tag (no special characters, eg. "dot" or "comma")
	 * @example latest, v01, prerelease, alpha, beta,...
	 */
⋮----
/**
	 * A incremental number digit of a build.
	 */
⋮----
/**
	 * The app version
	 */
⋮----
/**
	 * ID of the latest release associated with this deploy environment.
	 */
⋮----
/**
	 * The CLI version
	 */
⋮----
/**
	 * Content of namespace YAML file
	 */
⋮----
/**
	 * Name of the deployment
	 */
⋮----
/**
	 * Content of deployment YAML file
	 */
⋮----
/**
	 * Content of prerelease deployment YAML file
	 */
⋮----
/**
	 * Prerelease endpoint URL
	 */
⋮----
/**
	 * Collection array of environment variables
	 */
⋮----
/**
	 * User name of the first person who deploy on this environment.
	 */
⋮----
/**
	 * User name of the last person who deploy or update this environment.
	 */
⋮----
/**
	 * Owner
	 */
⋮----
/**
	 * ID of the creator
	 * ! DO NOT REMOVE THIS, OTHERWISE "TSOA" (Swagger) WILL BE BROKEN (I DON'T KNOW WHY...)
	 */
⋮----
/**
	 * Update time
	 */
⋮----
/**
	 * Date when it's put to sleep
	 */
⋮----
/**
	 * Date when it's awaken
	 */
⋮----
/**
	 * Date when it's taken down
	 */
⋮----
/**
	 * Deployment's status
	 */
⋮----
/**
	 * Amount of ready instances
	 */
⋮----
/**
	 * A screenshot URL from build success
	 */
⋮----
/**
	 * Persistent Volume
	 */
⋮----
/**
	 * Health check path
	 * @default "/"
	 */
⋮----
/**
	 * Healthz port
	 * @default `port`
	 */
</file>

<file path="src/middlewares/auth-jwt.ts">
import type express from "express";
import { JsonWebTokenError, TokenExpiredError } from "jsonwebtoken";
import { isEmpty } from "lodash";
import passport from "passport";
⋮----
import { IsDev } from "@/app.config";
import type { IRole, IUser, IWorkspace } from "@/entities";
import type { AppRequest } from "@/interfaces/SystemTypes";
import { generateJWT, verifyRefreshToken } from "@/modules/passports";
import { MongoDB } from "@/plugins/mongodb";
⋮----
const sendAuthErrorResponse = (res: express.Response, message: string, statusCode: number = 401, errorCode: string = "UNAUTHORIZED") =>
⋮----
/**
 * Why you don't need to care about this file?
 * ---
 * Because the {User} was already verified at "jwtStrategy" step before passing the token here!
 */
const jwt_auth = (req: AppRequest, res, next)
⋮----
// Detailed logging for development
⋮----
/**
				 * If the token is expired or invalid,
				 * we should delete it in the cookies or HTTP response
				 */
⋮----
// check refresh token here:
⋮----
// More explicit error handling
⋮----
// refresh token is valid -> generate new access token
⋮----
// assign new access token to cookie and request & response headers:
⋮----
// More specific error handling
⋮----
// check active workspace
⋮----
// role
⋮----
// Clean up empty workspace and role
⋮----
// user
⋮----
// try to assign tokens to cookies (test)
</file>

<file path="src/modules/build/ask-for-domain.ts">
import chalk from "chalk";
import { makeDaySlug } from "diginext-utils/dist/string/makeDaySlug";
import { logSuccess, logWarn } from "diginext-utils/dist/xconsole/log";
import inquirer from "inquirer";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IUser, IWorkspace } from "@/entities";
import type { ClientDeployEnvironmentConfig } from "@/interfaces";
⋮----
import { generateDomains } from "../deploy/generate-domain";
⋮----
export function diginextDomainName(env: string, projectSlug: string, appSlug: string)
⋮----
export const askForDomain = async (
	env: string,
	projectSlug: string,
	appSlug: string,
	deployEnvironment: ClientDeployEnvironmentConfig,
	options: { user: IUser; shouldGenerate?: boolean }
) =>
⋮----
// console.log("askForDomain() > user :>> ", user);
⋮----
// console.log("app.workspace :>> ", app.workspace);
⋮----
// xử lý domains
⋮----
// lấy domain trong app config
⋮----
// ask for permissions to generate new app domain
⋮----
// in case the domain was existed, it will automatically generate a new one
⋮----
// save app config:
⋮----
// logError(`You need a domain to deploy this app. Please add one in: Diginext workspace > project > app > deploy environment"`);
</file>

<file path="src/modules/deploy/utils/deploy-helper.ts">
import { log, logError, logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
import type { IRelease, IUser, IWorkspace } from "@/entities";
import type { KubeIngress } from "@/interfaces";
import ClusterManager from "@/modules/k8s";
import { logPodByFilter } from "@/modules/k8s/kubectl";
import { MongoDB } from "@/plugins/mongodb";
import { AppService, BuildService, ClusterService, ProjectService, ReleaseService, WebhookService } from "@/services";
⋮----
import { markReleaseAsActive } from "../mark-release-as-active";
import type { DeploymentReadinessChecker } from "./deploy-checker";
⋮----
// Helper functions would be implemented similarly, extracting logic from the original function
export async function prepareReleaseData(releaseId: string, onUpdate?: (msg?: string) => void)
⋮----
// Step 1: Validate input
⋮----
// Step 2: Update release status to in_progress
⋮----
// Step 3: Validate release data
⋮----
// Step 4: Log update
⋮----
// Step 5: Return prepared release data
⋮----
export async function setupWebhookService(owner: IUser, workspace: IWorkspace, releaseId: string)
⋮----
// Step 1: Initialize webhook service
⋮----
// Step 2: Find existing webhook for this release
⋮----
// Step 3: Return webhook service with optional webhook
⋮----
export async function authenticateCluster(clusterSlug: string, owner: IUser, workspace: IWorkspace, onUpdate?: (msg?: string) => void)
⋮----
// Step 1: Find cluster
⋮----
// Step 2: Validate cluster existence
⋮----
// Step 3: Authenticate cluster
⋮----
export async function checkDeploymentReadiness(readinessChecker: DeploymentReadinessChecker, requiredReplicas: number): Promise<boolean>
⋮----
// Step 1: Check deployment readiness
⋮----
// Step 2: Log readiness status
⋮----
// Step 3: Handle errors
⋮----
export async function handleRolloutFailure(releaseId: string, buildId: string, webhookSvc: WebhookService, errorMessage: string)
⋮----
// Step 1: Trigger webhook if available
⋮----
// Step 2: Update release status
⋮----
// Step 3: Update build deployment status
⋮----
// Step 4: Log error
⋮----
// Step 5: Return error object
⋮----
export async function finalizeReleaseAndBuild(releaseId: string, buildId: string, projectSlug: string, appSlug: string, env: string, owner: IUser)
⋮----
// 1. Mark this release as active
⋮----
// 2. Update build deployment status to success
⋮----
// 3. Update project with latest build and updater
⋮----
// 4. Update app's deployment environment with latest release details
⋮----
// Log success
⋮----
export async function retrieveContainerLogs(namespace: string, appVersion: string, context: string, isNewDeploymentReady: boolean): Promise<string>
⋮----
export function checkContainerLogsForErrors(containerLogs: string): boolean
⋮----
export async function checkDomainConflict(
	ingress: KubeIngress,
	namespace: string,
	context: string,
	onUpdate?: (msg: string) => void
): Promise<boolean>
⋮----
export async function updateProjectAndAppMetadata(releaseData: IRelease, buildId: string, owner: IUser)
⋮----
// Update "deployStatus" of a build to success
⋮----
// Update project to sort by latest release
⋮----
// Assign this release as "latestRelease" of this app's deploy environment
</file>

<file path="src/modules/deploy/generate-domain.ts">
import { randomStringByLength } from "diginext-utils/dist/string/random";
import { logError } from "diginext-utils/dist/xconsole/log";
⋮----
import { isServerMode } from "@/app.config";
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IUser, IWorkspace } from "@/entities";
⋮----
import { fetchApi } from "../api";
import type { CreateDiginextDomainParams } from "../diginext/dx-domain";
import { dxCreateDomain } from "../diginext/dx-domain";
⋮----
export interface GenerateDomainOptions {
	/**
	 * User data
	 */
	user: IUser;
	/**
	 * Workspace data
	 */
	workspace: IWorkspace;
	/**
	 * Subdomain name
	 */
	recordName: string;
	/**
	 * @default "diginext.site"
	 */
	primaryDomain?: string;
	/**
	 * Value of A RECORD
	 */
	ipAddress?: string;
	/**
	 * If cluster's short name is specify, IP address will be ignored and
	 * the primary IP address of the cluster will be used as the A RECORD value
	 */
	clusterSlug?: string;
	/**
	 * Debugging mode
	 */
	isDebugging?: boolean;
}
⋮----
/**
	 * User data
	 */
⋮----
/**
	 * Workspace data
	 */
⋮----
/**
	 * Subdomain name
	 */
⋮----
/**
	 * @default "diginext.site"
	 */
⋮----
/**
	 * Value of A RECORD
	 */
⋮----
/**
	 * If cluster's short name is specify, IP address will be ignored and
	 * the primary IP address of the cluster will be used as the A RECORD value
	 */
⋮----
/**
	 * Debugging mode
	 */
⋮----
interface GenerateDomainResult {
	status: number;
	domain: string;
	ip?: string;
	messages: string[];
}
⋮----
export const generateDomains = async (params: GenerateDomainOptions) =>
⋮----
// Manage domains in database to avoid duplication
⋮----
// create new subdomain:
⋮----
// create new domain again if domain was existed
</file>

<file path="src/modules/deploy/parse-options-to-app-config.ts">
import { logError } from "diginext-utils/dist/xconsole/log";
import { isEmpty } from "lodash";
⋮----
import type { InputOptions } from "@/interfaces";
import { getCurrentGitRepoData } from "@/plugins";
import { makeSlug } from "@/plugins/slug";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { askForProjectAndApp } from "../apps/ask-project-and-app";
import { updateAppConfig } from "../apps/update-config";
import { askForDomain } from "../build";
import { askForCluster } from "../cluster/ask-for-cluster";
import { askForRegistry } from "../registry/ask-for-registry";
import { askForCertIssuer } from "./ask-deploy-environment-info";
⋮----
export const parseOptionsToAppConfig = async (options: InputOptions) =>
⋮----
// console.log("app :>> ", app);
// console.log("project :>> ", project);
⋮----
// get current config
⋮----
// get remote SSH
⋮----
// validate deploy environment
⋮----
// Google Cloud Info
⋮----
// Container Registry
⋮----
// Domains
⋮----
// Kubernetes Info
⋮----
// generate one or ask to generate one!
⋮----
// if current ssl is "letsencrypt" or "custom"...
⋮----
// save to app config on server
</file>

<file path="src/modules/passports/jwtStrategy.ts">
// import passport from "passport";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
⋮----
import jwt from "jsonwebtoken";
import type { VerifiedCallback } from "passport-jwt";
import { ExtractJwt, Strategy } from "passport-jwt";
import { z } from "zod";
⋮----
import { Config } from "@/app.config";
import type { AccessTokenInfo } from "@/entities";
⋮----
// Zod schema for token validation
⋮----
// Supported algorithms
⋮----
export type JWTOptions = {
	workspaceId?: string;
	expiresIn?: string | number;
};
⋮----
export interface TokenDetails {
	id: string;
	workspaceId: string;
	iat: number;
	exp: number;
	isExpired: boolean;
	expToNow: string;
	expiredTimestamp: number;
	expiredDate: Date;
	expiredDateGTM7: string;
}
⋮----
export const verifyRefreshToken = async (refreshToken: string) =>
⋮----
// console.log("passports > verifyRefreshToken > Verifying token :>>", refreshToken);
⋮----
// Check if token exists
⋮----
// Verify token's secret and decode
⋮----
// Validate decoded token structure
⋮----
// Check token expiration
⋮----
// Specific error handling
⋮----
// Companion function for generating refresh tokens
export const generateRefreshToken = (
	userId: string,
	options: {
		workspaceId?: string;
		expiresIn?: string;
	} = {}
) =>
⋮----
export const generateJWT = async (
	userId: string,
	options: {
		expiresIn?: string;
		workspaceId?: string;
	} = {}
) =>
⋮----
export async function extractAccessTokenInfo(
	tokens: { access_token: string; refresh_token?: string },
	payload: { id: string; exp: number; workspaceId?: string }
)
⋮----
// console.log("extractAccessTokenInfo() > Expired date >", expiredTimestamp, ">>:", expiredDate.format("YYYY-MM-DD HH:mm:ss"));
// console.log(`extractAccessTokenInfo() > Is token expired >>:`, isExpired, `(will expire ${expToNow})`);
⋮----
// If token is < 4 hours to expire, refresh it:
⋮----
// console.log("extractAccessTokenInfo() > accessTokenExpHourLeft :>> ", accessTokenExpHourLeft);
// console.log("extractAccessTokenInfo() > refreshTokenDetails :>> ", refreshTokenDetails);
// console.log("extractAccessTokenInfo() > isInvalidRefreshToken :>> ", isInvalidRefreshToken);
⋮----
// console.log(`The token of ${userId} is about to expired ${expToNow} > Refreshed it!`);
⋮----
// assign "access_token" info to request:
⋮----
// console.log(`[1] AUTHENTICATE: jwtStrategy > payload...`, payload);
⋮----
// console.log("jwtStrategy > access_token :>> ", access_token);
// console.log("jwtStrategy > refresh_token :>> ", refresh_token);
// console.log("jwtStrategy > payload :>> ", payload);
// console.log(`[1] jwtStrategy > payload.id :>> `, payload.id);
⋮----
// 1. Extract token info
⋮----
// console.log("[DEBUG] jwtStrategy > tokenInfo :>> ", tokenInfo);
⋮----
// validating token...
⋮----
// 2. Check if this access token is from a {User} or a {ServiceAccount}
⋮----
// console.log("jwtStrategy > user :>> ", user);
⋮----
// user.token.refresh_token = tokenInfo.token.refresh_token;
⋮----
// Maybe it's not a normal user, try looking for {ServiceAccount} user:
⋮----
// passport.use(jwtStrategy);
</file>

<file path="src/services/AIService.ts">
import { existsSync, writeFileSync } from "fs";
import path from "path";
⋮----
import type { IUser, IWorkspace } from "@/entities";
import type { InputOptions } from "@/interfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import type { AIDto } from "@/modules/ai/openrouter-api";
import { aiApi } from "@/modules/ai/openrouter-api";
import { getFolderStructure } from "@/plugins/fs-extra";
import { extractTextBetweenBackticks } from "@/plugins/string";
⋮----
export class AIService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async generateDockerfileByDirectoryStructure(structure: string, options?: Pick<InputOptions, "isDebugging">)
⋮----
// ask AI to generate a Dockerfile:
⋮----
// askMessage += "\n- Use single-stage build when you think this is a static html project";
⋮----
// askMessage += "\n- In each build stage, pick the right base image with optimal latest tag";
⋮----
// askMessage += "\n- Only copy dotenv file when the input directory structure contains dotenv file.";
⋮----
// model: "openai/gpt-3.5-turbo",
⋮----
// console.log("response :>> ", response);
⋮----
// write it down into a file:
⋮----
// if (options?.isDebugging) console.log("generateDockerfile() > content :>> ", content);
⋮----
async generateDockerfile(dir: string = process.cwd(), options?: Pick<InputOptions, "isDebugging">)
⋮----
// scan directory for file structure:
⋮----
// ask AI to generate:
⋮----
async analyzeErrorLog(log: string, options?: Pick<InputOptions, "isDebugging"> &
⋮----
// ask AI to analyze:
</file>

<file path="src/services/AppService.ts">
import { isEmpty, isString } from "lodash";
import path from "path";
⋮----
import { CLI_CONFIG_DIR, DIGINEXT_DOMAIN } from "@/config/const";
import type { IFramework, IGitProvider, IProject } from "@/entities";
import type { IApp } from "@/entities/App";
import { appSchema } from "@/entities/App";
import { type IQueryFilter, type IQueryOptions, type IQueryPagination } from "@/interfaces";
import type { AppInputSchema } from "@/interfaces/AppInterfaces";
import type { Ownership } from "@/interfaces/SystemTypes";
import getDeploymentName from "@/modules/deploy/generate-deployment-name";
import { dxDeleteDomainRecord } from "@/modules/diginext/dx-domain";
import { getRepoURLFromRepoSSH } from "@/modules/git";
import GitProviderAPI from "@/modules/git/git-provider-api";
import { parseGitRepoDataFromRepoSSH, pullOrCloneGitRepoHTTP, repoSshToRepoURL } from "@/modules/git/git-utils";
import { initalizeAndCreateDefaultBranches } from "@/modules/git/initalizeAndCreateDefaultBranches";
import ClusterManager from "@/modules/k8s";
import { checkQuota } from "@/modules/workspace/check-quota";
import { pullOrCloneGitRepo } from "@/plugins";
import { uniqueStrings } from "@/plugins/array";
import { formatEnvVars } from "@/plugins/env-var";
import { basicUserFields } from "@/plugins/mask-sensitive-info";
import { MongoDB } from "@/plugins/mongodb";
import { makeSlug } from "@/plugins/slug";
import { containsSpecialCharacters } from "@/plugins/string";
import { checkAppPermissions, checkAppPermissionsByFilter, checkProjectAndAppPermissions, checkProjectPermissions } from "@/plugins/user-utils";
⋮----
import BaseService from "./BaseService";
⋮----
export class AppService extends BaseService<IApp>
⋮----
constructor(ownership?: Ownership)
⋮----
async create(
		data: Partial<AppInputSchema & IApp>,
		options?: IQueryOptions & IQueryPagination & { shouldCreateGitRepo?: boolean; force?: boolean }
)
⋮----
// validate
⋮----
// ownership
⋮----
// check dx quota
⋮----
// validate
⋮----
// find parent project of this app
⋮----
// check access permissions
⋮----
// framework
⋮----
// git repo
⋮----
// create repo if needed
⋮----
// assign to app data:
⋮----
/**
		 * @deprecated
		 */
// migrate app environment variables if needed (convert {Object} to {Array})
// const migratedApp = await migrateAppEnvironmentVariables(newApp);
// if (migratedApp) newApp = migratedApp;
⋮----
// add this new app to the project info
⋮----
async createWithGitURL(
		repoSSH: string,
		gitProviderID: string,
		ownership: Ownership,
		options?: {
			/**
			 * `DANGER`
			 * ---
			 * Delete app and git repo if they were existed.
			 * @default false
			 */
			force?: boolean;
			/**
			 * If `TRUE`, return the existing app instead of throwing errors.
			 * @default false;
			 */
			returnExisting?: boolean;
			/**
			 * @default main
			 */
			gitBranch?: string;
			/**
			 * If `TRUE`: remove `.github/*` directory after pulling/cloning the repo.
			 */
			removeCI?: boolean;
			isDebugging?: boolean;
		}
)
⋮----
/**
			 * `DANGER`
			 * ---
			 * Delete app and git repo if they were existed.
			 * @default false
			 */
⋮----
/**
			 * If `TRUE`, return the existing app instead of throwing errors.
			 * @default false;
			 */
⋮----
/**
			 * @default main
			 */
⋮----
/**
			 * If `TRUE`: remove `.github/*` directory after pulling/cloning the repo.
			 */
⋮----
// parse git data
⋮----
// default project
⋮----
// check permissions
⋮----
// git provider
⋮----
// new repo slug
⋮----
// check app is existed
⋮----
// [DANGEROUS] delete existing app when `--force` is specified:
⋮----
// clone/pull that repo url
⋮----
// try with "repoSSH" first, if failed, try "repoURL"...
⋮----
// create git repo
⋮----
// setup initial repo: default branches, locked,...
⋮----
// prepare app data
⋮----
// ownership
⋮----
// save to database
⋮----
// add app & app slug to project
⋮----
async find(filter?: IQueryFilter, options?: IQueryOptions & IQueryPagination, pagination?: IQueryPagination): Promise<IApp[]>
⋮----
// check access permissions
⋮----
// if skip status checking, return apps
⋮----
// start checking status -> get cluster info
⋮----
// check app deploy environment's status in clusters
⋮----
// format environment variables (if any)
⋮----
// default values
⋮----
// find cluster & namespace
⋮----
// find workloads base on "main-app" label
⋮----
// console.log("- mainAppName :>> ", mainAppName);
// console.log("- deployOnCluster.metadata.name :>> ", deployOnCluster?.metadata?.name);
⋮----
// console.log("- deployOnCluster.status.readyReplicas :>> ", deployOnCluster?.status?.readyReplicas);
// console.log("- deployOnCluster.status.availableReplicas :>> ", deployOnCluster?.status?.availableReplicas);
// console.log("- deployOnCluster.status.unavailableReplicas :>> ", deployOnCluster?.status?.unavailableReplicas);
⋮----
// console.log("- app.deployEnvironment[env].readyCount :>> ", app.deployEnvironment[env].readyCount);
⋮----
async update(filter: IQueryFilter<IApp>, data: any, options?: IQueryOptions): Promise<IApp[]>
⋮----
// permissions
⋮----
// const allApps = await this.find({});
// console.log("AppService > allApps :>> ", allApps);
⋮----
// if (options?.isDebugging) console.log("AppService > update > filter :>>", filter);
⋮----
// console.log("AppService > update > apps :>>", apps);
⋮----
// find a project of this app
⋮----
// add this app._id and app.slug to project.apps and project.appSlugs
⋮----
// update project
⋮----
// delete deploy environment of this app
⋮----
// TODO: Check quota based on CPU & memory (NEW)
// if (Config.NODE_ENV === "production") {
// 	const { size } = deployEnvironment;
// 	if (size) {
// 		const quotaRes = await checkQuota(workspace, { resourceSize: size });
// 		if (!quotaRes.status) throw new Error(quotaRes.messages.join(". "));
// 		if (quotaRes.data && quotaRes.data.isExceed) {
// 			throw new Error(`You've exceeded the limit amount of container size.`);
// 		}
// 	}
// }
⋮----
// IMPORTANT: Only update specific paths
⋮----
// ! CAUTION: Delete deployEnvironment before updating
⋮----
// if (options?.isDebugging) console.log("AppService > update > data :>>", data);
⋮----
// if (options?.isDebugging) console.log("AppService > update > [UPDATED] apps :>>", apps);
⋮----
async updateOne(filter: IQueryFilter<IApp>, data: any, options?: IQueryOptions): Promise<IApp>
⋮----
async delete(filter?: IQueryFilter<IApp>, options?: IQueryOptions)
⋮----
// permissions
⋮----
// take down all deploy environments of this app
⋮----
// take down environment
⋮----
// delete diginext domain record (if any)
⋮----
// remove this app ID from project.apps
⋮----
async softDelete(filter?: IQueryFilter<IApp>, options?: IQueryOptions)
⋮----
// permissions
⋮----
// take down all deploy environments of this app
⋮----
// ignore on error
⋮----
async deleteGitRepo(filter?: IQueryFilter<IApp>, options?: IQueryOptions)
⋮----
// permissions
⋮----
// delete git repo via API
⋮----
async takeDown(app: IApp, options?: IQueryOptions)
⋮----
// validate
⋮----
// initialize
⋮----
// permissions
⋮----
// take down all deploy environments
⋮----
async archiveApp(app: IApp, ownership?: Ownership)
⋮----
// permissions
⋮----
// take down all deploy environments
⋮----
// update database
⋮----
async unarchiveApp(app: IApp, ownership?: Ownership)
⋮----
// permissions
⋮----
// update database
⋮----
/**
	 * Get all users that participated in this app.
	 */
async getParticipants(app: IApp, options?: IQueryOptions & IQueryPagination)
</file>

<file path="src/services/index.ts">
// export * from "./BaseService";
// export * from "./WorkspaceService";
</file>

<file path="src/services/NotificationService.ts">
import axios from "axios";
import { isArray } from "lodash";
import { z } from "zod";
⋮----
import type { INotification } from "@/entities/Notification";
import { notificationSchema } from "@/entities/Notification";
import type { IWebhook } from "@/entities/Webhook";
import type { IQueryFilter, IQueryOptions } from "@/interfaces";
import { type Ownership, systemEventList, webhookChannelList } from "@/interfaces/SystemTypes";
import { dxSendEmail } from "@/modules/diginext/dx-email";
import { MongoDB } from "@/plugins/mongodb";
⋮----
import BaseService from "./BaseService";
⋮----
/**
	 * User ID of the sender
	 */
⋮----
/**
	 * User ID of the recipient
	 */
⋮----
/**
	 * Notification's title
	 */
⋮----
/**
	 * Notification's content
	 */
⋮----
/**
	 * The system event that triggered the notification
	 */
⋮----
/**
	 * Target channels
	 */
⋮----
/**
	 * Referenced data of a notification
	 */
⋮----
/**
	 * Callback URL of a notification
	 */
⋮----
export type SendNotificationData = z.infer<typeof sendNotificationDataSchema>;
⋮----
export type SendNotificationWebhookData = z.infer<typeof sendNotificationWebhookDataSchema>;
⋮----
export type JojoWebhookData = z.infer<typeof jojoWebhookSchema>;
⋮----
export type SendJojoNotificationData = z.infer<typeof sendJojoNotificationDataSchema>;
⋮----
export class NotificationService extends BaseService<INotification>
⋮----
constructor(ownership?: Ownership)
⋮----
/**
	 * Send the notification via webhook
	 */
async webhookSend(webhook: IWebhook, data: SendNotificationWebhookData, options?: IQueryOptions)
⋮----
// validate
⋮----
// process & return
⋮----
/**
	 * Send the notification directly
	 */
async send(data: SendNotificationData, options?: IQueryOptions)
⋮----
// validate
⋮----
// process
⋮----
// make a request here
⋮----
// make a email notification request here
⋮----
// make a web push notification request here
⋮----
// create db instance
⋮----
// multiple recipients
⋮----
// create notification
⋮----
// emit websocket to clients
⋮----
// create notification -> single recipient
⋮----
// emit websocket to clients
⋮----
/**
	 * Mark the notification as read.
	 * @param id - Notification ID
	 */
async markAsRead(filter: IQueryFilter<INotification> =
⋮----
// process
⋮----
/**
	 * Send the notification to Jojo
	 */
async sendToJojo(data: SendJojoNotificationData, options?: IQueryOptions)
⋮----
// process
</file>

<file path="src/app.config.ts">
import Table from "cli-table";
import xobject, { toBool } from "diginext-utils/dist/object";
import trimNull from "diginext-utils/dist/string/trimNull";
import dotenv from "dotenv";
import fs from "fs";
import _ from "lodash";
import path from "path";
⋮----
import { CLI_DIR } from "./config/const";
⋮----
// logWarn(`[SERVER] No ENV file detected.`);
⋮----
// dev mode?
⋮----
// console.log(chalk.yellow(`------ process.env ------`));
⋮----
export enum EnvName {
	DEVELOPMENT = "development",
	TEST = "test",
	TEST_CI = "test_ci",
	STAGING = "staging",
	CANARY = "canary",
	PRODUCTION = "production",
}
⋮----
// Plugins
function toInt(obj: any, valueDefault: number)
⋮----
// Main config
export class Config
⋮----
static get ENV()
⋮----
static get NODE_ENV()
⋮----
static get BASE_PATH()
⋮----
static get LOCATION()
⋮----
static getBasePath(extendedPath = "")
⋮----
static get BASE_URL()
⋮----
static get PORT()
⋮----
static get DB_URI()
⋮----
static get DB_NAME()
⋮----
static get CLI_MODE()
⋮----
static get SERVER_TYPE()
⋮----
static get DEFAULT_DX_SERVER_URL()
⋮----
static get DX_SITE_URL()
⋮----
static get DX_SITE_BACKUP_URL()
⋮----
static get DX_API_BASE_URL()
⋮----
// return "http://localhost:4000";
⋮----
static get DX_API_BASE_PATH()
⋮----
static get DX_API_URL()
⋮----
static get BUILDER()
⋮----
/**
	 * Share resource credentials to workspaces?
	 * - If TRUE -> Everyone can read the cloud resource's credentials (such as secrets, service accounts, api access token,...)
	 * - If FALSE -> Only the server can read cloud resource's credentials, others (CLI & API) won't, even Workspace Administrators or Moderators.
	 * @default false
	 */
static get SHARE_RESOURCE_CREDENTIAL()
⋮----
static get DISABLE_INPECT_MEMORY()
⋮----
static get SECONDS_INPECT_MEMORY()
⋮----
static get REDIS_HOST()
⋮----
static get REDIS_PORT()
⋮----
static get REDIS_PASSWORD()
⋮----
static get CORS_WHITELIST()
⋮----
// Extensions
</file>

<file path="src/server.ts">
import { createAdapter } from "@socket.io/redis-adapter";
import bodyParser from "body-parser";
import chalk from "chalk";
import console from "console";
import cookieParser from "cookie-parser";
import session from "cookie-session";
import cors from "cors";
import dayjs from "dayjs";
import { logError, logWarn } from "diginext-utils/dist/xconsole/log";
import type { Express, Request, Response } from "express";
import express from "express";
import { queryParser } from "express-query-parser";
import type { Server } from "http";
import { createServer } from "http";
import { Redis } from "ioredis";
import type mongoose from "mongoose";
import morgan from "morgan";
import passport from "passport";
import path from "path";
import { RateLimiterMongo } from "rate-limiter-flexible";
import { Server as SocketServer } from "socket.io";
import swaggerUi from "swagger-ui-express";
⋮----
import { googleStrategy } from "@/modules/passports/googleStrategy";
import { jwtStrategy } from "@/modules/passports/jwtStrategy";
⋮----
import { Config, IsDev, IsProd, IsTest } from "./app.config";
import { CLI_DIR } from "./config/const";
import type { AppRequest } from "./interfaces/SystemTypes";
import { failSafeHandler } from "./middlewares/failSafeHandler";
import AppDatabase from "./modules/AppDatabase";
import { startupScripts } from "./modules/server/startup-scripts";
import basicAuthRouter from "./routes/api/v1/basic-auth";
import routes from "./routes/routes";
import { SystemLogService } from "./services/SystemLogService";
/**
 * ENVIRONMENT CONFIG
 */
⋮----
/**
 * CORS configuration
 */
⋮----
const corsOptions: cors.CorsOptionsDelegate = (req, callback) =>
⋮----
_corsOptions.origin = true; // reflect (enable) the requested origin in the CORS response
⋮----
_corsOptions.origin = false; // disable CORS for this request
⋮----
// console.log("_corsOptions :>> ", _corsOptions);
callback(null, _corsOptions); // callback expects two parameters: error and options
⋮----
/**
 * EXPRESS JS INITIALIZING
 */
⋮----
export function setServerStatus(status: boolean)
⋮----
function initialize(db?: typeof mongoose)
⋮----
// log(`Server is initializing...`);
⋮----
/**
	 * REDIS
	 */
⋮----
/**
	 * Websocket / SOCKET.IO
	 */
⋮----
// console.log("a user connected");
⋮----
// console.log("join room:", data);
⋮----
/**
	 * CORS MIDDLEWARE
	 */
⋮----
// cors({
// 	// credentials: IsDev() ? false : true,
// 	// allowedOrigins: IsDev() ? "*" : allowedOrigins,
// 	credentials: true,
// 	allowedOrigins,
// 	allowedHeaders,
// 	methods: allowedMethods,
// })
⋮----
// CREDITS
⋮----
/**
	 * SERVING STATIC & UPLOAD FILES
	 */
⋮----
/**
	 * TODO: Enable SWAGGER for API Docs
	 * SWAGGER API DOCS
	 */
⋮----
/**
	 * PASSPORT STRATEGY
	 */
⋮----
/**
	 * BODY PARSER
	 */
⋮----
/**
	 * QUERY PARSER
	 */
⋮----
/**
	 * COOKIES & SESSION PARSER
	 */
⋮----
/**
	 * AUTHENTICATION MIDDLEWARE
	 */
⋮----
/**
	 * LOGGING SYSTEM MIDDLEWARE - ENABLED
	 * Enable when running on server
	 */
⋮----
// write logs to file
// stream: accessLogStream,
⋮----
// Public paths for HEALTHCHECK & Rest APIs:
⋮----
/**
	 * RATE LIMITING MIDDLEWARE
	 */
⋮----
points: 50, // Requests
duration: 60, // Per second(s)
blockDuration: 60 * 60 * 1, // 1 hour
⋮----
const authRateLimiterMiddleware = (req: express.Request, res: express.Response, next: express.NextFunction) =>
⋮----
// console.log("req.ip :>> ", req.ip);
// console.log("req.headers['user-agent'] :>> ", req.headers["user-agent"]);
⋮----
/**
	 * ROUTE 404 & FAIL SAFE HANDLING MIDDLEWARE
	 */
// app.use("*", route404_handler);
⋮----
// make sure the Express app won't be crashed if there are any errors
⋮----
/**
	 * SERVER HANDLING
	 */
function onConnect()
⋮----
// save log to database
// const { SystemLogService } = await import("@/services");
⋮----
/**
	 * BUILD SERVER INITIAL START-UP SCRIPTS:
	 * - Connect GIT providers (if any)
	 * - Connect container registries (if any)
	 * - Connect K8S clusters (if any)
	 */
⋮----
// In your main server file or entry point
⋮----
// Optional: Add logging or monitoring service
⋮----
// log(`Connecting to database. Please wait...`);
⋮----
/**
	 * Close the database connection when the application is terminated
	 */
⋮----
export const getIO = ()
</file>

<file path="src/modules/cli/parse-cli-options.ts">
import chalk from "chalk";
import { log, logWarn } from "diginext-utils/dist/xconsole/log";
import yargs from "yargs";
⋮----
import pkg from "@/../package.json";
import { type IApp, type IFramework, type IProject } from "@/entities";
import type { InputOptions } from "@/interfaces/InputOptions";
import type { GitProviderType, ResourceQuotaSize } from "@/interfaces/SystemTypes";
import { currentVersion, getLatestCliVersion, shouldNotifyCliUpdate } from "@/plugins";
⋮----
// version: { describe: "Show version number.", alias: "v" },
⋮----
// version: { ...argvOptions.version, global: true },
⋮----
// resources
⋮----
// resource > namespace
// resource > ingress
// annotations: argvOptions.annotations,
// resource > service
⋮----
// resource > deployment
⋮----
// env: argvOptions["env-vars"],
⋮----
export async function parseCliOptions()
⋮----
// check for new version
⋮----
// start parsing...
⋮----
// header
⋮----
// .usage("$0 <module> [gcloud|do] <action> - Manage cloud provider accessibility")
⋮----
// aliases
⋮----
// command: TEST
⋮----
// command: CLI management
⋮----
// command: login
⋮----
// command: config
⋮----
// command: update
⋮----
// command: new
⋮----
// command: transfer
⋮----
// command: snippets
⋮----
// command: Ask AI
⋮----
// command: init
⋮----
// command: logs
⋮----
// command: upgrade
⋮----
// command: cdn
⋮----
// command: domain
⋮----
// .usage("$0 cdn")
// command: auth
⋮----
// input data
⋮----
// .alias("create-pull-secret", "")
// .option("file", { ...userInputOptions.file })
⋮----
// command: gcloud
⋮----
// command: do
⋮----
// command: custom
⋮----
// command: git
⋮----
// .demandCommand(1)
⋮----
// command: db
⋮----
// .command("new", "Create new database")
// .command("add-default-user", "Add default user to a database")
// .command("add-user", "Add new user to a database")
⋮----
// command: cluster
⋮----
// command: kubectl
⋮----
// .command("namespace", "Namespace")
⋮----
// _argv.thirdAction = _argv.key;
⋮----
// command: pipeline
// .command("pipeline", "Run your pipeline workflow")
// command: dev
⋮----
// command: build
⋮----
// command: run
⋮----
// command: deploy
// .command("deploy", "Request BUILD SERVER to build your project & deploy it", deployOptions)
⋮----
// command: down
⋮----
// command: dotenv
⋮----
// command: release
⋮----
// command: analytics
⋮----
// command: free
⋮----
// command: server
⋮----
// command: help
⋮----
// .usage("$0 help")
⋮----
// copyright
⋮----
// always attach current version to input options
⋮----
// actions
⋮----
// inputs
⋮----
// definitions
⋮----
// project & app
⋮----
// environment
⋮----
// helper
⋮----
// deployment
⋮----
ssl: argv.ssl as boolean, // [FLAG] --no-ssl
// [FLAG] --no-healthz, --healthz=/custom/path
⋮----
// console.log("options :>> ", options);
⋮----
// TEST: pnpm ts-node src/modules/cli/parseCliOptions.ts [...options]
// parseCliOptions();
</file>

<file path="src/modules/diginext/dx-api.ts">
import type { AxiosRequestConfig } from "axios";
import axios from "axios";
import chalk from "chalk";
import { isEmpty } from "lodash";
⋮----
import { Config } from "@/app.config";
import type { ResponseData } from "@/interfaces";
⋮----
export async function dxApi<T = ResponseData>(options: AxiosRequestConfig &
⋮----
// timeout: 30s
⋮----
// console.log("DXKEY :", dxKey);
⋮----
// options.headers.Authorization = `Bearer ${licenseKey}`;
⋮----
// console.log("HEADER OPTIONS:", options.headers["X-API-Key"]);
⋮----
// retry with backup url
// options.baseURL = Config.DX_SITE_BACKUP_URL;
// try {
// 	const res = await axios(options);
// 	const { data: responseData } = res;
// 	if (options.isDebugging)
// 		console.log(chalk.yellow("[BACKUP] dxApi() >"), `${Config.DX_SITE_BACKUP_URL}${options.url} > response :>>`, responseData);
// } catch (e2) {
// 	// throw official error
// 	const err: string = e.data?.message === "UNAUTHORIZED" || e.data?.status === 401 ? "UNAUTHORIZED." : e.message;
// 	return { status: 0, messages: [`${err}`] } as T;
// }
</file>

<file path="src/plugins/env-var.ts">
import { isArray } from "lodash";
⋮----
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
⋮----
export const formatEnvVars = (envVars: KubeEnvironmentVariable[]) =>
⋮----
/**
	 * {Object} envVars
	 * @example
	 * {
	 * 		"0": { name: "NAME", value: "VALUE" },
	 * 		"1": { name: "NAME", value: "VALUE" },
	 * 		...
	 * }
	 */
// check if envVars is an object
⋮----
// convert envVars to array of { name, value }
⋮----
// if (isString(name) && isString(value)) return { name, value };
// if (isNumber(value) || isBoolean(value) || isDate(value)) return { name, value: value.toString() };
⋮----
// let valueStr: string;
// // try to cast {Object} to {string}
// try {
// 	valueStr = JSON.stringify(value);
// } catch (e: any) {}
⋮----
// return { name, value: valueStr ?? value?.toString() ?? "" };
</file>

<file path="src/plugins/preprocess-input-data.ts">
import { isBooleanString, isJSON } from "class-validator";
import { toBool } from "diginext-utils/dist/object";
import { cloneDeepWith } from "lodash";
import { isValidObjectId } from "mongoose";
⋮----
import { isObjectId, MongoDB, toObjectId } from "./mongodb";
⋮----
export function preprocessInputData(data: any)
⋮----
// skip envVars
⋮----
// convert {ObjectId} to string
⋮----
// if (isNumberString(val)) return val.toString().length < 12 ? toNumber(val) : toString(val);
⋮----
// convert boolean string to boolean
⋮----
// convert JSON string to object
⋮----
// convert "undefined" or "null" to null
</file>

<file path="src/modules/build/build-and-deploy.ts">
import chalk from "chalk";
import dayjs from "dayjs";
import humanizeDuration from "humanize-duration";
⋮----
import { IsTest } from "@/app.config";
import type { IWorkspace } from "@/entities";
import { wait } from "@/plugins";
import { uploadFileBuffer } from "@/plugins/cloud-storage";
import { MongoDB } from "@/plugins/mongodb";
import { socketIO } from "@/server";
import MediaService from "@/services/MediaService";
⋮----
import screenshot from "../capture/screenshot";
import { createBuildSlug } from "../deploy/create-build-slug";
import type { DeployBuildV2Options, DeployBuildV2Result } from "../deploy/deploy-build-v2";
import { deployBuildV2 } from "../deploy/deploy-build-v2";
import type { StartBuildParams, StartBuildResult } from "./build";
import { startBuild, stopBuild } from "./build";
import { sendLog } from "./send-log-message";
⋮----
export const buildAndDeploy = async (buildParams: StartBuildParams, deployParams: DeployBuildV2Options) =>
⋮----
// import services
⋮----
// [1] Build container image
⋮----
buildParams.shouldDeploy = true; // <-- keep this to disable webhook notification when build success
⋮----
// build failed -> stop build
⋮----
// AI analysis: get latest 100 lines of container logs
⋮----
// [2] Deploy the build to target deploy environment
⋮----
// [3] Print success information
⋮----
// [4] Capture a screenshot (scheduled after 30 seconds after the deployment):
// console.log("IsTestCI() :>> ", IsTestCI());
// console.log("Config.ENV :>> ", Config.ENV);
// console.log("process.env.NODE_ENV :>> ", process.env.NODE_ENV);
⋮----
// let's this job run in background after 2 minutes
⋮----
// upload to cloud storage (if any)
⋮----
// success -> write to db
⋮----
// update screenshot to release
⋮----
// update screenshot to app's deploy environment
⋮----
// [5] Send success message to the CLI client:
⋮----
// wait for 3 seconds before disconnecting the CLI client
⋮----
// disconnect CLI client:
</file>

<file path="src/modules/deploy/deploy-build-v2.ts">
import { isEmpty, isUndefined } from "lodash";
import path from "path";
⋮----
import { isServerMode } from "@/app.config";
import { CLI_CONFIG_DIR } from "@/config/const";
import type { IApp, IBuild, ICluster, IProject, IRelease, IUser, IWebhook, IWorkspace } from "@/entities";
import { filterUniqueItems } from "@/plugins/array";
import { MongoDB } from "@/plugins/mongodb";
import { AppService, ClusterService, ContainerRegistryService, ProjectService, UserService, WebhookService } from "@/services";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { getDeployEvironmentByApp } from "../apps/get-app-environment";
import { updateAppConfig } from "../apps/update-config";
import { createReleaseFromBuild, sendLog } from "../build";
import { updateReleaseStatusById } from "../build/update-release-status";
import ClusterManager from "../k8s";
import { createBuildSlug } from "./create-build-slug";
import { rolloutV3 } from "./deploy-rollout-v3";
import type { GenerateDeploymentResult } from "./generate-deployment";
import getDeploymentName from "./generate-deployment-name";
import type { GenerateDeploymentV2Result } from "./generate-deployment-v2";
import { generateDeploymentV2 } from "./generate-deployment-v2";
⋮----
export type DeployBuildV2Options = {
	/**
	 * ### `REQUIRED`
	 * Target deploy environment
	 */
	env: string;
	/**
	 * ### `REQUIRED`
	 * The USER who process this request
	 */
	owner: IUser;
	/**
	 * ### `REQUIRED`
	 * Workspace
	 */
	workspace: IWorkspace;
	/**
	 * App's exposed port
	 */
	port?: number;
	/**
	 * Select target cluster (by slug) to deploy
	 */
	clusterSlug?: string;
	/**
	 * Current version of the Diginext CLI
	 */
	cliVersion?: string;
	/**
	 * ### CAUTION
	 * If `TRUE`, it will find and wipe out the current deployment, then deploy a new one!
	 */
	shouldUseFreshDeploy?: boolean;
	/**
	 * ### ONLY APPLY FOR DEPLOYING to PROD
	 * Force roll out the release to "prod" deploy environment (skip the "prerelease" environment)
	 * @default false
	 * @deprecated
	 */
	forceRollOut?: boolean;
	/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
	skipReadyCheck?: boolean;
	/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
	deployInBackground?: boolean;
	/**
	 * Health check path
	 * @default "/"
	 */
	healthzPath?: string | null;
};
⋮----
/**
	 * ### `REQUIRED`
	 * Target deploy environment
	 */
⋮----
/**
	 * ### `REQUIRED`
	 * The USER who process this request
	 */
⋮----
/**
	 * ### `REQUIRED`
	 * Workspace
	 */
⋮----
/**
	 * App's exposed port
	 */
⋮----
/**
	 * Select target cluster (by slug) to deploy
	 */
⋮----
/**
	 * Current version of the Diginext CLI
	 */
⋮----
/**
	 * ### CAUTION
	 * If `TRUE`, it will find and wipe out the current deployment, then deploy a new one!
	 */
⋮----
/**
	 * ### ONLY APPLY FOR DEPLOYING to PROD
	 * Force roll out the release to "prod" deploy environment (skip the "prerelease" environment)
	 * @default false
	 * @deprecated
	 */
⋮----
/**
	 * ### WARNING
	 * Skip checking deployed POD's ready status.
	 * - The response status will always be SUCCESS even if the pod is unable to start up properly.
	 * @default false
	 */
⋮----
/**
	 * ### WARNING
	 * Skip watching the progress of deployment, let it run in background, won't return the deployment's status.
	 * @default true
	 */
⋮----
/**
	 * Health check path
	 * @default "/"
	 */
⋮----
export type DeployBuildV2Result = {
	app: IApp;
	build: IBuild;
	release: IRelease;
	deployment: GenerateDeploymentResult;
	endpoint: string;
	// prerelease: FetchDeploymentResult;
};
⋮----
// prerelease: FetchDeploymentResult;
⋮----
export class DeployBuildError extends Error
⋮----
constructor(
		public data: { build: IBuild; release: IRelease; cluster: ICluster },
		message?: string
)
⋮----
export const processDeployBuildV2 = async (build: IBuild, release: IRelease, cluster: ICluster, options: DeployBuildV2Options) =>
⋮----
// workspace
⋮----
// app
⋮----
// webhook
⋮----
// mark build & release as "failed" status
const markBuildAndReleaseAsFailed = async () =>
⋮----
// update build
⋮----
// update release
⋮----
// stop deployment if release is undefined
⋮----
// update "deployStatus" in a build & a release
⋮----
// authenticate cluster & switch to that cluster's context
⋮----
// update "deployStatus" in a build & a release
⋮----
// target environment info
⋮----
/**
	 * Create namespace & imagePullScrets here!
	 * Because it will generate the name of secret to put into deployment yaml
	 */
⋮----
// update "deployStatus" in a build & a release
⋮----
/**
	 * Checking "imagePullSecrets" in a namepsace
	 */
⋮----
// update "deployStatus" in a build & a release
⋮----
// dispatch/trigger webhook
⋮----
/**
	 * Checking NGINX Ingress:
	 * - If there are a similar domain in different namespace -> throw error
	 */
⋮----
// update "deployStatus" in a build & a release
⋮----
// dispatch/trigger webhook
⋮----
// update "deployStatus" in a build & a release
⋮----
// dispatch/trigger webhook
⋮----
// Start rolling out new release
/**
	 * ! [WARNING]
	 * ! If "--fresh" flag was specified, the deployment's namespace will be deleted & redeploy from scratch!
	 */
// console.log("[DEPLOY BUILD] options.shouldUseFreshDeploy :>> ", options.shouldUseFreshDeploy);
⋮----
// update "deployStatus" in a build & a release
⋮----
// dispatch/trigger webhook
⋮----
// NOTE: No need to "deployStatus" in a build & a release below, because there are similar code in "rolloutV2" function
// await markBuildAndReleaseAsFailed();
⋮----
const onRolloutUpdate = (msg: string) =>
⋮----
// if any errors on rolling out -> stop processing deployment
⋮----
// if normal log message -> print out to the Web UI
⋮----
// ClusterManager.rolloutV2(releaseId, { onUpdate: onRolloutUpdate });
⋮----
// dispatch/trigger webhook
⋮----
// const result = await ClusterManager.rolloutV2(releaseId, { onUpdate: onRolloutUpdate });
⋮----
// dispatch/trigger webhook
⋮----
// dispatch/trigger webhook
⋮----
export const deployBuildV2 = async (build: IBuild, options: DeployBuildV2Options): Promise<DeployBuildV2Result> =>
⋮----
// parse options
⋮----
// build directory
⋮----
// services
⋮----
// update server deploy environment data
// app info
⋮----
// project info
⋮----
// app version
⋮----
// get deploy environment data
⋮----
// generate 'namespace' if it's not exists
⋮----
// reload app & deploy environment data...
⋮----
// validate deploy environment data...
⋮----
// if target cluster is defined, then set it to the deploy environment
⋮----
// if no cluster is defined for this deploy environment, throw error
⋮----
// find cluster
⋮----
// find registry
⋮----
// get app config to generate deployment data
⋮----
/**
	 * !!! IMPORTANT !!!
	 * Generate deployment data (YAML) & save the YAML deployment to "app.environment[env]"
	 * So it can be used to create release from build
	 */
⋮----
// save log to database
⋮----
// update data to deploy environment:
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// console.log("deployBuildV2() > updatedApp :>> ");
// console.dir(updatedApp, { depth: 10 });
// console.log("updatedApp.deployEnvironment[env].envVars :>> ", updatedApp.deployEnvironment[env].envVars);
// console.log(`deploymentContent :>> `, deploymentContent);
// console.log(`updatedApp.deployEnvironment[env].deploymentYaml :>> `, updatedApp.deployEnvironment[env].deploymentYaml);
⋮----
// log(`[BUILD] App's last updated by "${updatedApp.lastUpdatedBy}".`);
⋮----
// Create new Release:
⋮----
// create webhook
⋮----
// console.log("consumers :>> ", consumers);
⋮----
// update project "lastUpdatedBy"
⋮----
// process deploy build to cluster
⋮----
export const deployWithBuildSlugV2 = async (buildSlug: string, options: DeployBuildV2Options) =>
</file>

<file path="src/modules/deploy/deploy-rollout-v3.ts">
import chalk from "chalk";
import { logSuccess } from "diginext-utils/dist/xconsole/log";
⋮----
import type { IUser, IWorkspace } from "@/entities";
⋮----
import {
	authenticateCluster,
	checkContainerLogsForErrors,
	checkDomainConflict,
	DeploymentPreparator,
	DeploymentReadinessChecker,
	DeploymentScaler,
	DeploymentYamlProcessor,
	finalizeReleaseAndBuild,
	handleRolloutFailure,
	prepareReleaseData,
	retrieveContainerLogs,
	setupWebhookService,
	updateProjectAndAppMetadata,
} from "./utils";
⋮----
export interface RolloutOptions {
	isDebugging?: boolean;
	onUpdate?: (msg?: string) => void;
}
⋮----
export async function rolloutV3(releaseId: string, options: RolloutOptions =
⋮----
// 1. Validate and prepare release data
⋮----
// 2. Setup webhook and services
⋮----
// 3. Authenticate and prepare cluster
⋮----
// 4. Prepare deployment
⋮----
// Before scaling deployment, check domain conflicts
⋮----
// 5. Apply new deployment
⋮----
// 6. Check deployment readiness
⋮----
// wait until no creating pods
⋮----
// wait until at least one new pod is running
⋮----
// 7. Scale deployment
⋮----
// 8. After deployment readiness check
⋮----
// get latest 100 lines of container logs
⋮----
// Update project and app metadata
⋮----
// 9. Finalize release and build status
⋮----
// 10. Success logging
</file>

<file path="src/modules/deploy/generate-deployment-v2.ts">
import type { V1PersistentVolumeClaim } from "@kubernetes/client-node";
import { logWarn } from "diginext-utils/dist/xconsole/log";
⋮----
import yaml from "js-yaml";
import { isObject, toNumber } from "lodash";
⋮----
import { getContainerResource } from "@/config/config";
import { FULL_DEPLOYMENT_TEMPLATE_PATH, NAMESPACE_TEMPLATE_PATH } from "@/config/const";
import type { IContainerRegistry, IUser, IWorkspace } from "@/entities";
import type { AppConfig, DeployEnvironment, KubeDeployment, KubeNamespace } from "@/interfaces";
import type { KubeIngress } from "@/interfaces/KubeIngress";
import { objectToDeploymentYaml } from "@/plugins";
import { formatEnvVars } from "@/plugins/env-var";
import { makeSlug } from "@/plugins/slug";
⋮----
import { getAppConfigFromApp } from "../apps/app-helper";
import { diginextDomainName } from "../build";
import ClusterManager from "../k8s";
import { createImagePullSecretsInNamespace } from "../k8s/image-pull-secret";
import getDeploymentName from "./generate-deployment-name";
import { generateDomains } from "./generate-domain";
⋮----
export type GenerateDeploymentV2Params = {
	appSlug: string;
	env: string;
	port?: number;
	username: string;
	workspace: IWorkspace;
	/**
	 * Skip replacing origin domain of "prerelease" environment.
	 *
	 * @default false
	 * @deprecated
	 */
	skipPrerelease?: boolean;
	/**
	 * Requires if generate deployment files from image URL.
	 */
	appConfig?: AppConfig;
	/**
	 * Requires if generate deployment files from source code.
	 */
	targetDirectory?: string;
	/**
	 * Image URL of a build on container registry (no tag/version)
	 */
	buildImage?: string;
	/**
	 * Requires if generate deployment files from source code.
	 */
	buildTag?: string;
	/**
	 * Container Registry
	 */
	registry?: IContainerRegistry;
	// debug
	isDebugging?: boolean;
};
⋮----
/**
	 * Skip replacing origin domain of "prerelease" environment.
	 *
	 * @default false
	 * @deprecated
	 */
⋮----
/**
	 * Requires if generate deployment files from image URL.
	 */
⋮----
/**
	 * Requires if generate deployment files from source code.
	 */
⋮----
/**
	 * Image URL of a build on container registry (no tag/version)
	 */
⋮----
/**
	 * Requires if generate deployment files from source code.
	 */
⋮----
/**
	 * Container Registry
	 */
⋮----
// debug
⋮----
export type GenerateDeploymentV2Result = {
	// namespace
	namespaceContent: string;
	namespaceObject: KubeNamespace;

	// deployment (ingress, service, pods,...)
	deploymentName: string;
	deployEnvironment: DeployEnvironment;
	deploymentContent: string;
	deploymentCfg: KubeDeployment;

	// accessibility
	buildTag: string;
	buildNumber: number;
	IMAGE_NAME: string;
	endpoint: string;
};
⋮----
// namespace
⋮----
// deployment (ingress, service, pods,...)
⋮----
// accessibility
⋮----
export const generateDeploymentV2 = async (params: GenerateDeploymentV2Params) =>
⋮----
// validate inputs
⋮----
// const { DB } = await import("@/modules/api/DB");
⋮----
// DEFINE DEPLOYMENT PARTS:
⋮----
// Overwrite exposed port
⋮----
// get destination cluster
⋮----
// Authenticate with the cluster
⋮----
// Prepare for building docker image
⋮----
// if no domains, generate a default DIGINEXT domain:
⋮----
// isDebugging: true,
⋮----
// get container registry & create "imagePullSecret" in the target cluster
⋮----
// console.log("registry :>> ", registry);
⋮----
// get registry secret as image pulling secret:
⋮----
// * [NEW TACTIC] Fetch ENV variables from database:
⋮----
// console.log("generate deployment > deployEnvironment :>> ", deployEnvironment);
⋮----
// console.log("[1] containerEnvs :>> ", containerEnvs);
⋮----
// FIXME: magic?
⋮----
// kubernetes YAML only accept string as env variable value
⋮----
// console.log("[2] containerEnvs :>> ", containerEnvs);
⋮----
// Should inherit the "Ingress" config from the previous deployment?
⋮----
// assign labels
⋮----
// get available ingress class
⋮----
// write namespace.[env].yaml
⋮----
// write deployment.[env].yaml (ing, svc, deployment)
⋮----
// console.log("app.deployEnvironment :>> ", app.deployEnvironment);
// console.log("app.deployEnvironment[env].volumes :>> ", app.deployEnvironment[env].volumes);
⋮----
// Make sure all objects stay in the same namespace:
⋮----
// INGRESS
⋮----
// inherit config from previous deployment
⋮----
// ingress class
⋮----
// ! OLD -> DEPRECATED!!!
⋮----
// ! NEW -> WORKING!!!
⋮----
// block some specific paths
⋮----
// limit file upload & body size
⋮----
// limit requests per minute (DEV ONLY)
⋮----
// labels
⋮----
// redirect
⋮----
// tls
⋮----
// rules
⋮----
// delete SSL config if have to:
⋮----
// labels
⋮----
// Routing traffic to the same pod base on ClientIP
⋮----
// if (env == "dev") {
// 	// development environment
// 	doc.spec.template.spec.containers[0].resources = {};
// } else {
// 	// canary, production, staging,...
// 	doc.spec.template.spec.containers[0].resources = getContainerResourceBySize(deployEnvironmentConfig.size || "1x");
// }
⋮----
// minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing
⋮----
// * Add roll out strategy -> Rolling Update
⋮----
// container replicas
⋮----
// doc.metadata.name = appName;
⋮----
// deployment's labels
⋮----
// pod's labels
⋮----
// doc.spec.selector.matchLabels.app = appName;
⋮----
// Inject "imagePullSecrets" to pull image from the container registry
⋮----
// container
// doc.spec.template.spec.containers[0].name = appName;
⋮----
// NOTE: PORT 80 có thể không sử dụng được trên cluster của Digital Ocean
⋮----
// readinginessProbe & livenessProbe
⋮----
// RUNNING: Sometimes, applications are temporarily unable to serve traffic
⋮----
// STARTUP: The application is considered unhealthy after a certain number of consecutive failures
⋮----
initialDelaySeconds: 30, // chờ 30s rồi mới bắt đầu check
⋮----
periodSeconds: 10, // check lại mỗi 10s
successThreshold: 1, // chỉ cần 1 lần success -> app is ready
failureThreshold: 30, // check 30 lần fail x 10s = 300s (5 phút)
⋮----
// add persistent volumes (IF ANY)
⋮----
// persistent volume claim
⋮----
// mount to container
⋮----
// "nodeAffinity" -> to make sure pods are scheduled to the same node with the persistent volume
⋮----
// add persistent volumes if needed
⋮----
// get storage class name
⋮----
// persistent volume claim
⋮----
// Get endpoint of the application (last domain, if any):
⋮----
// update deploy environment
// const updatedApp = await DB.updateOne("app", { _id: app._id }, { [`deployEnvironment.${env}`]: deployEnvironmentConfig });
⋮----
// namespace
⋮----
// deployment (ingress, service, pods,...)
⋮----
// prerelease (ingress, service, pods,...)
// prereleaseYamlObject,
// prereleaseDeploymentContent,
// prereleaseUrl,
// accessibility
</file>

<file path="src/controllers/DeployEnvironmentController.ts">
import type { NextFunction } from "express-serve-static-core";
import { Get, Queries, Route, Security, Tags } from "tsoa/dist";
⋮----
import type { IUser, IWorkspace } from "@/entities";
import { type IQueryFilter, type IQueryOptions, type IResponsePagination, respondFailure, respondSuccess } from "@/interfaces";
import type { AppRequest, Ownership } from "@/interfaces/SystemTypes";
import { parseFilterAndOptions } from "@/plugins/controller-parser";
// import { DeployEnvironmentService } from "@/services/DeployEnvironmentService";
⋮----
export default class DeployEnvironmentController
⋮----
// service: DeployEnvironmentService;
⋮----
/**
	 * Parse the filter & option from the URL
	 */
parseFilter(req: AppRequest, res?: Response, next?: NextFunction)
⋮----
// assign to controller:
⋮----
/**
	 * Get list of deploy environments
	 */
⋮----
async getDeployEnvironments(
		@Queries()
		queryParams: {
			env?: string;
			appSlug?: string;
			projectSlug?: string;
		}
)
⋮----
/**
	 * Get list of deploy environments
	 */
⋮----
async getAllDeployEnvironments(
		@Queries()
		queryParams: {
			env?: string;
			appSlug?: string;
			projectSlug?: string;
		}
)
</file>

<file path="src/services/DeployEnvironmentService.ts">
import { isJSON } from "class-validator";
import dayjs from "dayjs";
import { makeSlug } from "diginext-utils/dist/Slug";
import { logWarn } from "diginext-utils/dist/xconsole/log";
import { isArray, isBoolean, isEmpty, isUndefined } from "lodash";
import type { QuerySelector } from "mongoose";
⋮----
import { DIGINEXT_DOMAIN } from "@/config/const";
import type { IBuild, ICluster, IProject, IUser, IWorkspace } from "@/entities";
import type { IApp } from "@/entities/App";
import type { DeployEnvironment, IQueryFilter, IQueryOptions, IQueryPagination, KubeDeployment } from "@/interfaces";
import type { DeployEnvironmentData } from "@/interfaces/AppInterfaces";
import type { DeployEnvironmentVolume } from "@/interfaces/DeployEnvironmentVolume";
import type { KubeEnvironmentVariable } from "@/interfaces/EnvironmentVariable";
import type { Ownership } from "@/interfaces/SystemTypes";
import { sslIssuerList } from "@/interfaces/SystemTypes";
import { getDeployEvironmentByApp } from "@/modules/apps/get-app-environment";
import { createReleaseFromApp } from "@/modules/build/create-release-from-app";
import { type GenerateDeploymentResult, fetchDeploymentFromContent } from "@/modules/deploy";
import getDeploymentName from "@/modules/deploy/generate-deployment-name";
import { generateDeploymentV2 } from "@/modules/deploy/generate-deployment-v2";
import { dxCreateDomain, dxDeleteDomainRecord, dxUpdateDomainRecord } from "@/modules/diginext/dx-domain";
import ClusterManager from "@/modules/k8s";
import { checkQuota } from "@/modules/workspace/check-quota";
import { currentVersion } from "@/plugins";
import { allElementsAreEqual } from "@/plugins/array";
import { formatEnvVars } from "@/plugins/env-var";
import { isValidKubernetesMemoryFormat } from "@/plugins/k8s-helper";
import { MongoDB } from "@/plugins/mongodb";
import { containsSpecialCharacters } from "@/plugins/string";
import { redis } from "@/server";
⋮----
export type DeployEnvironmentApp = DeployEnvironment & {
	app: IApp;
	appSlug: string;
	cluster: ICluster;
};
⋮----
export type KubeDeploymentOnCluster = KubeDeployment & {
	cluster: ICluster;
};
⋮----
export class DeployEnvironmentService
⋮----
/**
	 * Current login user
	 */
⋮----
/**
	 * Current active workspace
	 */
⋮----
/**
	 * Current owner & workspace
	 */
⋮----
constructor(ownership?: Ownership)
⋮----
async createDeployEnvironment(
		appSlug: string,
		params: {
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
			env: string;
			/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
			deployEnvironmentData: DeployEnvironmentData;
		},
		ownership: Ownership
)
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment name
			 * @default dev
			 */
⋮----
/**
			 * `REQUIRES`
			 * ---
			 * Deploy environment configuration
			 */
⋮----
// conversion if needed...
⋮----
//
⋮----
// get app data:
⋮----
// workspace
⋮----
// build
⋮----
// project
⋮----
// DEPLOYMENT: Assign default values to optional params:
⋮----
// Check DX quota
⋮----
// Validate deploy environment data:
⋮----
// cluster
⋮----
// namespace
⋮----
// container registry
⋮----
// Domains & SSL certificate...
⋮----
// Exposing ports, enable/disable CDN, and select Ingress type
⋮----
// deployEnvironmentData.ingress = "nginx";
⋮----
// create deploy environment in the app:
⋮----
// console.log("updatedApp :>> ", updatedApp);
⋮----
// const appConfig = await getAppConfigFromApp(updatedApp);
// console.log("buildTag :>> ", buildTag);
⋮----
skipPrerelease: true, // skip overwrite "prerelease" domain origin
⋮----
// update data to deploy environment:
⋮----
// serverDeployEnvironment.prereleaseUrl = prereleaseUrl;
⋮----
// serverDeployEnvironment.prereleaseDeploymentYaml = prereleaseDeploymentContent;
⋮----
// Update {user}, {project}, {environment} to database before rolling out
⋮----
// ----- SHOULD ROLL OUT NEW RELEASE OR NOT ----
⋮----
// Fallback support for deprecated mainAppName
⋮----
// create new release and roll out
⋮----
async getDeployEnvironmentStatus(deployEnvironment: DeployEnvironment)
⋮----
// format environment variables (if any)
⋮----
// default values
⋮----
// if no cluster -> not deployed -> skip
⋮----
// find cluster
⋮----
// find context & namespace
⋮----
// find workloads base on "main-app" label
⋮----
// console.log("- mainAppName :>> ", mainAppName);
// console.log("- deployOnCluster.metadata.name :>> ", deployOnCluster?.metadata?.name);
⋮----
// console.log("- deployOnCluster.status.readyReplicas :>> ", deployOnCluster?.status?.readyReplicas);
// console.log("- deployOnCluster.status.availableReplicas :>> ", deployOnCluster?.status?.availableReplicas);
// console.log("- deployOnCluster.status.unavailableReplicas :>> ", deployOnCluster?.status?.unavailableReplicas);
⋮----
async getAllDeployEnvironments(workspaceId: string, options?: IQueryOptions)
⋮----
// try to get from redis
⋮----
// Create a new object to avoid circular references
⋮----
// Remove circular references
// delete safeDeployEnvironment.app;
⋮----
// sort by updatedAt (descending)
⋮----
// save to redis (expire in 1 hour)
⋮----
async listDeployEnvironments(filter?: IQueryFilter<DeployEnvironment>, options?: IQueryOptions & IQueryPagination)
⋮----
// sort by updatedAt (descending)
⋮----
// pagination (optional)
⋮----
// extract deploy environments from apps
⋮----
// filter deploy environments
⋮----
// Dynamically filter based on the provided filter object
⋮----
// Check if the key exists in the deployEnvironment and matches the filter value
⋮----
// pagination (optional)
⋮----
// get status of each deploy environment
⋮----
// Find the original app to pass to getDeployEnvironmentStatus
// const originalApp = apps.find((app) => app.slug === deployEnvironment.appSlug);
⋮----
// app: originalApp,
⋮----
// save to redis (expire in 1 hour)
⋮----
async viewDeployEnvironmentLogs(app: IApp, env: string)
⋮----
// console.log("pods :>> ", pods);
⋮----
// console.log("pod.metadata :>> ", pod.metadata);
⋮----
// console.log("logs :>> ", logs);
⋮----
/**
	 * Make deploy environment sleep by scale the replicas to ZERO, so you can wake it up later without re-deploy.
	 */
async sleepDeployEnvironment(app: IApp, env: string)
⋮----
// get deployment's labels
⋮----
// switch to the cluster of this environment
⋮----
/**
			 * FALLBACK SUPPORT for deprecated mainAppName
			 */
⋮----
// skip...
⋮----
// update database
⋮----
/**
	 * Wake a sleeping deploy environment up by scale it to 1 (Will FAIL if this environment hasn't been deployed).
	 */
async wakeUpDeployEnvironment(app: IApp, env: string)
⋮----
// get deployment's labels
⋮----
// switch to the cluster of this environment
⋮----
/**
			 * FALLBACK SUPPORT for deprecated mainAppName
			 */
⋮----
// skip...
⋮----
// update database
⋮----
/**
	 * Take down a deploy environment but still keep the deploy environment information (cluster, registry, namespace,...)
	 */
async takeDownDeployEnvironment(app: IApp, env: string, options?: IQueryOptions)
⋮----
// response data
⋮----
// TODO: get "main-app" label in the "release" of this app
// get deployment's labels
⋮----
// double check cluster's accessibility
⋮----
/**
		 * IMPORTANT
		 * ---
		 * Should NOT delete namespace because it will affect other apps in a project!
		 */
⋮----
// Delete INGRESS
⋮----
// Delete SERVICE
⋮----
// Delete DEPLOYMENT
⋮----
/**
			 * FALLBACK SUPPORT for deprecated mainAppName
			 */
// Delete INGRESS
⋮----
// Delete SERVICE
⋮----
// Delete DEPLOYMENT
⋮----
// update database
⋮----
// response data
⋮----
async deleteDeployEnvironment(app: IApp, env: string)
⋮----
// take down deploy environment on clusters
⋮----
// delete DXUP domain record (if any)
⋮----
// delete deploy environment in database
⋮----
/**
	 * Change cluster of a deploy environment
	 * @param app
	 * @param env
	 * @param cluster
	 * @param options
	 * @returns
	 */
async changeCluster(
		app: IApp,
		env: string,
		cluster: ICluster,
		options: { user: IUser; workspace: IWorkspace; deleteAppOnPreviousCluster?: boolean; isDebugging?: boolean }
)
⋮----
// validate
⋮----
// verify target cluster
⋮----
// delete app on previous cluster (if needed)
⋮----
// update new cluster slug:
⋮----
// get latest release
⋮----
// clone to new release with new cluster slug:
⋮----
// roll out new release:
⋮----
// change DXUP domain record (if any)
⋮----
// return
⋮----
/**
	 * Get environment variables of a deploy environment
	 * @param app - IApp
	 * @param env - Deploy environment (dev, prod,...)
	 * @returns
	 */
async getEnvVars(app: IApp, env: string)
⋮----
// validate
⋮----
/**
	 * Update environment variables of a deploy environment
	 * @param app - IApp
	 * @param env - Deploy environment (dev, prod,...)
	 * @param variables - Array of environment variables: `[{name,value}]`
	 * @returns
	 */
async updateEnvVars(app: IApp, env: string, variables: KubeEnvironmentVariable[])
⋮----
// validate
⋮----
// just to make sure "value" is always "string"
⋮----
// process
⋮----
// TO BE REMOVED SOON: Fallback support "buildNumber"
⋮----
// update on cluster -> if it's failed, just ignore and return warning message!
⋮----
// generate new deployment YAML
⋮----
skipPrerelease: true, // skip overwrite "prerelease" domain origin
⋮----
// apply deployment YAML
⋮----
// update to database
⋮----
// [`deployEnvironment.${env}.prereleaseDeploymentYaml`]: deployment.prereleaseDeploymentContent,
⋮----
/**
	 * Add persistent volume to deploy environment
	 * @param app - IApp
	 * @param env - Deploy environment (dev, prod,...)
	 * @param data - Persistent volume configuration
	 */
async addPersistentVolume(app: IApp, env: string, data: DeployEnvironmentVolume)
⋮----
// validate
⋮----
// default volume type is "pvc"
⋮----
// get cluster
⋮----
// update db: NEW VOLUME
⋮----
// add {PersistentVolumeClaim} to Kubernetes deployment
⋮----
skipPrerelease: true, // skip overwrite "prerelease" domain origin
⋮----
// Apply deployment YAML
⋮----
// update db: DEPLOYMENT YAML
⋮----
// [`deployEnvironment.${env}.prereleaseDeploymentYaml`]: deployment.prereleaseDeploymentContent,
⋮----
// result
⋮----
/**
	 * Add persistent volume to deploy environment
	 * @param app - IApp
	 * @param env - Deploy environment (dev, prod,...)
	 * @param data - Persistent volume configuration
	 */
async addPersistentVolumeBySize(app: IApp, env: string, data: Pick<DeployEnvironmentVolume, "name" | "size" | "mountPath">)
⋮----
// validate
⋮----
// deploy environment
⋮----
// get cluster
⋮----
// get storage class name
⋮----
// get node of deploy environment
⋮----
const node = podNodes[0]; // <- select the first node found as volume's node
⋮----
// process
⋮----
// result
⋮----
/**
	 * Delete persistent volume to deploy environment
	 * @param app - IApp
	 * @param env - Deploy environment name (dev, prod,...)
	 * @param name - Persistent volume name
	 */
async removePersistentVolume(app: IApp, env: string, name: string)
⋮----
// validate
⋮----
// deploy environment
⋮----
// get cluster
⋮----
// update db
⋮----
// update db: Remove "volume" in "deployEnvironment"
⋮----
// unattach volume from the K8S deployment
⋮----
skipPrerelease: true, // skip overwrite "prerelease" domain origin
⋮----
// Apply deployment YAML
⋮----
// update db: DEPLOYMENT YAML
⋮----
// [`deployEnvironment.${env}.prereleaseDeploymentYaml`]: "deployment.prereleaseDeploymentContent",
⋮----
// remove {PersistentVolumeClaim} of Kubernetes deployment
⋮----
// FIXME: wait for {PersistentVolume} to be deleted
⋮----
// result
</file>

<file path="CHANGELOG.md">
## [3.43.2](https://github.com/digitopvn/diginext/compare/v3.43.1...v3.43.2) (2025-04-25)


### Bug Fixes

* **deploy:** log warning if "imagePullSecret" existed ([e082ce6](https://github.com/digitopvn/diginext/commit/e082ce68d13222f316108917fcfe77b3dd585244))
* **deploy:** log warning if "imagePullSecret" existed ([#577](https://github.com/digitopvn/diginext/issues/577)) ([658c371](https://github.com/digitopvn/diginext/commit/658c3710298bd2ef69a4fbd1c4959173b2aceaf2))

## [3.43.1](https://github.com/digitopvn/diginext/compare/v3.43.0...v3.43.1) (2025-04-23)


### Bug Fixes

* **rollout:** scale out sooner ([916a4f6](https://github.com/digitopvn/diginext/commit/916a4f68a4706018b9d9f29468b82de5cde4d591))
* **rollout:** scale out sooner ([#576](https://github.com/digitopvn/diginext/issues/576)) ([3a08dd1](https://github.com/digitopvn/diginext/commit/3a08dd152caae3af6e7d7da93beb4da37405ce5b))
* **rollout:** skip waiting scale out ([c227963](https://github.com/digitopvn/diginext/commit/c227963a829c9c95557cd3317b1d0714d1c8da9b))

# [3.43.0](https://github.com/digitopvn/diginext/compare/v3.42.2...v3.43.0) (2025-03-31)


### Bug Fixes

* **preprocess-input-data:** Correct data validation logic ([a1462ef](https://github.com/digitopvn/diginext/commit/a1462ef9aaa35070ac59cb57e72fb40a9f3ae9da))

## [3.42.2](https://github.com/digitopvn/diginext/compare/v3.42.1...v3.42.2) (2025-03-25)


### Bug Fixes

* **src/plugins:** update env-var plugin formatting and linting ([#574](https://github.com/digitopvn/diginext/issues/574)) ([42dea16](https://github.com/digitopvn/diginext/commit/42dea16d97fc763dba90502320cc8cbaf937281e))

## [3.42.1](https://github.com/digitopvn/diginext/compare/v3.42.0...v3.42.1) (2025-03-25)


### Bug Fixes

* **preprocess-input-data:** update input data processing logic ([04d43e9](https://github.com/digitopvn/diginext/commit/04d43e9178737555086e9675fb82214dae514b34))
* **preprocess-input-data:** update input data processing logic ([#573](https://github.com/digitopvn/diginext/issues/573)) ([a2399a3](https://github.com/digitopvn/diginext/commit/a2399a3ad5b545a991f5607e36b41443c91e6cf0))

# [3.42.0](https://github.com/digitopvn/diginext/compare/v3.41.0...v3.42.0) (2025-03-25)


### Features

* **deploy:** Improve deploy request handling ([41f6dd4](https://github.com/digitopvn/diginext/commit/41f6dd4e3536837a7fb46c4181424992437fb478))

# [3.41.0](https://github.com/digitopvn/diginext/compare/v3.40.2...v3.41.0) (2024-11-26)


### Features

* **build:** Update build and deployment process, and improve documen… ([#570](https://github.com/digitopvn/diginext/issues/570)) ([e7a90a5](https://github.com/digitopvn/diginext/commit/e7a90a53b911647ea3f13fce4a23523bf551a30f))
* **build:** Update build and deployment process, and improve documentation ([7ee4b34](https://github.com/digitopvn/diginext/commit/7ee4b343c35d9acf668c506c5572dee32aaae1cc))

## [3.40.2](https://github.com/digitopvn/diginext/compare/v3.40.1...v3.40.2) (2024-11-23)


### Bug Fixes

* **server:** cache deploy environments in 1 hour ([2690357](https://github.com/digitopvn/diginext/commit/269035743d193258e95633aa85ed9da4cfd8405a))
* **server:** sort deploy environments by updated date desc ([042e08b](https://github.com/digitopvn/diginext/commit/042e08b306168b08b67f3fc496d6de6fe52b6828))

## [3.40.1](https://github.com/digitopvn/diginext/compare/v3.40.0...v3.40.1) (2024-11-23)


### Bug Fixes

* **server:** add debug info to AI service ([8142681](https://github.com/digitopvn/diginext/commit/81426811b2daa44153d4cabe5c7a642e89001cb5))
* **server:** sort deploy environments by date descending ([c1478be](https://github.com/digitopvn/diginext/commit/c1478be84346e1b61d85746dcd9d5789f490e3d3))

# [3.40.0](https://github.com/digitopvn/diginext/compare/v3.39.0...v3.40.0) (2024-11-16)


### Bug Fixes

* **admin:** enhance deploy environment list ([e2840cd](https://github.com/digitopvn/diginext/commit/e2840cdc6248d8e1736adca5c259ff1ea16877f8))
* **admin:** enhance deploy environment list ([#567](https://github.com/digitopvn/diginext/issues/567)) ([fd1247c](https://github.com/digitopvn/diginext/commit/fd1247ca1be1ca7cdaf48e6350a1a1ed4a5293cc))
* **build:** error test ([82cddc3](https://github.com/digitopvn/diginext/commit/82cddc35d842e9abe780f74694fbc0b1c84e384d))
* **cli:** display warning of duplicated domain generated ([e2ba428](https://github.com/digitopvn/diginext/commit/e2ba428824b9f80441d9cb68c65306b1c14fffa6))
* **deploy environment:** list with filter and cpu,memory ([769c12b](https://github.com/digitopvn/diginext/commit/769c12b5f65d25555c357c1a02c0691c1a537024))
* **server,cli:** issue create existing diginext domain ([3ee486f](https://github.com/digitopvn/diginext/commit/3ee486f9651f9a7b2638d8cc5bbe1f7946796c63))
* **server:** add ownership to deploy env service ([9001157](https://github.com/digitopvn/diginext/commit/9001157da2e812faab521cddcbc0c2e642bb4b7d))
* **server:** deployment service constructor ([4bf4ad9](https://github.com/digitopvn/diginext/commit/4bf4ad986197f3090513938cf2d53b33d6657ef9))
* **server:** direct import deploy env service ([3409599](https://github.com/digitopvn/diginext/commit/34095994b26719c493dcc1f927ada38be1a42168))
* **server:** still that fucking import issue ([3d54f88](https://github.com/digitopvn/diginext/commit/3d54f88eca0a0aab99d28cd2fb9aafca19a629c1))


### Features

* **env var:** create entity, service ([b12a3b5](https://github.com/digitopvn/diginext/commit/b12a3b52a30fa72fdc531be84f0e9019c787a426))
* **server:** ai analysis on build failed ([57bde05](https://github.com/digitopvn/diginext/commit/57bde0588fa218bf82c37a3821ee972e59abc1b5))

# [3.39.0](https://github.com/digitopvn/diginext/compare/v3.38.3...v3.39.0) (2024-11-14)


### Bug Fixes

* **server:** ai analysis on deploy error ([8c40ed9](https://github.com/digitopvn/diginext/commit/8c40ed99ec5dd14e9a6dccd748aafe8c2f572be4))
* **server:** notification swagger tsoa issue ([0cc0e6a](https://github.com/digitopvn/diginext/commit/0cc0e6aaa1c7a08d99d5c2c453d48b1ce6bc7e20))


### Features

* **admin:** ai settings, new code editor, ai analysis on deploy error ([170a48f](https://github.com/digitopvn/diginext/commit/170a48f0f99e6d22b9924c8944b81dcd18f44a72))
* ai settings, new code editor, ai analysis on deploy error ([#566](https://github.com/digitopvn/diginext/issues/566)) ([33c78a3](https://github.com/digitopvn/diginext/commit/33c78a32632f0c0953e92d6081bfc9c424918f1f))

## [3.38.3](https://github.com/digitopvn/diginext/compare/v3.38.2...v3.38.3) (2024-11-14)


### Bug Fixes

* **server,cli:** correct no healthz (tested) ([8cbca3d](https://github.com/digitopvn/diginext/commit/8cbca3dfeef9f5551dbb3b3561fdff8fa25dd23a))
* **server,cli:** correct no healthz (tested) ([#565](https://github.com/digitopvn/diginext/issues/565)) ([b62290a](https://github.com/digitopvn/diginext/commit/b62290a6dd583bedf3f5aab2a40a3fa141ec0f2b))

## [3.38.2](https://github.com/digitopvn/diginext/compare/v3.38.1...v3.38.2) (2024-11-14)


### Bug Fixes

* **server,cli:** correct no healthz option ([e766094](https://github.com/digitopvn/diginext/commit/e766094ba7a78e5adf76672ccd3859854b59b2b5))
* **server,cli:** correct no healthz option ([#564](https://github.com/digitopvn/diginext/issues/564)) ([0352e42](https://github.com/digitopvn/diginext/commit/0352e424d13b4d39f4db1bcd62385e6db7f3cfbf))
* **server:** check image pull secret when generating deployment ([bdd58c4](https://github.com/digitopvn/diginext/commit/bdd58c45a0ba4c34cfc3b3c41806c71ced77fa3e))
* **server:** update healthz path after cli parse options ([8297634](https://github.com/digitopvn/diginext/commit/82976344e2060e318f419f703c37e4aacfffc5ad))

## [3.38.1](https://github.com/digitopvn/diginext/compare/v3.38.0...v3.38.1) (2024-11-14)


### Bug Fixes

* **server:** turn off cleanup old deployments ([b41ef04](https://github.com/digitopvn/diginext/commit/b41ef049ce715af3dbb4c3df50d7b1e0c1db3a8b))
* **server:** turn off cleanup old deployments ([#563](https://github.com/digitopvn/diginext/issues/563)) ([a6695ee](https://github.com/digitopvn/diginext/commit/a6695ee77a2d40d56e2b9208ae92932542b2f484))

# [3.38.0](https://github.com/digitopvn/diginext/compare/v3.37.3...v3.38.0) (2024-11-13)


### Bug Fixes

* **admin:** view app logs, modify healthz, redirect domain ([a92689c](https://github.com/digitopvn/diginext/commit/a92689cd42b6b6dd39e1539eb41633e6cb8ddd9e))
* **server:** add env var for dxup api base url ([917a073](https://github.com/digitopvn/diginext/commit/917a073885e3e75f5bf5fe27f8ef2fb76e3afa52))
* **server:** update domain on change cluster, delete app, delete deploy env ([1722fc5](https://github.com/digitopvn/diginext/commit/1722fc5349cbd7db20e01d1e12af74ba77b6faa8))

## [3.37.3](https://github.com/digitopvn/diginext/compare/v3.37.2...v3.37.3) (2024-11-10)


### Bug Fixes

* **server:** add super account ([e8340d4](https://github.com/digitopvn/diginext/commit/e8340d4af7e4ae9fee03cd4f4d524f3123055c3e))
* **server:** add super account ([#560](https://github.com/digitopvn/diginext/issues/560)) ([6dc19fa](https://github.com/digitopvn/diginext/commit/6dc19fa0835e60ad22ecc4f8262a6bd92ba7a95f))

## [3.37.2](https://github.com/digitopvn/diginext/compare/v3.37.1...v3.37.2) (2024-11-10)


### Bug Fixes

* **server:** show better error in dx api call ([6d02dc7](https://github.com/digitopvn/diginext/commit/6d02dc7b6b870b14325fd46b77614e99bc98afe5))
* **server:** show better error in dx api call ([#559](https://github.com/digitopvn/diginext/issues/559)) ([f8a7071](https://github.com/digitopvn/diginext/commit/f8a707116111f38550e4b0ac3f1dbf63df689ff6))

## [3.37.1](https://github.com/digitopvn/diginext/compare/v3.37.0...v3.37.1) (2024-11-09)


### Bug Fixes

* **server,admin:** fix update deploy environment, update container quota sizes ([f304498](https://github.com/digitopvn/diginext/commit/f304498f0a1a52e21104a8aada768638da52c160))

# [3.37.0](https://github.com/digitopvn/diginext/compare/v3.36.5...v3.37.0) (2024-11-09)


### Bug Fixes

* **server:** re-enable rollout status checking ([738eb84](https://github.com/digitopvn/diginext/commit/738eb84d55854eb2eb70a3edba3595e6c050178e))
* **server:** re-enable rollout status checking ([#557](https://github.com/digitopvn/diginext/issues/557)) ([82b2779](https://github.com/digitopvn/diginext/commit/82b27797a1d3f1b1ac8305c42dc8b62d79c8d0d6))

## [3.36.5](https://github.com/digitopvn/diginext/compare/v3.36.4...v3.36.5) (2024-11-08)


### Bug Fixes

* **server:** auth cluster before generate deployment yaml ([038c41c](https://github.com/digitopvn/diginext/commit/038c41c213aa62044590d65fd7326dfbfd358324))
* **server:** auth cluster before generate deployment yaml ([#556](https://github.com/digitopvn/diginext/issues/556)) ([07e1c50](https://github.com/digitopvn/diginext/commit/07e1c50d0f8be57ad7b4f0481db0903a0c32462f))

## [3.36.4](https://github.com/digitopvn/diginext/compare/v3.36.3...v3.36.4) (2024-11-08)


### Bug Fixes

* **cli:** healthz optional ([b3890a7](https://github.com/digitopvn/diginext/commit/b3890a7e2e34e80d81300a2eac645d8e8a114231))
* **cli:** issue registry & ssl selection ([8b16079](https://github.com/digitopvn/diginext/commit/8b1607915952817ce699169462e2114691bf2d08))
* **project,app:** fix check quota error ([f4961f7](https://github.com/digitopvn/diginext/commit/f4961f7c6b4971246e0b9bc1f2b791f7e24ddd17))
* **project,app:** fix check quota error ([#552](https://github.com/digitopvn/diginext/issues/552)) ([e34c5e9](https://github.com/digitopvn/diginext/commit/e34c5e93a43e412bc4e87d5dadb19838f22c0487))
* **server:** turn off preprocess data for base service ([0bb2002](https://github.com/digitopvn/diginext/commit/0bb2002251398d0783c7521409234f518b7fa108))

## [3.36.3](https://github.com/digitopvn/diginext/compare/v3.36.2...v3.36.3) (2024-11-06)


### Bug Fixes

* **cli:** skip check ready ([f4a9d99](https://github.com/digitopvn/diginext/commit/f4a9d99a88293c0c46272f094c9e09b64d6bba95))
* **cli:** skip check ready ([#553](https://github.com/digitopvn/diginext/issues/553)) ([3ad3fac](https://github.com/digitopvn/diginext/commit/3ad3fac324abb244a3c6953c2735fdc9a25f1319))

## [3.36.2](https://github.com/digitopvn/diginext/compare/v3.36.1...v3.36.2) (2024-10-29)


### Bug Fixes

* **api:** token with email ([711455e](https://github.com/digitopvn/diginext/commit/711455e1ad5be5e8484c297fcca125484fcb593d))
* **api:** token with email ([db9dc3c](https://github.com/digitopvn/diginext/commit/db9dc3c99cbe0507a1755290b15319e5b4036c31))
* **server:** api call to dxsite ([ba34541](https://github.com/digitopvn/diginext/commit/ba345414028cddb685fab582572bc903ce40b8bc))

## [3.36.1](https://github.com/digitopvn/diginext/compare/v3.36.0...v3.36.1) (2024-10-28)


### Bug Fixes

* **admin:** deploy env list - filter by cluster ([1ffc55d](https://github.com/digitopvn/diginext/commit/1ffc55d01c9b38a2830d9a59d286d59a73c9e921))
* **storage:** use correct put object when upload aws ([a604c31](https://github.com/digitopvn/diginext/commit/a604c310e159c5fe7009392a4e360e4bdada59a3))

# [3.36.0](https://github.com/digitopvn/diginext/compare/v3.35.6...v3.36.0) (2024-10-21)


### Bug Fixes

* **aws sdk:** version mismatch ([315bcbe](https://github.com/digitopvn/diginext/commit/315bcbe20085ca2df51364d6dfbcf10724bc0bb0))
* **aws:** please work ([4e794bc](https://github.com/digitopvn/diginext/commit/4e794bc1833f22e42da17e54a15f1c7261961381))
* **storage upload:** pump @aws/s3-client ([93040a3](https://github.com/digitopvn/diginext/commit/93040a3439239f1b0ccd72591fa965eaca812d8c))
* **tests:** add aws sdk types dependency ([0e00516](https://github.com/digitopvn/diginext/commit/0e0051655cdf0bc03cbe7ba98e01469f238f0fce))
* **tsconfig:** es2017 ([f202377](https://github.com/digitopvn/diginext/commit/f202377472c257d1111635e7c15ff2dc8cd219bc))


### Features

* **admin:** new page: deploy environment list ([de92227](https://github.com/digitopvn/diginext/commit/de92227e83c48ab98af1e71c1a2af216bcc968e6))
* **admin:** settings - cloud storage for screenshots and backups ([a1ea7c5](https://github.com/digitopvn/diginext/commit/a1ea7c5f73a04d2b477826ade5b9de81b8b8ebe0))

## [3.35.6](https://github.com/digitopvn/diginext/compare/v3.35.5...v3.35.6) (2024-10-18)


### Bug Fixes

* **volume:** set default type is pvc ([9b49256](https://github.com/digitopvn/diginext/commit/9b492561f86c431fdc127d5c41987c1208394767))
* **volume:** set default type is pvc ([#548](https://github.com/digitopvn/diginext/issues/548)) ([85f49aa](https://github.com/digitopvn/diginext/commit/85f49aaf4e2125d8b4618f953eb89af7ad000a60))

## [3.35.5](https://github.com/digitopvn/diginext/compare/v3.35.4...v3.35.5) (2024-10-17)


### Bug Fixes

* **rollout:** skip scale current deploy when there are running pods ([390a70e](https://github.com/digitopvn/diginext/commit/390a70ea18b89e563d10ee95e714a921c700fa11))
* **rollout:** skip scale current deploy when there are running pods ([#547](https://github.com/digitopvn/diginext/issues/547)) ([f96c0ad](https://github.com/digitopvn/diginext/commit/f96c0adcdf5c453f05f70d1711cea6d8358da3cf))

## [3.35.4](https://github.com/digitopvn/diginext/compare/v3.35.3...v3.35.4) (2024-10-17)


### Bug Fixes

* **rollout:** if new pods are crashed, throw error, improve deploy speed ([be92b58](https://github.com/digitopvn/diginext/commit/be92b58f66607165accc98b1effd36667eb55896))
* **rollout:** if new pods are crashed, throw error, improve deploy speed ([#546](https://github.com/digitopvn/diginext/issues/546)) ([a6d0d9e](https://github.com/digitopvn/diginext/commit/a6d0d9e1db150a443256e6f46230dad68dd07444))

## [3.35.3](https://github.com/digitopvn/diginext/compare/v3.35.2...v3.35.3) (2024-10-17)


### Bug Fixes

* **rollout:** correct skip crashed pods ([28b7cdc](https://github.com/digitopvn/diginext/commit/28b7cdc2acb349c86b1762f2d7f97c0516439263))
* **rollout:** skip crashed pods when checking new deployment status ([585d86f](https://github.com/digitopvn/diginext/commit/585d86f4c2fa08442720899d40f9e4f0c5a26bf4))
* **rollout:** skip crashed pods when checking new deployment status ([#545](https://github.com/digitopvn/diginext/issues/545)) ([6f380db](https://github.com/digitopvn/diginext/commit/6f380dbc0c451d00cc03027afab936d10034a2b6))

## [3.35.2](https://github.com/digitopvn/diginext/compare/v3.35.1...v3.35.2) (2024-09-13)


### Bug Fixes

* **rollout:** catch error of checking new deployment ready ([6720916](https://github.com/digitopvn/diginext/commit/6720916964260b517ea33b0ec7b7ed460aaaee73))
* **server:** get raw container registry during build to extract token ([44ce8dc](https://github.com/digitopvn/diginext/commit/44ce8dce155f0dc437ee18e9d0f748f729023d73))
* **server:** get raw container registry during build to extract token ([#544](https://github.com/digitopvn/diginext/issues/544)) ([e10c1a5](https://github.com/digitopvn/diginext/commit/e10c1a5cfecc968e5787b5925890f97e4cfedc3c))

## [3.35.1](https://github.com/digitopvn/diginext/compare/v3.35.0...v3.35.1) (2024-08-20)


### Bug Fixes

* **admin:** select workspace - input disapeared ([#543](https://github.com/digitopvn/diginext/issues/543)) ([e88b0ce](https://github.com/digitopvn/diginext/commit/e88b0cecf4354c82b54eef4f4eec16149f94fc6e))
* **admin:** select workspace - input disapeared when typing workspace name ([79bbf50](https://github.com/digitopvn/diginext/commit/79bbf509ae2a776af56b9710e311946dc7a971f2))

# [3.35.0](https://github.com/digitopvn/diginext/compare/v3.34.23...v3.35.0) (2024-08-20)


### Bug Fixes

* **cli:** connect docker to google artifact registry ([f35c060](https://github.com/digitopvn/diginext/commit/f35c060d44ece314b3961a5e7f09af7617c5d8a6))
* **cli:** deprecate free and rollout command ([f2f6d7b](https://github.com/digitopvn/diginext/commit/f2f6d7bed7a6101440a8960924bc4db9ac12a21d))
* **cli:** improve websocket ping log ([f502498](https://github.com/digitopvn/diginext/commit/f5024988e7ad495473e975f575553808cb3832d3))
* **cli:** use ai to generate dockerfile ([59d1918](https://github.com/digitopvn/diginext/commit/59d191836754570f1ed116f2176f65d3fd747f6f))

## [3.34.23](https://github.com/digitopvn/diginext/compare/v3.34.22...v3.34.23) (2024-08-06)


### Bug Fixes

* **server:** issue of incorrect update app data when deploy ([d56f4a9](https://github.com/digitopvn/diginext/commit/d56f4a9c56f44d1e49c2d0e3d0d11d807b3c1583))
* **server:** issue of incorrect update app data when deploy ([#541](https://github.com/digitopvn/diginext/issues/541)) ([278212c](https://github.com/digitopvn/diginext/commit/278212c22ec4df9750b56c0e27a8a1b98a97f32f))

## [3.34.22](https://github.com/digitopvn/diginext/compare/v3.34.21...v3.34.22) (2024-08-06)


### Bug Fixes

* **server:** issue of unable to update app when roll out ([82b4653](https://github.com/digitopvn/diginext/commit/82b465338828a5ca413708df2cb45c74362fad13))
* **server:** issue of unable to update app when roll out ([#540](https://github.com/digitopvn/diginext/issues/540)) ([84a66ca](https://github.com/digitopvn/diginext/commit/84a66cad95d6639c6549bdee3e40fc4c826f0960))

## [3.34.21](https://github.com/digitopvn/diginext/compare/v3.34.20...v3.34.21) (2024-08-05)


### Bug Fixes

* **cli:** issue of create app with none framework ([f59e723](https://github.com/digitopvn/diginext/commit/f59e7236e554024e47a7f7129c4fe9276259262f))
* **cli:** issue of create app with none framework ([#539](https://github.com/digitopvn/diginext/issues/539)) ([9c54340](https://github.com/digitopvn/diginext/commit/9c5434049999ee5ddfcb42fb62186091ce0a6649))

## [3.34.20](https://github.com/digitopvn/diginext/compare/v3.34.19...v3.34.20) (2024-08-02)


### Bug Fixes

* **server,cli:** add default container registry named dxup ([9f53ec8](https://github.com/digitopvn/diginext/commit/9f53ec8bfe3bcaf11d8208d6a5310c08dbc157ad))
* **server,cli:** add default container registry named dxup ([#538](https://github.com/digitopvn/diginext/issues/538)) ([b52e54d](https://github.com/digitopvn/diginext/commit/b52e54d501ae9fbddee40f8464551a47f0e1a92f))
* **server,cli:** bump puppeteer, globby, rimraf ([9861aa7](https://github.com/digitopvn/diginext/commit/9861aa7f6c1ab396bfd27b065d4dfeffae4c476c))
* **server:** issue saving activity on join workspace ([4bc1c92](https://github.com/digitopvn/diginext/commit/4bc1c92abf25d3ddc3559ff8328b09de158dd829))

## [3.34.19](https://github.com/digitopvn/diginext/compare/v3.34.18...v3.34.19) (2024-08-02)


### Bug Fixes

* **cli:** sort dxup cluster on top ([973772b](https://github.com/digitopvn/diginext/commit/973772b41f827eb9ebfd4740b3d946ecc1c310d9))
* **server:** clean up startup migration script ([6f11fb4](https://github.com/digitopvn/diginext/commit/6f11fb4a3bd3b31bf42ad45dddd33dbfa2f0490b))
* **server:** do not update dx user id if not found ([085f775](https://github.com/digitopvn/diginext/commit/085f7750e81dbc2ea252c534a3c01560f2bc7083))
* **server:** mongodb error when exclude metadata ([2016e3d](https://github.com/digitopvn/diginext/commit/2016e3d46b8ded6460ad07f30467a9216e461ec3))

## [3.34.18](https://github.com/digitopvn/diginext/compare/v3.34.17...v3.34.18) (2024-08-01)


### Bug Fixes

* **dashboard:** issue deploy environment not displayed ([fef9035](https://github.com/digitopvn/diginext/commit/fef9035fe3cd17af71ae5c7f3058f41ee8534eb7))
* **dashboard:** issue deploy environment not displayed ([#534](https://github.com/digitopvn/diginext/issues/534)) ([7696835](https://github.com/digitopvn/diginext/commit/7696835907abe2ab3b6a7dc2fc6cf9d7d245c070))

## [3.34.17](https://github.com/digitopvn/diginext/compare/v3.34.16...v3.34.17) (2024-07-31)


### Bug Fixes

* **admin:** show all clusters include default ones ([ec8fe82](https://github.com/digitopvn/diginext/commit/ec8fe8229877335f40653af3aecbef655e9d9076))
* **server:** improve api speed ([296be6d](https://github.com/digitopvn/diginext/commit/296be6db2006ba7f7d930b9a37300e1d2784a91b))

## [3.34.16](https://github.com/digitopvn/diginext/compare/v3.34.15...v3.34.16) (2024-07-24)


### Bug Fixes

* **github action:** send status to discord channel ([58e359e](https://github.com/digitopvn/diginext/commit/58e359ec7091f17794db5a77525332ab052413bd))
* **github action:** send status to discord channel ([#532](https://github.com/digitopvn/diginext/issues/532)) ([0c5cdaf](https://github.com/digitopvn/diginext/commit/0c5cdaf939653209f58b43be938bd57d5cb798a9))

## [3.34.15](https://github.com/digitopvn/diginext/compare/v3.34.14...v3.34.15) (2024-07-24)


### Bug Fixes

* **server,cli:** split specific services importing ([76c8e44](https://github.com/digitopvn/diginext/commit/76c8e4414202c1f9f523a4bef802b56f3c2e27c3))
* **server,cli:** split specific services importing ([#531](https://github.com/digitopvn/diginext/issues/531)) ([3b42165](https://github.com/digitopvn/diginext/commit/3b421654bbd9ac69b7bf3ac64cca3fe3d2119874))

## [3.34.14](https://github.com/digitopvn/diginext/compare/v3.34.13...v3.34.14) (2024-07-23)


### Bug Fixes

* **cli:** project not found when update app config ([86f93c1](https://github.com/digitopvn/diginext/commit/86f93c1fde6b308bed5b8233f8804188414f442c))
* **server:** do not scale replicas when not found old deployment ([fcc1410](https://github.com/digitopvn/diginext/commit/fcc14104bffdcf37fa22f6f46ef0543368936da9))
* **server:** migrate all to generate deployment v2 ([306fc50](https://github.com/digitopvn/diginext/commit/306fc502bf9af0a079efcf9dabafe58a340cb458))

## [3.34.13](https://github.com/digitopvn/diginext/compare/v3.34.12...v3.34.13) (2024-07-18)


### Bug Fixes

* **server:** change cluster -> change diginext domain record ip address ([9792bfe](https://github.com/digitopvn/diginext/commit/9792bfe5dff41d8997b3af608cb38ba72b57bdee))
* **server:** deleting apps, projects now permanent instead of soft delete ([ea8b14d](https://github.com/digitopvn/diginext/commit/ea8b14d08e3e86d37f62902474447784fef674b1))
* **server:** deploy is finished but release status "in_progress" still hanging ([570de92](https://github.com/digitopvn/diginext/commit/570de92e0771da870a4bad05fc9d2fa29c900c24))

## [3.34.12](https://github.com/digitopvn/diginext/compare/v3.34.11...v3.34.12) (2024-07-17)


### Bug Fixes

* **readme:** change "diginext" to "dxup" ([5205230](https://github.com/digitopvn/diginext/commit/5205230ff594aa209cc24a53e73348095de380e2))
* **server,admin:** build logs access to public, new dxup logo ([7d80e5f](https://github.com/digitopvn/diginext/commit/7d80e5f53aa411e34953e22a2f6f528857e4064c))
* **server,cli:** save server version and location to builds ([83b3239](https://github.com/digitopvn/diginext/commit/83b32399dd654e68495a88f2ec16e591f941e562))
* **server:** catch crash issue when deleting apps ([76d13da](https://github.com/digitopvn/diginext/commit/76d13da93b72ce40c04f5306778d646d6196eced))

## [3.34.11](https://github.com/digitopvn/diginext/compare/v3.34.10...v3.34.11) (2024-07-17)


### Bug Fixes

* **server:** issue of create release failed because build number is string ([fad8ccf](https://github.com/digitopvn/diginext/commit/fad8ccf861f99726e949af270850f5e45c23537e))
* **server:** update project when promote deploy env ([8f77d38](https://github.com/digitopvn/diginext/commit/8f77d38722b61052f93457f547fe458fac6759b2))

## [3.34.10](https://github.com/digitopvn/diginext/compare/v3.34.9...v3.34.10) (2024-07-16)


### Bug Fixes

* **server:** delete deprecated ingress class annotation ([b753053](https://github.com/digitopvn/diginext/commit/b7530538f5b220b83ad7c3292e008d27598e1437))

## [3.34.9](https://github.com/digitopvn/diginext/compare/v3.34.8...v3.34.9) (2024-07-16)


### Bug Fixes

* **admin:** add change cluster shortcut button ([b59b7e7](https://github.com/digitopvn/diginext/commit/b59b7e7da66837e8528177e1c446c3bb7b1442e9))
* **server,admin:** improve find latest build when update app ([9474178](https://github.com/digitopvn/diginext/commit/94741782b91145a058aae93ba8fd00c4ad17dad1))
* **server:** improve change cluster speed ([a14efb9](https://github.com/digitopvn/diginext/commit/a14efb9be97452cc712590108d63251e96ac5aac))
* **server:** save k8s deployment name to deploy environment ([1e9d616](https://github.com/digitopvn/diginext/commit/1e9d61661408c28956fb2fd2b447214ee19ab952))

## [3.34.8](https://github.com/digitopvn/diginext/compare/v3.34.7...v3.34.8) (2024-07-13)


### Bug Fixes

* **admin:** fixed code editor issue ([56cd837](https://github.com/digitopvn/diginext/commit/56cd837e99d7937e766b6ca2b52542ba18a69a4e))
* **cli:** deploy to multiple deploy environments ([65f3e7f](https://github.com/digitopvn/diginext/commit/65f3e7f71cd00b806e6ca0a5608b5df12abadd60))
* **cli:** issue of downloading env from deploy environment ([f157b42](https://github.com/digitopvn/diginext/commit/f157b42319a2233fac1f56053875595d73046bbe))

## [3.34.7](https://github.com/digitopvn/diginext/compare/v3.34.6...v3.34.7) (2024-07-11)


### Bug Fixes

* **admin:** improve build list filter and sort ([671097e](https://github.com/digitopvn/diginext/commit/671097e156db072ae2a1a2caa2438e03babf27fa))
* **server:** correct build image in deploy env without tag ([b07a40d](https://github.com/digitopvn/diginext/commit/b07a40da7d4827c5188a66f5b17a7d5af8846273))

## [3.34.6](https://github.com/digitopvn/diginext/compare/v3.34.5...v3.34.6) (2024-07-11)


### Bug Fixes

* **github action:** release workflow name correction ([2bf9179](https://github.com/digitopvn/diginext/commit/2bf917980a74b1f970fa3117363dd2d6b46a034d))
* **server,admin:** list of build crashed, build logs crashed, view crashed pods ([ca9e87d](https://github.com/digitopvn/diginext/commit/ca9e87d76df25de1933e78cc4c8b87fc72c8866d))
* **server:** unable to get logs of failed deployment pods ([08d2fe9](https://github.com/digitopvn/diginext/commit/08d2fe93eebc4537ab90251ed973c5429a643d98))

## [3.34.5](https://github.com/digitopvn/diginext/compare/v3.34.4...v3.34.5) (2024-07-11)


### Bug Fixes

* **server:** unable to deploy due to missing owner in deploy environment ([30c9c69](https://github.com/digitopvn/diginext/commit/30c9c69025b753c3fee055946be34725def9d8d1))
* **server:** unable to deploy due to missing owner in deploy environment ([#518](https://github.com/digitopvn/diginext/issues/518)) ([18ca05c](https://github.com/digitopvn/diginext/commit/18ca05c8bb3a134e80a46ae8553a926acb26868e))

## [3.34.4](https://github.com/digitopvn/diginext/compare/v3.34.3...v3.34.4) (2024-07-10)


### Bug Fixes

* **admin:** improve rerun build and deploy process ([42c2377](https://github.com/digitopvn/diginext/commit/42c2377c5cc5637de7f854c21ae65b6b173b0f69))
* **server:** issue of release not found when deploy ([76dafb6](https://github.com/digitopvn/diginext/commit/76dafb61ffbb93a195fd7a9149e97c33cfccdf86))
* **server:** issue of release not found when deploy ([#517](https://github.com/digitopvn/diginext/issues/517)) ([11bf2cc](https://github.com/digitopvn/diginext/commit/11bf2cccf436889259b309916416e4f9eda72e66))

## [3.34.3](https://github.com/digitopvn/diginext/compare/v3.34.2...v3.34.3) (2024-07-10)


### Bug Fixes

* **admin:** issue of build list page ([ad0a7ef](https://github.com/digitopvn/diginext/commit/ad0a7ef7a0839d5f4262fb14db3d9364994cd838))
* **server:** build not found when scale replicas ([1e8e838](https://github.com/digitopvn/diginext/commit/1e8e83853ce7abd5eb4f02f9860e3d9d37c8f8bb))
* **server:** correct build finish notification message ([bd75c74](https://github.com/digitopvn/diginext/commit/bd75c746bde5730c5295a1cbd10a64b4c95619dc))
* **server:** mark long running build & deploy as failed ([5796935](https://github.com/digitopvn/diginext/commit/5796935dbf6615c7e7940885581a869eff7caa49))

## [3.34.2](https://github.com/digitopvn/diginext/compare/v3.34.1...v3.34.2) (2024-07-10)


### Bug Fixes

* **admin:** improve build page by add deploy env column ([060dc5b](https://github.com/digitopvn/diginext/commit/060dc5b7555baa1d2a22d03837b1147fdfaf4db7))

## [3.34.1](https://github.com/digitopvn/diginext/compare/v3.34.0...v3.34.1) (2024-07-10)


### Bug Fixes

* **server:** improve error message on roll out ([fd00cec](https://github.com/digitopvn/diginext/commit/fd00cece65e4f71305c1eccfb3029ca0b77deae4))
* **server:** stuck at scaling prev deployment up before rolling out ([aa790a1](https://github.com/digitopvn/diginext/commit/aa790a129159b6cea5fd3b2564aa3e7573fc5f48))
* **server:** stuck at scaling prev deployment up before rolling out ([#514](https://github.com/digitopvn/diginext/issues/514)) ([f2463a8](https://github.com/digitopvn/diginext/commit/f2463a8f804b1de5dece5a9cfe12978eb1f582db))

# [3.34.0](https://github.com/digitopvn/diginext/compare/v3.33.11...v3.34.0) (2024-07-10)


### Bug Fixes

* **server,admin:** improve sidebar menu, project & app list ([23ddceb](https://github.com/digitopvn/diginext/commit/23ddceb619258604b0af20379c2b56336b9dfe6b))
* **server:** auth cluster when failed then update verified as false ([bd50b9b](https://github.com/digitopvn/diginext/commit/bd50b9b3f1303a033a01ed451936eca2231c34cb))
* **server:** catch auth middlewares errors ([28597f4](https://github.com/digitopvn/diginext/commit/28597f4f36fb3394d7d5bf242e9fe2f789ceb5ae))
* **server:** clean up deployments of cli <3.33.11 after deploy new app version ([11d5b6c](https://github.com/digitopvn/diginext/commit/11d5b6c1daa2825a18bc278993bce5d79a50aebb))
* **server:** sort project on top after deploying ([bd2b1db](https://github.com/digitopvn/diginext/commit/bd2b1dbb5722203eddb69ab6ddba2544babfd833))
* **server:** stop deploying process on new deployment crashed ([9bad39a](https://github.com/digitopvn/diginext/commit/9bad39a7b3e0f519beea5833bd27c66c58f9102b))
* **server:** when roll out avoid clean up irrelevant resources in current namespace ([8ba4f66](https://github.com/digitopvn/diginext/commit/8ba4f66dddd48b5167f464ff0eff9b089b144da0))


### Features

* **admin:** promote to another env, improve builds, releases, projects, apps ([46c81bb](https://github.com/digitopvn/diginext/commit/46c81bb95cb57f3f990c1d38615a156a242cebdf))
* **server,cli:** deploy with message, splitted build and roll out status ([43cb5cb](https://github.com/digitopvn/diginext/commit/43cb5cbcbf48f734cf2f5908f1c13bd836418173))
* **server:** promote production, deploy from release ([6532254](https://github.com/digitopvn/diginext/commit/6532254441c240cbbf7f8e895e71752143713363))

## [3.33.11](https://github.com/digitopvn/diginext/compare/v3.33.10...v3.33.11) (2024-07-04)


### Bug Fixes

* **server:** correct db import ([28bc976](https://github.com/digitopvn/diginext/commit/28bc976b2d34f41d6dc50d94ca573689575254d0))
* **server:** correct db import ([#512](https://github.com/digitopvn/diginext/issues/512)) ([70eea67](https://github.com/digitopvn/diginext/commit/70eea67ea1fbe7a47a956282c25da793a6afcc8b))

## [3.33.10](https://github.com/digitopvn/diginext/compare/v3.33.9...v3.33.10) (2024-07-04)


### Bug Fixes

* **server:** correct create image pull secret subpath api ([7b10bec](https://github.com/digitopvn/diginext/commit/7b10bec75bd2e522244f3b2318b04b5329430997))
* **server:** correct create image pull secret subpath api ([#511](https://github.com/digitopvn/diginext/issues/511)) ([4825e70](https://github.com/digitopvn/diginext/commit/4825e7095234f87e6ac2480f58d1f3653615b05d))

## [3.33.9](https://github.com/digitopvn/diginext/compare/v3.33.8...v3.33.9) (2024-07-04)


### Bug Fixes

* **server,cli:** create image pull secret uses api in the background ([b646573](https://github.com/digitopvn/diginext/commit/b6465736d7fd2c3e46e97ed1c62f6cfd236f4b86))
* **server:** increase liveness probe time to 5 mins ([05535fd](https://github.com/digitopvn/diginext/commit/05535fd3b56b582ff58e6700b292c47dd7668de7))

## [3.33.8](https://github.com/digitopvn/diginext/compare/v3.33.7...v3.33.8) (2024-07-01)


### Bug Fixes

* **server,admin:** env var value is undefined ([18594ef](https://github.com/digitopvn/diginext/commit/18594eff19ecce7f79a190010279f40622e77487))
* **server:** increase liveness probe to 3 mins ([3c05238](https://github.com/digitopvn/diginext/commit/3c052384e0574a6136b8d96be997c79f2c81a0f5))

## [3.33.7](https://github.com/digitopvn/diginext/compare/v3.33.6...v3.33.7) (2024-06-28)


### Bug Fixes

* **server:** increase period check time of readiness and liveness probe ([9cb90b5](https://github.com/digitopvn/diginext/commit/9cb90b55b5e1046087d9444ebfd4c0edc20036b0))

## [3.33.6](https://github.com/digitopvn/diginext/compare/v3.33.5...v3.33.6) (2024-06-28)


### Bug Fixes

* **cli:** select cluster when it is outdated, modified or deleted ([7633c17](https://github.com/digitopvn/diginext/commit/7633c17f5a04cdde701548675c671983b28a63dd))
* **cli:** update env dx site url and api url ([7762abb](https://github.com/digitopvn/diginext/commit/7762abbe891f7a528fbf658e7a97b47cf8a2cbb3))
* **server:** add livenessProbe and readinessProbe in generated deploy yaml ([2b08407](https://github.com/digitopvn/diginext/commit/2b0840758b11e904a933142cd09dca64d2d06815))
* **server:** add livenessProbe and readinessProbe in generated deploy yaml ([#507](https://github.com/digitopvn/diginext/issues/507)) ([857528a](https://github.com/digitopvn/diginext/commit/857528a9b61d0454b56e3caf585bdad68347e000))

## [3.33.5](https://github.com/digitopvn/diginext/compare/v3.33.4...v3.33.5) (2024-06-04)


### Bug Fixes

* **server,admin:** add build location, mask sensitive info to *** ([25101fd](https://github.com/digitopvn/diginext/commit/25101fd7eebd246b2a3429aedd581ae09b5c5ca7))
* **server,admin:** add build location, mask sensitive info to *** ([#506](https://github.com/digitopvn/diginext/issues/506)) ([fffee17](https://github.com/digitopvn/diginext/commit/fffee17634da3d30bc4ab3b952462836e5fc2e1b))

## [3.33.4](https://github.com/digitopvn/diginext/compare/v3.33.3...v3.33.4) (2024-06-04)


### Bug Fixes

* **server:** issue delete app but cluster is undefined ([2e4e238](https://github.com/digitopvn/diginext/commit/2e4e238b93b970d60f23e8961bf1d6593d5fd47a))
* **server:** issue delete app but cluster is undefined ([#505](https://github.com/digitopvn/diginext/issues/505)) ([1eb483b](https://github.com/digitopvn/diginext/commit/1eb483ba3e40c43ba6c897cc060113a724b1a501))
* **server:** webhook - add dxup url to email notification ([c565658](https://github.com/digitopvn/diginext/commit/c5656581f9e9e2219e3eeabca81d1bbe9191b5d1))

## [3.33.3](https://github.com/digitopvn/diginext/compare/v3.33.2...v3.33.3) (2024-06-04)


### Bug Fixes

* **server:** issue delete deploy env cluster not found ([6ce935a](https://github.com/digitopvn/diginext/commit/6ce935a7d8be5d9ca88503b9d7a1069213557746))
* **server:** issue delete deploy env cluster not found ([#504](https://github.com/digitopvn/diginext/issues/504)) ([f61d4be](https://github.com/digitopvn/diginext/commit/f61d4be188738d9af34cb2098b409d5295439e34))
* **server:** project - add fixme when delete project ([c952b43](https://github.com/digitopvn/diginext/commit/c952b4319fca5bf5f7fb9e936437d0b045bc2662))

## [3.33.2](https://github.com/digitopvn/diginext/compare/v3.33.1...v3.33.2) (2024-06-04)


### Bug Fixes

* **server:** dx api timeout 30s ([253445a](https://github.com/digitopvn/diginext/commit/253445aae2e4fac0ad800f627e21c5e41f3c2e97))
* **server:** dx api timeout 30s ([#503](https://github.com/digitopvn/diginext/issues/503)) ([47aa637](https://github.com/digitopvn/diginext/commit/47aa6374f78bceffa641fb6eec315f94891edb2c))

## [3.33.1](https://github.com/digitopvn/diginext/compare/v3.33.0...v3.33.1) (2024-06-04)


### Bug Fixes

* **cli:** warning new domain dxup.dev ([09a4361](https://github.com/digitopvn/diginext/commit/09a4361895c87efea3739adb56062c971e31422f))
* **server:** add error handling to redis ([58d5104](https://github.com/digitopvn/diginext/commit/58d5104989c67bc8ad27c4223a7c75057b25f927))
* **server:** generate domain should uses diginext.site ([c32cf39](https://github.com/digitopvn/diginext/commit/c32cf393badcb706adcdf2a1718ec6063dce5722))

# [3.33.0](https://github.com/digitopvn/diginext/compare/v3.32.9...v3.33.0) (2024-05-31)


### Bug Fixes

* **readme:** add some samples of dx up command ([f9f40eb](https://github.com/digitopvn/diginext/commit/f9f40eb549d3555aab0954e667ec2fecbbb09f00))
* **server:** fixed create image pull secret exposing docker pass ([886fec4](https://github.com/digitopvn/diginext/commit/886fec428892cb79b14c9cecdc676ad5077263c2))
* **server:** fixed create image pull secret exposing docker pass ([#501](https://github.com/digitopvn/diginext/issues/501)) ([7877408](https://github.com/digitopvn/diginext/commit/7877408c56d12e24a61ae9844c3f170b78060952))
* **server:** fixed doctl command create imagepullsecret exposing docker pass ([2bcc9a2](https://github.com/digitopvn/diginext/commit/2bcc9a2ef2fa1840118d24d2671ecf1b02ba8c39))


### Features

* **core:** migrate diginext.site to dxup.dev ([17b7652](https://github.com/digitopvn/diginext/commit/17b76520a983c7e0d0621dc89c816713b561f504))

## [3.32.9](https://github.com/digitopvn/diginext/compare/v3.32.8...v3.32.9) (2024-05-21)


### Bug Fixes

* **server,cli:** add logs to websocket connection ([0d6be7f](https://github.com/digitopvn/diginext/commit/0d6be7fa1eac4f5f83d31be94e206583d6c07bb0))
* **server,cli:** add ping pong to websocket ([d0750e8](https://github.com/digitopvn/diginext/commit/d0750e8f8dbe25f26012e2ed1b821ebc904998fb))
* **server,cli:** add ping pong to websocket ([#500](https://github.com/digitopvn/diginext/issues/500)) ([cf7d1a0](https://github.com/digitopvn/diginext/commit/cf7d1a0bad16bff336e16dfb3eda0d3e79b5a83c))

## [3.32.8](https://github.com/digitopvn/diginext/compare/v3.32.7...v3.32.8) (2024-05-21)


### Bug Fixes

* **server,cli:** increase websocket timeout ([0a38d4b](https://github.com/digitopvn/diginext/commit/0a38d4b7c7b210ffce2ecb6c54084dc495180a41))
* **server,cli:** increase websocket timeout ([#499](https://github.com/digitopvn/diginext/issues/499)) ([82e0fcb](https://github.com/digitopvn/diginext/commit/82e0fcbdd528bb2943e7f27a0433d6fc272a3968))

## [3.32.7](https://github.com/digitopvn/diginext/compare/v3.32.6...v3.32.7) (2024-05-18)


### Bug Fixes

* **cli:** auto add http to build server url ([e6fa23b](https://github.com/digitopvn/diginext/commit/e6fa23b965261ba1ce59c843821d90b48b662dbf))
* **cli:** correct build server url auto prefix ([6ba9dcb](https://github.com/digitopvn/diginext/commit/6ba9dcb5bdbcf18edd2844ba46d5c9c7d8eb0055))
* **cli:** turn off unexpected logs ([8255ca1](https://github.com/digitopvn/diginext/commit/8255ca13a6470be880d61532705732752dfdf0d3))
* **cli:** turn off unexpected logs ([#498](https://github.com/digitopvn/diginext/issues/498)) ([30426cb](https://github.com/digitopvn/diginext/commit/30426cbd7c91d6b87b63e39a6467bfc84869f353))
* **server,cli:** fix access_token and api_key conflicted ([2224f8f](https://github.com/digitopvn/diginext/commit/2224f8f0215a9bfb1df3644878d3454c37e8c76d))
* **server,cli:** fix access_token and api_key conflicted ([#497](https://github.com/digitopvn/diginext/issues/497)) ([9cb3648](https://github.com/digitopvn/diginext/commit/9cb36486a3d2cdfa3147f932c1eed0c5ccb3092f))

## [3.32.6](https://github.com/digitopvn/diginext/compare/v3.32.5...v3.32.6) (2024-05-18)


### Bug Fixes

* **cli:** change build url to app.dxup.dev ([88cf0b8](https://github.com/digitopvn/diginext/commit/88cf0b80bccdecc2176812ddfc61e130ab37c0d3))
* **cli:** change build url to app.dxup.dev ([#496](https://github.com/digitopvn/diginext/issues/496)) ([e58cd01](https://github.com/digitopvn/diginext/commit/e58cd0188bc9d7d8a3aa7ac742094f262ad47e9c))

## [3.32.5](https://github.com/digitopvn/diginext/compare/v3.32.4...v3.32.5) (2024-05-17)


### Bug Fixes

* **cli:** fix api key not cached ([de44969](https://github.com/digitopvn/diginext/commit/de449695fead4bc05bdfb15a00c442eb6cb1e682))
* **cli:** fix api key not cached  [@mrgoonie](https://github.com/mrgoonie) ([#495](https://github.com/digitopvn/diginext/issues/495)) ([c11cf09](https://github.com/digitopvn/diginext/commit/c11cf09afcb5a21f90aabe62c39f59f3ea634927))
* **server:** improve access token error message ([ae9a8c8](https://github.com/digitopvn/diginext/commit/ae9a8c8ceb960157959f6fc3e864f1c4ece8b485))

## [3.32.4](https://github.com/digitopvn/diginext/compare/v3.32.3...v3.32.4) (2024-05-17)


### Bug Fixes

* **server:** improve token validate error message ([d3a38cf](https://github.com/digitopvn/diginext/commit/d3a38cf7d6ed921f6825ec01a0f40460ffcdc111))
* **server:** improve token validate error message ([#494](https://github.com/digitopvn/diginext/issues/494)) ([7b8052c](https://github.com/digitopvn/diginext/commit/7b8052ca5bbc5a6b34ae0d748ecb27bfe4a73cb2))

## [3.32.3](https://github.com/digitopvn/diginext/compare/v3.32.2...v3.32.3) (2024-04-18)


### Bug Fixes

* **cli:** clear console logs ([7fc0d01](https://github.com/digitopvn/diginext/commit/7fc0d0189ff436685d147bd7bbb4373ddcdcee09))
* **server:** correct ingress yaml examples ([e976cc2](https://github.com/digitopvn/diginext/commit/e976cc23dff4434e4b359ff29a9e73bd16a0cfdf))
* **server:** generate ingress yaml with new ingress class definition ([94c747b](https://github.com/digitopvn/diginext/commit/94c747bc35af8435a2a13185889b5683f7d091a6))
* src/modules/deploy/generate-deployment.ts volume default type change to host-path ([647389c](https://github.com/digitopvn/diginext/commit/647389ca8732b01b17ec96f88f12ec4348b8810e))

## [3.32.2](https://github.com/digitopvn/diginext/compare/v3.32.1...v3.32.2) (2024-04-10)


### Bug Fixes

* **server:** hide docker auth in error message ([e11aa9f](https://github.com/digitopvn/diginext/commit/e11aa9f2d311a119539012ea4e0423f556c1f906))
* **server:** hide docker auth in error message ([#491](https://github.com/digitopvn/diginext/issues/491)) ([d2299a2](https://github.com/digitopvn/diginext/commit/d2299a29baaf772628b529d7322112ff5d21bc8c))

## [3.32.1](https://github.com/digitopvn/diginext/compare/v3.32.0...v3.32.1) (2024-04-08)


### Bug Fixes

* **admin:** fixed public key not found ([8b52e7a](https://github.com/digitopvn/diginext/commit/8b52e7a3adbb4eb9a67f6697731652434baa1b84))
* **cli:** force dockerignore skip git dir ([4f4e982](https://github.com/digitopvn/diginext/commit/4f4e9822a91a558871b3ded1afe5ae127e40c395))

# [3.32.0](https://github.com/digitopvn/diginext/compare/v3.31.1...v3.32.0) (2024-04-07)


### Bug Fixes

* **package.json:** change version ([ce92534](https://github.com/digitopvn/diginext/commit/ce925347793db6e529badbd83e89a4c1d3f40727))
* resolve conflict ([621ec6c](https://github.com/digitopvn/diginext/commit/621ec6ca266447f1cbf02ddac92a23b061bc320c))
* **resolve:** conflict file ([b24d651](https://github.com/digitopvn/diginext/commit/b24d651c313ca3dfb8a1eb9808c59c877241d2d3))


### Features

* **basic-auth.ts:** generate token ([b1da592](https://github.com/digitopvn/diginext/commit/b1da5924fcabdcbb550297ed1105632c7ac9afc1))
* **basic-auth.ts:** generate token ([#486](https://github.com/digitopvn/diginext/issues/486)) ([e730e0f](https://github.com/digitopvn/diginext/commit/e730e0fe9fdda6232ffec2f704eef73804241cce))

# [3.32.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.31.1...v3.32.0-prerelease.1) (2024-04-07)


### Bug Fixes

* **package.json:** change version ([ce92534](https://github.com/digitopvn/diginext/commit/ce925347793db6e529badbd83e89a4c1d3f40727))
* resolve conflict ([621ec6c](https://github.com/digitopvn/diginext/commit/621ec6ca266447f1cbf02ddac92a23b061bc320c))
* **resolve:** conflict file ([b24d651](https://github.com/digitopvn/diginext/commit/b24d651c313ca3dfb8a1eb9808c59c877241d2d3))


### Features

* **basic-auth.ts:** generate token ([b1da592](https://github.com/digitopvn/diginext/commit/b1da5924fcabdcbb550297ed1105632c7ac9afc1))
* **basic-auth.ts:** generate token ([#486](https://github.com/digitopvn/diginext/issues/486)) ([e730e0f](https://github.com/digitopvn/diginext/commit/e730e0fe9fdda6232ffec2f704eef73804241cce))

## [3.31.1](https://github.com/digitopvn/diginext/compare/v3.31.0...v3.31.1) (2024-04-04)


### Bug Fixes

* **admin:** fix dark mode and smart form always send field config ([b9ef789](https://github.com/digitopvn/diginext/commit/b9ef789d390fce55a413c201da7029a295e7c83c))
* **admin:** fix dark mode and smart form always send field config ([#485](https://github.com/digitopvn/diginext/issues/485)) ([1851bb2](https://github.com/digitopvn/diginext/commit/1851bb201ebac281f99390cc79297289f6d3b5cf))

# [3.31.0](https://github.com/digitopvn/diginext/compare/v3.30.0...v3.31.0) (2024-04-04)


### Bug Fixes

* **basic-auth:** remove req header ([e377184](https://github.com/digitopvn/diginext/commit/e3771842c39827863c1ec488ee07f1b7da08122a))
* **basic-auth:** revert auth ([5a97615](https://github.com/digitopvn/diginext/commit/5a97615cc65eb426af77f50e0dcb1cbea1b52a2d))
* **cli,cluster:** get credentials when auth cluster ([cc26ec0](https://github.com/digitopvn/diginext/commit/cc26ec0424ca996b221225ef6ae840852ecabdc0))
* **github action:** update staging environment ([6aa9660](https://github.com/digitopvn/diginext/commit/6aa96606971ebbcf87ae6915292906079e324491))
* **security:** mask all sensitive info ([f4725ef](https://github.com/digitopvn/diginext/commit/f4725ef78523d25b13edf4d60a94245872d26efc))
* **server.ts:** allow domain local ([c761e48](https://github.com/digitopvn/diginext/commit/c761e485cf4ae3c133a3b25f032df80fcfb6e03d))
* **server.ts:** change rate limit ([f667166](https://github.com/digitopvn/diginext/commit/f66716683cf76c6e0f66f428d8361617f705611c))
* **workspace:** spell check ([9416027](https://github.com/digitopvn/diginext/commit/9416027aefaf9423067f5794d9181bbe1287252c))


### Features

* **basic-auth:** login with social ([56e34d2](https://github.com/digitopvn/diginext/commit/56e34d2e955d030649dad0a28a88e19252bef365))
* **package.json:** google-auth-library ([739018b](https://github.com/digitopvn/diginext/commit/739018bef4f8b7f5d1878732e60d368b01642952))
* **workspace:** check is owner workspace ([3cd92fc](https://github.com/digitopvn/diginext/commit/3cd92fc83c06d8d2cb11dd0de714b933bbcc1f3d))
* **workspace:** check is owner workspace ([#481](https://github.com/digitopvn/diginext/issues/481)) ([d30e62f](https://github.com/digitopvn/diginext/commit/d30e62f6c207191b9de089c3d287a4796b444904))

# [3.31.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.31.0-prerelease.2...v3.31.0-prerelease.3) (2024-03-27)


### Bug Fixes

* **server.ts:** allow domain local ([c761e48](https://github.com/digitopvn/diginext/commit/c761e485cf4ae3c133a3b25f032df80fcfb6e03d))
* **server.ts:** change rate limit ([f667166](https://github.com/digitopvn/diginext/commit/f66716683cf76c6e0f66f428d8361617f705611c))

# [3.31.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.31.0-prerelease.1...v3.31.0-prerelease.2) (2024-03-24)


### Bug Fixes

* **basic-auth:** remove req header ([e377184](https://github.com/digitopvn/diginext/commit/e3771842c39827863c1ec488ee07f1b7da08122a))
* **basic-auth:** revert auth ([5a97615](https://github.com/digitopvn/diginext/commit/5a97615cc65eb426af77f50e0dcb1cbea1b52a2d))


### Features

* **basic-auth:** login with social ([56e34d2](https://github.com/digitopvn/diginext/commit/56e34d2e955d030649dad0a28a88e19252bef365))
* **package.json:** google-auth-library ([739018b](https://github.com/digitopvn/diginext/commit/739018bef4f8b7f5d1878732e60d368b01642952))

# [3.31.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.30.1-prerelease.1...v3.31.0-prerelease.1) (2024-03-24)


### Bug Fixes

* **workspace:** spell check ([9416027](https://github.com/digitopvn/diginext/commit/9416027aefaf9423067f5794d9181bbe1287252c))


### Features

* **workspace:** check is owner workspace ([3cd92fc](https://github.com/digitopvn/diginext/commit/3cd92fc83c06d8d2cb11dd0de714b933bbcc1f3d))
* **workspace:** check is owner workspace ([#481](https://github.com/digitopvn/diginext/issues/481)) ([d30e62f](https://github.com/digitopvn/diginext/commit/d30e62f6c207191b9de089c3d287a4796b444904))

## [3.30.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.30.0...v3.30.1-prerelease.1) (2024-03-19)


### Bug Fixes

* **github action:** update staging environment ([6aa9660](https://github.com/digitopvn/diginext/commit/6aa96606971ebbcf87ae6915292906079e324491))

# [3.30.0](https://github.com/digitopvn/diginext/compare/v3.29.16...v3.30.0) (2024-01-30)


### Bug Fixes

* **cli:** map env prerelease ([3f372da](https://github.com/digitopvn/diginext/commit/3f372da92ccf37dda58247cc76628e92404aa8e7))
* **cli:** updateBranchProtech disable required_linear_history ([fe05c00](https://github.com/digitopvn/diginext/commit/fe05c00b8ebdbf7a71ad70f6b576520057c81e08))
* skip test github ([fc86cb2](https://github.com/digitopvn/diginext/commit/fc86cb2bb87d3e23dff8959ad117dfea1dca1d95))


### Features

* **cli:** enabled allow_auto_merge on default init github repo ([449ea6b](https://github.com/digitopvn/diginext/commit/449ea6b3396bbede501def1be12819c17b4d2a8b))

## [3.29.16](https://github.com/digitopvn/diginext/compare/v3.29.15...v3.29.16) (2024-01-23)


### Bug Fixes

* **server:** skip overwrite prerelease url on env vars changed ([f66429d](https://github.com/digitopvn/diginext/commit/f66429d9656ec4c5f48355de684ffe205a7db05f))

## [3.29.15](https://github.com/digitopvn/diginext/compare/v3.29.14...v3.29.15) (2024-01-19)


### Bug Fixes

* **server:** build issue of undefined git, try similar gits ([50237fd](https://github.com/digitopvn/diginext/commit/50237fdf89cb451be929ef50962fb0c0c1b93217))
* **server:** debug build ([565c2de](https://github.com/digitopvn/diginext/commit/565c2de58063634dc34e7c08d1ac92699c73fa0e))

## [3.29.14](https://github.com/digitopvn/diginext/compare/v3.29.13...v3.29.14) (2024-01-19)


### Bug Fixes

* **server:** pull git repo by http ([6732a66](https://github.com/digitopvn/diginext/commit/6732a66772c16a0cad400c0181741ecd97ecee22))

## [3.29.13](https://github.com/digitopvn/diginext/compare/v3.29.12...v3.29.13) (2024-01-19)


### Bug Fixes

* **gitignore:** ignore credentials ([8ff1a1e](https://github.com/digitopvn/diginext/commit/8ff1a1e03dfed3c6d5c9645ee43510640ab7aff6))
* **server:** disable verify git ssh when building ([865e924](https://github.com/digitopvn/diginext/commit/865e9249668d08811e86a4813e03d0b68f2a4f1d))

## [3.29.12](https://github.com/digitopvn/diginext/compare/v3.29.11...v3.29.12) (2024-01-03)


### Bug Fixes

* **cli:** issue of expired refresh token ([32d00af](https://github.com/digitopvn/diginext/commit/32d00afa4107b8c4a0be21920d399688c68bd477))
* **cli:** src/modules/git/updateBranchProtection.ts ([597c082](https://github.com/digitopvn/diginext/commit/597c0829b0bbfb6a5249ec2c6b6cca38cebd7bd4))
* **cli:** src/modules/git/updateBranchProtection.ts ([fd2d439](https://github.com/digitopvn/diginext/commit/fd2d439cbadc38eb76f8b38a10f0b9d59d7df410))
* **cli:** throw error when deploy at the same time ([10a697b](https://github.com/digitopvn/diginext/commit/10a697b1feb1b9125884d242f856f9df7e2fa27f))

## [3.29.12-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.29.11...v3.29.12-prerelease.1) (2023-12-18)


### Bug Fixes

* **cli:** src/modules/git/updateBranchProtection.ts ([597c082](https://github.com/digitopvn/diginext/commit/597c0829b0bbfb6a5249ec2c6b6cca38cebd7bd4))
* **cli:** src/modules/git/updateBranchProtection.ts ([fd2d439](https://github.com/digitopvn/diginext/commit/fd2d439cbadc38eb76f8b38a10f0b9d59d7df410))

## [3.29.11](https://github.com/digitopvn/diginext/compare/v3.29.10...v3.29.11) (2023-12-14)
=======
## [3.29.7-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.29.7-prerelease.1...v3.29.7-prerelease.2) (2023-12-18)


### Bug Fixes

* **server,cli:** member cannot access git provider issue ([14e6144](https://github.com/digitopvn/diginext/commit/14e61445a88465bf5ceeacfc3c64d0b8e0101c28))
* **server,cli:** member cannot access git provider issue ([#469](https://github.com/digitopvn/diginext/issues/469)) ([c2b6ae3](https://github.com/digitopvn/diginext/commit/c2b6ae35a402266d029ed041f8f403d54dab60c6))

## [3.29.10](https://github.com/digitopvn/diginext/compare/v3.29.9...v3.29.10) (2023-12-14)


### Bug Fixes

* **server,dashboard:** build logs, nginx ingress check duplication ([3b8a5b0](https://github.com/digitopvn/diginext/commit/3b8a5b0e7bb96293de7713a74cbee66dc58251fe))
* **server,dashboard:** build logs, nginx ingress check duplication ([#468](https://github.com/digitopvn/diginext/issues/468)) ([9ba5958](https://github.com/digitopvn/diginext/commit/9ba595869a306df897caefb490f074a8f912811b))

## [3.29.9](https://github.com/digitopvn/diginext/compare/v3.29.8...v3.29.9) (2023-12-14)


### Bug Fixes

* **server:** fix nginx block git format ([33b67a4](https://github.com/digitopvn/diginext/commit/33b67a45253581b53222797e978f9818a6ae5b25))
* **server:** fix nginx block git format ([#467](https://github.com/digitopvn/diginext/issues/467)) ([18649ec](https://github.com/digitopvn/diginext/commit/18649ec47f6c18eef42a160b290b71c54f54eadc))

## [3.29.8](https://github.com/digitopvn/diginext/compare/v3.29.7...v3.29.8) (2023-12-14)


### Bug Fixes

* **admin:** correct deploy status in build logs ([a85486f](https://github.com/digitopvn/diginext/commit/a85486f4a3149a4706a62eebc5237bfabeaf4556))

## [3.29.7](https://github.com/digitopvn/diginext/compare/v3.29.6...v3.29.7) (2023-12-14)


### Bug Fixes

* **cli:** src/modules/deploy/generate-deployment.ts spec.template.spec.volumes add host-path type ([57fd3c2](https://github.com/digitopvn/diginext/commit/57fd3c2ccad21aad0753d27c634ca3b623bfd8ab))
* **cli:** src/modules/deploy/generate-deployment.ts spec.template.spec.volumes add host-path type ([76a8693](https://github.com/digitopvn/diginext/commit/76a8693a7d4e9c96fbf0622b51d969301ce6dd07))
* **hotfix,cli:** dockerignore is require to deploy apps ([9bd41c3](https://github.com/digitopvn/diginext/commit/9bd41c394f38206d699d3ef4d4fdb37ac3e40973))
* **server,cli:** update release status when deploying ([54e997d](https://github.com/digitopvn/diginext/commit/54e997d9d23262e90d3982e14ced02743f6721d8))
* **server:** generate ingress deny git path ([f2b6569](https://github.com/digitopvn/diginext/commit/f2b6569ecd00a95d19e2aab5234ce20bab9c2bf8))
=======
* **cli:** src/modules/git/updateBranchProtection.ts ([fd2d439](https://github.com/digitopvn/diginext/commit/fd2d439cbadc38eb76f8b38a10f0b9d59d7df410))

## [3.29.7-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.29.6...v3.29.7-prerelease.1) (2023-12-13)


### Bug Fixes

* **cli:** src/modules/deploy/generate-deployment.ts spec.template.spec.volumes add host-path type ([57fd3c2](https://github.com/digitopvn/diginext/commit/57fd3c2ccad21aad0753d27c634ca3b623bfd8ab))
* **cli:** src/modules/deploy/generate-deployment.ts spec.template.spec.volumes add host-path type ([76a8693](https://github.com/digitopvn/diginext/commit/76a8693a7d4e9c96fbf0622b51d969301ce6dd07))

## [3.29.6](https://github.com/digitopvn/diginext/compare/v3.29.5...v3.29.6) (2023-12-13)


### Bug Fixes

* **hotfix:** nginx ingress deny git path ([954d396](https://github.com/digitopvn/diginext/commit/954d39670722d975bf0ff86861632921e0739aa7))
* **hotfix:** nginx ingress deny git path ([#463](https://github.com/digitopvn/diginext/issues/463)) ([d65ecf1](https://github.com/digitopvn/diginext/commit/d65ecf19c700c114e77211b44d97e13961cbacc4))

## [3.29.5](https://github.com/digitopvn/diginext/compare/v3.29.4...v3.29.5) (2023-12-13)


### Bug Fixes

* **hotfix,security:** prevent nginx ingress exploit git dir ([611ebd2](https://github.com/digitopvn/diginext/commit/611ebd2d157cb9409db1a7afeff79c9e79a123ec))
* **hotfix,security:** prevent nginx ingress exploit git dir ([#462](https://github.com/digitopvn/diginext/issues/462)) ([11e4502](https://github.com/digitopvn/diginext/commit/11e45020891ac91a0a41cae60d38eaa62c5fecde))

## [3.29.4](https://github.com/digitopvn/diginext/compare/v3.29.3...v3.29.4) (2023-12-06)


### Bug Fixes

* **server:** correct dx create workspace api path ([072b6d7](https://github.com/digitopvn/diginext/commit/072b6d70d911a9f7b5e99891f4868cd8cb4a0d07))
* **server:** create workspace add fixme join ws ([047c752](https://github.com/digitopvn/diginext/commit/047c7522c9200d6e835b18242943d51738f0f374))

## [3.29.3](https://github.com/digitopvn/diginext/compare/v3.29.2...v3.29.3) (2023-12-06)


### Bug Fixes

* **server:** fix create workspace dx site api ([8ce82db](https://github.com/digitopvn/diginext/commit/8ce82dbe0bb687f00f154184fd21118da6b3c3dc))
* **server:** fix create workspace dx site api ([#459](https://github.com/digitopvn/diginext/issues/459)) ([add806f](https://github.com/digitopvn/diginext/commit/add806f812dd303ab3c94596de694f1040b2f064))

## [3.29.2](https://github.com/digitopvn/diginext/compare/v3.29.1...v3.29.2) (2023-12-05)


### Bug Fixes

* **server:** correct dx api subscribe package api ([99ebaac](https://github.com/digitopvn/diginext/commit/99ebaace59209e0bac4250753cf7584ff6fd403f))
* **server:** correct dx api subscribe package api ([#458](https://github.com/digitopvn/diginext/issues/458)) ([5da09e7](https://github.com/digitopvn/diginext/commit/5da09e7fe2b401da5074c0d4bc3c2e252b535bbe))

## [3.29.1](https://github.com/digitopvn/diginext/compare/v3.29.0...v3.29.1) (2023-12-05)


### Bug Fixes

* **cli:** rm logs cli login profile ([c6ca9dc](https://github.com/digitopvn/diginext/commit/c6ca9dc32be80b08aba8786f5d5b463f90eb5a27))
* **dashboard:** hide existing workspace when creating new ([fac7335](https://github.com/digitopvn/diginext/commit/fac7335c51e9f820dadaf9451839c677ed3b90a0))
* **server:** show logs of dx site api subscribe ([04d5e56](https://github.com/digitopvn/diginext/commit/04d5e56fc4033ef022a809670903de9d3aa25cba))

# [3.29.0](https://github.com/digitopvn/diginext/compare/v3.28.0...v3.29.0) (2023-11-13)


### Bug Fixes

* **server,volume:** issue of unable to remove persistent volume ([0d8d90f](https://github.com/digitopvn/diginext/commit/0d8d90ff34f292d2d200df315a881b611dcc4bdf))
* **server,volume:** issue of unable to remove persistent volume ([#456](https://github.com/digitopvn/diginext/issues/456)) ([4c52726](https://github.com/digitopvn/diginext/commit/4c527269f8d78b35634b5ac1f64202aaaa91a6bd))


### Features

* **server,dashboard:** add or remove persistent volume ([#454](https://github.com/digitopvn/diginext/issues/454)) ([b592776](https://github.com/digitopvn/diginext/commit/b59277642b36cd9ed3d84096d711274b091533cc))

# [3.28.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.27.1...v3.28.0-prerelease.1) (2023-11-10)


### Features

* **dashboard:** add or remove volume in deploy environment ([2045531](https://github.com/digitopvn/diginext/commit/204553153e4266e6d82e3f48113ce321a2dc39f4))
* **server,cli:** cluster manager, storage class, persistent volume ([2ead6ab](https://github.com/digitopvn/diginext/commit/2ead6abd3082cc99ec833451c5dbb3ef83d4f48b))
* **server,dashboard:** add or remove persistent volume ([#454](https://github.com/digitopvn/diginext/issues/454)) ([b592776](https://github.com/digitopvn/diginext/commit/b59277642b36cd9ed3d84096d711274b091533cc))
* **server:** api add and remove persistent volume ([63583b5](https://github.com/digitopvn/diginext/commit/63583b53e489a3559e1ce7e617202f3715e55a77))

## [3.27.1](https://github.com/digitopvn/diginext/compare/v3.27.0...v3.27.1) (2023-11-10)


### Bug Fixes

* **dashboard:** add db backup status column ([16fc1b2](https://github.com/digitopvn/diginext/commit/16fc1b2f0e53b2af9b9e5bac13ed411ebc8976e3))
* **server:** hotfix mysqldump column-statistics not support ([8fa9945](https://github.com/digitopvn/diginext/commit/8fa99451cdc6ca1c8043ee058c866921276d0ad7))

# [3.27.0](https://github.com/digitopvn/diginext/compare/v3.26.0...v3.27.0) (2023-11-09)


### Bug Fixes

* **server,admin:** issue of deleting empty apps ([8eef83d](https://github.com/digitopvn/diginext/commit/8eef83df56bb5cd8492336a60a14b7b460ca14b4))
* **server:** build docker base ([9b76b86](https://github.com/digitopvn/diginext/commit/9b76b86fea26f788269da9e58dfa489e42bcbbef))
* **server:** issue of mysql backup not working ([79e4a46](https://github.com/digitopvn/diginext/commit/79e4a46772f959d6e3758067c36ecf348ac79ba9))
* **typescript:** correct some types of map and yaml load ([3c80cc0](https://github.com/digitopvn/diginext/commit/3c80cc08f1f8e84c1e13a00d48728f45ef991288))


### Features

* **dashboard:** cloud storage management ui ([fcecd7f](https://github.com/digitopvn/diginext/commit/fcecd7ff3f431e89256ef05ca0eefe9bccf679e9))
* **server:** add cloud storage google do-space aws-s3 ([319a574](https://github.com/digitopvn/diginext/commit/319a57420e247bf619777e06733294d8cdda6ded))

# [3.26.0](https://github.com/digitopvn/diginext/compare/v3.25.1...v3.26.0) (2023-11-03)


### Features

* **server,api:** add cloud storage crud ([70bc7b8](https://github.com/digitopvn/diginext/commit/70bc7b8efcec0f21ba995c97544d29364c1d7107)), closes [#366](https://github.com/digitopvn/diginext/issues/366) [#367](https://github.com/digitopvn/diginext/issues/367) [#368](https://github.com/digitopvn/diginext/issues/368)

## [3.25.1](https://github.com/digitopvn/diginext/compare/v3.25.0...v3.25.1) (2023-11-03)


### Bug Fixes

* **hotfix:** git pull large repo issue ([f395ee0](https://github.com/digitopvn/diginext/commit/f395ee0d531f2e8c620f60d77d0e7e5bdede9bae))

# [3.25.0](https://github.com/digitopvn/diginext/compare/v3.24.13...v3.25.0) (2023-11-03)


### Bug Fixes

* **dxapi:** create user, workspace ([f850b02](https://github.com/digitopvn/diginext/commit/f850b02bdcc5afa169c6a22cf888e140dbbfce7f))
* **dxAPI:** dx Create User ([d0c801f](https://github.com/digitopvn/diginext/commit/d0c801fa5a10ffcef597ef84c9d297d8fe97fe63))
* **dxapi:** invite member logic ([6c98cef](https://github.com/digitopvn/diginext/commit/6c98cefc921a3bfe7159fcfc8a54a692b827a0c6))
* **interface:** object ([2b9b898](https://github.com/digitopvn/diginext/commit/2b9b8984bbc9acd06325a4cbdb98f02a96e69be8))
* **isTest:** env isTest ([6d94a51](https://github.com/digitopvn/diginext/commit/6d94a5195adf6af3bab2a6776ca1bef83e2f590c))
* **schema:** user schema ([04d66d0](https://github.com/digitopvn/diginext/commit/04d66d0b9df8839b941e0c3236b5d3cc8504b9ca))
* **server,cli:** cdn upload, git clone partial depth 1 ([8d57007](https://github.com/digitopvn/diginext/commit/8d57007a06d634b5ef4e5092e25535c0065c89b4))
* **type:** user provider ([1b58445](https://github.com/digitopvn/diginext/commit/1b58445d84abf97426b4ab28ffc7dff6d8ceac14))
* **typo:** change link dx site ([466dfc1](https://github.com/digitopvn/diginext/commit/466dfc1f4f2a91f67b4325b01e61cf282936cadd))


### Features

* **api:** create user dx site ([2fe43d7](https://github.com/digitopvn/diginext/commit/2fe43d7625c6ddd351cf215276843e9e91a28974))
* **api:** workspace and subscription ([8fca4c8](https://github.com/digitopvn/diginext/commit/8fca4c8bde06758c347f988de49ab9028e762ad6))

# [3.25.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.24.13...v3.25.0-prerelease.1) (2023-10-31)


### Bug Fixes

* **dxapi:** create user, workspace ([f850b02](https://github.com/digitopvn/diginext/commit/f850b02bdcc5afa169c6a22cf888e140dbbfce7f))
* **dxAPI:** dx Create User ([d0c801f](https://github.com/digitopvn/diginext/commit/d0c801fa5a10ffcef597ef84c9d297d8fe97fe63))
* **dxapi:** invite member logic ([6c98cef](https://github.com/digitopvn/diginext/commit/6c98cefc921a3bfe7159fcfc8a54a692b827a0c6))
* **interface:** object ([2b9b898](https://github.com/digitopvn/diginext/commit/2b9b8984bbc9acd06325a4cbdb98f02a96e69be8))
* **isTest:** env isTest ([6d94a51](https://github.com/digitopvn/diginext/commit/6d94a5195adf6af3bab2a6776ca1bef83e2f590c))
* **schema:** user schema ([04d66d0](https://github.com/digitopvn/diginext/commit/04d66d0b9df8839b941e0c3236b5d3cc8504b9ca))
* **type:** user provider ([1b58445](https://github.com/digitopvn/diginext/commit/1b58445d84abf97426b4ab28ffc7dff6d8ceac14))
* **typo:** change link dx site ([466dfc1](https://github.com/digitopvn/diginext/commit/466dfc1f4f2a91f67b4325b01e61cf282936cadd))


### Features

* **api:** create user dx site ([2fe43d7](https://github.com/digitopvn/diginext/commit/2fe43d7625c6ddd351cf215276843e9e91a28974))
* **api:** workspace and subscription ([8fca4c8](https://github.com/digitopvn/diginext/commit/8fca4c8bde06758c347f988de49ab9028e762ad6))

## [3.24.13](https://github.com/digitopvn/diginext/compare/v3.24.12...v3.24.13) (2023-10-27)


### Bug Fixes

* **types:** some format issues ([36768d0](https://github.com/digitopvn/diginext/commit/36768d03dfd26ad1841d909377d5584d4fde686f))

## [3.24.12](https://github.com/digitopvn/diginext/compare/v3.24.11...v3.24.12) (2023-10-26)


### Bug Fixes

* **server:** missing org when create new git provider ([6b9eaf1](https://github.com/digitopvn/diginext/commit/6b9eaf1916a96d42e9faa0657e0cc5b61934d260))

## [3.24.11](https://github.com/digitopvn/diginext/compare/v3.24.10...v3.24.11) (2023-10-25)


### Bug Fixes

* **cli:** ask generate dockerfile using ai ([d606ead](https://github.com/digitopvn/diginext/commit/d606ead20fb37ad2d65c5ee27dc503055ce4f0f2))
* **server,cli:** validate project and app name special chars ([7de20bf](https://github.com/digitopvn/diginext/commit/7de20bf0b44dc355a48299e8ab1994429938fa45))
* **server,dashboard:** correct auth redirect select workspace with tokens ([cd3a2f4](https://github.com/digitopvn/diginext/commit/cd3a2f4f2a763a54d1850b60b4227e68fff4b9b4))
* **server,dashboard:** edit db form, db backup system logs ([ddc92d1](https://github.com/digitopvn/diginext/commit/ddc92d11be229bf5630740172bb5e9defa4d1543))
* **server:** issue of deleting expired db backups ([835a1d3](https://github.com/digitopvn/diginext/commit/835a1d34b8bb88d17e4f450636c385a7d9b5fe1b))
* **server:** mistake super in delete db bk svc ([07a2ef8](https://github.com/digitopvn/diginext/commit/07a2ef83df8c50ffccc945bc6de47562cafec3f7))

## [3.24.10](https://github.com/digitopvn/diginext/compare/v3.24.9...v3.24.10) (2023-10-24)


### Bug Fixes

* **server,dashboard:** fix update role, build log dark mode ([2fdf737](https://github.com/digitopvn/diginext/commit/2fdf73762f800773a414322d518104d49ffc44a1))
* update role issue & dark mode build logs ([#439](https://github.com/digitopvn/diginext/issues/439)) ([bae0dbf](https://github.com/digitopvn/diginext/commit/bae0dbff83fe1da7216dece4efce2b272b20a836))

## [3.24.9](https://github.com/digitopvn/diginext/compare/v3.24.8...v3.24.9) (2023-10-24)


### Bug Fixes

* **debug:** auth google redirect ([5bd24f9](https://github.com/digitopvn/diginext/commit/5bd24f9db162f0052fc64587227a936f2bebf1c1))
* **server:** assign tokens to cookies in auth jwt ([687745b](https://github.com/digitopvn/diginext/commit/687745b49531b2f1c37cf5bd75f73b76187fa58f))
* **server:** auth google callback not redirect correctly ([9b388d2](https://github.com/digitopvn/diginext/commit/9b388d2ec9ff3bda157bafde6e05eb2e4d6ea881))

## [3.24.8](https://github.com/digitopvn/diginext/compare/v3.24.7...v3.24.8) (2023-10-24)


### Bug Fixes

* **server,cli:** dx new github repo permission ([58c4f73](https://github.com/digitopvn/diginext/commit/58c4f73196abc709d53937a9d3d23dad0e48b0dd))

## [3.24.7](https://github.com/digitopvn/diginext/compare/v3.24.6...v3.24.7) (2023-10-24)


### Bug Fixes

* **cli:** request build error log url is null ([bb9f83e](https://github.com/digitopvn/diginext/commit/bb9f83e4a6055e73dd29d30fbaebe0df31b9efb9))
* **cli:** rm debug log new app ([2cf0884](https://github.com/digitopvn/diginext/commit/2cf088481db00dd4a43d0ff5b0469d533fd6f818))
* **server:** add proxy body size 100m to ingress ([0140220](https://github.com/digitopvn/diginext/commit/01402202a156bfcadc054514082c3f0f7ebb28d0))
* **server:** issue of update failed status to db backup ([166291d](https://github.com/digitopvn/diginext/commit/166291d07d3372e930d52ff061b415d0c0d00b5e))

## [3.24.6](https://github.com/digitopvn/diginext/compare/v3.24.5...v3.24.6) (2023-10-19)


### Bug Fixes

* **github actions:** use podman as builder ([0085ae5](https://github.com/digitopvn/diginext/commit/0085ae5af688d8a04d6e50a96083a4a8209def8e))

## [3.24.6-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.24.5...v3.24.6-prerelease.1) (2023-10-18)


### Bug Fixes

* **github actions:** use podman as builder ([0085ae5](https://github.com/digitopvn/diginext/commit/0085ae5af688d8a04d6e50a96083a4a8209def8e))

## [3.24.5](https://github.com/digitopvn/diginext/compare/v3.24.4...v3.24.5) (2023-10-18)


### Bug Fixes

* **builder:** increase ulimit for podman ([2e7d516](https://github.com/digitopvn/diginext/commit/2e7d516a3715cc82862e66186a36a3f2381be9e9))
* **merged:** from origin/main ([dd38162](https://github.com/digitopvn/diginext/commit/dd3816258baacd35edf1828b843a5a0404c7ae78))
* **server:** improve build finish status log ([83dfc13](https://github.com/digitopvn/diginext/commit/83dfc13057392cb4ac816b964e4987f0ae277a20))

## [3.24.4](https://github.com/digitopvn/diginext/compare/v3.24.3...v3.24.4) (2023-10-17)


### Bug Fixes

* **dashboard:** add ui of user access permissions ([d249d29](https://github.com/digitopvn/diginext/commit/d249d293489cb406b506c44d85ef08a143100c42))
* **server:** issue of update db backup status ([ecef5f7](https://github.com/digitopvn/diginext/commit/ecef5f7fdc5c6eb5f8b33e11d20ca0b7972acb72))
* **server:** update cors, whitelist domains ([590f705](https://github.com/digitopvn/diginext/commit/590f70573f792d5f189d29ee75eb150bf1d84d1b))

## [3.24.4-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.24.3...v3.24.4-prerelease.1) (2023-10-16)


### Bug Fixes

* **dashboard:** add ui of user access permissions ([d249d29](https://github.com/digitopvn/diginext/commit/d249d293489cb406b506c44d85ef08a143100c42))
* **server:** update cors, whitelist domains ([590f705](https://github.com/digitopvn/diginext/commit/590f70573f792d5f189d29ee75eb150bf1d84d1b))

## [3.24.3](https://github.com/digitopvn/diginext/compare/v3.24.2...v3.24.3) (2023-10-16)


### Bug Fixes

* **github actions:** release main ([48ca840](https://github.com/digitopvn/diginext/commit/48ca840b492c72b924915d20ba363e115eb1bf0e))

## [3.24.2](https://github.com/digitopvn/diginext/compare/v3.24.1...v3.24.2) (2023-10-16)


### Bug Fixes

* **dashboard:** make login redirect url dynamic ([ac1532e](https://github.com/digitopvn/diginext/commit/ac1532e732b16fc7991476301346c16656725274))
* **dashboard:** make login redirect url dynamic ([#427](https://github.com/digitopvn/diginext/issues/427)) ([af671ca](https://github.com/digitopvn/diginext/commit/af671ca2722220976370f2ecbd9e071a80ff5c03))

## [3.24.1](https://github.com/digitopvn/diginext/compare/v3.24.0...v3.24.1) (2023-10-15)


### Bug Fixes

* **github actions:** rm ski p c i ([02cd645](https://github.com/digitopvn/diginext/commit/02cd645d342400f6d94bdddcab902700caffdbbc))
* **server:** add try catch to all then case ([dd86922](https://github.com/digitopvn/diginext/commit/dd869221730002d052afb7d4de6d7ea8ba4dce6a))

## [3.24.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.24.0...v3.24.1-prerelease.1) (2023-10-15)


### Bug Fixes

* **server:** add try catch to all then case ([dd86922](https://github.com/digitopvn/diginext/commit/dd869221730002d052afb7d4de6d7ea8ba4dce6a))

# [3.24.0](https://github.com/digitopvn/diginext/compare/v3.23.4...v3.24.0) (2023-10-15)


### Bug Fixes

* **bitbucket:** write custom id_rsa for bitbucket auth ([39865cf](https://github.com/digitopvn/diginext/commit/39865cf8fce8b7ffd0d1b608f3ba414800c2da82))
* **cluster:** fix permissions on update cluster ([ec3eb2e](https://github.com/digitopvn/diginext/commit/ec3eb2e60232f8c50d06001f4c350020f9ec5ded))
* **hotfix:** make build deploy error easier to understand ([b2d1f15](https://github.com/digitopvn/diginext/commit/b2d1f15f63f4f063174aac5d4246a1f6290e2fd4))
* **permissions:** cluster auth not update context ([67b917a](https://github.com/digitopvn/diginext/commit/67b917a31572f84db3c38c19e66df97f4e82ae65))
* **server:** clear old ssh keys ([f2347f4](https://github.com/digitopvn/diginext/commit/f2347f4e4b7027552e4b83be4b46400dcce2fa1f))
* **server:** kill build process on error ([1fa1154](https://github.com/digitopvn/diginext/commit/1fa115449cd946b2820ca2667efaf51cebef4f19))
* **test:** cluster auth failed ([2d8fa3a](https://github.com/digitopvn/diginext/commit/2d8fa3a6b1866a022a161b82ef580a8498f0ebcd))
* **test:** turn off debug ([777ae81](https://github.com/digitopvn/diginext/commit/777ae812d58f5a1c7d59e25a82821100842cb0d4))


### Features

* **server,admin:** add guest role ([9692bca](https://github.com/digitopvn/diginext/commit/9692bca46ff16373d23e1f83d9a9352507151082))

# [3.24.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.23.4...v3.24.0-prerelease.1) (2023-10-15)


### Bug Fixes

* **bitbucket:** write custom id_rsa for bitbucket auth ([39865cf](https://github.com/digitopvn/diginext/commit/39865cf8fce8b7ffd0d1b608f3ba414800c2da82))
* **cluster:** fix permissions on update cluster ([ec3eb2e](https://github.com/digitopvn/diginext/commit/ec3eb2e60232f8c50d06001f4c350020f9ec5ded))
* **hotfix:** make build deploy error easier to understand ([b2d1f15](https://github.com/digitopvn/diginext/commit/b2d1f15f63f4f063174aac5d4246a1f6290e2fd4))
* **permissions:** cluster auth not update context ([67b917a](https://github.com/digitopvn/diginext/commit/67b917a31572f84db3c38c19e66df97f4e82ae65))
* **server:** clear old ssh keys ([f2347f4](https://github.com/digitopvn/diginext/commit/f2347f4e4b7027552e4b83be4b46400dcce2fa1f))
* **server:** kill build process on error ([1fa1154](https://github.com/digitopvn/diginext/commit/1fa115449cd946b2820ca2667efaf51cebef4f19))
* **test:** cluster auth failed ([2d8fa3a](https://github.com/digitopvn/diginext/commit/2d8fa3a6b1866a022a161b82ef580a8498f0ebcd))
* **test:** turn off debug ([777ae81](https://github.com/digitopvn/diginext/commit/777ae812d58f5a1c7d59e25a82821100842cb0d4))


### Features

* **server,admin:** add guest role ([9692bca](https://github.com/digitopvn/diginext/commit/9692bca46ff16373d23e1f83d9a9352507151082))

## [3.23.4](https://github.com/digitopvn/diginext/compare/v3.23.3...v3.23.4) (2023-10-13)


### Bug Fixes

* **server:** catch errors on build and deploy process ([bedd5d6](https://github.com/digitopvn/diginext/commit/bedd5d62ac253d3984df2a709d65a673ed9aa2e0))
* **server:** catch errors on build and deploy process ([#417](https://github.com/digitopvn/diginext/issues/417)) ([fca0c23](https://github.com/digitopvn/diginext/commit/fca0c23aa0f286b0d3929c53e9661e2168ebd336))

## [3.23.3](https://github.com/digitopvn/diginext/compare/v3.23.2...v3.23.3) (2023-10-09)


### Bug Fixes

* **hotfix:** jwt tokens catch error ([56b3e1d](https://github.com/digitopvn/diginext/commit/56b3e1d6ad8d91bb190d27f4b0bf4cea5ec34d70))
* **hotfix:** jwt tokens catch error ([#416](https://github.com/digitopvn/diginext/issues/416)) ([0c1ef2a](https://github.com/digitopvn/diginext/commit/0c1ef2a8b69b7b23b28d62edfc2fef745e3e0732))

## [3.23.2](https://github.com/digitopvn/diginext/compare/v3.23.1...v3.23.2) (2023-10-09)


### Bug Fixes

* **dashboard:** fix unable to scroll in build logs mobile screen ([0766da6](https://github.com/digitopvn/diginext/commit/0766da60602cdc53b4b115f49ae9c37560399733)), closes [#388](https://github.com/digitopvn/diginext/issues/388)
* **server,dashboard:** fix crashed when deleting app or deploy env ([0bf379c](https://github.com/digitopvn/diginext/commit/0bf379c4794b6adefe04ae15fac6966434eb1c0a)), closes [#400](https://github.com/digitopvn/diginext/issues/400)
* **server:** generate default container size as none ([5f26f03](https://github.com/digitopvn/diginext/commit/5f26f03b2e4121b1cbf81d36004d9dd7a7efec8d))
* **server:** issue container size reset after deploying ([cafe2be](https://github.com/digitopvn/diginext/commit/cafe2beedd65c9b1527f6d6764a8644b6f9996aa))

## [3.23.2-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.23.1...v3.23.2-prerelease.1) (2023-10-09)


### Bug Fixes

* **dashboard:** fix unable to scroll in build logs mobile screen ([0766da6](https://github.com/digitopvn/diginext/commit/0766da60602cdc53b4b115f49ae9c37560399733)), closes [#388](https://github.com/digitopvn/diginext/issues/388)
* **server,dashboard:** fix crashed when deleting app or deploy env ([0bf379c](https://github.com/digitopvn/diginext/commit/0bf379c4794b6adefe04ae15fac6966434eb1c0a)), closes [#400](https://github.com/digitopvn/diginext/issues/400)
* **server:** generate default container size as none ([5f26f03](https://github.com/digitopvn/diginext/commit/5f26f03b2e4121b1cbf81d36004d9dd7a7efec8d))
* **server:** issue container size reset after deploying ([cafe2be](https://github.com/digitopvn/diginext/commit/cafe2beedd65c9b1527f6d6764a8644b6f9996aa))

## [3.23.1](https://github.com/digitopvn/diginext/compare/v3.23.0...v3.23.1) (2023-10-09)


### Bug Fixes

* **cli:** updateBranchProtection ([54cbd46](https://github.com/digitopvn/diginext/commit/54cbd460d64e460c4a867b7fc5688e3bde1165f1))
* **server,k8s auth:** compare kube_config when updating cluster ([51c9eea](https://github.com/digitopvn/diginext/commit/51c9eeaf8ad35d0d070dfaec663b3411d18f73d1))

## [3.23.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.23.0...v3.23.1-prerelease.1) (2023-10-09)


### Bug Fixes

* **cli:** updateBranchProtection ([54cbd46](https://github.com/digitopvn/diginext/commit/54cbd460d64e460c4a867b7fc5688e3bde1165f1))
* **server,k8s auth:** compare kube_config when updating cluster ([51c9eea](https://github.com/digitopvn/diginext/commit/51c9eeaf8ad35d0d070dfaec663b3411d18f73d1))

# [3.23.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.23.0-prerelease.1...v3.23.0-prerelease.2) (2023-10-06)


### Bug Fixes

* **cli:** updateBranchProtection ([54cbd46](https://github.com/digitopvn/diginext/commit/54cbd460d64e460c4a867b7fc5688e3bde1165f1))

# [3.23.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.9-prerelease.1...v3.23.0-prerelease.1) (2023-10-06)


### Features

* **db backup, system log:** data retention handling ([062f1b5](https://github.com/digitopvn/diginext/commit/062f1b5432878de39704326640e2500698eef3ca))
* **db backup, system log:** data retention handling ([#409](https://github.com/digitopvn/diginext/issues/409)) ([3bf0915](https://github.com/digitopvn/diginext/commit/3bf09152938fa98c2b092189f79a36a8668279c6))

## [3.22.9-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.8...v3.22.9-prerelease.1) (2023-10-06)


### Bug Fixes

* **cli:** add server down error ([7eaeabe](https://github.com/digitopvn/diginext/commit/7eaeabe2d17960b9bdf814491806650400d58779))
* **server,api:** format env vars in get app api ([#405](https://github.com/digitopvn/diginext/issues/405)) ([83aad07](https://github.com/digitopvn/diginext/commit/83aad074604bb51cdc5c72a0feb5d58d6f9347da))
* **server:** compare update changes on auth cluster ([d0a49c6](https://github.com/digitopvn/diginext/commit/d0a49c6f3ae2e3f1a4d69046cda9b9783f99a21a))

## [3.22.8](https://github.com/digitopvn/diginext/compare/v3.22.7...v3.22.8) (2023-10-02)


### Bug Fixes

* **server,admin:** envvar obj to json, rm debug logs ([ac84aab](https://github.com/digitopvn/diginext/commit/ac84aabfa95ba69d1f11f40267e8fb2aa28d756d))
* **server,admin:** envvar obj to json, rm debug logs ([#401](https://github.com/digitopvn/diginext/issues/401)) ([f4ff2e8](https://github.com/digitopvn/diginext/commit/f4ff2e83130201414947065a4788a0e7b1da1557))
* **server,api:** format env vars in get app api ([0663119](https://github.com/digitopvn/diginext/commit/0663119bd6ad02dbd595676c8ac82565cee38284))
* **server,deploy:** format all env vars ([fd61ae6](https://github.com/digitopvn/diginext/commit/fd61ae65b890b4be4b1f5bc0eacfc3596e11aa10))
* **server,deploy:** format all env vars ([#404](https://github.com/digitopvn/diginext/issues/404)) ([97f5a7e](https://github.com/digitopvn/diginext/commit/97f5a7ed3ef5212997f44e441a470d3eab45e780))
* **server:** cast obj to string when generate yaml ([60cbb06](https://github.com/digitopvn/diginext/commit/60cbb06390feb6917bbd2d8a028cfefbb88f8796))
* **server:** cast obj to string when generate yaml ([#402](https://github.com/digitopvn/diginext/issues/402)) ([305a9da](https://github.com/digitopvn/diginext/commit/305a9da2b3c778d827710b875b463e025bf2465a))
* **server:** env var obj to json string ([aa5d99e](https://github.com/digitopvn/diginext/commit/aa5d99ec5a41503cda356d4a9e42dbe677ef5946))
* **server:** force cast env var obj to json string ([956d0b6](https://github.com/digitopvn/diginext/commit/956d0b6d34410455a61fea9b25ccd002fa328700))
* **server:** obj to json in deploy env update ([3dd00e0](https://github.com/digitopvn/diginext/commit/3dd00e016c903b62fb37cc35bff54617b8e6bfc5))

## [3.22.8-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.22.8-prerelease.4...v3.22.8-prerelease.5) (2023-09-30)


### Bug Fixes

* **server,deploy:** format all env vars ([fd61ae6](https://github.com/digitopvn/diginext/commit/fd61ae65b890b4be4b1f5bc0eacfc3596e11aa10))
* **server,deploy:** format all env vars ([#404](https://github.com/digitopvn/diginext/issues/404)) ([97f5a7e](https://github.com/digitopvn/diginext/commit/97f5a7ed3ef5212997f44e441a470d3eab45e780))

## [3.22.8-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.22.8-prerelease.3...v3.22.8-prerelease.4) (2023-09-30)


### Bug Fixes

* **server:** force cast env var obj to json string ([956d0b6](https://github.com/digitopvn/diginext/commit/956d0b6d34410455a61fea9b25ccd002fa328700))
* **server:** obj to json in deploy env update ([3dd00e0](https://github.com/digitopvn/diginext/commit/3dd00e016c903b62fb37cc35bff54617b8e6bfc5))

## [3.22.8-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.22.8-prerelease.2...v3.22.8-prerelease.3) (2023-09-30)


### Bug Fixes

* **server:** cast obj to string when generate yaml ([60cbb06](https://github.com/digitopvn/diginext/commit/60cbb06390feb6917bbd2d8a028cfefbb88f8796))
* **server:** cast obj to string when generate yaml ([#402](https://github.com/digitopvn/diginext/issues/402)) ([305a9da](https://github.com/digitopvn/diginext/commit/305a9da2b3c778d827710b875b463e025bf2465a))

## [3.22.8-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.22.8-prerelease.1...v3.22.8-prerelease.2) (2023-09-30)


### Bug Fixes

* **server,admin:** envvar obj to json, rm debug logs ([ac84aab](https://github.com/digitopvn/diginext/commit/ac84aabfa95ba69d1f11f40267e8fb2aa28d756d))
* **server,admin:** envvar obj to json, rm debug logs ([#401](https://github.com/digitopvn/diginext/issues/401)) ([f4ff2e8](https://github.com/digitopvn/diginext/commit/f4ff2e83130201414947065a4788a0e7b1da1557))

## [3.22.8-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.7...v3.22.8-prerelease.1) (2023-09-30)


### Bug Fixes

* **server:** env var obj to json string ([aa5d99e](https://github.com/digitopvn/diginext/commit/aa5d99ec5a41503cda356d4a9e42dbe677ef5946))

## [3.22.7](https://github.com/digitopvn/diginext/compare/v3.22.6...v3.22.7) (2023-09-18)


### Bug Fixes

* **auth:** catch error when verify refresh token ([fd81cd6](https://github.com/digitopvn/diginext/commit/fd81cd63bdb12d3a48ea2589c655ef0be01bd072))

## [3.22.7-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.6...v3.22.7-prerelease.1) (2023-09-18)


### Bug Fixes

* **auth:** catch error when verify refresh token ([fd81cd6](https://github.com/digitopvn/diginext/commit/fd81cd63bdb12d3a48ea2589c655ef0be01bd072))

## [3.22.6](https://github.com/digitopvn/diginext/compare/v3.22.5...v3.22.6) (2023-09-18)


### Bug Fixes

* **auth jwt:** add debug info ([a417b1a](https://github.com/digitopvn/diginext/commit/a417b1aab8804f5e8a19f75905e176b95c872ba6))
* **auth jwt:** add debug info ([#392](https://github.com/digitopvn/diginext/issues/392)) ([92ff844](https://github.com/digitopvn/diginext/commit/92ff844e2092c92f7e42ce927f0242703ece7362))
* **auth:** crash loop generate new jwt tokens ([c85f7c6](https://github.com/digitopvn/diginext/commit/c85f7c661a2c077d13f47c7ba375a6e34ffbcd6a))
* **auth:** crash loop generate new jwt tokens ([#394](https://github.com/digitopvn/diginext/issues/394)) ([f7beea3](https://github.com/digitopvn/diginext/commit/f7beea320d3acda14a3b0ef655183eca3f9b6ba6))
* **auth:** delete old cookie if refresh new tokens ([a95dbb1](https://github.com/digitopvn/diginext/commit/a95dbb1736b8f887d02f006679332d2b9103cfea))
* **auth:** delete old cookie if refresh new tokens ([#395](https://github.com/digitopvn/diginext/issues/395)) ([a4f272d](https://github.com/digitopvn/diginext/commit/a4f272db9dc559b72f20507be04ead72e46cf409))
* **cli:** invalid access_token when tokens are expired ([773ce2c](https://github.com/digitopvn/diginext/commit/773ce2cf3b0af0a06bc2d06e3ba332dd28e3a455)), closes [#390](https://github.com/digitopvn/diginext/issues/390)
* **cli:** invalid access_token when tokens are expired ([#391](https://github.com/digitopvn/diginext/issues/391)) ([47a33cf](https://github.com/digitopvn/diginext/commit/47a33cf0675091d7296c480b6a3138650e864a6b))
* **server,auth:** token debug jwt auth ([946b6ab](https://github.com/digitopvn/diginext/commit/946b6abb35a1738e5c17713b6f138db0b1d10041))
* **server,auth:** token debug jwt auth ([#393](https://github.com/digitopvn/diginext/issues/393)) ([703cbb6](https://github.com/digitopvn/diginext/commit/703cbb601faf621517191d0b4036e2714617a7ad))
* **server:** remove user interface in mongoose schema ([fb48596](https://github.com/digitopvn/diginext/commit/fb48596205f38128346064bfd3c449e702b0bd34))
* **user:** issue of interface and schema ([ea7810f](https://github.com/digitopvn/diginext/commit/ea7810f57c9ea738fc72e8357f552a29deda8b6a))

## [3.22.6-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.22.6-prerelease.4...v3.22.6-prerelease.5) (2023-09-18)


### Bug Fixes

* **auth:** delete old cookie if refresh new tokens ([a95dbb1](https://github.com/digitopvn/diginext/commit/a95dbb1736b8f887d02f006679332d2b9103cfea))
* **auth:** delete old cookie if refresh new tokens ([#395](https://github.com/digitopvn/diginext/issues/395)) ([a4f272d](https://github.com/digitopvn/diginext/commit/a4f272db9dc559b72f20507be04ead72e46cf409))

## [3.22.6-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.22.6-prerelease.3...v3.22.6-prerelease.4) (2023-09-18)


### Bug Fixes

* **auth:** crash loop generate new jwt tokens ([c85f7c6](https://github.com/digitopvn/diginext/commit/c85f7c661a2c077d13f47c7ba375a6e34ffbcd6a))
* **auth:** crash loop generate new jwt tokens ([#394](https://github.com/digitopvn/diginext/issues/394)) ([f7beea3](https://github.com/digitopvn/diginext/commit/f7beea320d3acda14a3b0ef655183eca3f9b6ba6))

## [3.22.6-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.22.6-prerelease.2...v3.22.6-prerelease.3) (2023-09-14)


### Bug Fixes

* **server,auth:** token debug jwt auth ([946b6ab](https://github.com/digitopvn/diginext/commit/946b6abb35a1738e5c17713b6f138db0b1d10041))
* **server,auth:** token debug jwt auth ([#393](https://github.com/digitopvn/diginext/issues/393)) ([703cbb6](https://github.com/digitopvn/diginext/commit/703cbb601faf621517191d0b4036e2714617a7ad))

## [3.22.6-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.22.6-prerelease.1...v3.22.6-prerelease.2) (2023-09-11)


### Bug Fixes

* **auth jwt:** add debug info ([a417b1a](https://github.com/digitopvn/diginext/commit/a417b1aab8804f5e8a19f75905e176b95c872ba6))
* **auth jwt:** add debug info ([#392](https://github.com/digitopvn/diginext/issues/392)) ([92ff844](https://github.com/digitopvn/diginext/commit/92ff844e2092c92f7e42ce927f0242703ece7362))

## [3.22.6-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.5...v3.22.6-prerelease.1) (2023-09-08)


### Bug Fixes

* **cli:** invalid access_token when tokens are expired ([773ce2c](https://github.com/digitopvn/diginext/commit/773ce2cf3b0af0a06bc2d06e3ba332dd28e3a455)), closes [#390](https://github.com/digitopvn/diginext/issues/390)
* **cli:** invalid access_token when tokens are expired ([#391](https://github.com/digitopvn/diginext/issues/391)) ([47a33cf](https://github.com/digitopvn/diginext/commit/47a33cf0675091d7296c480b6a3138650e864a6b))
* **server:** remove user interface in mongoose schema ([fb48596](https://github.com/digitopvn/diginext/commit/fb48596205f38128346064bfd3c449e702b0bd34))
* **user:** issue of interface and schema ([ea7810f](https://github.com/digitopvn/diginext/commit/ea7810f57c9ea738fc72e8357f552a29deda8b6a))

## [3.22.5](https://github.com/digitopvn/diginext/compare/v3.22.4...v3.22.5) (2023-08-24)


### Bug Fixes

* **security:** enable secure cookie ([52bae79](https://github.com/digitopvn/diginext/commit/52bae79bccbfb1d99bab8b744a200af1c32d71be))
* **server,api:** add refresh token to basic auth ([52c036c](https://github.com/digitopvn/diginext/commit/52c036caaeaea29c592167da8a1a9db7b8a34d62))
* **server,deploy:** increase max wait time app start up to 4min ([dc186eb](https://github.com/digitopvn/diginext/commit/dc186ebdc593412117c5136cc99f27bdc17822c6))
* **server,register,login:** invited user,active workspace,role,jwt ([b5d8bcc](https://github.com/digitopvn/diginext/commit/b5d8bcc5a5885fa633370a19efd6185574e5f822))

## [3.22.5-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.22.4...v3.22.5-prerelease.1) (2023-08-23)


### Bug Fixes

* **security:** enable secure cookie ([52bae79](https://github.com/digitopvn/diginext/commit/52bae79bccbfb1d99bab8b744a200af1c32d71be))
* **server,api:** add refresh token to basic auth ([52c036c](https://github.com/digitopvn/diginext/commit/52c036caaeaea29c592167da8a1a9db7b8a34d62))
* **server,deploy:** increase max wait time app start up to 4min ([dc186eb](https://github.com/digitopvn/diginext/commit/dc186ebdc593412117c5136cc99f27bdc17822c6))
* **server,register,login:** invited user,active workspace,role,jwt ([b5d8bcc](https://github.com/digitopvn/diginext/commit/b5d8bcc5a5885fa633370a19efd6185574e5f822))

## [3.22.4](https://github.com/digitopvn/diginext/compare/v3.22.3...v3.22.4) (2023-08-21)


### Bug Fixes

* **cli:** add --rollout flag to dx up ([d539e32](https://github.com/digitopvn/diginext/commit/d539e328655dd6452da6d4d16d3d273ec1a64154))
* **dashboard:** validate refresh token issue ([abfc2d7](https://github.com/digitopvn/diginext/commit/abfc2d7a15cd1985f552fa6ca065d4c87cf9a927))

## [3.22.3](https://github.com/digitopvn/diginext/compare/v3.22.2...v3.22.3) (2023-08-21)


### Bug Fixes

* **cli:** generate readme for creating empty app ([147c390](https://github.com/digitopvn/diginext/commit/147c390fd219e4589b41d97f7316363144f7d6c9))
* **dashboard:** store refresh token in cookie ([#344](https://github.com/digitopvn/diginext/issues/344)) ([40a7aed](https://github.com/digitopvn/diginext/commit/40a7aedc3a88ae859f0b78e2bac81a524859f96f))
* **server,dashboard:** should not clear expired tokens ([9221a71](https://github.com/digitopvn/diginext/commit/9221a71aaa12ef147306a5af3279c5f9c6f8b0b7))

## [3.22.2](https://github.com/digitopvn/diginext/compare/v3.22.1...v3.22.2) (2023-08-16)


### Bug Fixes

* **dashboard:** fix scroll issue of build logs mobile ([a6fc82a](https://github.com/digitopvn/diginext/commit/a6fc82a75fc0b0995464971757ffb8371af0c231))
* **server,cli:** improve deploy logs with status ([6da8c59](https://github.com/digitopvn/diginext/commit/6da8c5906470b648b568bcfbf822c373981a3a70))
* **server:** print unavailable replicas ([efc2044](https://github.com/digitopvn/diginext/commit/efc20445c056b59d08550b550ce25166dacfd434))
* **server:** turn of deploy in background ([34f8fe2](https://github.com/digitopvn/diginext/commit/34f8fe25e2676bfe467c3f1babdd0a9c8be0f74e))

## [3.22.1](https://github.com/digitopvn/diginext/compare/v3.22.0...v3.22.1) (2023-08-15)


### Bug Fixes

* **cli:** add more alias to cluster and kubectl ([9bac701](https://github.com/digitopvn/diginext/commit/9bac701055b1889d754e50e6bd0d15d89293ecc6))

# [3.22.0](https://github.com/digitopvn/diginext/compare/v3.21.5...v3.22.0) (2023-08-15)


### Bug Fixes

* **dashboard:** store refresh token in cookie ([5c835ee](https://github.com/digitopvn/diginext/commit/5c835eeacb3bdc8c54910d96f4fa3207a56954b4))
* **server,cli:** store refresh token at client ([6c15ac8](https://github.com/digitopvn/diginext/commit/6c15ac818229250c881a1d4c3a46bb6e1f61bad2))
* **server,domain:** not update issue when add or remove domain ([45c0cb6](https://github.com/digitopvn/diginext/commit/45c0cb60c18229055fd1e5d20efaeb119e8e7b86))
* **server:** delete rpm when generate ingress yaml ([703a19a](https://github.com/digitopvn/diginext/commit/703a19a3423b4d694afd21deb1b75ce46794e7d3))


### Features

* **api:** add github trends api ([50fdfd1](https://github.com/digitopvn/diginext/commit/50fdfd1adc9dc992e85d9fc0393c7dce8e139364))
* **dashboard:** cmd k to search project and app ([f7eb7fa](https://github.com/digitopvn/diginext/commit/f7eb7fa2d871b605d654d2ad143ff680259ea889))
* **server,cli:** add view app logs command: dx logs ([d85cb46](https://github.com/digitopvn/diginext/commit/d85cb466334e0572a5144a1b5e296dd71740d3fb))

# [3.22.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.5...v3.22.0-prerelease.1) (2023-08-11)


### Bug Fixes

* **server,domain:** not update issue when add or remove domain ([45c0cb6](https://github.com/digitopvn/diginext/commit/45c0cb60c18229055fd1e5d20efaeb119e8e7b86))
* **server:** delete rpm when generate ingress yaml ([703a19a](https://github.com/digitopvn/diginext/commit/703a19a3423b4d694afd21deb1b75ce46794e7d3))


### Features

* **dashboard:** cmd k to search project and app ([f7eb7fa](https://github.com/digitopvn/diginext/commit/f7eb7fa2d871b605d654d2ad143ff680259ea889))

## [3.21.5](https://github.com/digitopvn/diginext/compare/v3.21.4...v3.21.5) (2023-08-10)


### Bug Fixes

* **server,cli:** add refresh token ([c598fea](https://github.com/digitopvn/diginext/commit/c598feaf355f0b22f2ed290e8c9d54ea3b81d437))
* **server,cli:** exclude refresh token when parse query ([8db7fd9](https://github.com/digitopvn/diginext/commit/8db7fd9b614c53f323830deef73a6e0a8ad326d8))

## [3.21.5-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.4...v3.21.5-prerelease.1) (2023-08-10)


### Bug Fixes

* **server,cli:** add refresh token ([c598fea](https://github.com/digitopvn/diginext/commit/c598feaf355f0b22f2ed290e8c9d54ea3b81d437))
* **server,cli:** exclude refresh token when parse query ([8db7fd9](https://github.com/digitopvn/diginext/commit/8db7fd9b614c53f323830deef73a6e0a8ad326d8))

## [3.21.4](https://github.com/digitopvn/diginext/compare/v3.21.3...v3.21.4) (2023-08-03)


### Bug Fixes

* **server,generate yaml:** increase limit rps to 100 ([97ea3ee](https://github.com/digitopvn/diginext/commit/97ea3eef5db31b1760a6e902f81e6239bbb8c31b))

## [3.21.4-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.3...v3.21.4-prerelease.1) (2023-08-03)


### Bug Fixes

* **server,generate yaml:** increase limit rps to 100 ([97ea3ee](https://github.com/digitopvn/diginext/commit/97ea3eef5db31b1760a6e902f81e6239bbb8c31b))

## [3.21.3](https://github.com/digitopvn/diginext/compare/v3.21.2...v3.21.3) (2023-08-02)


### Bug Fixes

* **server,deployment yaml:** increase limit rps to 10 ([a701a37](https://github.com/digitopvn/diginext/commit/a701a37b0f8ac0d1b7e58a23f3032e8c4554573e))
* **server:** make screenshot async after 30s ([2838e5a](https://github.com/digitopvn/diginext/commit/2838e5a5546a815d6cc1aebccb1583dfcbe18628))

## [3.21.3-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.2...v3.21.3-prerelease.1) (2023-08-02)


### Bug Fixes

* **server,deployment yaml:** increase limit rps to 10 ([a701a37](https://github.com/digitopvn/diginext/commit/a701a37b0f8ac0d1b7e58a23f3032e8c4554573e))
* **server:** make screenshot async after 30s ([2838e5a](https://github.com/digitopvn/diginext/commit/2838e5a5546a815d6cc1aebccb1583dfcbe18628))

## [3.21.2](https://github.com/digitopvn/diginext/compare/v3.21.1...v3.21.2) (2023-08-01)


### Bug Fixes

* **cli,auth:** fetch api key from cache ([c3e8fbb](https://github.com/digitopvn/diginext/commit/c3e8fbb9f7591b07545f5bb439265b5f753feb21))
* **cli,deploy:**  warn unstaged files ([0a60ddf](https://github.com/digitopvn/diginext/commit/0a60ddf897e881be9ca5a732d3a8c7ad4afb3be2))
* **cli,git repo:** correct repo url and ssh when parsing ([eb45951](https://github.com/digitopvn/diginext/commit/eb45951d81ee7ed3784191822b3c6ebd288c0b44))
* **cli:** add debug info ([50a19af](https://github.com/digitopvn/diginext/commit/50a19af099df9a6d46f9346b2206298b77010e86))
* **cli:** add more debug log ([1fcf815](https://github.com/digitopvn/diginext/commit/1fcf8153c43e0e30c7e75615d63428241c05a7e0))
* **cli:** remoge git extension in repo url ([dbd3d7f](https://github.com/digitopvn/diginext/commit/dbd3d7f214b4219ad4936efa703b0466f09d2e64))
* **cli:** support https git repo ([5abc8ff](https://github.com/digitopvn/diginext/commit/5abc8ff632fb1cfd522987f5b153db63165ba763))
* **cli:** turn off stage files when request deploy ([cc4bf18](https://github.com/digitopvn/diginext/commit/cc4bf182f10e616d492eb0e1db62939681e7864e))

## [3.21.2-prerelease.7](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.6...v3.21.2-prerelease.7) (2023-08-01)


### Bug Fixes

* **cli,deploy:**  warn unstaged files ([0a60ddf](https://github.com/digitopvn/diginext/commit/0a60ddf897e881be9ca5a732d3a8c7ad4afb3be2))

## [3.21.2-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.5...v3.21.2-prerelease.6) (2023-08-01)


### Bug Fixes

* **cli:** turn off stage files when request deploy ([cc4bf18](https://github.com/digitopvn/diginext/commit/cc4bf182f10e616d492eb0e1db62939681e7864e))

## [3.21.2-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.4...v3.21.2-prerelease.5) (2023-08-01)


### Bug Fixes

* **cli:** add more debug log ([1fcf815](https://github.com/digitopvn/diginext/commit/1fcf8153c43e0e30c7e75615d63428241c05a7e0))
* **cli:** remoge git extension in repo url ([dbd3d7f](https://github.com/digitopvn/diginext/commit/dbd3d7f214b4219ad4936efa703b0466f09d2e64))

## [3.21.2-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.3...v3.21.2-prerelease.4) (2023-08-01)


### Bug Fixes

* **cli:** add debug info ([50a19af](https://github.com/digitopvn/diginext/commit/50a19af099df9a6d46f9346b2206298b77010e86))

## [3.21.2-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.2...v3.21.2-prerelease.3) (2023-08-01)


### Bug Fixes

* **cli,git repo:** correct repo url and ssh when parsing ([eb45951](https://github.com/digitopvn/diginext/commit/eb45951d81ee7ed3784191822b3c6ebd288c0b44))

## [3.21.2-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.21.2-prerelease.1...v3.21.2-prerelease.2) (2023-08-01)


### Bug Fixes

* **cli:** support https git repo ([5abc8ff](https://github.com/digitopvn/diginext/commit/5abc8ff632fb1cfd522987f5b153db63165ba763))

## [3.21.2-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.1...v3.21.2-prerelease.1) (2023-08-01)


### Bug Fixes

* **cli,auth:** fetch api key from cache ([c3e8fbb](https://github.com/digitopvn/diginext/commit/c3e8fbb9f7591b07545f5bb439265b5f753feb21))

## [3.21.1](https://github.com/digitopvn/diginext/compare/v3.21.0...v3.21.1) (2023-07-31)


### Bug Fixes

* **cli:** cache api key ([98180a4](https://github.com/digitopvn/diginext/commit/98180a43bea6915284c80cb44fec2abfa4114bc9))
* **cli:** login using api key ([2044706](https://github.com/digitopvn/diginext/commit/204470621e8ed571e392c65f157e0f39e0b7e370))

## [3.21.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.21.0...v3.21.1-prerelease.1) (2023-07-31)


### Bug Fixes

* **cli:** cache api key ([98180a4](https://github.com/digitopvn/diginext/commit/98180a43bea6915284c80cb44fec2abfa4114bc9))
* **cli:** login using api key ([2044706](https://github.com/digitopvn/diginext/commit/204470621e8ed571e392c65f157e0f39e0b7e370))

# [3.21.0](https://github.com/digitopvn/diginext/compare/v3.20.3...v3.21.0) (2023-07-31)


### Bug Fixes

* **cli,build,deploy:** exit with error or success code ([829aea0](https://github.com/digitopvn/diginext/commit/829aea0b26dffcfa1730caafc7efae93fc56a1a4))
* **cli,new app:** correct target directory options ([786c60f](https://github.com/digitopvn/diginext/commit/786c60f6b9ef583e91ded32d727e14f72c11eeb8))
* **cli,new app:** force create git branch ([e583884](https://github.com/digitopvn/diginext/commit/e583884d5e1ac0101f6eeea89480211c49f7b76c))
* **server,api:** exclude api key from mask sensitive info ([5b32760](https://github.com/digitopvn/diginext/commit/5b3276006a3ccdd073b0f882af90fdc15a3f3c54))


### Features

* **server,cli:** ask ai to generate dockerfile ([0fed8b6](https://github.com/digitopvn/diginext/commit/0fed8b6df821031378d6872357b31d3267fd15c1))

# [3.21.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.20.4-prerelease.1...v3.21.0-prerelease.1) (2023-07-28)


### Bug Fixes

* **cli,new app:** correct target directory options ([786c60f](https://github.com/digitopvn/diginext/commit/786c60f6b9ef583e91ded32d727e14f72c11eeb8))
* **cli,new app:** force create git branch ([e583884](https://github.com/digitopvn/diginext/commit/e583884d5e1ac0101f6eeea89480211c49f7b76c))


### Features

* **server,cli:** ask ai to generate dockerfile ([0fed8b6](https://github.com/digitopvn/diginext/commit/0fed8b6df821031378d6872357b31d3267fd15c1))

## [3.20.4-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.20.3...v3.20.4-prerelease.1) (2023-07-27)


### Bug Fixes

* **cli,build,deploy:** exit with error or success code ([829aea0](https://github.com/digitopvn/diginext/commit/829aea0b26dffcfa1730caafc7efae93fc56a1a4))
* **server,api:** exclude api key from mask sensitive info ([5b32760](https://github.com/digitopvn/diginext/commit/5b3276006a3ccdd073b0f882af90fdc15a3f3c54))

## [3.20.3](https://github.com/digitopvn/diginext/compare/v3.20.2...v3.20.3) (2023-07-26)


### Bug Fixes

* **dashboard,monitoring:** filter by cluster and namespace ([9e28192](https://github.com/digitopvn/diginext/commit/9e28192743b49131923035923c22da7438db678f))
* **dashboard,smartform:** not hide and show fields by config ([cf0fb92](https://github.com/digitopvn/diginext/commit/cf0fb9224c0bcb4755e6be3e05abfba59a7f7051))
* **server,build start:** missing build name ([ffe08ea](https://github.com/digitopvn/diginext/commit/ffe08eab6e2f9106d93fc3d72c24626b2ed5280c))
* **server,env variables:** prevent round up number value ([ab16e86](https://github.com/digitopvn/diginext/commit/ab16e86b025c37cd507a805fb5b1426c583354eb))
* **server,generate yaml:** add more labels metadata ([2d7b581](https://github.com/digitopvn/diginext/commit/2d7b58197ddc43d9ef7c7eae40b9055fe31ce7bb))

## [3.20.3-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.20.3-prerelease.3...v3.20.3-prerelease.4) (2023-07-26)


### Bug Fixes

* **server,env variables:** prevent round up number value ([ab16e86](https://github.com/digitopvn/diginext/commit/ab16e86b025c37cd507a805fb5b1426c583354eb))

## [3.20.3-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.20.3-prerelease.2...v3.20.3-prerelease.3) (2023-07-26)


### Bug Fixes

* **dashboard,monitoring:** filter by cluster and namespace ([9e28192](https://github.com/digitopvn/diginext/commit/9e28192743b49131923035923c22da7438db678f))

## [3.20.3-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.20.3-prerelease.1...v3.20.3-prerelease.2) (2023-07-26)


### Bug Fixes

* **dashboard,smartform:** not hide and show fields by config ([cf0fb92](https://github.com/digitopvn/diginext/commit/cf0fb9224c0bcb4755e6be3e05abfba59a7f7051))

## [3.20.3-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.20.2...v3.20.3-prerelease.1) (2023-07-26)


### Bug Fixes

* **server,build start:** missing build name ([ffe08ea](https://github.com/digitopvn/diginext/commit/ffe08eab6e2f9106d93fc3d72c24626b2ed5280c))
* **server,generate yaml:** add more labels metadata ([2d7b581](https://github.com/digitopvn/diginext/commit/2d7b58197ddc43d9ef7c7eae40b9055fe31ce7bb))

## [3.20.2](https://github.com/digitopvn/diginext/compare/v3.20.1...v3.20.2) (2023-07-25)


### Bug Fixes

* **cli new app:** hide console logs after fix git init ([f100fa5](https://github.com/digitopvn/diginext/commit/f100fa5e77e494f05c2e2054293b76f1337bfcd8))
* **dashboard,monitoring:** delete resources ([8a36123](https://github.com/digitopvn/diginext/commit/8a36123cb331130f819fec0824230a61eb2db87f))
* **server,dashboard:** app edit,list,yaml editor ([c34ff76](https://github.com/digitopvn/diginext/commit/c34ff76df4fc8dae0d3cc7f8151c57af66a6136e))
* **server,git,ssh:** write custom ssh keys ([747e254](https://github.com/digitopvn/diginext/commit/747e2541271adc5a42748c4163ced0bac4b2b402))
* **server,monitoring:** namespace delete,statefulset,swagger ([ce6f8a3](https://github.com/digitopvn/diginext/commit/ce6f8a3bc931f638bdd7b3a60ec3b2a5dab53c0b))
* **server,ssh,monitoring:** endline private ssh key,delete k8s resourcecs ([3f725e8](https://github.com/digitopvn/diginext/commit/3f725e83238108ba0fb2eeeae25d6b8e8dfe49cf))
* **server,ssh:** await subprocess initial ssh keys ([5c8be78](https://github.com/digitopvn/diginext/commit/5c8be783d0856999f60f8afb955f62e83f975734))
* **server,test:** write initial ssh keys, verify ssh keys ([51f3a3b](https://github.com/digitopvn/diginext/commit/51f3a3b6b486bdcff5133ab0e0b2cb5389ae6cd7))
* **swagger:** monitoring query options ([98c9186](https://github.com/digitopvn/diginext/commit/98c91863009bd9c607f4a1721337218c0f185d2d))

## [3.20.2-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.20.2-prerelease.2...v3.20.2-prerelease.3) (2023-07-25)


### Bug Fixes

* **server,dashboard:** app edit,list,yaml editor ([c34ff76](https://github.com/digitopvn/diginext/commit/c34ff76df4fc8dae0d3cc7f8151c57af66a6136e))

## [3.20.2-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.20.2-prerelease.1...v3.20.2-prerelease.2) (2023-07-25)


### Bug Fixes

* **server,monitoring:** namespace delete,statefulset,swagger ([ce6f8a3](https://github.com/digitopvn/diginext/commit/ce6f8a3bc931f638bdd7b3a60ec3b2a5dab53c0b))

## [3.20.2-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.20.1...v3.20.2-prerelease.1) (2023-07-24)


### Bug Fixes

* **cli new app:** hide console logs after fix git init ([f100fa5](https://github.com/digitopvn/diginext/commit/f100fa5e77e494f05c2e2054293b76f1337bfcd8))
* **dashboard,monitoring:** delete resources ([8a36123](https://github.com/digitopvn/diginext/commit/8a36123cb331130f819fec0824230a61eb2db87f))
* **server,git,ssh:** write custom ssh keys ([747e254](https://github.com/digitopvn/diginext/commit/747e2541271adc5a42748c4163ced0bac4b2b402))
* **server,ssh,monitoring:** endline private ssh key,delete k8s resourcecs ([3f725e8](https://github.com/digitopvn/diginext/commit/3f725e83238108ba0fb2eeeae25d6b8e8dfe49cf))
* **server,ssh:** await subprocess initial ssh keys ([5c8be78](https://github.com/digitopvn/diginext/commit/5c8be783d0856999f60f8afb955f62e83f975734))
* **server,test:** write initial ssh keys, verify ssh keys ([51f3a3b](https://github.com/digitopvn/diginext/commit/51f3a3b6b486bdcff5133ab0e0b2cb5389ae6cd7))
* **swagger:** monitoring query options ([98c9186](https://github.com/digitopvn/diginext/commit/98c91863009bd9c607f4a1721337218c0f185d2d))

## [3.20.1](https://github.com/digitopvn/diginext/compare/v3.20.0...v3.20.1) (2023-07-20)


### Bug Fixes

* **dashboard:** correct cluster slug in monitoring ([49f8937](https://github.com/digitopvn/diginext/commit/49f893746b9a34b32036d1258dfe109a4dc7067f))

## [3.20.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.20.0...v3.20.1-prerelease.1) (2023-07-20)


### Bug Fixes

* **dashboard:** correct cluster slug in monitoring ([49f8937](https://github.com/digitopvn/diginext/commit/49f893746b9a34b32036d1258dfe109a4dc7067f))

# [3.20.0](https://github.com/digitopvn/diginext/compare/v3.19.1...v3.20.0) (2023-07-19)


### Bug Fixes

* **api,routes:** disable empty db routes ([7cbda4f](https://github.com/digitopvn/diginext/commit/7cbda4f66e1ad13837179848aa9397fc16c317e9))
* **cli:** ask for registry when --registry is specified ([15294b2](https://github.com/digitopvn/diginext/commit/15294b205f76b9a0451233ee11e1c6fb3887d979))
* **cli:** snpt createNewPage typo ([6cb16d1](https://github.com/digitopvn/diginext/commit/6cb16d10870f9b8933b568bb1eff7fdf5bb356d0))
* **notification:** add callback url ([c87ea3a](https://github.com/digitopvn/diginext/commit/c87ea3a7fec6cb3726853d59f258ca8bd30cd38d))
* **project,app:** add updated by info ([968f1e7](https://github.com/digitopvn/diginext/commit/968f1e7e527c9f52f18e577384bf88d58f9d07cb))
* **server,app,deploy env:** archive unarchive app not found ([722a61d](https://github.com/digitopvn/diginext/commit/722a61d5c1cef28ef5dc3c87648a2945a8d8fb6f))
* **server,dashboard:** improve responsive,change cluster,change registry ([04b7411](https://github.com/digitopvn/diginext/commit/04b74116756c369dac51b8cfb249c3a0bb1177d9))
* **server,deploy:** limit rpm to ingress of dev env ([7a8db17](https://github.com/digitopvn/diginext/commit/7a8db1733f6cecb82272ad419e39dd47aa68da4e))
* **server:** connect docker registry workspace not found ([dc0124b](https://github.com/digitopvn/diginext/commit/dc0124b6ce337bfdbf4ce41043569a336ee7b41d))
* **server:** project app update by ([ae6ddc5](https://github.com/digitopvn/diginext/commit/ae6ddc5d4f0b2983c09fe452d658e66c3a25caca))


### Features

* **dashboard,deploy:** sleep, awake, take down, deploy now, import git ([80bfc82](https://github.com/digitopvn/diginext/commit/80bfc82a6923dfa874c7ebf698cc8422db3cd8ca))
* **dashboard:** deploy app page ([c04b442](https://github.com/digitopvn/diginext/commit/c04b4429d103c2de51914a7caf5217613a762a2e))
* **server,api:** archive and unarchive apps ([a1060bc](https://github.com/digitopvn/diginext/commit/a1060bc19018247d58de3bac5d0c71c496983c75))
* **server,api:** get participant list of an app ([31faa79](https://github.com/digitopvn/diginext/commit/31faa7956e1d5aad52ac38e574759cc7018bfd9d))
* **server,webhook,notification:** define schemas, services, controllers ([33ca2df](https://github.com/digitopvn/diginext/commit/33ca2df58ec1721b766def038ecae83af33bc4d0))
* **webhook,notification:** send notification on build and deploy event ([ab6c6e7](https://github.com/digitopvn/diginext/commit/ab6c6e74d918793be0ccc480105d786f198288e7))

# [3.20.0-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.20.0-prerelease.4...v3.20.0-prerelease.5) (2023-07-19)


### Bug Fixes

* **project,app:** add updated by info ([968f1e7](https://github.com/digitopvn/diginext/commit/968f1e7e527c9f52f18e577384bf88d58f9d07cb))
* **server:** project app update by ([ae6ddc5](https://github.com/digitopvn/diginext/commit/ae6ddc5d4f0b2983c09fe452d658e66c3a25caca))

## [3.19.1](https://github.com/digitopvn/diginext/compare/v3.19.0...v3.19.1) (2023-07-13)


### Bug Fixes

* **cli:** add some log ([3a0f663](https://github.com/digitopvn/diginext/commit/3a0f6635aedcd32900b80a32996b7c99358662ec))
* **cli:** ask for cluster when --cluster flag is specified ([6d01e00](https://github.com/digitopvn/diginext/commit/6d01e00a2b3618e944e8dbf3135d9ebd83b07f88))
* **cli:** member unable to create git repo for new app ([83279f1](https://github.com/digitopvn/diginext/commit/83279f17c5de4c776cf029c7d6bd576f1be1c097))
* **cli:** member unable to create git repo for new app ([#296](https://github.com/digitopvn/diginext/issues/296)) ([422d7ef](https://github.com/digitopvn/diginext/commit/422d7eff3fed9eb15c33bc500abb304abaa849b6))
* **cli:** missing fs.existsSync checking package.json ([33811de](https://github.com/digitopvn/diginext/commit/33811de13df6b63924fbc307a2d403adc6be42d8))

## [3.19.1-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.19.1-prerelease.1...v3.19.1-prerelease.2) (2023-07-13)


### Bug Fixes

* **cli:** member unable to create git repo for new app ([83279f1](https://github.com/digitopvn/diginext/commit/83279f17c5de4c776cf029c7d6bd576f1be1c097))
* **cli:** member unable to create git repo for new app ([#296](https://github.com/digitopvn/diginext/issues/296)) ([422d7ef](https://github.com/digitopvn/diginext/commit/422d7eff3fed9eb15c33bc500abb304abaa849b6))

## [3.19.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.19.0...v3.19.1-prerelease.1) (2023-07-13)


### Bug Fixes

* **cli:** add some log ([3a0f663](https://github.com/digitopvn/diginext/commit/3a0f6635aedcd32900b80a32996b7c99358662ec))
* **cli:** ask for cluster when --cluster flag is specified ([6d01e00](https://github.com/digitopvn/diginext/commit/6d01e00a2b3618e944e8dbf3135d9ebd83b07f88))
* **cli:** missing fs.existsSync checking package.json ([33811de](https://github.com/digitopvn/diginext/commit/33811de13df6b63924fbc307a2d403adc6be42d8))

# [3.19.0](https://github.com/digitopvn/diginext/compare/v3.18.0...v3.19.0) (2023-07-13)
# [3.19.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.19.0-prerelease.1...v3.19.0-prerelease.2) (2023-07-13)


### Bug Fixes

* **cli new app:** pull framework should not check package.json ([fae6a50](https://github.com/digitopvn/diginext/commit/fae6a50b83bd806fc4bf28d325bc5d427e1346b9))
* **cli, pull github fw:** debugging github actions ([03b74cc](https://github.com/digitopvn/diginext/commit/03b74cc9599923513cb4c2f244dfb3b89d7b2984))
* **cli,framework:** debug clone or pull ([24b1795](https://github.com/digitopvn/diginext/commit/24b17955319216e4849d62f67f4ab9771d54b99a))
* **server,services,modules:** issue of import circular dependencies ([b21c090](https://github.com/digitopvn/diginext/commit/b21c090a2a032770e918caf703f9b3b2ab4a3ceb))
* **test:** persist git credentials ([92c2e35](https://github.com/digitopvn/diginext/commit/92c2e35a75c8a2e5babe48582a8d4017c0293cc6))


### Features

* **server,api:** deploy page, import git, fix api key auth ([04c9a46](https://github.com/digitopvn/diginext/commit/04c9a46e944847b1f95e648810c579ffa001205d))
* **cli:** missing fs.existsSync checking package.json ([33811de](https://github.com/digitopvn/diginext/commit/33811de13df6b63924fbc307a2d403adc6be42d8))

# [3.19.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.18.0...v3.19.0-prerelease.1) (2023-07-13)


### Bug Fixes

* **cli new app:** pull framework should not check package.json ([fae6a50](https://github.com/digitopvn/diginext/commit/fae6a50b83bd806fc4bf28d325bc5d427e1346b9))
* **cli, pull github fw:** debugging github actions ([03b74cc](https://github.com/digitopvn/diginext/commit/03b74cc9599923513cb4c2f244dfb3b89d7b2984))
* **cli,framework:** debug clone or pull ([24b1795](https://github.com/digitopvn/diginext/commit/24b17955319216e4849d62f67f4ab9771d54b99a))
* **server,services,modules:** issue of import circular dependencies ([b21c090](https://github.com/digitopvn/diginext/commit/b21c090a2a032770e918caf703f9b3b2ab4a3ceb))
* **test:** persist git credentials ([92c2e35](https://github.com/digitopvn/diginext/commit/92c2e35a75c8a2e5babe48582a8d4017c0293cc6))


### Features

* **server,api:** deploy page, import git, fix api key auth ([04c9a46](https://github.com/digitopvn/diginext/commit/04c9a46e944847b1f95e648810c579ffa001205d))

# [3.18.0](https://github.com/digitopvn/diginext/compare/v3.17.0...v3.18.0) (2023-07-10)


### Bug Fixes

* **app:** trim null process.env ([1de8d3a](https://github.com/digitopvn/diginext/commit/1de8d3a035c950d4e74c0ef6fe832bdcc99b59ef))
* **cli,git:** add debug select git provider ([8266c42](https://github.com/digitopvn/diginext/commit/8266c4221246636db2624b14fcd550873ef317fa))
* **cli:** add debug mode to utils current git ([bdc713c](https://github.com/digitopvn/diginext/commit/bdc713c5b4a0d3f8ddd1b4c2f8deecd25402ead9))
* **cli:** create app, add debug git providerr ([859a576](https://github.com/digitopvn/diginext/commit/859a576e6c314da524e7783a07c0e44bd029a7f0))
* **cli:** src/plugins/utils.ts cloneGitRepo depth=1 ([917417b](https://github.com/digitopvn/diginext/commit/917417b9f54c3d55c5c99b2c488bb84a42049d88))
* **cli:** templates/nextjs/ts/0.1/components/three.txt ([38b639a](https://github.com/digitopvn/diginext/commit/38b639a0c3f90b260b17eed1dae5791e729cfcfc))
* **cli:** updateBranchProtection ([6c91a1e](https://github.com/digitopvn/diginext/commit/6c91a1eda89d91495146b8547a9612a8a000bc49))
* **cli:** updateBranchProtection ([20c600b](https://github.com/digitopvn/diginext/commit/20c600bc11cc2f3e8d2aaca3c6a0b4f92f94b9c0))
* **server,api:** capture screenshot of release ([d8ba8a7](https://github.com/digitopvn/diginext/commit/d8ba8a7ee26ff4094a929ccbfe647c632be39161))
* **server,api:** import git create app, seed default projects ([32ef04d](https://github.com/digitopvn/diginext/commit/32ef04db36e7000bf5684f35c305656ff4d701d4))
* **server,api:** issue of generating swagger json ([f2124c3](https://github.com/digitopvn/diginext/commit/f2124c3c605dbd0498d4c2c26a05e1d2acc83b20))
* **server,api:** only mask info when share credential is off ([1da3a55](https://github.com/digitopvn/diginext/commit/1da3a5577cd9b51b3b31bd4afb3a9dba20489054))
* **server,cli:** git provider api should use correct org name ([1c5435d](https://github.com/digitopvn/diginext/commit/1c5435d62bc7e25a980ecc8cfc86b7e9153926c4))
* **server,cli:** role update restriction, cluster cli connect ([54b0aae](https://github.com/digitopvn/diginext/commit/54b0aae418254d961d25a5725d2ddde1bf9098a6))
* **server,cli:** role update restriction, cluster cli connect ([#281](https://github.com/digitopvn/diginext/issues/281)) ([ef42a3f](https://github.com/digitopvn/diginext/commit/ef42a3fa1b05b71dd5810b0754f58969738e372e))
* **server:** are only unique within a workspace ([c4b52c8](https://github.com/digitopvn/diginext/commit/c4b52c8eeefadebb31900e141375fc7433e55749))
* **server:** are only unique within a workspace ([#286](https://github.com/digitopvn/diginext/issues/286)) ([5d64a6f](https://github.com/digitopvn/diginext/commit/5d64a6ffe17db3cd115e311288e4b69b2109ab95))
* **server:** base service issue of generate slug ([be3b53f](https://github.com/digitopvn/diginext/commit/be3b53f86489850b37ace97d0da6957aaaa015cf))
* update test ([127f81a](https://github.com/digitopvn/diginext/commit/127f81a83d7c1d0a02851c9a9e8322856ab36c76))
* update test ([57c185d](https://github.com/digitopvn/diginext/commit/57c185d4ff7d009326e499f685e696f82d61ff06))


### Features

* **api:** import git ssh url, deploy from git ssh url ([66d01d6](https://github.com/digitopvn/diginext/commit/66d01d6273cdabcdee84de1c6f8f1dd2e5305432))
* **cli:** changePackageName when create new app ([12c6d06](https://github.com/digitopvn/diginext/commit/12c6d06bb2b1b7289ccc2f20ff445c229248b4b0))
* **cli:** initalizeAndCreateDefaultBranches > Update main branch protection ([7e01852](https://github.com/digitopvn/diginext/commit/7e01852805c0b9d0bbd249e9c7353f484b0ccf78))
* **server,api:** import app from git, deploy from git ([d1a3d5e](https://github.com/digitopvn/diginext/commit/d1a3d5e84a34c9eb0d78bbe8718c272ee30e0b39))
* **server:** revert scroll dir build logs, db backup list ([1e8ec81](https://github.com/digitopvn/diginext/commit/1e8ec81da6afcf0cc92aa1ad36dc8b62a64fa947))

# [3.18.0-prerelease.9](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.8...v3.18.0-prerelease.9) (2023-07-10)


### Features

* **api:** import git ssh url, deploy from git ssh url ([66d01d6](https://github.com/digitopvn/diginext/commit/66d01d6273cdabcdee84de1c6f8f1dd2e5305432))

# [3.18.0-prerelease.8](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.7...v3.18.0-prerelease.8) (2023-07-07)


### Bug Fixes

* **app:** trim null process.env ([1de8d3a](https://github.com/digitopvn/diginext/commit/1de8d3a035c950d4e74c0ef6fe832bdcc99b59ef))

# [3.18.0-prerelease.7](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.6...v3.18.0-prerelease.7) (2023-07-07)


### Bug Fixes

* update test ([127f81a](https://github.com/digitopvn/diginext/commit/127f81a83d7c1d0a02851c9a9e8322856ab36c76))
* update test ([57c185d](https://github.com/digitopvn/diginext/commit/57c185d4ff7d009326e499f685e696f82d61ff06))


### Features

* **cli:** changePackageName when create new app ([12c6d06](https://github.com/digitopvn/diginext/commit/12c6d06bb2b1b7289ccc2f20ff445c229248b4b0))

# [3.18.0-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.5...v3.18.0-prerelease.6) (2023-07-07)


### Bug Fixes

* **server:** are only unique within a workspace ([c4b52c8](https://github.com/digitopvn/diginext/commit/c4b52c8eeefadebb31900e141375fc7433e55749))
* **server:** are only unique within a workspace ([#286](https://github.com/digitopvn/diginext/issues/286)) ([5d64a6f](https://github.com/digitopvn/diginext/commit/5d64a6ffe17db3cd115e311288e4b69b2109ab95))
* **server:** base service issue of generate slug ([be3b53f](https://github.com/digitopvn/diginext/commit/be3b53f86489850b37ace97d0da6957aaaa015cf))

# [3.18.0-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.4...v3.18.0-prerelease.5) (2023-07-07)


### Bug Fixes

* **server,api:** import git create app, seed default projects ([32ef04d](https://github.com/digitopvn/diginext/commit/32ef04db36e7000bf5684f35c305656ff4d701d4))
* **server,cli:** git provider api should use correct org name ([1c5435d](https://github.com/digitopvn/diginext/commit/1c5435d62bc7e25a980ecc8cfc86b7e9153926c4))

# [3.18.0-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.3...v3.18.0-prerelease.4) (2023-07-06)


### Bug Fixes

* **cli,git:** add debug select git provider ([8266c42](https://github.com/digitopvn/diginext/commit/8266c4221246636db2624b14fcd550873ef317fa))
* **cli:** add debug mode to utils current git ([bdc713c](https://github.com/digitopvn/diginext/commit/bdc713c5b4a0d3f8ddd1b4c2f8deecd25402ead9))
* **cli:** create app, add debug git providerr ([859a576](https://github.com/digitopvn/diginext/commit/859a576e6c314da524e7783a07c0e44bd029a7f0))
* **server,api:** issue of generating swagger json ([f2124c3](https://github.com/digitopvn/diginext/commit/f2124c3c605dbd0498d4c2c26a05e1d2acc83b20))


### Features

* **server,api:** import app from git, deploy from git ([d1a3d5e](https://github.com/digitopvn/diginext/commit/d1a3d5e84a34c9eb0d78bbe8718c272ee30e0b39))

# [3.18.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.2...v3.18.0-prerelease.3) (2023-07-06)


### Bug Fixes

* **cli:** src/plugins/utils.ts cloneGitRepo depth=1 ([917417b](https://github.com/digitopvn/diginext/commit/917417b9f54c3d55c5c99b2c488bb84a42049d88))
* **cli:** updateBranchProtection ([6c91a1e](https://github.com/digitopvn/diginext/commit/6c91a1eda89d91495146b8547a9612a8a000bc49))
* **cli:** updateBranchProtection ([20c600b](https://github.com/digitopvn/diginext/commit/20c600bc11cc2f3e8d2aaca3c6a0b4f92f94b9c0))


### Features

* **cli:** initalizeAndCreateDefaultBranches > Update main branch protection ([7e01852](https://github.com/digitopvn/diginext/commit/7e01852805c0b9d0bbd249e9c7353f484b0ccf78))

# [3.18.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.18.0-prerelease.1...v3.18.0-prerelease.2) (2023-07-06)


### Bug Fixes

* **server,api:** capture screenshot of release ([d8ba8a7](https://github.com/digitopvn/diginext/commit/d8ba8a7ee26ff4094a929ccbfe647c632be39161))
* **server,api:** only mask info when share credential is off ([1da3a55](https://github.com/digitopvn/diginext/commit/1da3a5577cd9b51b3b31bd4afb3a9dba20489054))
* **server,cli:** role update restriction, cluster cli connect ([54b0aae](https://github.com/digitopvn/diginext/commit/54b0aae418254d961d25a5725d2ddde1bf9098a6))
* **server,cli:** role update restriction, cluster cli connect ([#281](https://github.com/digitopvn/diginext/issues/281)) ([ef42a3f](https://github.com/digitopvn/diginext/commit/ef42a3fa1b05b71dd5810b0754f58969738e372e))

# [3.18.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.17.0...v3.18.0-prerelease.1) (2023-07-05)


### Bug Fixes

* **cli:** templates/nextjs/ts/0.1/components/three.txt ([38b639a](https://github.com/digitopvn/diginext/commit/38b639a0c3f90b260b17eed1dae5791e729cfcfc))


### Features

* **server:** revert scroll dir build logs, db backup list ([1e8ec81](https://github.com/digitopvn/diginext/commit/1e8ec81da6afcf0cc92aa1ad36dc8b62a64fa947))

# [3.17.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.17.0-prerelease.1...v3.17.0-prerelease.2) (2023-07-05)


### Features

* **server,api:** dashboard, stats, fix swagger.json ([6362d24](https://github.com/digitopvn/diginext/commit/6362d2421ec4d3ee9cede6929c7466a381610890))
* **server,api:** dashboard, stats, fix swagger.json ([#276](https://github.com/digitopvn/diginext/issues/276)) ([44f10c5](https://github.com/digitopvn/diginext/commit/44f10c5e48b4d8c6489b8bf69fa4666c395aad27))
* **server:** revert scroll dir build logs, db backup list ([1e8ec81](https://github.com/digitopvn/diginext/commit/1e8ec81da6afcf0cc92aa1ad36dc8b62a64fa947))

# [3.17.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.8...v3.17.0-prerelease.1) (2023-07-04)


### Features

* **server,api:** dashboard, stats, fix swagger.json ([6362d24](https://github.com/digitopvn/diginext/commit/6362d2421ec4d3ee9cede6929c7466a381610890))
* **server,api:** dashboard, stats, fix swagger.json ([#276](https://github.com/digitopvn/diginext/issues/276)) ([44f10c5](https://github.com/digitopvn/diginext/commit/44f10c5e48b4d8c6489b8bf69fa4666c395aad27))

## [3.16.2-prerelease.8](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.7...v3.16.2-prerelease.8) (2023-07-04)


### Bug Fixes

* **auth:** refect stale profile ([fc969e2](https://github.com/digitopvn/diginext/commit/fc969e243722594e4a650b5d5f6ec062b85f86be))
* **database:** create backup with status ([fc0e697](https://github.com/digitopvn/diginext/commit/fc0e697239ca3129d57498fcc17f94ab5af091d1))

## [3.16.2-prerelease.7](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.6...v3.16.2-prerelease.7) (2023-07-04)


### Bug Fixes

* **auth:** console log ([2077e74](https://github.com/digitopvn/diginext/commit/2077e74c77f943aa979b75fc74e5e64ab5b80997))
* **auth:** console log ([#274](https://github.com/digitopvn/diginext/issues/274)) ([3ecc609](https://github.com/digitopvn/diginext/commit/3ecc609cedb5ae8d70c115559325373813a4d514))

## [3.16.2-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.5...v3.16.2-prerelease.6) (2023-07-04)


### Bug Fixes

* **auth:** check cookie ([3a4e74a](https://github.com/digitopvn/diginext/commit/3a4e74a1c171bf84ba8ba516804a8c8cbb25dfdd))
* **auth:** check cookie ([#273](https://github.com/digitopvn/diginext/issues/273)) ([beb5eaa](https://github.com/digitopvn/diginext/commit/beb5eaa831e46caf3ebfab7916cd893d49395f2e))

## [3.16.2-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.4...v3.16.2-prerelease.5) (2023-07-04)


### Bug Fixes

* **auth:** remove hashtag when redirect ([18de516](https://github.com/digitopvn/diginext/commit/18de51603da3d402b739f367601df736cbf6943b))
* **auth:** remove hashtag when redirect ([#272](https://github.com/digitopvn/diginext/issues/272)) ([e35834b](https://github.com/digitopvn/diginext/commit/e35834b2c9e3a9405c93c8631b8dfeed7726bdf7))

## [3.16.2-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.3...v3.16.2-prerelease.4) (2023-07-04)


### Bug Fixes

* **server,auth:** try another way to redirect login ([da675c0](https://github.com/digitopvn/diginext/commit/da675c0b84f7791576ba1cd8fc9b1301c861f1ff))
* **server,auth:** try another way to redirect login ([#271](https://github.com/digitopvn/diginext/issues/271)) ([bd68adb](https://github.com/digitopvn/diginext/commit/bd68adb655875d3147f04b9e32245bfa97c3d9e6))

## [3.16.2-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.2...v3.16.2-prerelease.3) (2023-07-04)


### Bug Fixes

* **auith:** redirect login ([1c7ab60](https://github.com/digitopvn/diginext/commit/1c7ab60daadec62786d096951ee24efdb3eeffde))

## [3.16.2-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.16.2-prerelease.1...v3.16.2-prerelease.2) (2023-07-04)


### Bug Fixes

* **server,auth:** rm alert token ([6529a30](https://github.com/digitopvn/diginext/commit/6529a3054fa1f2c344cce22bc0c36c46883f646f))
* **server,auth:** rm alert token ([#269](https://github.com/digitopvn/diginext/issues/269)) ([24a8fb0](https://github.com/digitopvn/diginext/commit/24a8fb02f9702180f689114def96d1695e45365d))

## [3.16.2-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.16.1...v3.16.2-prerelease.1) (2023-07-04)


### Bug Fixes

* **server,auth:** still unable to login on ios ([13afbfa](https://github.com/digitopvn/diginext/commit/13afbfacd8b39b4f268d6ccffde2f8ec16df9882))
* **server,auth:** trim hashtag at the end of access token ([#264](https://github.com/digitopvn/diginext/issues/264)) ([e5277a6](https://github.com/digitopvn/diginext/commit/e5277a6595334b53655bda98a3bf8a36203774fe))

## [3.16.1](https://github.com/digitopvn/diginext/compare/v3.16.0...v3.16.1) (2023-07-04)


### Bug Fixes

* **server,auth:** trim hashtag at the end of access token ([fb325e7](https://github.com/digitopvn/diginext/commit/fb325e7ba9b77fa071764f5f3e31f09fb467289a))
* **server,login ios:** try the best to get access_token ([b00024f](https://github.com/digitopvn/diginext/commit/b00024f522467449b5e5309f0714435637739e9a))
* **server,login ios:** try the best to get access_token ([#263](https://github.com/digitopvn/diginext/issues/263)) ([c2383d3](https://github.com/digitopvn/diginext/commit/c2383d38a4e8e2e5d8e8d31d782b21c920c9ac3e))

# [3.16.0](https://github.com/digitopvn/diginext/compare/v3.15.1...v3.16.0) (2023-07-03)


### Bug Fixes

* **server,api:** active workspace should not return empty array ([b6b20ca](https://github.com/digitopvn/diginext/commit/b6b20ca1f96eac71a73eff4fd252a8ef78291f56))
* **server,login,logout:** correct redirect url when login on mobile ([3fecf44](https://github.com/digitopvn/diginext/commit/3fecf4472e61bb5ccdd2bde6d2f6884fc3f19105))
* **server,login,logout:** correct redirect url when login on mobile ([#259](https://github.com/digitopvn/diginext/issues/259)) ([f4f9a2a](https://github.com/digitopvn/diginext/commit/f4f9a2a8ab363cb321b55517317cb39416acf407))
* **server:** unset active role and active workspace on logout ([ac1b6c8](https://github.com/digitopvn/diginext/commit/ac1b6c8a32a1a0c7772bb68c36f54dbeae6f5bc7))


### Features

* **client:** new command [np | newpage]: generate new pages nextjs ([e7ec0d3](https://github.com/digitopvn/diginext/commit/e7ec0d37ba2044e8d911c796806ab0aab1f14d61))

# [3.16.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.16.0-prerelease.1...v3.16.0-prerelease.2) (2023-07-03)


### Bug Fixes

* **server,api:** active workspace should not return empty array ([b6b20ca](https://github.com/digitopvn/diginext/commit/b6b20ca1f96eac71a73eff4fd252a8ef78291f56))
* **server,login,logout:** correct redirect url when login on mobile ([3fecf44](https://github.com/digitopvn/diginext/commit/3fecf4472e61bb5ccdd2bde6d2f6884fc3f19105))
* **server,login,logout:** correct redirect url when login on mobile ([#259](https://github.com/digitopvn/diginext/issues/259)) ([f4f9a2a](https://github.com/digitopvn/diginext/commit/f4f9a2a8ab363cb321b55517317cb39416acf407))
* **server:** unset active role and active workspace on logout ([ac1b6c8](https://github.com/digitopvn/diginext/commit/ac1b6c8a32a1a0c7772bb68c36f54dbeae6f5bc7))

# [3.16.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.15.1...v3.16.0-prerelease.1) (2023-07-03)


### Features

* **client:** new command [np | newpage]: generate new pages nextjs ([e7ec0d3](https://github.com/digitopvn/diginext/commit/e7ec0d37ba2044e8d911c796806ab0aab1f14d61))

## [3.15.1](https://github.com/digitopvn/diginext/compare/v3.15.0...v3.15.1) (2023-07-03)


### Bug Fixes

* **dashboard login:** unable to login and select workspace on mobile ([d2031dc](https://github.com/digitopvn/diginext/commit/d2031dce35a2d38bb633d696c58d4bec6781bc01))
* **migration:** missing admin roles route to path ([f2d56ea](https://github.com/digitopvn/diginext/commit/f2d56ea9b4d255d0f4ab20a2fa3da1d6c52f2848))

## [3.15.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.15.0...v3.15.1-prerelease.1) (2023-07-02)


### Bug Fixes

* **dashboard login:** unable to login and select workspace on mobile ([d2031dc](https://github.com/digitopvn/diginext/commit/d2031dce35a2d38bb633d696c58d4bec6781bc01))
* **migration:** missing admin roles route to path ([f2d56ea](https://github.com/digitopvn/diginext/commit/f2d56ea9b4d255d0f4ab20a2fa3da1d6c52f2848))

# [3.15.0](https://github.com/digitopvn/diginext/compare/v3.14.3...v3.15.0) (2023-07-01)


### Bug Fixes

* **admin:** correct url to diginext official website ([0ac643f](https://github.com/digitopvn/diginext/commit/0ac643fc8012b1e7c2c7e1d180fea4c981c133e8))
* **admin:** more responsive support for mobile screen ([a125412](https://github.com/digitopvn/diginext/commit/a1254126e561abbcd403cb206ba26b6ccf66bc2d))
* **bitbucket repo:** issue of creating new bitbucket repo ([b54daf5](https://github.com/digitopvn/diginext/commit/b54daf549e1e281e3ebaa8d7b1b56b449422e329))
* **bitbucket:** catch error when fetch api of bitbucket ([6f721fe](https://github.com/digitopvn/diginext/commit/6f721feaa25860cd6b55fc753c4fb5c5b059bea7))
* **build,deploy:** add cli version for tracking ([4502816](https://github.com/digitopvn/diginext/commit/4502816afb7497e85be40147b9ad26e59803d69b))
* **builds:** ensure workspace string to object id ([1fe91c4](https://github.com/digitopvn/diginext/commit/1fe91c49adefae3fba2c90f5fd80eeb9f5ea8533))
* **clean up:** build docker base and deploy prerelease ([8a22232](https://github.com/digitopvn/diginext/commit/8a22232b6441dbcb7516ad9f5c978997c664503e))
* **cli,server:** issue of resolving dockerfile ([6c2a561](https://github.com/digitopvn/diginext/commit/6c2a561e2dcbaf36e3a9b9d3232cec598016b829))
* **cli,server:** update git provider name for apps if it's not existed ([3ce8f40](https://github.com/digitopvn/diginext/commit/3ce8f40612a5af2c4f5ec69f2cf211fccd9ae77f))
* **cli:** correct notify cli version update ([c39f246](https://github.com/digitopvn/diginext/commit/c39f246b26f569f7ef9bf6280ae0f91f4db19192))
* **cli:** correct workspace dx_key when ask for domain ([76bdc86](https://github.com/digitopvn/diginext/commit/76bdc86c6ebc0272efb3ae241f3a4f5c99b4c551))
* **cli:** empty arr of create select project,app when deploying ([0eedfb4](https://github.com/digitopvn/diginext/commit/0eedfb47b95465c677fb4519f6726acb88da9474))
* **client:** askForProjectAndApp DB.find by git.repoSSH instead git.repoURL ([687fd8f](https://github.com/digitopvn/diginext/commit/687fd8fedae807b37c1a7f1c315d744d415712d1))
* **client:** change command name 'clone' to 'transfer' or 'tf' ([26b9aab](https://github.com/digitopvn/diginext/commit/26b9aab046dc7a37c4d572be2175d36ba9da7e4b))
* **client:** change fn name clone -> transfer | fix duplicate git create ([139614c](https://github.com/digitopvn/diginext/commit/139614c8eea799223ed7084b4fffb25d269f5dca))
* **cli:** fallback dx.json support for find project and app ([d9e87f4](https://github.com/digitopvn/diginext/commit/d9e87f422f20c0ac52a135e47c91d84df1d363aa))
* **cli:** improve --debug flag ([5c1245a](https://github.com/digitopvn/diginext/commit/5c1245aad0a4b186c62e696d5c9a47d187e36993))
* **cli:** improve kubectl command set image, port, secret ([d4a39fd](https://github.com/digitopvn/diginext/commit/d4a39fdd07168ef2086a6f01fd6b02d770568392))
* **cli:** issue github does not provide shell access ([997506b](https://github.com/digitopvn/diginext/commit/997506bf4b3186d2dde2ac33dc60196e7cdbf36b))
* **cli:** kb set deploy - cannot access image url before init ([2879096](https://github.com/digitopvn/diginext/commit/28790967a163c012e80be5a84e377977757646cb))
* **cli:** refactor build command to request server to build image ([94e3328](https://github.com/digitopvn/diginext/commit/94e3328decd6b3186a185d2dc59b2597e4486454))
* **cli:** show update warning only when there are breaking changes ([af20042](https://github.com/digitopvn/diginext/commit/af200427ce3827bdc8e0e976bb7bb30f8d80108a))
* **cli:** stop request deploy when deploy info undefined ([cde8d2e](https://github.com/digitopvn/diginext/commit/cde8d2e9b360d607de2dac64ee3d3caeb01fd6be))
* **dashboard:** correct create database api ([74cd9b9](https://github.com/digitopvn/diginext/commit/74cd9b909d314bd0e45e62874f27ad7e0b449cee))
* **dashboard:** correct database api url ([f6bf3ec](https://github.com/digitopvn/diginext/commit/f6bf3ecd51c2599b9df5a0100c6090dcc909f2b7))
* **dashboard:** optimize responsive of drawers ([a8abc59](https://github.com/digitopvn/diginext/commit/a8abc59770600a45ba39df9819a4ca6e1c2b8774))
* **dashboard:** optimize responsive table for all pages ([6d70b8f](https://github.com/digitopvn/diginext/commit/6d70b8fbfe0a1cd56a66a86611ebf84ba4a1990b))
* **docker base:** enable chromium env for puppeteer to work ([b76f46d](https://github.com/digitopvn/diginext/commit/b76f46d06ea12784d60a356ce6d624f06a0e7430))
* **dockerfile:** update base image 5 ([8ffc9ff](https://github.com/digitopvn/diginext/commit/8ffc9ff35445311ce4e637d9559e59b2d2ca2998))
* flow git push to main ([85dc26b](https://github.com/digitopvn/diginext/commit/85dc26b254b55da3a152d6da842e23f92d1c482b))
* **ga:** deploy condition fix ([adbf6a7](https://github.com/digitopvn/diginext/commit/adbf6a7641bdbe6b1606819e84e3bdd85f170eb9))
* **git provider:** add api connect github and bitbucket ([0fafa3d](https://github.com/digitopvn/diginext/commit/0fafa3d815ea16df1f09685ef3c60329dce0b765))
* **github actions:** combine docker release with main release flow ([58dc65c](https://github.com/digitopvn/diginext/commit/58dc65cf6a4e97839dec649642dbeeb7d9ce71a4))
* **github actions:** deploy topgroup-v2 ([8f728cf](https://github.com/digitopvn/diginext/commit/8f728cfe5f88c5b9b81fa5a0eace30fbe9a26ad1))
* **github actions:** run next job on succesful jobs ([f023a70](https://github.com/digitopvn/diginext/commit/f023a70e366d9f1d8724bb8d793f984b173d950c))
* **github:** create github repo when create new or init app ([91c55e0](https://github.com/digitopvn/diginext/commit/91c55e0e0c16e6b7e5f59dcb82a8b0f7cc0f7126))
* **new-app:** skip check verbose git | display progress default 0 ([cbedf49](https://github.com/digitopvn/diginext/commit/cbedf49052e0e38794a03686e505bc09979f7c69))
* **package.json:** reorder semantic release plugins ([51c46c7](https://github.com/digitopvn/diginext/commit/51c46c7a933f6925a7a15ddf9940ae986fcf1cad))
* **podman:** login issue with gcr.io ([62b6ee6](https://github.com/digitopvn/diginext/commit/62b6ee6e099310d48e28e7b5065478f9121452ca))
* **release flow:** skip ci when update pkg ver ([a55cdaf](https://github.com/digitopvn/diginext/commit/a55cdafe6e4914239d146ee874b2653854af2dd1))
* **request-deploy:** add more info to debug request deploy ([dc44666](https://github.com/digitopvn/diginext/commit/dc446669f8e20969b53211fe353d284ed2f61383))
* restore dev:nodemon ([2aad221](https://github.com/digitopvn/diginext/commit/2aad221180f5984d2c44b49ff86e016b08538b4d))
* roll back db when transfer error ([74c0a33](https://github.com/digitopvn/diginext/commit/74c0a3383b5b0876f8fc826ffbab2bd94437250b))
* **server-info:** skip docker or podman ver if not available ([584a608](https://github.com/digitopvn/diginext/commit/584a608029e974c2f7a1b06976339eed53058c5e))
* **server, cli:** update git info while deploying app ([56393d3](https://github.com/digitopvn/diginext/commit/56393d3cd8127bba972dc45048df2e1d1cd23ed9))
* **server,admin:** add env vars, deployment yaml drawer ([d45d0a8](https://github.com/digitopvn/diginext/commit/d45d0a8a898a426ded3fc9e7524f0e1fe98634b9))
* **server,api:** add --build-arg to build process ([2ef593b](https://github.com/digitopvn/diginext/commit/2ef593bd5f149b5519f8347a76e5041e5a37f2fe))
* **server,api:** add build number to create,update deploy environment api ([cf9c32a](https://github.com/digitopvn/diginext/commit/cf9c32a1b715a533b847a94452d5e673d27c4877))
* **server,api:** add create release from app api ([3da4e37](https://github.com/digitopvn/diginext/commit/3da4e37c278f99bfc92bd54ca60c1b8c2d32882b))
* **server,api:** add missing masked fields ([0c606d0](https://github.com/digitopvn/diginext/commit/0c606d0d3e50ad5a598f14aa6bcfbf214f002faa))
* **server,api:** add swagger doc comments ([54d1017](https://github.com/digitopvn/diginext/commit/54d10170d8eb8f58166f41a8e6de444f76e04bd0))
* **server,api:** correct build base on number,app,project when releasing ([6c7a7e7](https://github.com/digitopvn/diginext/commit/6c7a7e7070355728c3d0402c9ef81ded785f8bb5))
* **server,api:** error 504 when create deploy environment ([800a42d](https://github.com/digitopvn/diginext/commit/800a42db5b75c744c22cfc429cd760551bada053))
* **server,api:** gitprovider connect personal github account ([0aa156f](https://github.com/digitopvn/diginext/commit/0aa156f4b327ad593e76d54f333ea61ea52fcb31))
* **server,api:** issue of x-api-key not working ([dfddbd5](https://github.com/digitopvn/diginext/commit/dfddbd5bf8cf5eb74d37913b0d1bfcc06ed73b7f))
* **server,api:** provider not found when creating git repo ([6a2de66](https://github.com/digitopvn/diginext/commit/6a2de66710c9c3a7ab2ffe1b35fbce43f45a6b5d))
* **server,api:** show correct screenshot to deploy env ([2674961](https://github.com/digitopvn/diginext/commit/2674961eceeb9cbb3abe642e1347ce6b06441012))
* **server,api:** skip checking namespace when create deploy environment ([54d95f7](https://github.com/digitopvn/diginext/commit/54d95f7a9becd47e741bbc1754ac3ec649e6ec43))
* **server,api:** switch to mongosh instead of mongo command ([6b85da5](https://github.com/digitopvn/diginext/commit/6b85da503f386f7ef36701ada79fc60f2dbdbbf3))
* **server,app controller:** re-generate yaml after updating env vars ([f623b4a](https://github.com/digitopvn/diginext/commit/f623b4aecc6242a972e4cea32362d84e4a9aad14))
* **server,cli:** compress db backups, execa 6.1.1, insert database ([8231833](https://github.com/digitopvn/diginext/commit/823183327205e8b8a24e76f8f4f54141c9ac49cd))
* **server,cli:** flag --create when dx new, dx key in workspace setting ([afb7f8d](https://github.com/digitopvn/diginext/commit/afb7f8d416619423e44638a660f47ee93e299cfb))
* **server,cli:** generate ssh key with no passwords ([0f37631](https://github.com/digitopvn/diginext/commit/0f376312125f18c25961ce0b8e1bbd52e9295270))
* **server,cli:** generate ssh with no pass ([6cec310](https://github.com/digitopvn/diginext/commit/6cec310f6414781a90d7e7013e23291370ea67aa))
* **server,cli:** improve security by masking sensitive credentials ([5ba3552](https://github.com/digitopvn/diginext/commit/5ba35527d68cdfa8e1388aa042499c32d913a56b))
* **server,cli:** issue of deleting env vars when update app config ([2cee986](https://github.com/digitopvn/diginext/commit/2cee986a6e6ac31afd296bfa3b25abb7b6fbe938))
* **server,cli:** public field,db module,refactor roles,authorization,migration ([1cdb4e0](https://github.com/digitopvn/diginext/commit/1cdb4e0d3912668f80f2bff901499f3170473306))
* **server,cli:** remove logs contains dx.json ([6edd48d](https://github.com/digitopvn/diginext/commit/6edd48dae50814bf31d8783fa7b95ddca2e11cd1))
* **server,cli:** skip select framework, build logs, auth registry on push ([059827b](https://github.com/digitopvn/diginext/commit/059827bad6e1000bafb69f0729a60b0b3a866fbc))
* **server,dashboard:** add loading spin to all list pages ([b132824](https://github.com/digitopvn/diginext/commit/b132824bf0cbf4f80b70494bcd9d110a938d3886))
* **server,dashboard:** create edit docker hub registry ([06ce0f1](https://github.com/digitopvn/diginext/commit/06ce0f1f9b20585b0a547902bf290115e5735fdd))
* **server,dockerfile:** define unqualified-search registries for podman ([2cbbca3](https://github.com/digitopvn/diginext/commit/2cbbca3b3324018cf6298d6b95d1588c8605aad7))
* **server,env vars:** fix env var can be empty ([96d12ac](https://github.com/digitopvn/diginext/commit/96d12aca27891736f97a3163c977712dbcf2d33e))
* **server,generate deploy yaml:** env var value can be undefined ([7df0149](https://github.com/digitopvn/diginext/commit/7df014961f3e13e8375f424b94f2197188ffe90b))
* **server,startup script:** add retry method to registry connecting ([47490d6](https://github.com/digitopvn/diginext/commit/47490d616dd4b84a405359c5ab5509ccb488e35a))
* **server,workspace:** delete related data when deleting workspace ([4bd9c9c](https://github.com/digitopvn/diginext/commit/4bd9c9c8b4080ebeb96defc7ae73f039a60c3515))
* **server:** add database backup status ([c5a2e8b](https://github.com/digitopvn/diginext/commit/c5a2e8b62361dd7c4e7439645e616f3599ab27f7))
* **server:** add finally to export pdf and screenshot for optimize ([aa7e91e](https://github.com/digitopvn/diginext/commit/aa7e91e67d852070d1c4b466834ec90e23aebf0a))
* **server:** add podman to clean up cronjob ([20688c4](https://github.com/digitopvn/diginext/commit/20688c403418afaccbb3909aa3186d38f434afcc))
* **server:** add primary ip when seed initial cluster ([c3d5705](https://github.com/digitopvn/diginext/commit/c3d57050e6d63a4e8b8f5a5694a7a7347bd42746))
* **server:** add resource validation in env vars crud ([6edf4c3](https://github.com/digitopvn/diginext/commit/6edf4c33d89bab5cf43ea6403919acbc8b9472cc))
* **server:** app constroller git info is required ([64e26a0](https://github.com/digitopvn/diginext/commit/64e26a028aed412d8fdb2b908c618d465860747c))
* **server:** app service find workloads based on main-app label ([6599b90](https://github.com/digitopvn/diginext/commit/6599b9002164d421f73cc8a2e2dedb8388bc51fd))
* **server:** authenticate registry before building & pushing image ([cc9c70c](https://github.com/digitopvn/diginext/commit/cc9c70cf1f540b4f3402d059a8b48a8d4aa0a482))
* **server:** can't update app config ([b1b239b](https://github.com/digitopvn/diginext/commit/b1b239b44b79b073be5de3a95f883b06d816a77e))
* **server:** cannot verify git provider after connecting ([55b7533](https://github.com/digitopvn/diginext/commit/55b7533b74149144e610ca05557b7f2eb7edab35))
* **server:** change clean up cronjob to 7 days ([742b3a6](https://github.com/digitopvn/diginext/commit/742b3a6b5f389799df90f7483b67aaca15b9bd14))
* **server:** check existing domain when add new ([8b33fe0](https://github.com/digitopvn/diginext/commit/8b33fe0fe64106f5bd7e7f676b27a47e810ca4a6))
* **server:** clean up prerelease, fallback support deperecated main-app ([06bfab9](https://github.com/digitopvn/diginext/commit/06bfab9fbadc64634b9656a3c44555815aa6e5ed))
* **server:** close db connection when app is terminated ([23caddd](https://github.com/digitopvn/diginext/commit/23caddd5758868f0a2a02eb7f6d81a044c2451e6))
* **server:** default to share resource credential ([790dbcc](https://github.com/digitopvn/diginext/commit/790dbcc03052689de4228d5dd67a6533a94eb074))
* **server:** delete project issue ([86bb52a](https://github.com/digitopvn/diginext/commit/86bb52a421fecd616cbc0a524cfec37e5c0e159e))
* **server:** disable body in activity logs to save disk usage ([686b22b](https://github.com/digitopvn/diginext/commit/686b22b9ed20455f5429eaf25dfb69d653f44388))
* **server:** generate incorrect resource quotas by size ([2bce8a8](https://github.com/digitopvn/diginext/commit/2bce8a828ad67a726ae56cf4c94acd6a21520b19))
* **server:** generate yaml not redirect when ssl issuer is none ([8ce2f40](https://github.com/digitopvn/diginext/commit/8ce2f40e39fa7213d3945ddc7d3e63e930c126da))
* **server:** generate yaml, main app name is app slug ([29a64a6](https://github.com/digitopvn/diginext/commit/29a64a67a539c0435fe80cd8ab5c0d1273375d9a))
* **server:** generate yaml, main app name is project slug and app slug ([3d6b231](https://github.com/digitopvn/diginext/commit/3d6b23165ea1596d44d3bfb39542a3559b01aacc))
* **server:** incorrect app deploy environment status ([4241b6e](https://github.com/digitopvn/diginext/commit/4241b6e1d00757634b87e037a713c24ef6ebf105))
* **server:** incorrect main-app-name,set env vars,deploy ([6c65645](https://github.com/digitopvn/diginext/commit/6c65645ab6ed37cab03abc4fdf41dac0889e6ee5))
* **server:** issue cluster not found when add domain ([d9198b9](https://github.com/digitopvn/diginext/commit/d9198b93315b433b5568718fe0503cefa69f9c1f))
* **server:** issue of checking ready deployment ([c2f1b42](https://github.com/digitopvn/diginext/commit/c2f1b4214437082484f3882345c5981cb832f60d))
* **server:** issue of not update new domains ([e92cedc](https://github.com/digitopvn/diginext/commit/e92cedc02a162d44a6adcf2f01db7e7e1aa9fd86))
* **server:** issue of project name validation when add domain ([b1b6267](https://github.com/digitopvn/diginext/commit/b1b6267be30085aa5b9aca83cbc3db5c521b6071))
* **server:** issue of roll out still remain prerelease env vars ([1f5bfbe](https://github.com/digitopvn/diginext/commit/1f5bfbe9e1b05b4af0669ca876d9da492a13c495))
* **server:** long deployment name, container error logs ([ccd48f8](https://github.com/digitopvn/diginext/commit/ccd48f8ec464fb33a7bb624d956b2b302109de4d))
* **server:** podman container.conf log to file ([efeb289](https://github.com/digitopvn/diginext/commit/efeb28933007981db7a7ccf957dbc036e844b4f2))
* **server:** print env vars when server start up ([4e73841](https://github.com/digitopvn/diginext/commit/4e73841d473d50fdedf6c1da999faa71ecef6941))
* **server:** remove namespace in kube apply func ([135d281](https://github.com/digitopvn/diginext/commit/135d28141c77428704bc95eb9a283840fb7c4a70))
* **server:** select correct ingress class when generate yaml ([c2c9322](https://github.com/digitopvn/diginext/commit/c2c93223609bafb18695c9ad3da1fa9839efe2d3))
* **server:** show container logs when deploy failed ([71955f4](https://github.com/digitopvn/diginext/commit/71955f42e0b033411b567af228e5c77c2213bfdb))
* **server:** try catch build and deploy ([cae9788](https://github.com/digitopvn/diginext/commit/cae9788b39a970bfdfe10e52a6096285958cfb41))
* **server:** try catch update build status ([76b93c7](https://github.com/digitopvn/diginext/commit/76b93c77bc804381e5a1a2ee51fd4d0b36729173))
* **server:** try to get container log when deploy failed ([0071e46](https://github.com/digitopvn/diginext/commit/0071e464b1bb43bd8e9bdb1ce98947dc308ba7ad))
* **server:** unable to read build number to generate deploy yaml ([f3d6098](https://github.com/digitopvn/diginext/commit/f3d6098242496ada09031ea2b71d4d017996269e))
* **server:** update build number to deploy env when update status ([c228f34](https://github.com/digitopvn/diginext/commit/c228f34c36433b2f77c9396328546bf271f4231d))
* **server:** update resource quota scale matrix ([3454858](https://github.com/digitopvn/diginext/commit/34548587fb1361b7cb89f05cf6298eb4ec8cc5c8))
* **server:** update status latest build undefined ([aca37d4](https://github.com/digitopvn/diginext/commit/aca37d4dd27f6a27ec4538e34fb812becd8b93cd))
* **server:** when rollout skip checking ingress if ssl is none ([ec52590](https://github.com/digitopvn/diginext/commit/ec525900c15c7732b913642f9b7c6cff038fd0f0))
* **startup script:** build docker base, catch error of startup scripts ([c48a790](https://github.com/digitopvn/diginext/commit/c48a79071c6645a64a719c9b715a4a85eba69474))
* **user,service_account,api_key:** drop unique index in username field ([d22ba26](https://github.com/digitopvn/diginext/commit/d22ba26a7f9617318ea91b52b9d764c597cf9e4e))
* **write dx config:** ignore package.json if not existed ([4194df9](https://github.com/digitopvn/diginext/commit/4194df92a223850aaf555f5d71e1d4151af483a1))


### Features

* **admin:** connect and list connected git providers ([30dea79](https://github.com/digitopvn/diginext/commit/30dea7925d786e2ad4bf27193fe5053d4fa35571))
* **client:** clone repo to other provider ([6fc2c22](https://github.com/digitopvn/diginext/commit/6fc2c22789aa695024bf83e05045becbc38fb774))
* **client:** update diginext-utils to 3.0.2 | [cloneRepo] checking private key or secret env ([f194e12](https://github.com/digitopvn/diginext/commit/f194e12553f68e8b417ffef521f745a089850ed8))
* **client:** working on clone repo from bitbucket to github ([107201d](https://github.com/digitopvn/diginext/commit/107201d2562858fa1604ce578bd4982ff27d75d1))
* **dashboard:** manage cronjob, database, backup ([6b11975](https://github.com/digitopvn/diginext/commit/6b11975a79bc439197c3caae5d0e5ff69db15681))
* **server,admin:** modify deploy environment of app ([17d8bae](https://github.com/digitopvn/diginext/commit/17d8bae4b14dd4b5d1fade5785bf0e73f9bb8f09))
* **server,admin:** partial support mobile screen ([04a9fe4](https://github.com/digitopvn/diginext/commit/04a9fe4b5b45004e7e9b0dbb5e34759c474cf806))
* **server,admin:** view application deploy environment logs ([7b1134f](https://github.com/digitopvn/diginext/commit/7b1134f2251e06fe4c4132b097478480dfff433b))
* **server,api,cli:** add cloud database healthz, backup, restore ([acd762a](https://github.com/digitopvn/diginext/commit/acd762a803603a6e16e913e9696f6b3a617619c4))
* **server,api:** add ingress, deployment, pod, service monitoring ([5a20fd9](https://github.com/digitopvn/diginext/commit/5a20fd9f52d5130873a1ef4216c1fde7e1ce93ee))
* **server,api:** add namespace monitoring page ([2d118d7](https://github.com/digitopvn/diginext/commit/2d118d7b5fa3ed92195298cc6ad98f3ff06ea671))
* **server,api:** check dx key when create workspace,domain ([8c4052f](https://github.com/digitopvn/diginext/commit/8c4052fb19a17e54e062d6c220df65c4f60f7263))
* **server,api:** cronjob create, schedule at, schedule repeat, cancel job ([37770de](https://github.com/digitopvn/diginext/commit/37770ded16b072964fc4f6fb374867f5e3837e6a))
* **server,api:** list all nodes each cluster ([5e95a78](https://github.com/digitopvn/diginext/commit/5e95a785c7bdc90be4828ec296930efd4f9954e6))
* **server,api:** monitor k8s cluster feature ([46a6e68](https://github.com/digitopvn/diginext/commit/46a6e6866ecf405d50c29076036a7c12b160747c))
* **server,cli:** add microk8s installation script ([d56d315](https://github.com/digitopvn/diginext/commit/d56d3158e4181795c7a1fab783e625cf2481cc94))
* **server,cli:** always update image url, add build list page ([bf86f2b](https://github.com/digitopvn/diginext/commit/bf86f2b318421cdd2b19399478bf2383d1974841))
* **server,cli:** issue of checking quota limit of workspace ([4e9f20b](https://github.com/digitopvn/diginext/commit/4e9f20bc5f281764596d4ef13cc4304c8a158458))
* **server:** add domains to production environment ([a10142a](https://github.com/digitopvn/diginext/commit/a10142aa57b949408449f018f8e9034c686a3e65))
* **server:** add export pdf, capture screenshot webpage ([2872060](https://github.com/digitopvn/diginext/commit/287206028b06cbef88b098bf894562cd60409cb2))
* **server:** add new domain to app deploy environment ([7009c7b](https://github.com/digitopvn/diginext/commit/7009c7bba46e542fca98270fb81ced2eec0afc00))
* **server:** app, deploy env - add health status and ready count ([8373b29](https://github.com/digitopvn/diginext/commit/8373b29fe7b2f823670e0c72e472d1084bca1a3a))
* **server:** capture screenshot when build and deploy ([67e9e22](https://github.com/digitopvn/diginext/commit/67e9e229bd3ec1e36767d34afe1fc3245d05fcb6))
* **server:** implement basic auth with register and password login ([098e2e0](https://github.com/digitopvn/diginext/commit/098e2e0cfc370722d5fd855094297429366e5b21))
* **server:** seed initial cluster when create workspace if any ([8d05295](https://github.com/digitopvn/diginext/commit/8d0529559945efa5ce1e263615892f59ed1406e8))


### Performance Improvements

* **client:** choose git provider ([a050809](https://github.com/digitopvn/diginext/commit/a05080955ba5508a71807de9b97d2618362bc0cc))
* **server,api:** improve build and deploy api with error message ([cb6cd82](https://github.com/digitopvn/diginext/commit/cb6cd821b833f204ffb94810e2a5172c04c9ae86))
* **server:** add resources to deployments, pods monitor page ([6831a2c](https://github.com/digitopvn/diginext/commit/6831a2c407af51863830e3d9f1414dd34c5d18a0))
* **server:** delete project faster ([9aa1364](https://github.com/digitopvn/diginext/commit/9aa1364521c12a39ca7dff2be46e68731faceae9))

# [3.15.0-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.15.0-prerelease.3...v3.15.0-prerelease.4) (2023-07-01)


### Bug Fixes

* **server,cli:** public field,db module,refactor roles,authorization,migration ([1cdb4e0](https://github.com/digitopvn/diginext/commit/1cdb4e0d3912668f80f2bff901499f3170473306))

# [3.15.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.15.0-prerelease.2...v3.15.0-prerelease.3) (2023-06-30)


### Bug Fixes

* **client:** askForProjectAndApp DB.find by git.repoSSH instead git.repoURL ([687fd8f](https://github.com/digitopvn/diginext/commit/687fd8fedae807b37c1a7f1c315d744d415712d1))

# [3.15.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.15.0-prerelease.1...v3.15.0-prerelease.2) (2023-06-29)


### Bug Fixes

* **server,api:** gitprovider connect personal github account ([0aa156f](https://github.com/digitopvn/diginext/commit/0aa156f4b327ad593e76d54f333ea61ea52fcb31))

# [3.15.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.14.3...v3.15.0-prerelease.1) (2023-06-28)


### Bug Fixes

* **admin:** correct url to diginext official website ([0ac643f](https://github.com/digitopvn/diginext/commit/0ac643fc8012b1e7c2c7e1d180fea4c981c133e8))
* **admin:** more responsive support for mobile screen ([a125412](https://github.com/digitopvn/diginext/commit/a1254126e561abbcd403cb206ba26b6ccf66bc2d))
* **bitbucket repo:** issue of creating new bitbucket repo ([b54daf5](https://github.com/digitopvn/diginext/commit/b54daf549e1e281e3ebaa8d7b1b56b449422e329))
* **bitbucket:** catch error when fetch api of bitbucket ([6f721fe](https://github.com/digitopvn/diginext/commit/6f721feaa25860cd6b55fc753c4fb5c5b059bea7))
* **build,deploy:** add cli version for tracking ([4502816](https://github.com/digitopvn/diginext/commit/4502816afb7497e85be40147b9ad26e59803d69b))
* **builds:** ensure workspace string to object id ([1fe91c4](https://github.com/digitopvn/diginext/commit/1fe91c49adefae3fba2c90f5fd80eeb9f5ea8533))
* **clean up:** build docker base and deploy prerelease ([8a22232](https://github.com/digitopvn/diginext/commit/8a22232b6441dbcb7516ad9f5c978997c664503e))
* **cli,server:** issue of resolving dockerfile ([6c2a561](https://github.com/digitopvn/diginext/commit/6c2a561e2dcbaf36e3a9b9d3232cec598016b829))
* **cli,server:** update git provider name for apps if it's not existed ([3ce8f40](https://github.com/digitopvn/diginext/commit/3ce8f40612a5af2c4f5ec69f2cf211fccd9ae77f))
* **cli:** correct notify cli version update ([c39f246](https://github.com/digitopvn/diginext/commit/c39f246b26f569f7ef9bf6280ae0f91f4db19192))
* **cli:** correct workspace dx_key when ask for domain ([76bdc86](https://github.com/digitopvn/diginext/commit/76bdc86c6ebc0272efb3ae241f3a4f5c99b4c551))
* **cli:** empty arr of create select project,app when deploying ([0eedfb4](https://github.com/digitopvn/diginext/commit/0eedfb47b95465c677fb4519f6726acb88da9474))
* **client:** change command name 'clone' to 'transfer' or 'tf' ([26b9aab](https://github.com/digitopvn/diginext/commit/26b9aab046dc7a37c4d572be2175d36ba9da7e4b))
* **client:** change fn name clone -> transfer | fix duplicate git create ([139614c](https://github.com/digitopvn/diginext/commit/139614c8eea799223ed7084b4fffb25d269f5dca))
* **cli:** fallback dx.json support for find project and app ([d9e87f4](https://github.com/digitopvn/diginext/commit/d9e87f422f20c0ac52a135e47c91d84df1d363aa))
* **cli:** improve --debug flag ([5c1245a](https://github.com/digitopvn/diginext/commit/5c1245aad0a4b186c62e696d5c9a47d187e36993))
* **cli:** improve kubectl command set image, port, secret ([d4a39fd](https://github.com/digitopvn/diginext/commit/d4a39fdd07168ef2086a6f01fd6b02d770568392))
* **cli:** issue github does not provide shell access ([997506b](https://github.com/digitopvn/diginext/commit/997506bf4b3186d2dde2ac33dc60196e7cdbf36b))
* **cli:** kb set deploy - cannot access image url before init ([2879096](https://github.com/digitopvn/diginext/commit/28790967a163c012e80be5a84e377977757646cb))
* **cli:** refactor build command to request server to build image ([94e3328](https://github.com/digitopvn/diginext/commit/94e3328decd6b3186a185d2dc59b2597e4486454))
* **cli:** show update warning only when there are breaking changes ([af20042](https://github.com/digitopvn/diginext/commit/af200427ce3827bdc8e0e976bb7bb30f8d80108a))
* **cli:** stop request deploy when deploy info undefined ([cde8d2e](https://github.com/digitopvn/diginext/commit/cde8d2e9b360d607de2dac64ee3d3caeb01fd6be))
* **dashboard:** correct create database api ([74cd9b9](https://github.com/digitopvn/diginext/commit/74cd9b909d314bd0e45e62874f27ad7e0b449cee))
* **dashboard:** correct database api url ([f6bf3ec](https://github.com/digitopvn/diginext/commit/f6bf3ecd51c2599b9df5a0100c6090dcc909f2b7))
* **dashboard:** optimize responsive of drawers ([a8abc59](https://github.com/digitopvn/diginext/commit/a8abc59770600a45ba39df9819a4ca6e1c2b8774))
* **dashboard:** optimize responsive table for all pages ([6d70b8f](https://github.com/digitopvn/diginext/commit/6d70b8fbfe0a1cd56a66a86611ebf84ba4a1990b))
* **docker base:** enable chromium env for puppeteer to work ([b76f46d](https://github.com/digitopvn/diginext/commit/b76f46d06ea12784d60a356ce6d624f06a0e7430))
* **dockerfile:** update base image 5 ([8ffc9ff](https://github.com/digitopvn/diginext/commit/8ffc9ff35445311ce4e637d9559e59b2d2ca2998))
* flow git push to main ([85dc26b](https://github.com/digitopvn/diginext/commit/85dc26b254b55da3a152d6da842e23f92d1c482b))
* **ga:** deploy condition fix ([adbf6a7](https://github.com/digitopvn/diginext/commit/adbf6a7641bdbe6b1606819e84e3bdd85f170eb9))
* **git provider:** add api connect github and bitbucket ([0fafa3d](https://github.com/digitopvn/diginext/commit/0fafa3d815ea16df1f09685ef3c60329dce0b765))
* **github actions:** combine docker release with main release flow ([58dc65c](https://github.com/digitopvn/diginext/commit/58dc65cf6a4e97839dec649642dbeeb7d9ce71a4))
* **github actions:** deploy topgroup-v2 ([8f728cf](https://github.com/digitopvn/diginext/commit/8f728cfe5f88c5b9b81fa5a0eace30fbe9a26ad1))
* **github actions:** run next job on succesful jobs ([f023a70](https://github.com/digitopvn/diginext/commit/f023a70e366d9f1d8724bb8d793f984b173d950c))
* **github:** create github repo when create new or init app ([91c55e0](https://github.com/digitopvn/diginext/commit/91c55e0e0c16e6b7e5f59dcb82a8b0f7cc0f7126))
* **new-app:** skip check verbose git | display progress default 0 ([cbedf49](https://github.com/digitopvn/diginext/commit/cbedf49052e0e38794a03686e505bc09979f7c69))
* **package.json:** reorder semantic release plugins ([51c46c7](https://github.com/digitopvn/diginext/commit/51c46c7a933f6925a7a15ddf9940ae986fcf1cad))
* **podman:** login issue with gcr.io ([62b6ee6](https://github.com/digitopvn/diginext/commit/62b6ee6e099310d48e28e7b5065478f9121452ca))
* **release flow:** skip ci when update pkg ver ([a55cdaf](https://github.com/digitopvn/diginext/commit/a55cdafe6e4914239d146ee874b2653854af2dd1))
* **request-deploy:** add more info to debug request deploy ([dc44666](https://github.com/digitopvn/diginext/commit/dc446669f8e20969b53211fe353d284ed2f61383))
* restore dev:nodemon ([2aad221](https://github.com/digitopvn/diginext/commit/2aad221180f5984d2c44b49ff86e016b08538b4d))
* roll back db when transfer error ([74c0a33](https://github.com/digitopvn/diginext/commit/74c0a3383b5b0876f8fc826ffbab2bd94437250b))
* **server-info:** skip docker or podman ver if not available ([584a608](https://github.com/digitopvn/diginext/commit/584a608029e974c2f7a1b06976339eed53058c5e))
* **server, cli:** update git info while deploying app ([56393d3](https://github.com/digitopvn/diginext/commit/56393d3cd8127bba972dc45048df2e1d1cd23ed9))
* **server,admin:** add env vars, deployment yaml drawer ([d45d0a8](https://github.com/digitopvn/diginext/commit/d45d0a8a898a426ded3fc9e7524f0e1fe98634b9))
* **server,api:** add --build-arg to build process ([2ef593b](https://github.com/digitopvn/diginext/commit/2ef593bd5f149b5519f8347a76e5041e5a37f2fe))
* **server,api:** add build number to create,update deploy environment api ([cf9c32a](https://github.com/digitopvn/diginext/commit/cf9c32a1b715a533b847a94452d5e673d27c4877))
* **server,api:** add create release from app api ([3da4e37](https://github.com/digitopvn/diginext/commit/3da4e37c278f99bfc92bd54ca60c1b8c2d32882b))
* **server,api:** add missing masked fields ([0c606d0](https://github.com/digitopvn/diginext/commit/0c606d0d3e50ad5a598f14aa6bcfbf214f002faa))
* **server,api:** add swagger doc comments ([54d1017](https://github.com/digitopvn/diginext/commit/54d10170d8eb8f58166f41a8e6de444f76e04bd0))
* **server,api:** correct build base on number,app,project when releasing ([6c7a7e7](https://github.com/digitopvn/diginext/commit/6c7a7e7070355728c3d0402c9ef81ded785f8bb5))
* **server,api:** error 504 when create deploy environment ([800a42d](https://github.com/digitopvn/diginext/commit/800a42db5b75c744c22cfc429cd760551bada053))
* **server,api:** issue of x-api-key not working ([dfddbd5](https://github.com/digitopvn/diginext/commit/dfddbd5bf8cf5eb74d37913b0d1bfcc06ed73b7f))
* **server,api:** provider not found when creating git repo ([6a2de66](https://github.com/digitopvn/diginext/commit/6a2de66710c9c3a7ab2ffe1b35fbce43f45a6b5d))
* **server,api:** show correct screenshot to deploy env ([2674961](https://github.com/digitopvn/diginext/commit/2674961eceeb9cbb3abe642e1347ce6b06441012))
* **server,api:** skip checking namespace when create deploy environment ([54d95f7](https://github.com/digitopvn/diginext/commit/54d95f7a9becd47e741bbc1754ac3ec649e6ec43))
* **server,api:** switch to mongosh instead of mongo command ([6b85da5](https://github.com/digitopvn/diginext/commit/6b85da503f386f7ef36701ada79fc60f2dbdbbf3))
* **server,app controller:** re-generate yaml after updating env vars ([f623b4a](https://github.com/digitopvn/diginext/commit/f623b4aecc6242a972e4cea32362d84e4a9aad14))
* **server,cli:** compress db backups, execa 6.1.1, insert database ([8231833](https://github.com/digitopvn/diginext/commit/823183327205e8b8a24e76f8f4f54141c9ac49cd))
* **server,cli:** flag --create when dx new, dx key in workspace setting ([afb7f8d](https://github.com/digitopvn/diginext/commit/afb7f8d416619423e44638a660f47ee93e299cfb))
* **server,cli:** generate ssh key with no passwords ([0f37631](https://github.com/digitopvn/diginext/commit/0f376312125f18c25961ce0b8e1bbd52e9295270))
* **server,cli:** generate ssh with no pass ([6cec310](https://github.com/digitopvn/diginext/commit/6cec310f6414781a90d7e7013e23291370ea67aa))
* **server,cli:** improve security by masking sensitive credentials ([5ba3552](https://github.com/digitopvn/diginext/commit/5ba35527d68cdfa8e1388aa042499c32d913a56b))
* **server,cli:** issue of deleting env vars when update app config ([2cee986](https://github.com/digitopvn/diginext/commit/2cee986a6e6ac31afd296bfa3b25abb7b6fbe938))
* **server,cli:** remove logs contains dx.json ([6edd48d](https://github.com/digitopvn/diginext/commit/6edd48dae50814bf31d8783fa7b95ddca2e11cd1))
* **server,cli:** skip select framework, build logs, auth registry on push ([059827b](https://github.com/digitopvn/diginext/commit/059827bad6e1000bafb69f0729a60b0b3a866fbc))
* **server,dashboard:** add loading spin to all list pages ([b132824](https://github.com/digitopvn/diginext/commit/b132824bf0cbf4f80b70494bcd9d110a938d3886))
* **server,dashboard:** create edit docker hub registry ([06ce0f1](https://github.com/digitopvn/diginext/commit/06ce0f1f9b20585b0a547902bf290115e5735fdd))
* **server,dockerfile:** define unqualified-search registries for podman ([2cbbca3](https://github.com/digitopvn/diginext/commit/2cbbca3b3324018cf6298d6b95d1588c8605aad7))
* **server,env vars:** fix env var can be empty ([96d12ac](https://github.com/digitopvn/diginext/commit/96d12aca27891736f97a3163c977712dbcf2d33e))
* **server,generate deploy yaml:** env var value can be undefined ([7df0149](https://github.com/digitopvn/diginext/commit/7df014961f3e13e8375f424b94f2197188ffe90b))
* **server,startup script:** add retry method to registry connecting ([47490d6](https://github.com/digitopvn/diginext/commit/47490d616dd4b84a405359c5ab5509ccb488e35a))
* **server,workspace:** delete related data when deleting workspace ([4bd9c9c](https://github.com/digitopvn/diginext/commit/4bd9c9c8b4080ebeb96defc7ae73f039a60c3515))
* **server:** add database backup status ([c5a2e8b](https://github.com/digitopvn/diginext/commit/c5a2e8b62361dd7c4e7439645e616f3599ab27f7))
* **server:** add finally to export pdf and screenshot for optimize ([aa7e91e](https://github.com/digitopvn/diginext/commit/aa7e91e67d852070d1c4b466834ec90e23aebf0a))
* **server:** add podman to clean up cronjob ([20688c4](https://github.com/digitopvn/diginext/commit/20688c403418afaccbb3909aa3186d38f434afcc))
* **server:** add primary ip when seed initial cluster ([c3d5705](https://github.com/digitopvn/diginext/commit/c3d57050e6d63a4e8b8f5a5694a7a7347bd42746))
* **server:** add resource validation in env vars crud ([6edf4c3](https://github.com/digitopvn/diginext/commit/6edf4c33d89bab5cf43ea6403919acbc8b9472cc))
* **server:** app constroller git info is required ([64e26a0](https://github.com/digitopvn/diginext/commit/64e26a028aed412d8fdb2b908c618d465860747c))
* **server:** app service find workloads based on main-app label ([6599b90](https://github.com/digitopvn/diginext/commit/6599b9002164d421f73cc8a2e2dedb8388bc51fd))
* **server:** authenticate registry before building & pushing image ([cc9c70c](https://github.com/digitopvn/diginext/commit/cc9c70cf1f540b4f3402d059a8b48a8d4aa0a482))
* **server:** can't update app config ([b1b239b](https://github.com/digitopvn/diginext/commit/b1b239b44b79b073be5de3a95f883b06d816a77e))
* **server:** cannot verify git provider after connecting ([55b7533](https://github.com/digitopvn/diginext/commit/55b7533b74149144e610ca05557b7f2eb7edab35))
* **server:** change clean up cronjob to 7 days ([742b3a6](https://github.com/digitopvn/diginext/commit/742b3a6b5f389799df90f7483b67aaca15b9bd14))
* **server:** check existing domain when add new ([8b33fe0](https://github.com/digitopvn/diginext/commit/8b33fe0fe64106f5bd7e7f676b27a47e810ca4a6))
* **server:** clean up prerelease, fallback support deperecated main-app ([06bfab9](https://github.com/digitopvn/diginext/commit/06bfab9fbadc64634b9656a3c44555815aa6e5ed))
* **server:** close db connection when app is terminated ([23caddd](https://github.com/digitopvn/diginext/commit/23caddd5758868f0a2a02eb7f6d81a044c2451e6))
* **server:** default to share resource credential ([790dbcc](https://github.com/digitopvn/diginext/commit/790dbcc03052689de4228d5dd67a6533a94eb074))
* **server:** delete project issue ([86bb52a](https://github.com/digitopvn/diginext/commit/86bb52a421fecd616cbc0a524cfec37e5c0e159e))
* **server:** disable body in activity logs to save disk usage ([686b22b](https://github.com/digitopvn/diginext/commit/686b22b9ed20455f5429eaf25dfb69d653f44388))
* **server:** generate incorrect resource quotas by size ([2bce8a8](https://github.com/digitopvn/diginext/commit/2bce8a828ad67a726ae56cf4c94acd6a21520b19))
* **server:** generate yaml not redirect when ssl issuer is none ([8ce2f40](https://github.com/digitopvn/diginext/commit/8ce2f40e39fa7213d3945ddc7d3e63e930c126da))
* **server:** generate yaml, main app name is app slug ([29a64a6](https://github.com/digitopvn/diginext/commit/29a64a67a539c0435fe80cd8ab5c0d1273375d9a))
* **server:** generate yaml, main app name is project slug and app slug ([3d6b231](https://github.com/digitopvn/diginext/commit/3d6b23165ea1596d44d3bfb39542a3559b01aacc))
* **server:** incorrect app deploy environment status ([4241b6e](https://github.com/digitopvn/diginext/commit/4241b6e1d00757634b87e037a713c24ef6ebf105))
* **server:** incorrect main-app-name,set env vars,deploy ([6c65645](https://github.com/digitopvn/diginext/commit/6c65645ab6ed37cab03abc4fdf41dac0889e6ee5))
* **server:** issue cluster not found when add domain ([d9198b9](https://github.com/digitopvn/diginext/commit/d9198b93315b433b5568718fe0503cefa69f9c1f))
* **server:** issue of checking ready deployment ([c2f1b42](https://github.com/digitopvn/diginext/commit/c2f1b4214437082484f3882345c5981cb832f60d))
* **server:** issue of not update new domains ([e92cedc](https://github.com/digitopvn/diginext/commit/e92cedc02a162d44a6adcf2f01db7e7e1aa9fd86))
* **server:** issue of project name validation when add domain ([b1b6267](https://github.com/digitopvn/diginext/commit/b1b6267be30085aa5b9aca83cbc3db5c521b6071))
* **server:** issue of roll out still remain prerelease env vars ([1f5bfbe](https://github.com/digitopvn/diginext/commit/1f5bfbe9e1b05b4af0669ca876d9da492a13c495))
* **server:** long deployment name, container error logs ([ccd48f8](https://github.com/digitopvn/diginext/commit/ccd48f8ec464fb33a7bb624d956b2b302109de4d))
* **server:** podman container.conf log to file ([efeb289](https://github.com/digitopvn/diginext/commit/efeb28933007981db7a7ccf957dbc036e844b4f2))
* **server:** print env vars when server start up ([4e73841](https://github.com/digitopvn/diginext/commit/4e73841d473d50fdedf6c1da999faa71ecef6941))
* **server:** remove namespace in kube apply func ([135d281](https://github.com/digitopvn/diginext/commit/135d28141c77428704bc95eb9a283840fb7c4a70))
* **server:** select correct ingress class when generate yaml ([c2c9322](https://github.com/digitopvn/diginext/commit/c2c93223609bafb18695c9ad3da1fa9839efe2d3))
* **server:** show container logs when deploy failed ([71955f4](https://github.com/digitopvn/diginext/commit/71955f42e0b033411b567af228e5c77c2213bfdb))
* **server:** try catch build and deploy ([cae9788](https://github.com/digitopvn/diginext/commit/cae9788b39a970bfdfe10e52a6096285958cfb41))
* **server:** try catch update build status ([76b93c7](https://github.com/digitopvn/diginext/commit/76b93c77bc804381e5a1a2ee51fd4d0b36729173))
* **server:** try to get container log when deploy failed ([0071e46](https://github.com/digitopvn/diginext/commit/0071e464b1bb43bd8e9bdb1ce98947dc308ba7ad))
* **server:** unable to read build number to generate deploy yaml ([f3d6098](https://github.com/digitopvn/diginext/commit/f3d6098242496ada09031ea2b71d4d017996269e))
* **server:** update build number to deploy env when update status ([c228f34](https://github.com/digitopvn/diginext/commit/c228f34c36433b2f77c9396328546bf271f4231d))
* **server:** update resource quota scale matrix ([3454858](https://github.com/digitopvn/diginext/commit/34548587fb1361b7cb89f05cf6298eb4ec8cc5c8))
* **server:** update status latest build undefined ([aca37d4](https://github.com/digitopvn/diginext/commit/aca37d4dd27f6a27ec4538e34fb812becd8b93cd))
* **server:** when rollout skip checking ingress if ssl is none ([ec52590](https://github.com/digitopvn/diginext/commit/ec525900c15c7732b913642f9b7c6cff038fd0f0))
* **startup script:** build docker base, catch error of startup scripts ([c48a790](https://github.com/digitopvn/diginext/commit/c48a79071c6645a64a719c9b715a4a85eba69474))
* **user,service_account,api_key:** drop unique index in username field ([d22ba26](https://github.com/digitopvn/diginext/commit/d22ba26a7f9617318ea91b52b9d764c597cf9e4e))
* **write dx config:** ignore package.json if not existed ([4194df9](https://github.com/digitopvn/diginext/commit/4194df92a223850aaf555f5d71e1d4151af483a1))


### Features

* **admin:** connect and list connected git providers ([30dea79](https://github.com/digitopvn/diginext/commit/30dea7925d786e2ad4bf27193fe5053d4fa35571))
* **client:** clone repo to other provider ([6fc2c22](https://github.com/digitopvn/diginext/commit/6fc2c22789aa695024bf83e05045becbc38fb774))
* **client:** update diginext-utils to 3.0.2 | [cloneRepo] checking private key or secret env ([f194e12](https://github.com/digitopvn/diginext/commit/f194e12553f68e8b417ffef521f745a089850ed8))
* **client:** working on clone repo from bitbucket to github ([107201d](https://github.com/digitopvn/diginext/commit/107201d2562858fa1604ce578bd4982ff27d75d1))
* **dashboard:** manage cronjob, database, backup ([6b11975](https://github.com/digitopvn/diginext/commit/6b11975a79bc439197c3caae5d0e5ff69db15681))
* **server,admin:** modify deploy environment of app ([17d8bae](https://github.com/digitopvn/diginext/commit/17d8bae4b14dd4b5d1fade5785bf0e73f9bb8f09))
* **server,admin:** partial support mobile screen ([04a9fe4](https://github.com/digitopvn/diginext/commit/04a9fe4b5b45004e7e9b0dbb5e34759c474cf806))
* **server,admin:** view application deploy environment logs ([7b1134f](https://github.com/digitopvn/diginext/commit/7b1134f2251e06fe4c4132b097478480dfff433b))
* **server,api,cli:** add cloud database healthz, backup, restore ([acd762a](https://github.com/digitopvn/diginext/commit/acd762a803603a6e16e913e9696f6b3a617619c4))
* **server,api:** add ingress, deployment, pod, service monitoring ([5a20fd9](https://github.com/digitopvn/diginext/commit/5a20fd9f52d5130873a1ef4216c1fde7e1ce93ee))
* **server,api:** add namespace monitoring page ([2d118d7](https://github.com/digitopvn/diginext/commit/2d118d7b5fa3ed92195298cc6ad98f3ff06ea671))
* **server,api:** check dx key when create workspace,domain ([8c4052f](https://github.com/digitopvn/diginext/commit/8c4052fb19a17e54e062d6c220df65c4f60f7263))
* **server,api:** cronjob create, schedule at, schedule repeat, cancel job ([37770de](https://github.com/digitopvn/diginext/commit/37770ded16b072964fc4f6fb374867f5e3837e6a))
* **server,api:** list all nodes each cluster ([5e95a78](https://github.com/digitopvn/diginext/commit/5e95a785c7bdc90be4828ec296930efd4f9954e6))
* **server,api:** monitor k8s cluster feature ([46a6e68](https://github.com/digitopvn/diginext/commit/46a6e6866ecf405d50c29076036a7c12b160747c))
* **server,cli:** add microk8s installation script ([d56d315](https://github.com/digitopvn/diginext/commit/d56d3158e4181795c7a1fab783e625cf2481cc94))
* **server,cli:** always update image url, add build list page ([bf86f2b](https://github.com/digitopvn/diginext/commit/bf86f2b318421cdd2b19399478bf2383d1974841))
* **server,cli:** issue of checking quota limit of workspace ([4e9f20b](https://github.com/digitopvn/diginext/commit/4e9f20bc5f281764596d4ef13cc4304c8a158458))
* **server:** add domains to production environment ([a10142a](https://github.com/digitopvn/diginext/commit/a10142aa57b949408449f018f8e9034c686a3e65))
* **server:** add export pdf, capture screenshot webpage ([2872060](https://github.com/digitopvn/diginext/commit/287206028b06cbef88b098bf894562cd60409cb2))
* **server:** add new domain to app deploy environment ([7009c7b](https://github.com/digitopvn/diginext/commit/7009c7bba46e542fca98270fb81ced2eec0afc00))
* **server:** app, deploy env - add health status and ready count ([8373b29](https://github.com/digitopvn/diginext/commit/8373b29fe7b2f823670e0c72e472d1084bca1a3a))
* **server:** capture screenshot when build and deploy ([67e9e22](https://github.com/digitopvn/diginext/commit/67e9e229bd3ec1e36767d34afe1fc3245d05fcb6))
* **server:** implement basic auth with register and password login ([098e2e0](https://github.com/digitopvn/diginext/commit/098e2e0cfc370722d5fd855094297429366e5b21))
* **server:** seed initial cluster when create workspace if any ([8d05295](https://github.com/digitopvn/diginext/commit/8d0529559945efa5ce1e263615892f59ed1406e8))


### Performance Improvements

* **client:** choose git provider ([a050809](https://github.com/digitopvn/diginext/commit/a05080955ba5508a71807de9b97d2618362bc0cc))
* **server,api:** improve build and deploy api with error message ([cb6cd82](https://github.com/digitopvn/diginext/commit/cb6cd821b833f204ffb94810e2a5172c04c9ae86))
* **server:** add resources to deployments, pods monitor page ([6831a2c](https://github.com/digitopvn/diginext/commit/6831a2c407af51863830e3d9f1414dd34c5d18a0))
* **server:** delete project faster ([9aa1364](https://github.com/digitopvn/diginext/commit/9aa1364521c12a39ca7dff2be46e68731faceae9))

## [3.14.3](https://github.com/digitopvn/diginext/compare/v3.14.2...v3.14.3) (2023-06-24)
## [3.14.2-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.14.2-prerelease.1...v3.14.2-prerelease.2) (2023-06-27)


### Bug Fixes

* **server,api:** switch to mongosh instead of mongo command ([bc1a5c5](https://github.com/digitopvn/diginext/commit/bc1a5c532b1e0129ada1e4a95a64d48a8ad01c9d))

## [3.14.2](https://github.com/digitopvn/diginext/compare/v3.14.1...v3.14.2) (2023-06-24)


### Bug Fixes

* **client:** change fn name clone -> transfer | fix duplicate git create ([2cfcf92](https://github.com/digitopvn/diginext/commit/2cfcf928e2aedc712b9fd7c8bc032ebcc5ba2877))
* **dashboard:** correct create database api ([274a7f8](https://github.com/digitopvn/diginext/commit/274a7f849524d7f304f8f16aff4fb20516629ee7))
* flow git push to main ([85dc26b](https://github.com/digitopvn/diginext/commit/85dc26b254b55da3a152d6da842e23f92d1c482b))

## [3.14.2-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.14.1...v3.14.2-prerelease.1) (2023-06-23)


### Bug Fixes

* **client:** change fn name clone -> transfer | fix duplicate git create ([2cfcf92](https://github.com/digitopvn/diginext/commit/2cfcf928e2aedc712b9fd7c8bc032ebcc5ba2877))

## [3.14.1](https://github.com/digitopvn/diginext/compare/v3.14.0...v3.14.1) (2023-06-23)

# [3.14.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.14.0-prerelease.1...v3.14.0-prerelease.2) (2023-06-23)

### Bug Fixes

-   **dashboard:** correct database api url ([147e7e9](https://github.com/digitopvn/diginext/commit/147e7e92a25e692060f71e9d4cf2147cd0159592))
-   **dashboard:** correct database api url ([#242](https://github.com/digitopvn/diginext/issues/242)) ([9354959](https://github.com/digitopvn/diginext/commit/935495991a957c6859b5c68ba5e31b6f24ff53ce))
-   **dockerfile:** update base image 5 ([08d1eb6](https://github.com/digitopvn/diginext/commit/08d1eb6ae3b51e105ae36ffbedc5917ee346d9b3))

# [3.14.0](https://github.com/digitopvn/diginext/compare/v3.13.1...v3.14.0) (2023-06-23)

### Bug Fixes

-   **dashboard:** optimize responsive of drawers ([063caee](https://github.com/digitopvn/diginext/commit/063caee7d3f1e71bd43044184b9f358b67d4de5b))
-   **server,cli:** compress db backups, execa 6.1.1, insert database ([d4e4d9b](https://github.com/digitopvn/diginext/commit/d4e4d9bd236e953ef4ab60fc44a1824c7812f885))
-   **server,cli:** generate ssh key with no passwords ([c25ebab](https://github.com/digitopvn/diginext/commit/c25ebabb6efc32bb0b3fbf7482a7496aca4091fb))
-   **server:** add database backup status ([f9c6439](https://github.com/digitopvn/diginext/commit/f9c64398567386bed2a5fece1b637f075ae0d3c7))

### Features

-   **dashboard:** manage cronjob, database, backup ([0f47dcf](https://github.com/digitopvn/diginext/commit/0f47dcf325ec757de76eec0b2fb9417e29bd3b72))
-   **server,api,cli:** add cloud database healthz, backup, restore ([d8453a8](https://github.com/digitopvn/diginext/commit/d8453a8802916171c9967c86aea940536468dfe4))
-   **server,api:** cronjob create, schedule at, schedule repeat, cancel job ([7108d26](https://github.com/digitopvn/diginext/commit/7108d26e433f4fef19479dfca42edf781c680f06))

-   **dockerfile:** update base image 5 ([08d1eb6](https://github.com/digitopvn/diginext/commit/08d1eb6ae3b51e105ae36ffbedc5917ee346d9b3))

# [3.14.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.13.1...v3.14.0-prerelease.1) (2023-06-22)

### Bug Fixes

-   **dashboard:** optimize responsive of drawers ([063caee](https://github.com/digitopvn/diginext/commit/063caee7d3f1e71bd43044184b9f358b67d4de5b))
-   **server,cli:** compress db backups, execa 6.1.1, insert database ([d4e4d9b](https://github.com/digitopvn/diginext/commit/d4e4d9bd236e953ef4ab60fc44a1824c7812f885))
-   **server,cli:** generate ssh key with no passwords ([c25ebab](https://github.com/digitopvn/diginext/commit/c25ebabb6efc32bb0b3fbf7482a7496aca4091fb))
-   **server:** add database backup status ([f9c6439](https://github.com/digitopvn/diginext/commit/f9c64398567386bed2a5fece1b637f075ae0d3c7))

### Features

-   **dashboard:** manage cronjob, database, backup ([0f47dcf](https://github.com/digitopvn/diginext/commit/0f47dcf325ec757de76eec0b2fb9417e29bd3b72))
-   **server,api,cli:** add cloud database healthz, backup, restore ([d8453a8](https://github.com/digitopvn/diginext/commit/d8453a8802916171c9967c86aea940536468dfe4))
-   **server,api:** cronjob create, schedule at, schedule repeat, cancel job ([7108d26](https://github.com/digitopvn/diginext/commit/7108d26e433f4fef19479dfca42edf781c680f06))

## [3.13.1](https://github.com/digitopvn/diginext/compare/v3.13.0...v3.13.1) (2023-06-19)

### Bug Fixes

-   **dashboard:** optimize responsive table for all pages ([e90cb00](https://github.com/digitopvn/diginext/commit/e90cb00ac4c7dfbbcd99d3119fbfbae763835518))

# [3.13.0](https://github.com/digitopvn/diginext/compare/v3.12.0...v3.13.0) (2023-06-18)

### Bug Fixes

-   **cli:** correct notify cli version update ([697eb8b](https://github.com/digitopvn/diginext/commit/697eb8bc8974d20a5a0f019dce2377c345672e59))
-   **cli:** empty arr of create select project,app when deploying ([d7a5088](https://github.com/digitopvn/diginext/commit/d7a50889ee44b3c978648715c7d1d337460f4ad7))
-   **client:** change command name 'clone' to 'transfer' or 'tf' ([963a31b](https://github.com/digitopvn/diginext/commit/963a31bb5322b0476158a9d565ee5e44acd22120))
-   **docker base:** enable chromium env for puppeteer to work ([a449dea](https://github.com/digitopvn/diginext/commit/a449deaf863062a8130885f2c28b3f79b0420cd9))
-   **docker base:** enable chromium env for puppeteer to work ([#231](https://github.com/digitopvn/diginext/issues/231)) ([62871ba](https://github.com/digitopvn/diginext/commit/62871badbe472365f6808b0d617605533471519b))
-   **server,api:** show correct screenshot to deploy env ([addb386](https://github.com/digitopvn/diginext/commit/addb386b6179bb7781195c3f7b6d03a6a22aa5b0))
-   **server,cli:** skip select framework, build logs, auth registry on push ([4b0bcba](https://github.com/digitopvn/diginext/commit/4b0bcba2e40f683a4db7dba8ca1238a7a16ad080))
-   **server:** add finally to export pdf and screenshot for optimize ([3b76bbb](https://github.com/digitopvn/diginext/commit/3b76bbbd7936dd81f43359181b2fd82ca718fefa))
-   **server:** app service find workloads based on main-app label ([2e652b7](https://github.com/digitopvn/diginext/commit/2e652b7f1fa8bd2c288367a914312f16b61763b1))
-   **server:** incorrect app deploy environment status ([7b056d4](https://github.com/digitopvn/diginext/commit/7b056d4b7083e994696cbee4f4d94c23fdad9c74))

### Features

-   **server,api:** add ingress, deployment, pod, service monitoring ([6bfff68](https://github.com/digitopvn/diginext/commit/6bfff68e6005a8107c65c77482b8432f1a856fd4))
-   **server,api:** add namespace monitoring page ([a995e40](https://github.com/digitopvn/diginext/commit/a995e4063c9cd0937f3d72be5a225149cca0e7d7))
-   **server,api:** add namespace monitoring page ([#232](https://github.com/digitopvn/diginext/issues/232)) ([6e0707a](https://github.com/digitopvn/diginext/commit/6e0707ad233703e18c85701026b3bd1e084e1960))
-   **server,api:** list all nodes each cluster ([dcb5b2d](https://github.com/digitopvn/diginext/commit/dcb5b2d797c03c63775c0f50a3348687d2f1a97d))
-   **server,api:** list all nodes each cluster ([#233](https://github.com/digitopvn/diginext/issues/233)) ([76ee324](https://github.com/digitopvn/diginext/commit/76ee324321da310acc4179e49e81b87659b0a20e))
-   **server,api:** monitor k8s cluster feature ([2bce8d4](https://github.com/digitopvn/diginext/commit/2bce8d4f73a9060c3ff7e936349f8b18e78ff29e))
-   **server,cli:** webpage capture, init app, select project ([#227](https://github.com/digitopvn/diginext/issues/227)) ([afcaa9c](https://github.com/digitopvn/diginext/commit/afcaa9c9d71e2b1d9ca7c74232596f00d20b0843))
-   **server:** add export pdf, capture screenshot webpage ([e44c64e](https://github.com/digitopvn/diginext/commit/e44c64e0cd4f25ae194e45a49ed5392d4ad7bad1))
-   **server:** add export pdf, capture screenshot webpage ([#225](https://github.com/digitopvn/diginext/issues/225)) ([2e6801a](https://github.com/digitopvn/diginext/commit/2e6801ab7019b875218df9d1229597738519c5f7))
-   **server:** capture screenshot when build and deploy ([353319a](https://github.com/digitopvn/diginext/commit/353319aa5dae77f556d5e5db3feb4dc26dc6b253))

### Performance Improvements

-   **server:** add resources to deployments, pods monitor page ([322457c](https://github.com/digitopvn/diginext/commit/322457cc21150a5fb0c1031f42f541d7b0b277a0))

# [3.13.0-prerelease.7](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.6...v3.13.0-prerelease.7) (2023-06-18)

### Features

-   **server,api:** add ingress, deployment, pod, service monitoring ([6bfff68](https://github.com/digitopvn/diginext/commit/6bfff68e6005a8107c65c77482b8432f1a856fd4))

# [3.13.0-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.5...v3.13.0-prerelease.6) (2023-06-17)

### Bug Fixes

-   **server,api:** show correct screenshot to deploy env ([addb386](https://github.com/digitopvn/diginext/commit/addb386b6179bb7781195c3f7b6d03a6a22aa5b0))

### Features

-   **server,api:** list all nodes each cluster ([dcb5b2d](https://github.com/digitopvn/diginext/commit/dcb5b2d797c03c63775c0f50a3348687d2f1a97d))
-   **server,api:** list all nodes each cluster ([#233](https://github.com/digitopvn/diginext/issues/233)) ([76ee324](https://github.com/digitopvn/diginext/commit/76ee324321da310acc4179e49e81b87659b0a20e))

# [3.13.0-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.4...v3.13.0-prerelease.5) (2023-06-17)

### Bug Fixes

-   **server:** add finally to export pdf and screenshot for optimize ([3b76bbb](https://github.com/digitopvn/diginext/commit/3b76bbbd7936dd81f43359181b2fd82ca718fefa))
-   **server:** incorrect app deploy environment status ([7b056d4](https://github.com/digitopvn/diginext/commit/7b056d4b7083e994696cbee4f4d94c23fdad9c74))

### Features

-   **server,api:** add namespace monitoring page ([a995e40](https://github.com/digitopvn/diginext/commit/a995e4063c9cd0937f3d72be5a225149cca0e7d7))
-   **server,api:** add namespace monitoring page ([#232](https://github.com/digitopvn/diginext/issues/232)) ([6e0707a](https://github.com/digitopvn/diginext/commit/6e0707ad233703e18c85701026b3bd1e084e1960))
-   **server,api:** monitor k8s cluster feature ([2bce8d4](https://github.com/digitopvn/diginext/commit/2bce8d4f73a9060c3ff7e936349f8b18e78ff29e))

# [3.13.0-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.3...v3.13.0-prerelease.4) (2023-06-17)

### Bug Fixes

-   **docker base:** enable chromium env for puppeteer to work ([a449dea](https://github.com/digitopvn/diginext/commit/a449deaf863062a8130885f2c28b3f79b0420cd9))
-   **docker base:** enable chromium env for puppeteer to work ([#231](https://github.com/digitopvn/diginext/issues/231)) ([62871ba](https://github.com/digitopvn/diginext/commit/62871badbe472365f6808b0d617605533471519b))

# [3.13.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.2...v3.13.0-prerelease.3) (2023-06-16)

### Bug Fixes

-   **cli:** correct notify cli version update ([697eb8b](https://github.com/digitopvn/diginext/commit/697eb8bc8974d20a5a0f019dce2377c345672e59))

# [3.13.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.13.0-prerelease.1...v3.13.0-prerelease.2) (2023-06-16)

### Bug Fixes

-   **cli:** empty arr of create select project,app when deploying ([d7a5088](https://github.com/digitopvn/diginext/commit/d7a50889ee44b3c978648715c7d1d337460f4ad7))
-   **server,cli:** skip select framework, build logs, auth registry on push ([4b0bcba](https://github.com/digitopvn/diginext/commit/4b0bcba2e40f683a4db7dba8ca1238a7a16ad080))
-   **server:** app service find workloads based on main-app label ([2e652b7](https://github.com/digitopvn/diginext/commit/2e652b7f1fa8bd2c288367a914312f16b61763b1))

### Features

-   **server,cli:** webpage capture, init app, select project ([#227](https://github.com/digitopvn/diginext/issues/227)) ([afcaa9c](https://github.com/digitopvn/diginext/commit/afcaa9c9d71e2b1d9ca7c74232596f00d20b0843))

# [3.13.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.12.0...v3.13.0-prerelease.1) (2023-06-16)

### Bug Fixes

-   **client:** change command name 'clone' to 'transfer' or 'tf' ([963a31b](https://github.com/digitopvn/diginext/commit/963a31bb5322b0476158a9d565ee5e44acd22120))

### Features

-   **server:** add export pdf, capture screenshot webpage ([e44c64e](https://github.com/digitopvn/diginext/commit/e44c64e0cd4f25ae194e45a49ed5392d4ad7bad1))
-   **server:** add export pdf, capture screenshot webpage ([#225](https://github.com/digitopvn/diginext/issues/225)) ([2e6801a](https://github.com/digitopvn/diginext/commit/2e6801ab7019b875218df9d1229597738519c5f7))
-   **server:** capture screenshot when build and deploy ([353319a](https://github.com/digitopvn/diginext/commit/353319aa5dae77f556d5e5db3feb4dc26dc6b253))

# [3.12.0](https://github.com/digitopvn/diginext/compare/v3.11.4...v3.12.0) (2023-06-15)

# [3.12.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.11.4...v3.12.0-prerelease.1) (2023-06-15)

### Features

-   **client:** update diginext-utils to 3.0.2 | [cloneRepo] checking private key or secret env ([223685c](https://github.com/digitopvn/diginext/commit/223685ce6f00d65353a10ba44fb79219f276ae17))
-   **server:** add export pdf, capture screenshot webpage ([e44c64e](https://github.com/digitopvn/diginext/commit/e44c64e0cd4f25ae194e45a49ed5392d4ad7bad1))
-   **server:** add export pdf, capture screenshot webpage ([#225](https://github.com/digitopvn/diginext/issues/225)) ([2e6801a](https://github.com/digitopvn/diginext/commit/2e6801ab7019b875218df9d1229597738519c5f7))
-   **server:** capture screenshot when build and deploy ([353319a](https://github.com/digitopvn/diginext/commit/353319aa5dae77f556d5e5db3feb4dc26dc6b253))

## [3.11.4](https://github.com/digitopvn/diginext/compare/v3.11.3...v3.11.4) (2023-06-15)

### Bug Fixes

-   **server:** issue of project name validation when add domain ([cd8b5c7](https://github.com/digitopvn/diginext/commit/cd8b5c75e4631ac60818f94d621bbca97a48bf9c))

## [3.11.3](https://github.com/digitopvn/diginext/compare/v3.11.2...v3.11.3) (2023-06-15)

### Bug Fixes

-   **server:** issue cluster not found when add domain ([5c52b46](https://github.com/digitopvn/diginext/commit/5c52b46cef0e2f79973cbb94bc6ddd2d7a4356fd))
-   **server:** print env vars when server start up ([424947b](https://github.com/digitopvn/diginext/commit/424947b5ec7fef9930681e14484d2f0361a19ef8))

## [3.11.2](https://github.com/digitopvn/diginext/compare/v3.11.1...v3.11.2) (2023-06-14)

### Bug Fixes

-   **cli:** improve --debug flag ([b5b8cf1](https://github.com/digitopvn/diginext/commit/b5b8cf1c18c42680446762328a7e58f500109040))
-   **cli:** issue github does not provide shell access ([0af8893](https://github.com/digitopvn/diginext/commit/0af88938c4bc89aa9e44d43f8e8645a6284b647d))
-   **cli:** stop request deploy when deploy info undefined ([8c01329](https://github.com/digitopvn/diginext/commit/8c0132912bcd059e487722ce4827779dcbabbd41))
-   **server,api:** add missing masked fields ([8bf1466](https://github.com/digitopvn/diginext/commit/8bf14669dc40636fb76aa05eb7e8fc5f88a50f8a))
-   **server,api:** error 504 when create deploy environment ([2898d08](https://github.com/digitopvn/diginext/commit/2898d0892bde5d4a667a6a4e13050e0b13450f1a))
-   **server,cli:** generate ssh with no pass ([848eb0e](https://github.com/digitopvn/diginext/commit/848eb0e1e421d32681d6336cca0400e5533f088c))
-   **server,cli:** remove logs contains dx.json ([bd7cb0a](https://github.com/digitopvn/diginext/commit/bd7cb0affb7627a9aa75ec18946bce36feb99a98))
-   **server:** add primary ip when seed initial cluster ([89334aa](https://github.com/digitopvn/diginext/commit/89334aa4caa61ffa9da1ab6893ba75a0d9c4c484))
-   **server:** add resource validation in env vars crud ([e8cc1c2](https://github.com/digitopvn/diginext/commit/e8cc1c26cc43818ed027aecc4dafedb42777a33c))
-   **server:** podman container.conf log to file ([c242f66](https://github.com/digitopvn/diginext/commit/c242f661a9be2c56a3e33a20f3531560f92e1a94))

## [3.11.1](https://github.com/digitopvn/diginext/compare/v3.11.0...v3.11.1) (2023-06-14)

### Performance Improvements

-   **client:** choose git provider ([d430f8d](https://github.com/digitopvn/diginext/commit/d430f8d8ff60d8d9b6b0b9ee7b68d1116fadb2f9))

# [3.11.0](https://github.com/digitopvn/diginext/compare/v3.10.6...v3.11.0) (2023-06-14)

### Features

-   **client:** clone repo to other provider ([235577d](https://github.com/digitopvn/diginext/commit/235577d0fa199332ac9bf0ad3ad0c0821bf853e8))
-   **client:** working on clone repo from bitbucket to github ([ec7f6d7](https://github.com/digitopvn/diginext/commit/ec7f6d7fd26ab09a52d0ac9afcb0316af79b0cc3))

## [3.10.6](https://github.com/digitopvn/diginext/compare/v3.10.5...v3.10.6) (2023-06-14)

### Bug Fixes

-   **server:** default to share resource credential ([26e8c17](https://github.com/digitopvn/diginext/commit/26e8c17e3103a1828b3c92e9f891b1811d64a566))

## [3.10.5](https://github.com/digitopvn/diginext/compare/v3.10.4...v3.10.5) (2023-06-14)

### Bug Fixes

-   **server,cli:** improve security by masking sensitive credentials ([00cfbef](https://github.com/digitopvn/diginext/commit/00cfbefe2bedae6cf1f307c7b9547385f9bf0e46))

## [3.10.4](https://github.com/digitopvn/diginext/compare/v3.10.3...v3.10.4) (2023-06-14)

### Bug Fixes

-   **server:** long deployment name, container error logs ([c49c2a3](https://github.com/digitopvn/diginext/commit/c49c2a3982dc2bf15304bf619bc5938ef9352b25))

## [3.10.3](https://github.com/digitopvn/diginext/compare/v3.10.2...v3.10.3) (2023-06-13)

### Bug Fixes

-   **server:** try to get container log when deploy failed ([f2f8d6a](https://github.com/digitopvn/diginext/commit/f2f8d6a7cb5247c85a7d2bff55d13e76e56eadea))
-   **server:** try to get container log when deploy failed ([#209](https://github.com/digitopvn/diginext/issues/209)) ([94a2a63](https://github.com/digitopvn/diginext/commit/94a2a63616d57e8499f0c0c06827f280af4cf186))

## [3.10.2](https://github.com/digitopvn/diginext/compare/v3.10.1...v3.10.2) (2023-06-13)

### Bug Fixes

-   **server:** issue of checking ready deployment ([fc8d420](https://github.com/digitopvn/diginext/commit/fc8d42010b32b394d4d6d749f011257ed7c6a2f6))
-   **server:** issue of checking ready deployment ([#208](https://github.com/digitopvn/diginext/issues/208)) ([8ce5c8c](https://github.com/digitopvn/diginext/commit/8ce5c8c626c5916d7c73288f406787646944c076))

## [3.10.1](https://github.com/digitopvn/diginext/compare/v3.10.0...v3.10.1) (2023-06-13)

### Bug Fixes

-   **server:** remove namespace in kube apply func ([fe31af4](https://github.com/digitopvn/diginext/commit/fe31af4a2388fd78ba7dc2959ca778488a21f37d))
-   **server:** show container logs when deploy failed ([0c17821](https://github.com/digitopvn/diginext/commit/0c178210b006e9f486d5ce63390f844e283a035d))
-   **server:** try catch build and deploy ([c03c5e1](https://github.com/digitopvn/diginext/commit/c03c5e164a0889b71df6217f145f6bdc0575f467))

# [3.10.0](https://github.com/digitopvn/diginext/compare/v3.9.4...v3.10.0) (2023-06-13)

### Features

-   **server,cli:** always update image url, add build list page ([d41e563](https://github.com/digitopvn/diginext/commit/d41e5634efda560e714ffa122d60992968508a11))

## [3.9.4](https://github.com/digitopvn/diginext/compare/v3.9.3...v3.9.4) (2023-06-13)

### Bug Fixes

-   **server:** try catch update build status ([0c9fbbc](https://github.com/digitopvn/diginext/commit/0c9fbbc9258562cb1435edabc42e25dba22e016d))
-   **server:** update status latest build undefined ([72debd2](https://github.com/digitopvn/diginext/commit/72debd2c1f8d3f0e434662f99e85f53661ec4a06))

## [3.9.3](https://github.com/digitopvn/diginext/compare/v3.9.2...v3.9.3) (2023-06-13)

### Bug Fixes

-   **server,dashboard:** create edit docker hub registry ([b5df988](https://github.com/digitopvn/diginext/commit/b5df988bf498fc2e9369bdf671c19982840a30e2))

## [3.9.2](https://github.com/digitopvn/diginext/compare/v3.9.1...v3.9.2) (2023-06-13)

### Bug Fixes

-   **server:** update build number to deploy env when update status ([0b2a079](https://github.com/digitopvn/diginext/commit/0b2a079614f5b61bf47305248497b8be3cad0b79))

## [3.9.1](https://github.com/digitopvn/diginext/compare/v3.9.0...v3.9.1) (2023-06-12)

### Bug Fixes

-   **server:** incorrect main-app-name,set env vars,deploy ([1f09c6c](https://github.com/digitopvn/diginext/commit/1f09c6c92c452cb899a147262f7cc237e5d34b77))

# [3.9.0](https://github.com/digitopvn/diginext/compare/v3.8.0...v3.9.0) (2023-06-12)

### Bug Fixes

-   **server,dashboard:** add loading spin to all list pages ([ec78b60](https://github.com/digitopvn/diginext/commit/ec78b608afdf50e087c0629e8bd803c3d19a7ab5))

### Features

-   **server:** seed initial cluster when create workspace if any ([f0baf99](https://github.com/digitopvn/diginext/commit/f0baf998ba93344d80a383ef148c6c0d38405520))
-   **server:** seed initial cluster when create workspace if any ([#201](https://github.com/digitopvn/diginext/issues/201)) ([a71e9ee](https://github.com/digitopvn/diginext/commit/a71e9ee1fea12d8b723df437775bbf6b6dccf184))

# [3.8.0](https://github.com/digitopvn/diginext/compare/v3.7.7...v3.8.0) (2023-06-12)

### Features

-   **server:** implement basic auth with register and password login ([d93fca6](https://github.com/digitopvn/diginext/commit/d93fca6051e3323e21fb04b4d4d9c07e0994755d))
-   **server:** implement basic auth with register and password login ([#198](https://github.com/digitopvn/diginext/issues/198)) ([f4c03ed](https://github.com/digitopvn/diginext/commit/f4c03ed1d14be4596c2c41f787bc8710bf0cac51))

## [3.7.7](https://github.com/digitopvn/diginext/compare/v3.7.6...v3.7.7) (2023-06-09)

### Performance Improvements

-   **server,api:** improve build and deploy api with error message ([c5683f5](https://github.com/digitopvn/diginext/commit/c5683f593fbc2c239f4536a1e6eefe5310f56ba4))
-   **server,api:** improve build and deploy api with error message ([#197](https://github.com/digitopvn/diginext/issues/197)) ([cc2ba93](https://github.com/digitopvn/diginext/commit/cc2ba9304e5ce0c227433e216ef80453832802c2))

## [3.7.6](https://github.com/digitopvn/diginext/compare/v3.7.5...v3.7.6) (2023-06-08)

### Bug Fixes

-   **server:** clean up prerelease, fallback support deperecated main-app ([a4031bb](https://github.com/digitopvn/diginext/commit/a4031bb0e36ad583e4ede5526599b995bc460896))
-   **server:** clean up prerelease, fallback support deperecated main-app ([#196](https://github.com/digitopvn/diginext/issues/196)) ([e2b0adc](https://github.com/digitopvn/diginext/commit/e2b0adc858ecd1b4f676499f12a93a0a188f7103))

## [3.7.5](https://github.com/digitopvn/diginext/compare/v3.7.4...v3.7.5) (2023-06-08)

### Bug Fixes

-   **server:** generate yaml, main app name is project slug and app slug ([174108e](https://github.com/digitopvn/diginext/commit/174108e582a064f2b715242572f6236a4e454790))
-   **server:** generate yaml, main app name is project slug and app slug ([#195](https://github.com/digitopvn/diginext/issues/195)) ([8fefd40](https://github.com/digitopvn/diginext/commit/8fefd40222a09f7c4413bcfc198e296ffa83210b))

## [3.7.4](https://github.com/digitopvn/diginext/compare/v3.7.3...v3.7.4) (2023-06-08)

### Bug Fixes

-   **server:** generate yaml, main app name is app slug ([0aa40d3](https://github.com/digitopvn/diginext/commit/0aa40d3ccaf4c0f9b7cb6fd3aa5cc37e6fecaad7))
-   **server:** generate yaml, main app name is app slug ([#194](https://github.com/digitopvn/diginext/issues/194)) ([0b11367](https://github.com/digitopvn/diginext/commit/0b1136734aa2b2bcaca5d4ca652acf73ff687254))

## [3.7.3](https://github.com/digitopvn/diginext/compare/v3.7.2...v3.7.3) (2023-06-08)

### Bug Fixes

-   **server:** issue of roll out still remain prerelease env vars ([926cfee](https://github.com/digitopvn/diginext/commit/926cfeef532f34e94b0b6e1a7b05c8ec971bc362))
-   **server:** issue of roll out still remain prerelease env vars ([#193](https://github.com/digitopvn/diginext/issues/193)) ([223b408](https://github.com/digitopvn/diginext/commit/223b4087d241bf73621e7c2c8e1c9f880edaaf29))

## [3.7.2](https://github.com/digitopvn/diginext/compare/v3.7.1...v3.7.2) (2023-06-08)

### Bug Fixes

-   **cli:** improve kubectl command set image, port, secret ([bcc14c5](https://github.com/digitopvn/diginext/commit/bcc14c50e20c196d6066a3bb660a5b8abdff2675))
-   **cli:** improve kubectl command set image, port, secret ([#192](https://github.com/digitopvn/diginext/issues/192)) ([e82b8ee](https://github.com/digitopvn/diginext/commit/e82b8ee0184fecf899e47026a677436d5adbbc31))
-   **cli:** kb set deploy - cannot access image url before init ([3323f20](https://github.com/digitopvn/diginext/commit/3323f205a05128af2dc0a1b555a6aa981d135994))

## [3.7.1](https://github.com/digitopvn/diginext/compare/v3.7.0...v3.7.1) (2023-06-08)

### Bug Fixes

-   **cli,server:** issue of resolving dockerfile ([a5f8efa](https://github.com/digitopvn/diginext/commit/a5f8efaf718aae874144471502ebc4d1481e54e2))
-   **cli,server:** issue of resolving dockerfile ([#191](https://github.com/digitopvn/diginext/issues/191)) ([66e68b8](https://github.com/digitopvn/diginext/commit/66e68b8efc76bc35bf829862798849d33694f8da))

# [3.7.0](https://github.com/digitopvn/diginext/compare/v3.6.4...v3.7.0) (2023-06-08)

### Bug Fixes

-   **cli:** refactor build command to request server to build image ([12b1ac2](https://github.com/digitopvn/diginext/commit/12b1ac291f5014d85bf1fbb59928ef13585e5bc2))

### Features

-   **cli:** request server to build image ([#190](https://github.com/digitopvn/diginext/issues/190)) ([7aceaff](https://github.com/digitopvn/diginext/commit/7aceaff483d6f58e021b4a224a5d12bbec6b5397))

## [3.6.4](https://github.com/digitopvn/diginext/compare/v3.6.3...v3.6.4) (2023-06-08)

### Bug Fixes

-   **server,api:** skip checking namespace when create deploy environment ([91aa0dc](https://github.com/digitopvn/diginext/commit/91aa0dc7f8b1f8d2dd878d2670a3ae7910ef5280))
-   **server,api:** skip checking namespace when create deploy environment ([#189](https://github.com/digitopvn/diginext/issues/189)) ([68ae632](https://github.com/digitopvn/diginext/commit/68ae6323fda4ce828f28c6a0dc1c632ee78bca49))

## [3.6.3](https://github.com/digitopvn/diginext/compare/v3.6.2...v3.6.3) (2023-06-07)

### Bug Fixes

-   **server,api:** correct build base on number,app,project when releasing ([cb23f74](https://github.com/digitopvn/diginext/commit/cb23f74241a54a0939458ea3a67d00a509979edd))
-   **server:** unable to read build number to generate deploy yaml ([20c0f94](https://github.com/digitopvn/diginext/commit/20c0f943c7a19dda67447137de1adea44e7b6fd6))

## [3.6.2](https://github.com/digitopvn/diginext/compare/v3.6.1...v3.6.2) (2023-06-07)

### Bug Fixes

-   **server,api:** add build number to create,update deploy environment api ([ceeb968](https://github.com/digitopvn/diginext/commit/ceeb968fc009eb591def542e49547d6a111b0205))

## [3.6.1](https://github.com/digitopvn/diginext/compare/v3.6.0...v3.6.1) (2023-06-07)

### Bug Fixes

-   **admin:** correct url to diginext official website ([#180](https://github.com/digitopvn/diginext/issues/180)) ([eef882e](https://github.com/digitopvn/diginext/commit/eef882e713e5e73a215aef47f703d67fcbe19206))
-   **cli:** show update warning only when there are breaking changes ([171dcd5](https://github.com/digitopvn/diginext/commit/171dcd57455e9fb37cad97c349bba64842b19267))
-   **server:** disable body in activity logs to save disk usage ([7d84a71](https://github.com/digitopvn/diginext/commit/7d84a710aab252429d02ee2cd58c257179d07f37))
-   **server:** disable body in activity logs to save disk usage ([#183](https://github.com/digitopvn/diginext/issues/183)) ([7043b4a](https://github.com/digitopvn/diginext/commit/7043b4a46b77f35fb894ae586c7337e78b29b5aa))

## [3.6.1-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.6.0...v3.6.1-prerelease.1) (2023-06-06)

### Bug Fixes

-   **admin:** correct url to diginext official website ([#180](https://github.com/digitopvn/diginext/issues/180)) ([eef882e](https://github.com/digitopvn/diginext/commit/eef882e713e5e73a215aef47f703d67fcbe19206))
-   **server:** disable body in activity logs to save disk usage ([7d84a71](https://github.com/digitopvn/diginext/commit/7d84a710aab252429d02ee2cd58c257179d07f37))
-   **server:** disable body in activity logs to save disk usage ([#183](https://github.com/digitopvn/diginext/issues/183)) ([7043b4a](https://github.com/digitopvn/diginext/commit/7043b4a46b77f35fb894ae586c7337e78b29b5aa))

# [3.6.0](https://github.com/digitopvn/diginext/compare/v3.5.2...v3.6.0) (2023-06-01)

### Bug Fixes

-   **admin:** correct url to diginext official website ([88fe210](https://github.com/digitopvn/diginext/commit/88fe210fdd51e940599aefd2456b1c6155d68077))
-   **admin:** more responsive support for mobile screen ([940a5bf](https://github.com/digitopvn/diginext/commit/940a5bfe48922e91781a3f018a9a538dae19a9cf))
-   **admin:** more responsive support for mobile screen ([#177](https://github.com/digitopvn/diginext/issues/177)) ([5610304](https://github.com/digitopvn/diginext/commit/56103048f8496289ad34840a983bb661cddf54c9))
-   **bitbucket repo:** issue of creating new bitbucket repo ([#123](https://github.com/digitopvn/diginext/issues/123)) ([c4a6919](https://github.com/digitopvn/diginext/commit/c4a6919f919f8aa8a1279864b36ccc445f1789a0))
-   **clean up:** build docker base and deploy prerelease ([08e908f](https://github.com/digitopvn/diginext/commit/08e908f783d98bc6e1f14799f921ae42b6ffd178))
-   **clean up:** build docker base and deploy prerelease ([#178](https://github.com/digitopvn/diginext/issues/178)) ([5054cd9](https://github.com/digitopvn/diginext/commit/5054cd98725b2d3ec914024695bfeb51fab2f0e1))
-   **ga:** deploy condition fix ([17818f2](https://github.com/digitopvn/diginext/commit/17818f2607f2a53b74cd206f9933297586681663))
-   **ga:** deploy condition fix ([#165](https://github.com/digitopvn/diginext/issues/165)) ([982aae5](https://github.com/digitopvn/diginext/commit/982aae54cdd652509cd25be53cd25fab14701d57))
-   **github actions:** combine docker release with main release flow ([ac13dc2](https://github.com/digitopvn/diginext/commit/ac13dc2f1d8009f5d4407fb4bf191f38823f052b))
-   **github actions:** combine docker release with main release flow ([#145](https://github.com/digitopvn/diginext/issues/145)) ([6c9bd5e](https://github.com/digitopvn/diginext/commit/6c9bd5ee2a5adf832a0d94ea018f578b846d01d8))
-   **github actions:** deploy topgroup-v2 ([f57ce8d](https://github.com/digitopvn/diginext/commit/f57ce8d8a17b28bebedf79622f3571fbcc6ad313))
-   **github actions:** run next job on succesful jobs ([236bb91](https://github.com/digitopvn/diginext/commit/236bb9181c9f1a9c4a789f7e01aac72b9d740aeb))
-   **github actions:** run next job on succesful jobs ([#146](https://github.com/digitopvn/diginext/issues/146)) ([ba99e16](https://github.com/digitopvn/diginext/commit/ba99e1616a78655d0fe219f9e07869dfed7b33f1))
-   **server:** delete project issue ([8798ba0](https://github.com/digitopvn/diginext/commit/8798ba03c510c563e695b53321630a53275ec9c7))
-   **server:** generate yaml not redirect when ssl issuer is none ([7d58ae3](https://github.com/digitopvn/diginext/commit/7d58ae314438d741da55a346d01bf52bbb3a835b))
-   **server:** select correct ingress class when generate yaml ([35ba370](https://github.com/digitopvn/diginext/commit/35ba3702658c64f171cd3751846b520ac5ac3448))
-   **server:** select correct ingress class when generate yaml ([#163](https://github.com/digitopvn/diginext/issues/163)) ([7364300](https://github.com/digitopvn/diginext/commit/7364300c7201e81f729fc4dbe1dfc39a62cbdd0f))
-   **server:** update resource quota scale matrix ([1d859b7](https://github.com/digitopvn/diginext/commit/1d859b728b1837295e8af867477aef6cb809882f))
-   **startup script:** build docker base, catch error of startup scripts ([ff5f0ac](https://github.com/digitopvn/diginext/commit/ff5f0ac9ae274262b4d8e2703e9db20efd09e7cb))
-   **startup script:** build docker base, catch error of startup scripts ([#179](https://github.com/digitopvn/diginext/issues/179)) ([d071b94](https://github.com/digitopvn/diginext/commit/d071b9472f84188513f4cb939706ac15e4c112d1))

### Features

-   **server,admin:** partial support mobile screen ([aee3593](https://github.com/digitopvn/diginext/commit/aee3593820dde4ae73945a2538b0b928fce02c25))
-   **server,admin:** partial support mobile screen ([#175](https://github.com/digitopvn/diginext/issues/175)) ([6d515fe](https://github.com/digitopvn/diginext/commit/6d515fe04f780366ec84e4c191b395d5d04a59d1))
-   **server,cli:** add microk8s installation script ([99c7b7b](https://github.com/digitopvn/diginext/commit/99c7b7b5455e963001a98cce9aaa6b418aa2f578))
-   **server,cli:** add microk8s installation script ([#167](https://github.com/digitopvn/diginext/issues/167)) ([674b057](https://github.com/digitopvn/diginext/commit/674b0571b64811802eeac93d09f4e0e22721b1b7))

### Performance Improvements

-   **server:** delete project faster ([a06798a](https://github.com/digitopvn/diginext/commit/a06798a2f5994d8e86db60c5e73ade3b47e5771c))

# [3.6.0-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.6.0-prerelease.5...v3.6.0-prerelease.6) (2023-06-01)

### Bug Fixes

-   **startup script:** build docker base, catch error of startup scripts ([ff5f0ac](https://github.com/digitopvn/diginext/commit/ff5f0ac9ae274262b4d8e2703e9db20efd09e7cb))
-   **startup script:** build docker base, catch error of startup scripts ([#179](https://github.com/digitopvn/diginext/issues/179)) ([d071b94](https://github.com/digitopvn/diginext/commit/d071b9472f84188513f4cb939706ac15e4c112d1))

# [3.6.0-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.6.0-prerelease.4...v3.6.0-prerelease.5) (2023-06-01)

### Bug Fixes

-   **clean up:** build docker base and deploy prerelease ([08e908f](https://github.com/digitopvn/diginext/commit/08e908f783d98bc6e1f14799f921ae42b6ffd178))
-   **clean up:** build docker base and deploy prerelease ([#178](https://github.com/digitopvn/diginext/issues/178)) ([5054cd9](https://github.com/digitopvn/diginext/commit/5054cd98725b2d3ec914024695bfeb51fab2f0e1))
-   **server:** update resource quota scale matrix ([1d859b7](https://github.com/digitopvn/diginext/commit/1d859b728b1837295e8af867477aef6cb809882f))

# [3.6.0-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.6.0-prerelease.3...v3.6.0-prerelease.4) (2023-06-01)

### Bug Fixes

-   **admin:** more responsive support for mobile screen ([940a5bf](https://github.com/digitopvn/diginext/commit/940a5bfe48922e91781a3f018a9a538dae19a9cf))
-   **admin:** more responsive support for mobile screen ([#177](https://github.com/digitopvn/diginext/issues/177)) ([5610304](https://github.com/digitopvn/diginext/commit/56103048f8496289ad34840a983bb661cddf54c9))

# [3.6.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.6.0-prerelease.2...v3.6.0-prerelease.3) (2023-05-31)

### Bug Fixes

-   **server:** delete project issue ([8798ba0](https://github.com/digitopvn/diginext/commit/8798ba03c510c563e695b53321630a53275ec9c7))

### Features

-   **server,admin:** partial support mobile screen ([aee3593](https://github.com/digitopvn/diginext/commit/aee3593820dde4ae73945a2538b0b928fce02c25))
-   **server,admin:** partial support mobile screen ([#175](https://github.com/digitopvn/diginext/issues/175)) ([6d515fe](https://github.com/digitopvn/diginext/commit/6d515fe04f780366ec84e4c191b395d5d04a59d1))

### Performance Improvements

-   **server:** delete project faster ([a06798a](https://github.com/digitopvn/diginext/commit/a06798a2f5994d8e86db60c5e73ade3b47e5771c))

# [3.6.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.6.0-prerelease.1...v3.6.0-prerelease.2) (2023-05-29)

### Bug Fixes

-   **server:** generate yaml not redirect when ssl issuer is none ([7d58ae3](https://github.com/digitopvn/diginext/commit/7d58ae314438d741da55a346d01bf52bbb3a835b))

# [3.6.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.6...v3.6.0-prerelease.1) (2023-05-29)

### Features

-   **server,cli:** add microk8s installation script ([99c7b7b](https://github.com/digitopvn/diginext/commit/99c7b7b5455e963001a98cce9aaa6b418aa2f578))
-   **server,cli:** add microk8s installation script ([#167](https://github.com/digitopvn/diginext/issues/167)) ([674b057](https://github.com/digitopvn/diginext/commit/674b0571b64811802eeac93d09f4e0e22721b1b7))

## [3.5.3-prerelease.6](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.5...v3.5.3-prerelease.6) (2023-05-29)

### Bug Fixes

-   **ga:** deploy condition fix ([17818f2](https://github.com/digitopvn/diginext/commit/17818f2607f2a53b74cd206f9933297586681663))
-   **ga:** deploy condition fix ([#165](https://github.com/digitopvn/diginext/issues/165)) ([982aae5](https://github.com/digitopvn/diginext/commit/982aae54cdd652509cd25be53cd25fab14701d57))

## [3.5.3-prerelease.5](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.4...v3.5.3-prerelease.5) (2023-05-29)

### Bug Fixes

-   **server:** select correct ingress class when generate yaml ([35ba370](https://github.com/digitopvn/diginext/commit/35ba3702658c64f171cd3751846b520ac5ac3448))
-   **server:** select correct ingress class when generate yaml ([#163](https://github.com/digitopvn/diginext/issues/163)) ([7364300](https://github.com/digitopvn/diginext/commit/7364300c7201e81f729fc4dbe1dfc39a62cbdd0f))

## [3.5.3-prerelease.4](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.3...v3.5.3-prerelease.4) (2023-05-29)

### Bug Fixes

-   **github actions:** deploy topgroup-v2 ([f57ce8d](https://github.com/digitopvn/diginext/commit/f57ce8d8a17b28bebedf79622f3571fbcc6ad313))

## [3.5.3-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.2...v3.5.3-prerelease.3) (2023-05-27)

### Bug Fixes

-   **github actions:** run next job on succesful jobs ([236bb91](https://github.com/digitopvn/diginext/commit/236bb9181c9f1a9c4a789f7e01aac72b9d740aeb))
-   **github actions:** run next job on succesful jobs ([#146](https://github.com/digitopvn/diginext/issues/146)) ([ba99e16](https://github.com/digitopvn/diginext/commit/ba99e1616a78655d0fe219f9e07869dfed7b33f1))

## [3.5.3-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.5.3-prerelease.1...v3.5.3-prerelease.2) (2023-05-27)

### Bug Fixes

-   **github actions:** combine docker release with main release flow ([ac13dc2](https://github.com/digitopvn/diginext/commit/ac13dc2f1d8009f5d4407fb4bf191f38823f052b))
-   **github actions:** combine docker release with main release flow ([#145](https://github.com/digitopvn/diginext/issues/145)) ([6c9bd5e](https://github.com/digitopvn/diginext/commit/6c9bd5ee2a5adf832a0d94ea018f578b846d01d8))

## [3.5.3-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.5.2...v3.5.3-prerelease.1) (2023-05-26)

### Bug Fixes

-   **bitbucket repo:** issue of creating new bitbucket repo ([#123](https://github.com/digitopvn/diginext/issues/123)) ([c4a6919](https://github.com/digitopvn/diginext/commit/c4a6919f919f8aa8a1279864b36ccc445f1789a0))

## [3.5.2](https://github.com/digitopvn/diginext/compare/v3.5.1...v3.5.2) (2023-05-26)

### Bug Fixes

-   **server,env vars:** fix env var can be empty ([14b3e79](https://github.com/digitopvn/diginext/commit/14b3e79b247e6e67a3a0f61251aeebc17eb292bc))
-   **server,env vars:** fix env var can be empty ([#141](https://github.com/digitopvn/diginext/issues/141)) ([e67e01c](https://github.com/digitopvn/diginext/commit/e67e01c373da98fc2699d8efcc8e95f0112414ab))
-   **server,generate deploy yaml:** env var value can be undefined ([5862cfb](https://github.com/digitopvn/diginext/commit/5862cfbf5b1b7fd6887164d77e8e8f5f5c4bdcd5))

## [3.5.1](https://github.com/digitopvn/diginext/compare/v3.5.0...v3.5.1) (2023-05-26)

### Bug Fixes

-   **server,startup script:** add retry method to registry connecting ([dda8c73](https://github.com/digitopvn/diginext/commit/dda8c73dbfdf2619d3d462bc0472181f79bba772))
-   **server:** authenticate registry before building & pushing image ([ecb682d](https://github.com/digitopvn/diginext/commit/ecb682db4b0bd6cf16964b7ecfa9bcfb4f3f413e))
-   **server:** authenticate registry before building & pushing image ([#140](https://github.com/digitopvn/diginext/issues/140)) ([44ddeaa](https://github.com/digitopvn/diginext/commit/44ddeaa8bab632478e8e96c879486550576a109a))
-   **server:** change clean up cronjob to 7 days ([e90eedc](https://github.com/digitopvn/diginext/commit/e90eedcf6c24cff3a979eb8b6646d5c290eefae2))

# [3.5.0](https://github.com/digitopvn/diginext/compare/v3.4.3...v3.5.0) (2023-05-24)

### Features

-   **server,admin:** view application deploy environment logs ([e51b6cc](https://github.com/digitopvn/diginext/commit/e51b6cc8cb9ec5ef95dd514d43827e435b3c499f))
-   **server:** app, deploy env - add health status and ready count ([950ec4a](https://github.com/digitopvn/diginext/commit/950ec4a7fe6bbbbb0aa2f3b526a80182838dc18e))
-   **server:** app, deploy env, healthz, logs ([#139](https://github.com/digitopvn/diginext/issues/139)) ([7e00a1a](https://github.com/digitopvn/diginext/commit/7e00a1a1b4fe7643a62eb49600dbd86a7711f286))

## [3.4.3](https://github.com/digitopvn/diginext/compare/v3.4.2...v3.4.3) (2023-05-23)

### Bug Fixes

-   **server,app controller:** re-generate yaml after updating env vars ([796eddd](https://github.com/digitopvn/diginext/commit/796eddd2280ebd15eeb354adb437b87891d664ca))
-   **server,app controller:** re-generate yaml after updating env vars ([#138](https://github.com/digitopvn/diginext/issues/138)) ([04bff87](https://github.com/digitopvn/diginext/commit/04bff8750066f3df90888d018cf9ae734d020ef2))
-   **server:** add podman to clean up cronjob ([fec4ee3](https://github.com/digitopvn/diginext/commit/fec4ee32cae2fc97ed70d42d6e88587229e139f2))
-   **server:** close db connection when app is terminated ([ae63891](https://github.com/digitopvn/diginext/commit/ae63891ae99f112c1005e5c5336ffc70d49fec70))

## [3.4.2](https://github.com/digitopvn/diginext/compare/v3.4.1...v3.4.2) (2023-05-23)

### Bug Fixes

-   **server,dockerfile:** define unqualified-search registries for podman ([c9da8b2](https://github.com/digitopvn/diginext/commit/c9da8b2c9cbb94f5e559ec82233b3fb3fc9b5473))
-   **server,dockerfile:** define unqualified-search registries for podman ([#137](https://github.com/digitopvn/diginext/issues/137)) ([541aa67](https://github.com/digitopvn/diginext/commit/541aa6748b38172183673f8b364b0df1e7808fe1))

## [3.4.1](https://github.com/digitopvn/diginext/compare/v3.4.0...v3.4.1) (2023-05-23)

### Bug Fixes

-   **cli:** correct workspace dx_key when ask for domain ([6cc060d](https://github.com/digitopvn/diginext/commit/6cc060daca1cea5c202c96db896640376c4ebf85))
-   **cli:** correct workspace dx_key when ask for domain ([#136](https://github.com/digitopvn/diginext/issues/136)) ([32b89e7](https://github.com/digitopvn/diginext/commit/32b89e7bdf4d431b5e701f29b73abb0b6761942a))
-   **server,admin:** add env vars, deployment yaml drawer ([889f24f](https://github.com/digitopvn/diginext/commit/889f24fa44bc66213c808450179a533112b17e73))

# [3.4.0](https://github.com/digitopvn/diginext/compare/v3.3.1...v3.4.0) (2023-05-22)

### Features

-   **server,admin:** modify deploy environment of app ([8c411e8](https://github.com/digitopvn/diginext/commit/8c411e84576311737c33e2e8623fcaad46a56a6d))
-   **server,admin:** modify deploy environment of app ([#135](https://github.com/digitopvn/diginext/issues/135)) ([13a57d9](https://github.com/digitopvn/diginext/commit/13a57d97bea15ca3e5edd97b14468f9b744d7a0b))

## [3.3.1](https://github.com/digitopvn/diginext/compare/v3.3.0...v3.3.1) (2023-05-22)

### Bug Fixes

-   **server,cli:** flag --create when dx new, dx key in workspace setting ([1722a70](https://github.com/digitopvn/diginext/commit/1722a702c8e2fc4c7dde2ce21d7cef5716c28a7a))
-   **server,cli:** flag --create when dx new, dx key in workspace setting ([#134](https://github.com/digitopvn/diginext/issues/134)) ([55e8d69](https://github.com/digitopvn/diginext/commit/55e8d69dd15222c2a78d00978c0107367c23fb2e))

# [3.3.0](https://github.com/digitopvn/diginext/compare/v3.2.2...v3.3.0) (2023-05-22)

### Bug Fixes

-   **server,api:** provider not found when creating git repo ([375e351](https://github.com/digitopvn/diginext/commit/375e3512f3518e03dcd06f76daeff875c91e1a14))
-   **server,cli:** issue of deleting env vars when update app config ([f798f1c](https://github.com/digitopvn/diginext/commit/f798f1ce8892b4c56d3c61c2325bb1ca06078a31))
-   **server,workspace:** delete related data when deleting workspace ([8850d36](https://github.com/digitopvn/diginext/commit/8850d36addc1f15ee1efd40e143b64c001ec1bd4))
-   **server:** generate incorrect resource quotas by size ([40a7485](https://github.com/digitopvn/diginext/commit/40a7485535cbe47d4663d9b2a42f034054456ad2))

### Features

-   **server,api:** check dx key when create workspace,domain ([2cb5f3f](https://github.com/digitopvn/diginext/commit/2cb5f3f83f142ce35ec54ff48cd15312a4b77755))
-   **server,api:** check dx key when create workspace,domain ([#132](https://github.com/digitopvn/diginext/issues/132)) ([b422f7e](https://github.com/digitopvn/diginext/commit/b422f7e247b2e81419af29cf6e41b5c89aedf827))
-   **server,cli:** issue of checking quota limit of workspace ([3464d54](https://github.com/digitopvn/diginext/commit/3464d54049a906b4dc1199d36ce113a383bd8389))

## [3.2.2](https://github.com/digitopvn/diginext/compare/v3.2.1...v3.2.2) (2023-05-20)

### Bug Fixes

-   **new-app:** skip check verbose git | display progress default 0 ([1ce901a](https://github.com/digitopvn/diginext/commit/1ce901aa89b0fac64083b601efb1fa36b58dd5ed))
-   restore dev:nodemon ([366fec5](https://github.com/digitopvn/diginext/commit/366fec52a7394be36d442561a309d2383dfba563))

## [3.2.1](https://github.com/digitopvn/diginext/compare/v3.2.0...v3.2.1) (2023-05-16)

### Bug Fixes

-   **server,api:** add create release from app api ([dfac727](https://github.com/digitopvn/diginext/commit/dfac7270a5dae5bfcd2fdc7947738c185edbd986))
-   **server,api:** add create release from app api ([#129](https://github.com/digitopvn/diginext/issues/129)) ([4417a25](https://github.com/digitopvn/diginext/commit/4417a25089ac544a447ac8944c151b7ebfdcd442))
-   **server,api:** add swagger doc comments ([39d486d](https://github.com/digitopvn/diginext/commit/39d486dbcb23c87dd8079a0fe423da2de43f9bb5))

# [3.2.0](https://github.com/digitopvn/diginext/compare/v3.1.1...v3.2.0) (2023-05-15)

### Bug Fixes

-   **server,api:** add --build-arg to build process ([d6275f4](https://github.com/digitopvn/diginext/commit/d6275f42fde6a38fc0e8099c68843b938d3784de))
-   **server,api:** issue of x-api-key not working ([4e1ca4e](https://github.com/digitopvn/diginext/commit/4e1ca4ee1b898cf1b3ee6329f2da205ca6cd32ce))
-   **server:** check existing domain when add new ([2c87d2a](https://github.com/digitopvn/diginext/commit/2c87d2a16bfd6349238d56696ce4a95b5606d668))
-   **server:** issue of not update new domains ([6715df1](https://github.com/digitopvn/diginext/commit/6715df1b1aa5ec163988655ae422cca16963dc30))

### Features

-   **server:** add domains to production environment ([aa459bf](https://github.com/digitopvn/diginext/commit/aa459bfec2f495be62034632a79ead9e3b937174))
-   **server:** add new domain to app deploy environment ([19ff3f6](https://github.com/digitopvn/diginext/commit/19ff3f6f73c3db136b329d1b27539f2115739622))

## [3.1.1](https://github.com/digitopvn/diginext/compare/v3.1.0...v3.1.1) (2023-05-11)

### Bug Fixes

-   **cli,server:** update git provider name for apps if it's not existed ([a19e593](https://github.com/digitopvn/diginext/commit/a19e593d161fc1deb002973d0a021ba6ae69d438))
-   **cli:** fallback dx.json support for find project and app ([831b267](https://github.com/digitopvn/diginext/commit/831b267243553574ba626382cd95168106972756))
-   **cli:** fallback dx.json support for find project and app ([#127](https://github.com/digitopvn/diginext/issues/127)) ([cb3d229](https://github.com/digitopvn/diginext/commit/cb3d229f2bf1b102285924f2936c6c46f50597a3))
-   **server:** cannot verify git provider after connecting ([e59b84a](https://github.com/digitopvn/diginext/commit/e59b84a042bfa72b99cd1533b67526e816339c39))
-   **server:** when rollout skip checking ingress if ssl is none ([28f9f86](https://github.com/digitopvn/diginext/commit/28f9f8639f8cb5f1366e167e23da8a1f546e91bb))

# [3.1.0](https://github.com/digitopvn/diginext/compare/v3.0.5...v3.1.0) (2023-05-10)

### Bug Fixes

-   **server, cli:** update git info while deploying app ([e914041](https://github.com/digitopvn/diginext/commit/e914041f5ca1db951dbfdbecfc3302720f71975c))
-   **server, cli:** update git info while deploying app ([#126](https://github.com/digitopvn/diginext/issues/126)) ([4db5d4a](https://github.com/digitopvn/diginext/commit/4db5d4a26f4ea4457aedf49ebe50a25ee188cb85))
-   **server:** app constroller git info is required ([e4fa77e](https://github.com/digitopvn/diginext/commit/e4fa77ef08c9081abeb465226feff4bc1f7877da))
-   **server:** can't update app config ([355b16e](https://github.com/digitopvn/diginext/commit/355b16e6e19bcfa840dffa130cf4ffcf08c662fb))

### Features

-   **admin:** connect and list connected git providers ([3018bae](https://github.com/digitopvn/diginext/commit/3018bae5eee14cc78cf33de878775aef0c40a27c))

## [3.0.5](https://github.com/digitopvn/diginext/compare/v3.0.4...v3.0.5) (2023-05-10)

### Bug Fixes

-   **bitbucket repo:** issue of creating new bitbucket repo ([ee3d23b](https://github.com/digitopvn/diginext/commit/ee3d23bea6fe47ecf55384a1475568fb09d7f6a0))
-   **bitbucket:** catch error when fetch api of bitbucket ([68a977a](https://github.com/digitopvn/diginext/commit/68a977a97822ccacb18084579ab7f29cada81a79))
-   **build,deploy:** add cli version for tracking ([86e54ba](https://github.com/digitopvn/diginext/commit/86e54bacc61c53af8b48cbd767aed6f07c14c42c))
-   **git provider:** add api connect github and bitbucket ([197a916](https://github.com/digitopvn/diginext/commit/197a916ef1252952c848c3f04b27ac87e5d24d86))
-   **github:** create github repo when create new or init app ([0cb841f](https://github.com/digitopvn/diginext/commit/0cb841fdb40ff0a6df481bc9e84c1b2a9d82b67c))
-   **server-info:** skip docker or podman ver if not available ([d5d2e15](https://github.com/digitopvn/diginext/commit/d5d2e15093e6ccc7086a44d58f98c705a4f1e77d))

## [3.0.5-prerelease.1](https://github.com/digitopvn/diginext/compare/v3.0.4...v3.0.5-prerelease.1) (2023-04-27)

### Bug Fixes

-   **bitbucket:** catch error when fetch api of bitbucket ([68a977a](https://github.com/digitopvn/diginext/commit/68a977a97822ccacb18084579ab7f29cada81a79))
-   **build,deploy:** add cli version for tracking ([86e54ba](https://github.com/digitopvn/diginext/commit/86e54bacc61c53af8b48cbd767aed6f07c14c42c))
-   **git provider:** add api connect github and bitbucket ([197a916](https://github.com/digitopvn/diginext/commit/197a916ef1252952c848c3f04b27ac87e5d24d86))
-   **github:** create github repo when create new or init app ([0cb841f](https://github.com/digitopvn/diginext/commit/0cb841fdb40ff0a6df481bc9e84c1b2a9d82b67c))
-   **server-info:** skip docker or podman ver if not available ([d5d2e15](https://github.com/digitopvn/diginext/commit/d5d2e15093e6ccc7086a44d58f98c705a4f1e77d))

## [3.0.4](https://github.com/digitopvn/diginext/compare/v3.0.3...v3.0.4) (2023-04-20)

### Bug Fixes

-   **release flow:** skip ci when update pkg ver ([eb7f348](https://github.com/digitopvn/diginext/commit/eb7f34881e833169570010f74159bca5f725ece4))

## [3.0.3](https://github.com/digitopvn/diginext/compare/v3.0.2...v3.0.3) (2023-04-20)

### Bug Fixes

-   **request-deploy:** add more info to debug request deploy ([e7e3eb5](https://github.com/digitopvn/diginext/commit/e7e3eb569298bc1571d3e139e6b9216d32d01f52))

## [3.0.2](https://github.com/digitopvn/diginext/compare/v3.0.1...v3.0.2) (2023-04-20)

### Bug Fixes

-   **builds:** ensure workspace string to object id ([de57d3e](https://github.com/digitopvn/diginext/commit/de57d3efa79bb6d234d4426086344197557e7924))
-   **podman:** login issue with gcr.io ([77374b8](https://github.com/digitopvn/diginext/commit/77374b8fc21a6b415297dbb0e9d7d3f73d63ce19))
-   **user,service_account,api_key:** drop unique index in username field ([4e7f3c3](https://github.com/digitopvn/diginext/commit/4e7f3c3404daeda9428f535b2dccdfe3a05985f0))

## [3.0.1](https://github.com/digitopvn/diginext/compare/v3.0.0...v3.0.1) (2023-04-19)

### Bug Fixes

-   **package.json:** reorder semantic release plugins ([5263c77](https://github.com/digitopvn/diginext/commit/5263c7792837e97b0661d69e9006bc7093ed209c))
-   **write dx config:** ignore package.json if not existed ([7b338fa](https://github.com/digitopvn/diginext/commit/7b338fa5800d5b90c812abd750095ed56d202e5a))

# [3.0.0](https://github.com/digitopvn/diginext/compare/v2.11.2...v3.0.0) (2023-04-19)

### Bug Fixes

-   **app controller:** avoid deleting namespaces while deleting apps ([deb9df6](https://github.com/digitopvn/diginext/commit/deb9df60080a02b0fdc0213958f1ff1ad450cecc))
-   **app controller:** should not delete namespace when deleting deploy environment ([eaa1dba](https://github.com/digitopvn/diginext/commit/eaa1dba27f9b2da3327db4970cbfdb0d2ad93f72))
-   **base controller:** fix incorrect pagination in api response ([d435e2f](https://github.com/digitopvn/diginext/commit/d435e2f49bcc8922769373ec1e4eff400290056d))
-   **base service:** add pre hook to set update and create time ([5d8658c](https://github.com/digitopvn/diginext/commit/5d8658c0b2d23e061a6f50cca41edd630e1c71d7))
-   **base service:** fix maximum call stack size exceed ([9b9563e](https://github.com/digitopvn/diginext/commit/9b9563ebf011122789c00c7b75c9ee37f953f07d))
-   **base service:** issue when traverse object and convert objectid to string ([597b762](https://github.com/digitopvn/diginext/commit/597b762b325599180857b7482912c4169245bcd4))
-   **commitlint:** ignore chore commit message ([93953c4](https://github.com/digitopvn/diginext/commit/93953c4cb1405d81c207e5c6a19f84d11d8fff93))
-   **create release:** resolve conflicts ([bce9294](https://github.com/digitopvn/diginext/commit/bce9294daa24391d1e0b53e1c0299f22efbb703c))
-   **docker compose test:** successfully run tests in docker compose file ([95923e0](https://github.com/digitopvn/diginext/commit/95923e064dc035144d8efcb31fe65eb4b2049a19))
-   **entities:** add collection name to entity models ([616b918](https://github.com/digitopvn/diginext/commit/616b91859d5d204e2cd9b8d606a9932efd60fb8a))
-   **helpers:** use different db name for testing and drop test db after finish ([98f1112](https://github.com/digitopvn/diginext/commit/98f11121ed57144aa696f1fd9ffa4d9ad1ef9395))
-   **project:** issue of deleting project ([c352588](https://github.com/digitopvn/diginext/commit/c3525882c9b8c8dc1ef5c045f75d08b82144f05d))
-   **release workflow:** add ci github token ([b429b13](https://github.com/digitopvn/diginext/commit/b429b138b3393ab31359cf72c5363ad04611ac12))
-   **release workflow:** add ci github token ([00264ff](https://github.com/digitopvn/diginext/commit/00264ff4ff78169a17b63005e86d08b2bcaa25e1))
-   **release workflow:** release new version won't be published ([90b1630](https://github.com/digitopvn/diginext/commit/90b1630ff27d1022363aeffa4809f0c28ebb1019))
-   **release:** try release a prerelease version and publish ([a68772a](https://github.com/digitopvn/diginext/commit/a68772af463ecac53b7c5807f6e23617d9a0a276))
-   **routes:** default deleted at is null, should be undefined ([0f5a581](https://github.com/digitopvn/diginext/commit/0f5a58147dd8d2cf316b2c3d2f6523925fd2c3c0))
-   **server:** default owner when create build env ([a62e420](https://github.com/digitopvn/diginext/commit/a62e420d2a5010e37408722e46b9fc3857c09dea))
-   **startup script:** avoid repeated migration tasks ([c82a0a9](https://github.com/digitopvn/diginext/commit/c82a0a9155f0c1d7a2b6bdb7012020cdb1575d47))

### Code Refactoring

-   **all:** migrate from typeorm to mongoose ([c17e103](https://github.com/digitopvn/diginext/commit/c17e1037458b01bcc63e69527f3aba630a31e16b))

### Features

-   **release:** release 3.0.0 ([1260516](https://github.com/digitopvn/diginext/commit/12605160588e145498bda9b3bd3f1cc1f85178e9))
-   **server:** add api check status build ([563ab11](https://github.com/digitopvn/diginext/commit/563ab11f2bfb629000d66ba63611e2e30c90e821))

### Reverts

-   **all:** use mongo objectid instead of typeorm objectid ([8e21710](https://github.com/digitopvn/diginext/commit/8e21710a5377eac0c5bc43f727c5491e21e4c66f))

### BREAKING CHANGES

-   **all:** migrate from typeorm to mongoose

# [3.0.0-prerelease.3](https://github.com/digitopvn/diginext/compare/v3.0.0-prerelease.2...v3.0.0-prerelease.3) (2023-04-19)

### Bug Fixes

-   **create release:** resolve conflicts ([bce9294](https://github.com/digitopvn/diginext/commit/bce9294daa24391d1e0b53e1c0299f22efbb703c))
-   **server:** default owner when create build env ([a62e420](https://github.com/digitopvn/diginext/commit/a62e420d2a5010e37408722e46b9fc3857c09dea))

### Features

-   **server:** add api check status build ([563ab11](https://github.com/digitopvn/diginext/commit/563ab11f2bfb629000d66ba63611e2e30c90e821))

# [3.0.0-prerelease.2](https://github.com/digitopvn/diginext/compare/v3.0.0-prerelease.1...v3.0.0-prerelease.2) (2023-04-19)

### Bug Fixes

-   **release:** try release a prerelease version and publish ([a68772a](https://github.com/digitopvn/diginext/commit/a68772af463ecac53b7c5807f6e23617d9a0a276))

# [3.0.0-prerelease.1](https://github.com/digitopvn/diginext/compare/v2.11.2...v3.0.0-prerelease.1) (2023-04-19)

### Bug Fixes

-   **app controller:** avoid deleting namespaces while deleting apps ([deb9df6](https://github.com/digitopvn/diginext/commit/deb9df60080a02b0fdc0213958f1ff1ad450cecc))
-   **app controller:** should not delete namespace when deleting deploy environment ([eaa1dba](https://github.com/digitopvn/diginext/commit/eaa1dba27f9b2da3327db4970cbfdb0d2ad93f72))
-   **base controller:** fix incorrect pagination in api response ([d435e2f](https://github.com/digitopvn/diginext/commit/d435e2f49bcc8922769373ec1e4eff400290056d))
-   **base service:** add pre hook to set update and create time ([5d8658c](https://github.com/digitopvn/diginext/commit/5d8658c0b2d23e061a6f50cca41edd630e1c71d7))
-   **base service:** fix maximum call stack size exceed ([9b9563e](https://github.com/digitopvn/diginext/commit/9b9563ebf011122789c00c7b75c9ee37f953f07d))
-   **base service:** issue when traverse object and convert objectid to string ([597b762](https://github.com/digitopvn/diginext/commit/597b762b325599180857b7482912c4169245bcd4))
-   **commitlint:** ignore chore commit message ([93953c4](https://github.com/digitopvn/diginext/commit/93953c4cb1405d81c207e5c6a19f84d11d8fff93))
-   **docker compose test:** successfully run tests in docker compose file ([95923e0](https://github.com/digitopvn/diginext/commit/95923e064dc035144d8efcb31fe65eb4b2049a19))
-   **entities:** add collection name to entity models ([616b918](https://github.com/digitopvn/diginext/commit/616b91859d5d204e2cd9b8d606a9932efd60fb8a))
-   **helpers:** use different db name for testing and drop test db after finish ([98f1112](https://github.com/digitopvn/diginext/commit/98f11121ed57144aa696f1fd9ffa4d9ad1ef9395))
-   **project:** issue of deleting project ([c352588](https://github.com/digitopvn/diginext/commit/c3525882c9b8c8dc1ef5c045f75d08b82144f05d))
-   **release workflow:** release new version won't be published ([90b1630](https://github.com/digitopvn/diginext/commit/90b1630ff27d1022363aeffa4809f0c28ebb1019))
-   **routes:** default deleted at is null, should be undefined ([0f5a581](https://github.com/digitopvn/diginext/commit/0f5a58147dd8d2cf316b2c3d2f6523925fd2c3c0))
-   **startup script:** avoid repeated migration tasks ([c82a0a9](https://github.com/digitopvn/diginext/commit/c82a0a9155f0c1d7a2b6bdb7012020cdb1575d47))

### Code Refactoring

-   **all:** migrate from typeorm to mongoose ([c17e103](https://github.com/digitopvn/diginext/commit/c17e1037458b01bcc63e69527f3aba630a31e16b))

### Reverts

-   **all:** use mongo objectid instead of typeorm objectid ([8e21710](https://github.com/digitopvn/diginext/commit/8e21710a5377eac0c5bc43f727c5491e21e4c66f))

### BREAKING CHANGES

-   **all:** migrate from typeorm to mongoose

## [2.11.2](https://github.com/digitopvn/diginext/compare/v2.11.1...v2.11.2) (2023-04-12)

### Bug Fixes

-   **all:** use tohexstring to convert object id to string ([976b501](https://github.com/digitopvn/diginext/commit/976b50131d849b9777ab299946a46d15473844cf))
-   **server:** add activity log and fix missing id when parse request filter ([b20c916](https://github.com/digitopvn/diginext/commit/b20c916ea62011dedb6d07ffcb5df6bdb5d6d60f))
-   **server:** issue of duplicated roles when seeding default workspace roles ([2a46a78](https://github.com/digitopvn/diginext/commit/2a46a785d6d28b1b3082742afc8115d782da0482))

## [2.11.1](https://github.com/digitopvn/diginext/compare/v2.11.0...v2.11.1) (2023-04-12)

### Bug Fixes

-   **server:** [hotfix] auto parse json in controllers ([5ba3017](https://github.com/digitopvn/diginext/commit/5ba30177a1a7912ccce50a30bb03ddb6877bc5c6))
-   **server:** default framework typo issue ([ae40b49](https://github.com/digitopvn/diginext/commit/ae40b49e26c05723a33cd9bf399abc35a156c4f5))
-   **server:** issue of seeding default frameworks when create workspace ([0534ac2](https://github.com/digitopvn/diginext/commit/0534ac28b5b05e05c3d1f2ec3497bc88863ec54d))

# [2.11.0](https://github.com/digitopvn/diginext/compare/v2.10.1...v2.11.0) (2023-04-12)

### Bug Fixes

-   **server:** check active workspace when authentication ([890ff67](https://github.com/digitopvn/diginext/commit/890ff67b54cad87ba86a4fa00e78c21654b65e17))
-   **server:** check required stack installation when adding new clusters ([190377b](https://github.com/digitopvn/diginext/commit/190377b1fe6a48b4e2f7fbe4950fb7bbfcab2573))
-   **server:** issue of seeding incorrect default api key ([593a490](https://github.com/digitopvn/diginext/commit/593a490fd3b476f4a33886e9bceba5ceb66c5681))
-   **server:** mask some sensitive info to member role ([c4f93f7](https://github.com/digitopvn/diginext/commit/c4f93f7aa91825c993ed893f82a8bf4b5af58127))
-   **server:** respond empty for sensitive info ([a0e846e](https://github.com/digitopvn/diginext/commit/a0e846ee6d430481247ac1f32c38fe5b04cda96c))
-   **server:** set default moderator role to service account and api key when create ws ([f838783](https://github.com/digitopvn/diginext/commit/f838783d857a7cfafb5b274500b325f3c5eafd83))

### Features

-   **server and admin:** workspace privacy switching ([2a2fed8](https://github.com/digitopvn/diginext/commit/2a2fed898595e95b0a84fb5311b0dedcd76f5346))

## [2.10.1](https://github.com/digitopvn/diginext/compare/v2.10.0...v2.10.1) (2023-04-09)

### Bug Fixes

-   **server:** container registry controller - fix create and update data validation ([5d103a3](https://github.com/digitopvn/diginext/commit/5d103a3f073d10f0ab76c3541e014d9f4d572851))

# [2.10.0](https://github.com/digitopvn/diginext/compare/v2.9.2...v2.10.0) (2023-04-08)

### Bug Fixes

-   **cli:** set default host when adding new container registry ([9837c16](https://github.com/digitopvn/diginext/commit/9837c1674768db05140da058d754706c2103abd3))
-   **cli:** set or confirm default host when adding new container registry ([40da946](https://github.com/digitopvn/diginext/commit/40da94636daa1b8976e2dac595defb2ab3e03108))

### Features

-   **cli:** support docker container registry: add, connect, create image pull secrets ([bb3792e](https://github.com/digitopvn/diginext/commit/bb3792e87c10b599e5004b68a92cfc4939a6f1ad))

## [2.9.2](https://github.com/digitopvn/diginext/compare/v2.9.1...v2.9.2) (2023-04-07)

### Bug Fixes

-   **cli:** update diginext site url to diginext.vn ([f5fe0d7](https://github.com/digitopvn/diginext/commit/f5fe0d787ee1e0c28a674decf88bc06f02c3620a))

## [2.9.1](https://github.com/digitopvn/diginext/compare/v2.9.0...v2.9.1) (2023-04-07)

### Bug Fixes

-   **cli:** issue of duplicated tls ingress when generate ingress yaml ([563709f](https://github.com/digitopvn/diginext/commit/563709fc248078cdaa7d758d2451984407114bb6))
-   **server and cli:** leave empty to generate tls secret automatically if using letsencrypt issuer ([ba5d235](https://github.com/digitopvn/diginext/commit/ba5d23509352b18f8e49a81fffa622877d176adc))

# [2.9.0](https://github.com/digitopvn/diginext/compare/v2.8.13...v2.9.0) (2023-04-07)

### Bug Fixes

-   **server:** issue of missing permissions in default moderator role ([2237208](https://github.com/digitopvn/diginext/commit/2237208313a52eab1c63e1dce432cd0a8747b02a))
-   **server:** prevent overriding git global config when developing diginext ([f64b108](https://github.com/digitopvn/diginext/commit/f64b108d79c2e0f78d10821a7654046d6fbecffc))
-   **server:** update default member role should not access server key and api token ([8615c89](https://github.com/digitopvn/diginext/commit/8615c892dc03e3b32aeb353b683ca054c1b64c02))

### Features

-   **cli:** git - github auth, profile, support github helper commands ([f4bd969](https://github.com/digitopvn/diginext/commit/f4bd969da53c1c1b13ea719ecd0059860a99e802))

## [2.8.13](https://github.com/digitopvn/diginext/compare/v2.8.12...v2.8.13) (2023-04-07)

### Bug Fixes

-   **admin:** add create or select workspace page ([e6c8e5c](https://github.com/digitopvn/diginext/commit/e6c8e5cd2bcddae6d9fcbfd7f79dc0398af92507))
-   **admin:** show public key in workspace settings ([d6eefc5](https://github.com/digitopvn/diginext/commit/d6eefc5b3a37747b3daa35a265838e7a2f8f0187))
-   **cli and server:** move workspace creation to admin ui completly ([d13964a](https://github.com/digitopvn/diginext/commit/d13964a624046eff5de4b799e0278e7ebdb1ec68))
-   **cli:** add select resource size when deploy app ([d978173](https://github.com/digitopvn/diginext/commit/d978173e043a327a3ff0ac24f530a722547c79ac))
-   **cli:** parse options and write deploy environment to dx json ([332f928](https://github.com/digitopvn/diginext/commit/332f928db999b0721ccdc5bfa16b780dbfec922a))
-   **server:** add routes controller and api ([cff894b](https://github.com/digitopvn/diginext/commit/cff894b9943620704c67afe14d43f46021f48d9b))
-   **server:** build - add log message when cloning source code ([ec85b76](https://github.com/digitopvn/diginext/commit/ec85b7657f222df0ba6da7fe2fa29df1668963a3))
-   **server:** build - delete app cache dir when cloning new source code ([37bdd61](https://github.com/digitopvn/diginext/commit/37bdd619148476d55d6934dc3dbb5ff18c5a28ca))
-   **server:** expose user profile api ([4a451c3](https://github.com/digitopvn/diginext/commit/4a451c31416a775d1e929e0d9d0550b20df447ce))
-   **server:** fix login api logic to select and create workspace if needed ([f7bb9e3](https://github.com/digitopvn/diginext/commit/f7bb9e3d7b82ba09625ea02c89ce9aa54e4b7bfc))
-   **server:** make log of authorization looks clearer ([7d98f1e](https://github.com/digitopvn/diginext/commit/7d98f1e4be55b351ec04fc862b854d81591aa3f5))
-   **server:** missing controller registration in workspace route ([ed5c1e1](https://github.com/digitopvn/diginext/commit/ed5c1e11014b051d24af3ca57bd994398ee91209))
-   **server:** optimize parsed data from request to register controller middleware ([c230419](https://github.com/digitopvn/diginext/commit/c23041951c317d50d05e2ce13b1e6e8ff9b3db03))
-   **server:** seed initial data when creating a new workspace ([dd84ebc](https://github.com/digitopvn/diginext/commit/dd84ebc4c290d621f0c3a9f4c96d3cd8a2f8fad6))

## [2.8.12](https://github.com/digitopvn/diginext/compare/v2.8.11...v2.8.12) (2023-04-04)

### Bug Fixes

-   **cli:** issue: cannot pull framework when create new app ([175b930](https://github.com/digitopvn/diginext/commit/175b9309ea92dd83d90fa5bb5cf65935ddf0d4b5))
-   **server and cli:** correct home directory when generate ssh keys ([4a2c203](https://github.com/digitopvn/diginext/commit/4a2c203207e191a7e231521458197b536d30c27b))
-   **server:** delete current prerelease deployments when preview a release ([aec5f43](https://github.com/digitopvn/diginext/commit/aec5f43b66ea69147f89294aa776e630354e8531))
-   **server:** error checking in release controller ([e6e18a4](https://github.com/digitopvn/diginext/commit/e6e18a48118bd55f5d9e13e2dec2d52589745368))
-   **template:** remove secrets ([b7878c7](https://github.com/digitopvn/diginext/commit/b7878c73fe1879e1dcd48bb5d1331a88dab2c4ed))

## [2.8.11](https://github.com/digitopvn/diginext/compare/v2.8.10...v2.8.11) (2023-04-04)

### Bug Fixes

-   **admin:** build list: add env to roll out build api call ([db4af38](https://github.com/digitopvn/diginext/commit/db4af38ab80da37ab7f8c1ad2e67dc88654438e3))
-   **server:** correct owner of release when create from a build ([ad207b9](https://github.com/digitopvn/diginext/commit/ad207b9271d346306c09c478f7183b6cf17f217b))
-   **server:** use workspace id to create release from build ([505f8c5](https://github.com/digitopvn/diginext/commit/505f8c59c13082297d2abf8917c20d188ca801c9))

## [2.8.10](https://github.com/digitopvn/diginext/compare/v2.8.9...v2.8.10) (2023-04-04)

### Bug Fixes

-   **admin:** add profile page ([6fa1056](https://github.com/digitopvn/diginext/commit/6fa10564451992794ecd7c25e254d673869dde5f))
-   **server and admin:** improve ux when create or update cluster ([d523acb](https://github.com/digitopvn/diginext/commit/d523acbac420cf9abe0c5eab5b44ad50bdf98024))
-   **server:** add member permissions to release and build api ([acf421e](https://github.com/digitopvn/diginext/commit/acf421e5e713d6257ffcfa0620b02e0a19c6b71f))
-   **server:** generate domain on server will not use api but direct function ([e47ec5c](https://github.com/digitopvn/diginext/commit/e47ec5ce154aa37ae27e4b42975f6902c0cd60d7))
-   **server:** workspace id is string issue when create new build ([aef411e](https://github.com/digitopvn/diginext/commit/aef411e45c9dbc0091483228c3c429fd2b62102d))

## [2.8.9](https://github.com/digitopvn/diginext/compare/v2.8.8...v2.8.9) (2023-04-03)

### Bug Fixes

-   **cli and server:** deploy issue of unauthorized, missing route permisions ([9af10b5](https://github.com/digitopvn/diginext/commit/9af10b5563597948a4738321869d9d3b3ca82aef))
-   **cli:** login is missing workspaces ([7de65a2](https://github.com/digitopvn/diginext/commit/7de65a2527d95562a7dcb73544b94123764d4bf4))
-   **server:** delete existing ingress rule if any when deploy ([892bc46](https://github.com/digitopvn/diginext/commit/892bc4630c935b4d042903750514903fea6e99d5))

## [2.8.8](https://github.com/digitopvn/diginext/compare/v2.8.7...v2.8.8) (2023-04-03)

### Bug Fixes

-   **admin:** assign role to users ([0e2272d](https://github.com/digitopvn/diginext/commit/0e2272db3ecb198f34f63c4629a6f707c450820c))
-   **server:** filter user roles by workspace and assign new role to user ([e10298b](https://github.com/digitopvn/diginext/commit/e10298ba9faf5a607336d07511f86c13dcb561f3))
-   **server:** migrate and assign role to user ([913c743](https://github.com/digitopvn/diginext/commit/913c743d9dc59b36629eb6afc0c3a0beb8133e2e))
-   **server:** register controller for all api routes ([678826f](https://github.com/digitopvn/diginext/commit/678826f04b91b9d33b3b0a8a8e49d0f3498f9411))

## [2.8.7](https://github.com/digitopvn/diginext/compare/v2.8.6...v2.8.7) (2023-03-31)

### Bug Fixes

-   **admin:** change api to fetch build logs ([6f4fb88](https://github.com/digitopvn/diginext/commit/6f4fb883b8c38c242c0743d633523d8148054966))
-   **admin:** display error message when authorization failure ([2bd861e](https://github.com/digitopvn/diginext/commit/2bd861e1fd45f8ab53d0bd92232735d4fca52dbd))
-   **cli and server:** generate domain, process api middleware, init failed old app ([fa682ad](https://github.com/digitopvn/diginext/commit/fa682ad95249bbe636b09c13304c5dfc45627c8f))
-   **cli and server:** issue of uploading dotenv file to prod environment ([c0eff35](https://github.com/digitopvn/diginext/commit/c0eff355abecc30d38e0fad0aaf36b879c5eec38))
-   **cli:** re-generate domain with app slug if domain length is over 64 chars ([301f6e1](https://github.com/digitopvn/diginext/commit/301f6e1f266d6f17b4d45802030cb2e4f688024b))
-   **server:** add authorization to app controller ([2251595](https://github.com/digitopvn/diginext/commit/22515954e0ab64342d45fa6051df3981ed3a7f89))
-   **server:** apply rbac middleware to all api routes ([a6225a8](https://github.com/digitopvn/diginext/commit/a6225a8099b9a43932dbbba8f6a84678bb82614c))
-   **server:** limit in pagination should be number ([a0d0d51](https://github.com/digitopvn/diginext/commit/a0d0d510462c69dd0faa68cf836282e4baf03bb5))
-   **server:** print content of yaml if deploy error ([43d3238](https://github.com/digitopvn/diginext/commit/43d3238fa1813309b52065fe2e6d22c5de9aee3a))

## [2.8.6](https://github.com/digitopvn/diginext/compare/v2.8.5...v2.8.6) (2023-03-30)

### Bug Fixes

-   **cli:** upload dot env file first time deploy as default ([4412c50](https://github.com/digitopvn/diginext/commit/4412c50f3678bdaf4862f4b94f93c830bc5c2c6c))
-   **cli:** validate cluster before requesting deployment ([e8e9a5e](https://github.com/digitopvn/diginext/commit/e8e9a5e3bff61244404b5b5e7da77f591e0a9fed))
-   **server:** issue of git pulling cache previous build ([873eead](https://github.com/digitopvn/diginext/commit/873eead16413cac6ec3890cb077bf13812cd1de6))

## [2.8.5](https://github.com/digitopvn/diginext/compare/v2.8.4...v2.8.5) (2023-03-30)

### Bug Fixes

-   **clean up:** remove logging messages ([cb1eb24](https://github.com/digitopvn/diginext/commit/cb1eb2458f05695a8f490d24c859bc5ba51a9227))
-   **server:** api user list all incorrect filter ([56c4d7c](https://github.com/digitopvn/diginext/commit/56c4d7c875872cbbf605928ee0407141e064b519))
-   **server:** set active workspace in jwt verification ([f12e71a](https://github.com/digitopvn/diginext/commit/f12e71a5815a11081ea8d75c1bb3f8e9bd7fc31d))

## [2.8.4](https://github.com/digitopvn/diginext/compare/v2.8.3...v2.8.4) (2023-03-30)

### Bug Fixes

-   **server:** add deploy from source code api ([5d74ffb](https://github.com/digitopvn/diginext/commit/5d74ffbbe5002dbb6b5e29ae3a8f718bd29d004f))
-   **server:** issue of incorrect login access token ([4867b26](https://github.com/digitopvn/diginext/commit/4867b26fed1f055e7285b8c1640a3cc2e4b7aa1f))

## [2.8.3](https://github.com/digitopvn/diginext/compare/v2.8.2...v2.8.3) (2023-03-29)

### Bug Fixes

-   **server:** config global user for git commands ([c9c2552](https://github.com/digitopvn/diginext/commit/c9c2552811d6a6af73427a0351eeffb1b3feab02))
-   **server:** setup global identity for git config ([5cbbe8d](https://github.com/digitopvn/diginext/commit/5cbbe8d293525beb903b22db6b60337e97c021ef))

## [2.8.2](https://github.com/digitopvn/diginext/compare/v2.8.1...v2.8.2) (2023-03-29)

### Bug Fixes

-   **server:** optimizing isEmpty validation ([0a0e62d](https://github.com/digitopvn/diginext/commit/0a0e62dfdf3ee44854ba83db11bb6d346a956ac2))
-   **server:** source git pull now using --no-ff ([0911edc](https://github.com/digitopvn/diginext/commit/0911edccf6b8417019a0a9d0a1ab81815c6c32d9))

## [2.8.1](https://github.com/digitopvn/diginext/compare/v2.8.0...v2.8.1) (2023-03-29)

### Bug Fixes

-   **server:** issue of project validation when deploying ([c4774c1](https://github.com/digitopvn/diginext/commit/c4774c1e396e0c69018cc96ca1e3a347e92a0cde))
-   **server:** lodash isEmpty is not validating properly ([3bcbb4b](https://github.com/digitopvn/diginext/commit/3bcbb4bb4e333e9733f5a6ba5a61501b27cb7b1a))

# [2.8.0](https://github.com/digitopvn/diginext/compare/v2.7.0...v2.8.0) (2023-03-29)

### Bug Fixes

-   **admin:** remove unneccessary info of cloud providers ([713d41d](https://github.com/digitopvn/diginext/commit/713d41dbdf0cc88a95e066a268265ac183d4bbe3))
-   **server:** issue of cluster validation when creating new ([0830337](https://github.com/digitopvn/diginext/commit/0830337243a415cdae7c6031f638154de73216b3))
-   **server:** migrate default roles for all workspaces ([a09a92e](https://github.com/digitopvn/diginext/commit/a09a92e07beb1d9cd5fe892a5271cd0937d341e4))

### Features

-   **server:** create default roles and assign to workspace members ([7930c11](https://github.com/digitopvn/diginext/commit/7930c11f64f679ce2ea68b5da4e393fbf96a8c11))

# [2.7.0](https://github.com/digitopvn/diginext/compare/v2.6.6...v2.7.0) (2023-03-27)

### Bug Fixes

-   **admin:** display api key access token in workspace setting ([e3c0751](https://github.com/digitopvn/diginext/commit/e3c07518294da23df537b662f7e4c4c4a821f616))
-   **cli token:** fix empty token in profile api ([4621899](https://github.com/digitopvn/diginext/commit/462189945098d4edb32bc83acc4a7ffce803d9e3))
-   **server:** issue of missing params when create new app ([91bf189](https://github.com/digitopvn/diginext/commit/91bf189b35138b3f21063fb47048333a13ce6b77))

### Features

-   **cli and server:** simplify app creation ([9d43299](https://github.com/digitopvn/diginext/commit/9d43299f0c3398e3ed690c751764cfaf0c362ae0))
-   **server:** implement service account and api key for workspace api access ([4802aa0](https://github.com/digitopvn/diginext/commit/4802aa0a36f6a9346daa737e63945377f9c59251))

## [2.6.6](https://github.com/digitopvn/diginext/compare/v2.6.5...v2.6.6) (2023-03-26)

### Bug Fixes

-   **admin:** display api access token in workspace settings ([219c0cc](https://github.com/digitopvn/diginext/commit/219c0cc8a6efa39feac67fb71b4bd92a1daa4243))
-   **server:** generate domain for create new deploy environment in app controller ([241029c](https://github.com/digitopvn/diginext/commit/241029ca0241208fb678e61286eed512d1555de6))
-   **server:** simplify app deploy environment api input params ([644fec6](https://github.com/digitopvn/diginext/commit/644fec6201f4c6bc8998d2b55060a6b89542ffe8))

## [2.6.5](https://github.com/digitopvn/diginext/compare/v2.6.4...v2.6.5) (2023-03-25)

### Bug Fixes

-   **server:** issue of logger is cutting messages ([fe183d1](https://github.com/digitopvn/diginext/commit/fe183d1a19f2e63edad8edba3a1370b5d8331b95))

## [2.6.4](https://github.com/digitopvn/diginext/compare/v2.6.3...v2.6.4) (2023-03-25)

### Bug Fixes

-   **server api:** split build and deploy api to seperate process ([ed40148](https://github.com/digitopvn/diginext/commit/ed40148fb469d44bfefba6a1405e9ae36cde8c10))

## [2.6.3](https://github.com/digitopvn/diginext/compare/v2.6.2...v2.6.3) (2023-03-22)

### Bug Fixes

-   **cli:** deploy: throw error message when validate port ([e23d638](https://github.com/digitopvn/diginext/commit/e23d638c192a660aadd11fe294b75f3e2907b8e9))
-   **cli:** issue of port is not a number ([9b6faaf](https://github.com/digitopvn/diginext/commit/9b6faaf304745051fbed5995df1ff21ca34b5c06))
-   **cli:** use lodash to detect port is not a number ([8398560](https://github.com/digitopvn/diginext/commit/83985601b6d6555f9c453c91ab03eab106e467ad))
-   **examples:** docker compose development examples with persistent data and hot reload ([10d8b58](https://github.com/digitopvn/diginext/commit/10d8b5882e6ea04d4e8a314d6a56e9e65e8b3cb6))
-   **server:** git ssh api and git module with create, generate, verify, get public key ([7c8fb4f](https://github.com/digitopvn/diginext/commit/7c8fb4f061518273b04bb403372dffcfbaa41104))
-   **server:** improve ingress config apply error message ([422db23](https://github.com/digitopvn/diginext/commit/422db2323beba1c37bc4a134198dd42e35b4f11c))

## [2.6.2](https://github.com/digitopvn/diginext/compare/v2.6.1...v2.6.2) (2023-03-16)

### Bug Fixes

-   **server:** correct image pull secret name ([80a2ae7](https://github.com/digitopvn/diginext/commit/80a2ae77544e9265c8e32984bb608314e6faf3b4))

## [2.6.1](https://github.com/digitopvn/diginext/compare/v2.6.0...v2.6.1) (2023-03-15)

### Bug Fixes

-   **server:** create namespace and imagepullsecrets before building ([e0459b2](https://github.com/digitopvn/diginext/commit/e0459b2577a34df24d01c22aae2fdea38d3b2d6a))
-   **server:** generate and verify ssh private keys ([b8d5a00](https://github.com/digitopvn/diginext/commit/b8d5a002842effc056d22ce2be64d057b051baf1))
-   **server:** wrong platform args when build with docker buildx ([6d67cc0](https://github.com/digitopvn/diginext/commit/6d67cc003ca7b4015d749ef8ebd39c983c76fd07))

# [2.6.0](https://github.com/digitopvn/diginext/compare/v2.5.6...v2.6.0) (2023-03-15)

### Bug Fixes

-   **builder:** refactor builder ([fb83bc3](https://github.com/digitopvn/diginext/commit/fb83bc34e82b962d6d7c3465b25b2ba8e133c9c5))
-   **cli:** issue of resolving dockerfile ([b28a577](https://github.com/digitopvn/diginext/commit/b28a577c9608294f4f45cc9ba8364a3828d50603))
-   **dev environment:** setup docker compose for dev environment ([402e48d](https://github.com/digitopvn/diginext/commit/402e48d50b04daa61aa8fa9e56032a658c72ebb9))
-   **docker compose:** setup docker compose for podman builder ([8213aa6](https://github.com/digitopvn/diginext/commit/8213aa66a0e3262730a0352b0bb3f2981c6ca872))
-   **gcloud auth:** rm auth file after success authenticate ([9698c93](https://github.com/digitopvn/diginext/commit/9698c934f26995bef68be78565a70c20e60b5cb9))
-   **podman:** failed: try to make podman work in rootless mode ([d5ea889](https://github.com/digitopvn/diginext/commit/d5ea889e6b499dbd5c0f0e2b28c935b97ad73306))
-   **registry auth:** podman login when authenticate container registries ([0525824](https://github.com/digitopvn/diginext/commit/0525824f9be1847e06cebbd4041b6411140d0d69))
-   **rm git cache:** rm git cache ([3b899fb](https://github.com/digitopvn/diginext/commit/3b899fb1a3e2a3f6e1a8d68c93baa1c395c5c075))
-   **server:** incorrect env vars of prerelease and prod ([895fe9b](https://github.com/digitopvn/diginext/commit/895fe9b6b6e8da68bc0fe54dfc43bf264ad45ff9))

### Features

-   **podman:** add podman as primary builder ([b49eb63](https://github.com/digitopvn/diginext/commit/b49eb63cc6b27e13f2f7563ea592ce87a9813903))

## [2.5.6](https://github.com/digitopvn/diginext/compare/v2.5.5...v2.5.6) (2023-03-15)

### Bug Fixes

-   **cli:** disable debug logs ([4b1d549](https://github.com/digitopvn/diginext/commit/4b1d549104ab326007e76ddcae08465e5606a65f))

## [2.5.5](https://github.com/digitopvn/diginext/compare/v2.5.4...v2.5.5) (2023-03-15)

### Bug Fixes

-   **server:** undefined app response when process updating ([0ce2ad5](https://github.com/digitopvn/diginext/commit/0ce2ad522c8631c69ec813b14aa27dd7d6e08413)), closes [#52](https://github.com/digitopvn/diginext/issues/52)

## [2.5.4](https://github.com/digitopvn/diginext/compare/v2.5.3...v2.5.4) (2023-03-15)

### Bug Fixes

-   **cli and server:** fix cli init app and server roll out image pull secret ([dc84e3b](https://github.com/digitopvn/diginext/commit/dc84e3b2a93e1515711c948ed1e15c7d4319ffc6))
-   **server: cluster, registry:** add more validations to cluster and registry controllers ([193c567](https://github.com/digitopvn/diginext/commit/193c56728d9a457c1cc953648f602a9313e075a4))
-   **utilities:** check recommended resources installed such as cert manager and nginx ingress ([5e735cc](https://github.com/digitopvn/diginext/commit/5e735cc7493b2e2f45f66f301a8acecf3c0f5eeb))

## [2.5.3](https://github.com/digitopvn/diginext/compare/v2.5.2...v2.5.3) (2023-03-09)

### Bug Fixes

-   **admin ui:** add app environment variables modification feature ([4c02493](https://github.com/digitopvn/diginext/commit/4c02493b625686fb2b1c80c39a05f15aab53f0d6))
-   **cli commands:** add get set delete commands to cluster and kubectl ([2142386](https://github.com/digitopvn/diginext/commit/2142386682567a3392e9d4848e36171121116757))

## [2.5.2](https://github.com/digitopvn/diginext/compare/v2.5.1...v2.5.2) (2023-03-09)

### Bug Fixes

-   **cli cluster:** add command to connect cluster to local machine ([e20e9e0](https://github.com/digitopvn/diginext/commit/e20e9e020fb68517396eb8438dafa127d5e0e746))
-   **cli kubectl:** issue of escaping value of env var when set env var to deployment ([a17fdb4](https://github.com/digitopvn/diginext/commit/a17fdb48e69b3e025daed1ece2c49c82396e6b88))

## [2.5.1](https://github.com/digitopvn/diginext/compare/v2.5.0...v2.5.1) (2023-03-09)

### Bug Fixes

-   **cli kb:** add dx kb set deploy and improve dx registry allow ([18a2a84](https://github.com/digitopvn/diginext/commit/18a2a84a99d2cdbdda36f83e68bf59c3d5aed815))
-   **server generate depploy:** issue of generate resource quota from container size ([96d6249](https://github.com/digitopvn/diginext/commit/96d6249b761496beac3e25cd677841fd99ececf0))

# [2.5.0](https://github.com/digitopvn/diginext/compare/v2.4.9...v2.5.0) (2023-03-08)

### Bug Fixes

-   **server kubectl scale:** issue of missing context when run kubectl scale ([f752565](https://github.com/digitopvn/diginext/commit/f752565fe46c54fd7ca16bbc002b5b464f05011e))
-   **server kubectl:** set and unset env variables with kubectl ([6b8fb9c](https://github.com/digitopvn/diginext/commit/6b8fb9c1f49cdbdd5d2125bb2103b98386ee0a92))

### Features

-   **cli deploy:** add flag --fresh to deploy app from scratch ([1431aa4](https://github.com/digitopvn/diginext/commit/1431aa49cda3c92ea89fe4238f8110121741721f))

## [2.4.9](https://github.com/digitopvn/diginext/compare/v2.4.8...v2.4.9) (2023-03-08)

### Bug Fixes

-   **api env vars:** add create and update env vars on deploy environment of app ([77d9337](https://github.com/digitopvn/diginext/commit/77d933716aec03d5f5d7819870da517746401a16))
-   **check for update:** better warning logs ([b3a6ccd](https://github.com/digitopvn/diginext/commit/b3a6ccd2a729e65c4eaec37d348a2b92900b5f8f))
-   **cluster manager:** add some utilities and k8s command into cluster manager ([eb96726](https://github.com/digitopvn/diginext/commit/eb967268c702fdff1f6dfa13a5be2c995b014c7f))
-   **kube deploy:** issue of incorrect context when roll out and preview ([13916c2](https://github.com/digitopvn/diginext/commit/13916c2b22069a14c67b900a4ee9016ec3164bfc))

## [2.4.8](https://github.com/digitopvn/diginext/compare/v2.4.7...v2.4.8) (2023-03-07)

### Bug Fixes

-   **ask deploy environment:** issue of update app deploy environmentt to db ([856884c](https://github.com/digitopvn/diginext/commit/856884c9398efadecc9cbe0123f55cb05d103b42))
-   **readme:** update momo button png ([52fd933](https://github.com/digitopvn/diginext/commit/52fd933f6a8046e2ef7b0e74a8f9d4b8960bd17e))

## [2.4.7](https://github.com/digitopvn/diginext/compare/v2.4.6...v2.4.7) (2023-03-07)

### Bug Fixes

-   **cluster auth:** skip cluster auth if it is existed in kubeconfig ([e65c6aa](https://github.com/digitopvn/diginext/commit/e65c6aa5dd55ebfa4aea6637b2c052b635076b05))
-   **kube config:** log error if kube context not found ([6e6bbbb](https://github.com/digitopvn/diginext/commit/6e6bbbb30adc5cc5caa3bf887ac3d157f644a54c))
-   **kube deploy:** issue of kubernetes context not found when deploy custom cluster ([4bd7318](https://github.com/digitopvn/diginext/commit/4bd7318c7564796a1c68cbfd13876be9dd65457a))
-   **start build:** issue of resolving dockerfile in source code ([22e674a](https://github.com/digitopvn/diginext/commit/22e674a139d12acd522468510a0590694783e742))

## [2.4.6](https://github.com/digitopvn/diginext/compare/v2.4.5...v2.4.6) (2023-03-06)

### Bug Fixes

-   **admin ui:** base api url still fall to localhost ([31a3730](https://github.com/digitopvn/diginext/commit/31a3730fdef0b9ab037ebb8de1ceda32db479de6))
-   **admin ui:** issue of api base path redirect to localhost ([e4ca5b9](https://github.com/digitopvn/diginext/commit/e4ca5b9e0d8aa22c43b501e8d73caad670394271))
-   **cli options:** add flag --fresh for deploy from scratch ([12aface](https://github.com/digitopvn/diginext/commit/12afaced02824f43db0e2be59ac52f07d35ed90b))
-   **image pull secrets:** issue of create image pull secrets in namespace of cluster ([f7eb4ae](https://github.com/digitopvn/diginext/commit/f7eb4ae3830d341f19eed2cb6aad78915b02f635))

## [2.4.5](https://github.com/digitopvn/diginext/compare/v2.4.4...v2.4.5) (2023-03-06)

### Bug Fixes

-   **cli and admin:** minor issues of admin and cli deploy domain correction ([46b74e3](https://github.com/digitopvn/diginext/commit/46b74e31fe6ea9dcc42f5ab6794abaaf486b9bfb))

## [2.4.4](https://github.com/digitopvn/diginext/compare/v2.4.3...v2.4.4) (2023-03-05)

### Bug Fixes

-   **server generate deploy:** issue of empty env vars when deploy prod ([05754cd](https://github.com/digitopvn/diginext/commit/05754cdde1c1810e2dbe328c8cad8a46e6233c54))

## [2.4.3](https://github.com/digitopvn/diginext/compare/v2.4.2...v2.4.3) (2023-03-05)

### Bug Fixes

-   **cli git:** try to fix git directory path in windows ([be62e89](https://github.com/digitopvn/diginext/commit/be62e897907c69610307a5b5e6e1aa299c4de258))

## [2.4.2](https://github.com/digitopvn/diginext/compare/v2.4.1...v2.4.2) (2023-03-05)

### Bug Fixes

-   **cli git:** issue failed to get git info on windows ([3b40acc](https://github.com/digitopvn/diginext/commit/3b40acc72c4bfb55529afa4d78aad2b0c595c583))

## [2.4.1](https://github.com/digitopvn/diginext/compare/v2.4.0...v2.4.1) (2023-03-05)

### Bug Fixes

-   **request deploy:** git provider is undefined when request deploy ([394203a](https://github.com/digitopvn/diginext/commit/394203a0bf38cd1c3498b3ff054bd72431180a85))

# [2.4.0](https://github.com/digitopvn/diginext/compare/v2.3.4...v2.4.0) (2023-03-05)

### Bug Fixes

-   **generate deployment:** remove fallback support when reading deployment env vars ([1a7876f](https://github.com/digitopvn/diginext/commit/1a7876fd7978e52e7eaa8d2ee634365ad681f865))
-   **git access:** verify git provider access at start up ([469ec1f](https://github.com/digitopvn/diginext/commit/469ec1f33f77329bd4016e484d43b6ba9a69a5f6))
-   **git pull:** git pull cache issue ([16c4558](https://github.com/digitopvn/diginext/commit/16c4558b807fa1a1154b893540c031d8cfd1f7f2))
-   **request deploy:** compare local domains with server domains ([e2aad4a](https://github.com/digitopvn/diginext/commit/e2aad4a176f1db0ff5c21c2af1a2d4fc78801558))
-   **request deploy:** correct the app and project slug when calling request deploy api ([2b23577](https://github.com/digitopvn/diginext/commit/2b235774e3c5ab876f5e3113a89f490f1d79c422))
-   **request deploy:** issue when deploy old app ([9213a05](https://github.com/digitopvn/diginext/commit/9213a05e9480be363485385c1a0f2affbe3112a1))
-   **server cluster:** authenticate cluster before create or update ([a2ad4d5](https://github.com/digitopvn/diginext/commit/a2ad4d512f21e6a1e816da1b0110518d5921ba79))
-   **start build:** issue of git pull rebase ([79b8620](https://github.com/digitopvn/diginext/commit/79b86201e1281155ca1cb7e1a295edf385793ea9))
-   **stop build:** issue when stop build ([d9e58c8](https://github.com/digitopvn/diginext/commit/d9e58c802fd12f3e7126317ea318ddf37617d6ff))

### Features

-   **deploy environment compare:** compare deploy config ([69636a4](https://github.com/digitopvn/diginext/commit/69636a40da8ea8873b785c4f3981094ab86a24fe))

## [2.3.4](https://github.com/digitopvn/diginext/compare/v2.3.3...v2.3.4) (2023-03-03)

### Bug Fixes

-   **app migration:** disable migrating app deploy environment ([3127166](https://github.com/digitopvn/diginext/commit/3127166331f3629afef8e7eaea02bf1b090818c4))
-   **deploy:** kubernetes only accept string as env variable value ([6054c46](https://github.com/digitopvn/diginext/commit/6054c465b9c1a64214d9bbed8215dd1e266dfb6b))

## [2.3.3](https://github.com/digitopvn/diginext/compare/v2.3.2...v2.3.3) (2023-03-03)

### Bug Fixes

-   **deploy:** ssl issue for longer than 64 chars domain ([eefd4d3](https://github.com/digitopvn/diginext/commit/eefd4d39df2ea8cbfafda114205aa07a51e0b220))

## [2.3.2](https://github.com/digitopvn/diginext/compare/v2.3.1...v2.3.2) (2023-03-03)

### Bug Fixes

-   **cluster controller:** authenticate cluster before create new or update ([e5253b4](https://github.com/digitopvn/diginext/commit/e5253b4a4e9ea241eeefe9ae59ff8eea94f478bc))
-   **deploy:** issue of ask for deploy environment info ([6cad2f1](https://github.com/digitopvn/diginext/commit/6cad2f1ae6a5d098cbe6218de0200b5913044d84))
-   **digital ocean:** issue auth k8s cluster command typo ([7d59a78](https://github.com/digitopvn/diginext/commit/7d59a78450ac4d0ca0e0da64a843a579a6e98afa))

## [2.3.1](https://github.com/digitopvn/diginext/compare/v2.3.0...v2.3.1) (2023-03-02)

### Bug Fixes

-   **cli app and deploy:** form issues of deploy or new app or init app command ([f028519](https://github.com/digitopvn/diginext/commit/f0285194de425744a75f645617c948e3ea3ccab8))
-   **cli deploy:** can select or create new app when deploy a deleted app ([87a4d58](https://github.com/digitopvn/diginext/commit/87a4d58bb561408062bc8751761179f51beb627c))
-   **donate buttons:** add donate buttons to buy some beers ([ee30d16](https://github.com/digitopvn/diginext/commit/ee30d162f29098c85c962cd882f437e98d2267e2))

# [2.3.0](https://github.com/digitopvn/diginext/compare/v2.2.0...v2.3.0) (2023-03-01)

### Bug Fixes

-   **base service:** generated slug now becomes shorter but still unique ([3f89675](https://github.com/digitopvn/diginext/commit/3f896757f6ac41d0b308c69894786bf125f3f2eb))
-   **cli and server:** remove jq package ([6270266](https://github.com/digitopvn/diginext/commit/62702669b2bc7bb10044b44d01cd89ea26d8a8a5))
-   **deploy app:** fix issue of deploy app or project which was deleted ([872fc85](https://github.com/digitopvn/diginext/commit/872fc8558124f4b5b03eb589d203301b8efc43d1))
-   **env vars api:** add crud api of app environment variables ([c3bd49a](https://github.com/digitopvn/diginext/commit/c3bd49adf44b4340648fbd7d1c6fe65562c0d523))
-   **start-build:** issue of project name is undefined ([98fbb69](https://github.com/digitopvn/diginext/commit/98fbb6956994287ae2b71675d81e67436b60770a))

### Features

-   **cli dotenv:** ability to upload and download dotenv from to deploy environment ([b3934d7](https://github.com/digitopvn/diginext/commit/b3934d7691d27d313ef0509477807c6acbdd03f6))

# [2.2.0](https://github.com/digitopvn/diginext/compare/v2.1.0...v2.2.0) (2023-02-28)

### Bug Fixes

-   **cli git:** ability to check for repository access rights ([aa38e93](https://github.com/digitopvn/diginext/commit/aa38e9360baeea6b99fd8ccff90e5741619179d3))
-   **user,workspace controller:** issue of multiple imports in user and workspace services ([2ad9a1e](https://github.com/digitopvn/diginext/commit/2ad9a1ed6b3268b6b3138e72152ef03173fd8652))

### Features

-   **add app api to create deploy environment and get client app config:** apps api ([4e676ca](https://github.com/digitopvn/diginext/commit/4e676ca1ab8f7aa54569757ad2c5c2081c9fa2bf))

# [2.1.0](https://github.com/digitopvn/diginext/compare/v2.0.7...v2.1.0) (2023-02-27)

### Bug Fixes

-   **deploy:** update project so it can be sorted on top of the list ([9f5c340](https://github.com/digitopvn/diginext/commit/9f5c340f45675afcf302fbe3347b9d727e4b5a15))

### Features

-   **deploy with image url:** add api to deploy with image url, apps and releases migration ([3db4de4](https://github.com/digitopvn/diginext/commit/3db4de4333e230c515cea300cf0ec988a07657bf))

## [2.0.7](https://github.com/digitopvn/diginext/compare/v2.0.6...v2.0.7) (2023-02-24)

### Bug Fixes

-   **upload dotenv:** fix issue of uploading dotenv when deploy ([232df3c](https://github.com/digitopvn/diginext/commit/232df3cd3ff7bcccde55548ce0b5266fb50ebe7f))

## [2.0.6](https://github.com/digitopvn/diginext/compare/v2.0.5...v2.0.6) (2023-02-24)

### Bug Fixes

-   **deploy new app:** fix issue of deploy prod when init new app due to undefined environment ([e7fc258](https://github.com/digitopvn/diginext/commit/e7fc2585581fc486033c3ff9a81a82984a9d32f3))

## [2.0.5](https://github.com/digitopvn/diginext/compare/v2.0.4...v2.0.5) (2023-02-24)

### Bug Fixes

-   **cli build:** fix docker buildx driver did not initialized before build ([49adb22](https://github.com/digitopvn/diginext/commit/49adb2217c4ee9ff9279ae36240624c4f4f52edc))
-   **cli:** check for new version when execute cli command ([35a2942](https://github.com/digitopvn/diginext/commit/35a2942d9346682dd213df36753cd77d0fd8fcef))

## [2.0.4](https://github.com/digitopvn/diginext/compare/v2.0.3...v2.0.4) (2023-02-24)

### Bug Fixes

-   **admin ui:** fix redirect url sometime return incorrect value ([987761e](https://github.com/digitopvn/diginext/commit/987761ea531e7801770cf490ca6a06a33b56c075))
-   **base service:** disable debug log in base service ([498c475](https://github.com/digitopvn/diginext/commit/498c475eb6b9351e49cff138a18e3201ef1690d0))
-   **dockerfile:** add templates folder to docker build image ([b89f4fd](https://github.com/digitopvn/diginext/commit/b89f4fde52aaeaeef23c49bdb417e39d164a1f0b))

## [2.0.3](https://github.com/digitopvn/diginext/compare/v2.0.2...v2.0.3) (2023-02-23)

### Bug Fixes

-   **hotfix:** fix issue of check version compatibility when deploy app ([99d4843](https://github.com/digitopvn/diginext/commit/99d484305b495d6873733e0e9bcc051a3f7ea023))
-   **serveride generate deployment:** fix issue of api calling when generate deployment yaml on server ([3a5ad9c](https://github.com/digitopvn/diginext/commit/3a5ad9c2d39c7ec8517731d17151c228ba196750))

## [2.0.2](https://github.com/digitopvn/diginext/compare/v2.0.1...v2.0.2) (2023-02-22)

### Bug Fixes

-   **admin ui:** fix issue of build log always display building message ([5472665](https://github.com/digitopvn/diginext/commit/54726650f57ad5a234be71c6c1e9c809d7790981))
-   **admin ui:** fix websocket connection issue when viewing build logs ([141eef5](https://github.com/digitopvn/diginext/commit/141eef58ad0db5d2da9542df370093334f244ca5))
-   **cli:** print better error messages when deploying app ([dfed07a](https://github.com/digitopvn/diginext/commit/dfed07a74a5d205d9dac8583aa7671de6ff2ef42))

## [2.0.1](https://github.com/digitopvn/diginext/compare/v2.0.0...v2.0.1) (2023-02-22)

### Bug Fixes

-   **deploy:** check cli and server compability when deploying app ([41f4907](https://github.com/digitopvn/diginext/commit/41f4907ff8b1b87d46279c0a3b111761c3d3bf3b))

# [2.0.0](https://github.com/digitopvn/diginext/compare/v1.4.0...v2.0.0) (2023-02-22)

### Code Refactoring

-   **deploy app do not generate yaml files anymore:** build, deploy, run ([dbe89a5](https://github.com/digitopvn/diginext/commit/dbe89a5439453f81cd4ca6d4fbf66d48ecd91979))

### BREAKING CHANGES

-   **deploy app do not generate yaml files anymore:** cli command build, deploy, run

# [1.4.0](https://github.com/digitopvn/diginext/compare/v1.3.1...v1.4.0) (2023-02-21)

### Bug Fixes

-   **dependencies:** update dependency versions ([74dc266](https://github.com/digitopvn/diginext/commit/74dc266b3b13221ba98fc96d21345253be53586a))
-   **routes:** fix duplicate response data in all routes ([1a9c673](https://github.com/digitopvn/diginext/commit/1a9c6734b2ddc419e6b082372648f9f95b6a8897))
-   **swagger:** add auth header security to all api routes ([8c3ad37](https://github.com/digitopvn/diginext/commit/8c3ad377b862b85098545738b1b7f7d014690bd2))

### Features

-   **swagger api:** add swagger api for external integrations ([4789473](https://github.com/digitopvn/diginext/commit/47894738d0bb670fbf59bdb5c9966a568b165cd5))

## [1.3.1](https://github.com/digitopvn/diginext/compare/v1.3.0...v1.3.1) (2023-02-17)

### Bug Fixes

-   **admin ui:** fix build sort and be able stop build ([c8b2888](https://github.com/digitopvn/diginext/commit/c8b28886ee42c7a959a26ffa9bf10d8fe714ae23))
-   **build:** can be able to stop build and sort by updated at ([7e989ae](https://github.com/digitopvn/diginext/commit/7e989ae6d26a7e5f3f7c359e58446afa443fcf37))
-   **generate deployment:** fix generate prerelease domain ([c3d1910](https://github.com/digitopvn/diginext/commit/c3d19107541addc35ade89399d211483d9077c5a))

# [1.3.0](https://github.com/digitopvn/diginext/compare/v1.2.2...v1.3.0) (2023-02-16)

### Bug Fixes

-   **admin:** add framework crud and fix some bugs ([dc40b46](https://github.com/digitopvn/diginext/commit/dc40b46c704fe5e161335c9d6e67919d01f7f84a))
-   **typeorm:** error when populate unexpected fields ([71c1bd5](https://github.com/digitopvn/diginext/commit/71c1bd52501db7c8358d9a503ef20b73fc4d7acf))

### Features

-   **admin ui:** add crud to framework, cluster, git, cloud registry ([72b65ca](https://github.com/digitopvn/diginext/commit/72b65ca66b142758dac0d5e7720274a30294ef94))

## [1.2.2](https://github.com/digitopvn/diginext/compare/v1.2.1...v1.2.2) (2023-02-15)

### Bug Fixes

-   **admin:** cluster crud ([87981ae](https://github.com/digitopvn/diginext/commit/87981ae1eeac636543442ef02062c48c17e7d579))
-   **base service:** assign item authority when create new item ([092eb1b](https://github.com/digitopvn/diginext/commit/092eb1b4a463f496900359a7a327c081fcd60818))
-   **bitbucket:** do not remove dockerfile when pulling framework ([264c353](https://github.com/digitopvn/diginext/commit/264c3533897326c452438afc44aa20e6815191d6))
-   **deploy:** check for Dockerfile before request deploying ([32ab91d](https://github.com/digitopvn/diginext/commit/32ab91d666d825fc99d7d59a49f06214282e5a80))
-   **dockerfile:** use node 16.x to avoid ts build path alias error ([1c5524c](https://github.com/digitopvn/diginext/commit/1c5524c99a7c2259bc30f087d95d4446078b3825))
-   **typeorm:** fix typeorm build error by install xml2js app-root-path sha.js ([17be31a](https://github.com/digitopvn/diginext/commit/17be31ae3d44c72f8d550968b23a3faf3a3c0d3a))

## [1.2.1](https://github.com/digitopvn/diginext/compare/v1.2.0...v1.2.1) (2023-02-15)

### Bug Fixes

-   **jwt and logs:** parse access token in url and print more logs to debug on server ([6cf251f](https://github.com/digitopvn/diginext/commit/6cf251f9354c51d532ff5a22b64a357c50c9f7ee))
-   **package.json:** remove mrgoonie typeorm ([2356c30](https://github.com/digitopvn/diginext/commit/2356c30716774e2770f40457317081b286f4a1f4))

# [1.2.0](https://github.com/digitopvn/diginext/compare/v1.1.5...v1.2.0) (2023-02-14)

### Bug Fixes

-   **api project:** delete related apps and environment when delete a project ([9bade2b](https://github.com/digitopvn/diginext/commit/9bade2b2fa46a2f519d2bc500a03a0b09e75f746))
-   **build:** shorten build slug ([ddbbe7d](https://github.com/digitopvn/diginext/commit/ddbbe7db922572c966b01738b934f36eb8666b6b))
-   **deploy:** ingress tls secret will be generated by domain ([70e658d](https://github.com/digitopvn/diginext/commit/70e658d6c1c88ec6fbe2d5dceb4a33c52331dd9e))
-   **roll out:** always create new ingress when rolling out deployment ([a8987e8](https://github.com/digitopvn/diginext/commit/a8987e871e742f1481cc3811934bc26d8d116c96))
-   **system:** add cronjob to clean up system cache and free up spacing ([e110ec7](https://github.com/digitopvn/diginext/commit/e110ec713d9b3950be81ea2d4683ed42fae5b968))

### Features

-   **admin:** delete project, app, environment ([f026e50](https://github.com/digitopvn/diginext/commit/f026e508b2fae1874f8163a04343f3071a562651))
-   **cli update:** update cli with dx update command ([254654e](https://github.com/digitopvn/diginext/commit/254654ee442fd75e254c1f9d078707f5115de9c7))

## [1.1.5](https://github.com/digitopvn/diginext/compare/v1.1.4...v1.1.5) (2023-02-13)

### Bug Fixes

-   **base controller:** mongodb convert id to \_id ([dfa4c98](https://github.com/digitopvn/diginext/commit/dfa4c9883fe089e36dbbe2077b3cc1bc66e88368))
-   **build status:** fixed update latest build to project and app ([2e7de51](https://github.com/digitopvn/diginext/commit/2e7de51316c05995a00c69a0092f847afbb4dcb1))
-   **cli:** update di command to dx command ([283fc86](https://github.com/digitopvn/diginext/commit/283fc86dcdb73dab4d472009f98532d5df1724b3))
-   **deploy:** fix build log url when request deploy ([53ceaf2](https://github.com/digitopvn/diginext/commit/53ceaf2e6aad556dda0aed7603a187d56f40a402))
-   **deploy:** fix generate ssl error when domain is longer than 64 characters ([bd1ea58](https://github.com/digitopvn/diginext/commit/bd1ea58b0cd62697fecea61022ec6e2e0cd874f6))
-   **deploy:** fixed deploy issue on new app ([072b073](https://github.com/digitopvn/diginext/commit/072b0733cd2cf45b7dbd46336f5b7700d329b63f))
-   **init app:** fixed issue of get git remote url when initializing app ([85c929a](https://github.com/digitopvn/diginext/commit/85c929a6c67f4010cbbe9d6987c85c8fee6647c5))
-   **logs:** add logs to base service ([850df37](https://github.com/digitopvn/diginext/commit/850df37675af8091611503fdf650da2255ba46ef))
-   **typeorm:** fix typeorm query with skip and take to do pagination ([7efadb5](https://github.com/digitopvn/diginext/commit/7efadb5c7f5f118301da19a0fb584a5c48a6c8df))

## [1.1.4](https://github.com/digitopvn/diginext/compare/v1.1.3...v1.1.4) (2023-02-03)

### Bug Fixes

-   **admin:** fixed login redirect ([f94bd67](https://github.com/digitopvn/diginext/commit/f94bd67ed1c5455a01c765521905c3d852c5c9dc))
-   **base controller:** fix object id type ([bb5f407](https://github.com/digitopvn/diginext/commit/bb5f4077336e1377506adc78c3469fb5cc003592))
-   **dashboard:** fixed empty content of log detail ([c28a8d6](https://github.com/digitopvn/diginext/commit/c28a8d617fd486522f7195f128e5fec5bea5ecf0))
-   **logs:** correct directory path of logs ([c3a8446](https://github.com/digitopvn/diginext/commit/c3a84464785834230e0ab7baaaa11cd61c1adfe4))
-   **logs:** correct log file path ([7b78729](https://github.com/digitopvn/diginext/commit/7b78729d86eb013f4f0d15812ae1c80ef0839c0c))
-   **logs:** fix correct logs directory ([3f1a2d3](https://github.com/digitopvn/diginext/commit/3f1a2d3b5b8f5a764c5d2a71d63c993766740fef))

## [1.1.3](https://github.com/digitopvn/diginext/compare/v1.1.2...v1.1.3) (2023-02-01)

### Bug Fixes

-   **cli login:** select active workspace when login with cli ([66246c3](https://github.com/digitopvn/diginext/commit/66246c34b5365bdc9a00502b653017295d9a5c46))

## [1.1.2](https://github.com/digitopvn/diginext/compare/v1.1.1...v1.1.2) (2023-01-31)

### Bug Fixes

-   **cli login:** fix first time workspace login issue ([7da48a8](https://github.com/digitopvn/diginext/commit/7da48a8c921f37a3a6ff1134f1039554732cb8e4))
-   **workspace join:** fix issue of joining new workspace ([ba0bfb2](https://github.com/digitopvn/diginext/commit/ba0bfb224ebd283f7f446636984af6661e381a38))

## [1.1.1](https://github.com/digitopvn/diginext/compare/v1.1.0...v1.1.1) (2023-01-16)

### Bug Fixes

-   **build:** fix stop build, not sure why it still not working ([d9dc90f](https://github.com/digitopvn/diginext/commit/d9dc90ff387ddec4d09c24e1e39560710bbc3097))
-   **deploy:** fix incorrect mapping port when generate deployment files ([dc205eb](https://github.com/digitopvn/diginext/commit/dc205eb996b29fbadb5ea8f4502cfecae883e69b))
-   **deploy:** improve roll out on dev environment ([33b8988](https://github.com/digitopvn/diginext/commit/33b898858e0a3d57e29f1dac50d43ce3a750d344))

# [1.1.0](https://github.com/digitopvn/diginext/compare/v1.0.4...v1.1.0) (2023-01-15)

### Features

-   **admin:** add front-end admin ui ([5bbc4fc](https://github.com/digitopvn/diginext/commit/5bbc4fc20b0da5fd567fa0a42096af80fa0354d7))

## [1.0.4](https://github.com/digitopvn/diginext/compare/v1.0.3...v1.0.4) (2023-01-15)

### Bug Fixes

-   **app init:** bugs of incorrect git data when init app ([7e27b86](https://github.com/digitopvn/diginext/commit/7e27b86c7d3942e7acafa5c956246033eb042d12))
-   **logs:** turn off some logs ([9585b8f](https://github.com/digitopvn/diginext/commit/9585b8f03a22a8a6779a58521e0ac101511f2be7))

## [1.0.3](https://github.com/digitopvn/diginext/compare/v1.0.2...v1.0.3) (2023-01-15)

### Bug Fixes

-   **init app:** bugs in update env when initialize app ([eaace6f](https://github.com/digitopvn/diginext/commit/eaace6f19f0b41c0e0966eec1f405380257d5910))

## [1.0.3](https://github.com/digitopvn/diginext/compare/v1.0.2...v1.0.3) (2023-01-15)

### Bug Fixes

-   **init app:** bugs in update env when initialize app ([eaace6f](https://github.com/digitopvn/diginext/commit/eaace6f19f0b41c0e0966eec1f405380257d5910))

## [1.0.2](https://github.com/digitopvn/diginext/compare/v1.0.1...v1.0.2) (2023-01-15)

### Bug Fixes

-   **cli:** bugs of create new app ([973cbd1](https://github.com/digitopvn/diginext/commit/973cbd10fd02d39b7d795f2fc6c242a917f2a68f))
-   **expose secrets:** expose secrets ([8d5d8ed](https://github.com/digitopvn/diginext/commit/8d5d8ed4016000efd92dc55455b48c5ef94043b2))

## [1.0.1](https://github.com/digitopvn/diginext/compare/v1.0.0...v1.0.1) (2023-01-14)

### Bug Fixes

-   **remove unnecessary warnings:** remove unnecessary warnings ([363975d](https://github.com/digitopvn/diginext/commit/363975d643dd56205e0cea59d96ef10d391ac3c2))

# 1.0.0 (2023-01-14)

### Bug Fixes

-   **active workspace:** correct the active workspace when doing cli login ([bfb69be](https://github.com/digitopvn/diginext/commit/bfb69be7f9c64f475036906296ba4db0fe5bdcfd))
-   **hotfix jwt:** add default secret ([aae1f3d](https://github.com/digitopvn/diginext/commit/aae1f3d5b5e98d067a23969f4e82bcdf67feb46e))
-   **stop build:** try to implement stop build process but failed ([75c6eed](https://github.com/digitopvn/diginext/commit/75c6eede71b8e78d0729d30fb3784000ea2893e9))
-   **use dx as main command:** change from di to dx as primary command ([3071c87](https://github.com/digitopvn/diginext/commit/3071c873f792f074f89511f907efedac4a7b2380))

### Features

-   **automation scripts:** install docker, node, yarn, gcloud, doctl, jq, kubectl, k3s ([f2497e8](https://github.com/digitopvn/diginext/commit/f2497e86dd9c3d02987f868353e5c4f6bce095d0))
-   **workspace:** join a workspace, add user to workspace, auth user with a workspace ([189a028](https://github.com/digitopvn/diginext/commit/189a02853324c93118972036c47c01c07f622b08))

# 1.0.0 (2023-01-14)

### Bug Fixes

-   **active workspace:** correct the active workspace when doing cli login ([bfb69be](https://github.com/digitopvn/diginext/commit/bfb69be7f9c64f475036906296ba4db0fe5bdcfd))
-   **stop build:** try to implement stop build process but failed ([75c6eed](https://github.com/digitopvn/diginext/commit/75c6eede71b8e78d0729d30fb3784000ea2893e9))
-   **use dx as main command:** change from di to dx as primary command ([3071c87](https://github.com/digitopvn/diginext/commit/3071c873f792f074f89511f907efedac4a7b2380))

### Features

-   **automation scripts:** install docker, node, yarn, gcloud, doctl, jq, kubectl, k3s ([f2497e8](https://github.com/digitopvn/diginext/commit/f2497e86dd9c3d02987f868353e5c4f6bce095d0))
-   **workspace:** join a workspace, add user to workspace, auth user with a workspace ([189a028](https://github.com/digitopvn/diginext/commit/189a02853324c93118972036c47c01c07f622b08))

# 1.0.0 (2023-01-14)

### Bug Fixes

-   **active workspace:** correct the active workspace when doing cli login ([bfb69be](https://github.com/digitopvn/diginext/commit/bfb69be7f9c64f475036906296ba4db0fe5bdcfd))
-   **stop build:** try to implement stop build process but failed ([75c6eed](https://github.com/digitopvn/diginext/commit/75c6eede71b8e78d0729d30fb3784000ea2893e9))
-   **use dx as main command:** change from di to dx as primary command ([3071c87](https://github.com/digitopvn/diginext/commit/3071c873f792f074f89511f907efedac4a7b2380))

### Features

-   **automation scripts:** install docker, node, yarn, gcloud, doctl, jq, kubectl, k3s ([f2497e8](https://github.com/digitopvn/diginext/commit/f2497e86dd9c3d02987f868353e5c4f6bce095d0))
-   **workspace:** join a workspace, add user to workspace, auth user with a workspace ([189a028](https://github.com/digitopvn/diginext/commit/189a02853324c93118972036c47c01c07f622b08))

# 1.0.0 (2023-01-10)

### Bug Fixes

-   **add exports:** export modules into index ([959820e](https://bitbucket.org/digitopvn/di/commits/959820e6658a6e06cfa44167af3feeed0870656b))
-   **app domain:** update domain when deploying ([45abdc8](https://bitbucket.org/digitopvn/di/commits/45abdc8400f0588f0b2dc81323b8562288fa4777))
-   **authentication:** fix access token and populate workspace in user api ([2154dd3](https://bitbucket.org/digitopvn/di/commits/2154dd378888de26bf7fa3b915e09297ea84fb0f))
-   **bugs:** client vs server, fetch api, modules, startup scripts ([1ea6805](https://bitbucket.org/digitopvn/di/commits/1ea6805fd5d0cba1510d030d7df125c05ce39805))
-   **build and logger:** fix build and logger issues ([5f4b4f0](https://bitbucket.org/digitopvn/di/commits/5f4b4f0b338d2c4c2a17dd02242414a48d6dc7c5))
-   **cluster auth bug:** fix cluster and provider authentication bugs ([cbd86fb](https://bitbucket.org/digitopvn/di/commits/cbd86fb37f510528b80b9bebf5b266e6c706d952))
-   **command deploy and run:** fix image pull secret not working when deploying ([4b327fe](https://bitbucket.org/digitopvn/di/commits/4b327fe045ec5e02d40c9137ea3d2026e534e72e))
-   **connect container registry:** use different methods of client and server mode ([8df34c5](https://bitbucket.org/digitopvn/di/commits/8df34c540cae9a796ce8647ad676e45043e5e0a3))
-   **connect custom cluster bug:** fix error when connect to cluster (incorrect kubeconfig content) ([24f4571](https://bitbucket.org/digitopvn/di/commits/24f45714490855cdb386e46b3d48e615cbfc4e02))
-   **create duplicated registries:** fix bugs of creating duplicated container registries in database ([8d89d06](https://bitbucket.org/digitopvn/di/commits/8d89d060a8c65d9345df5feef219d54daff6e7b5))
-   **deploy and build:** correct the registry and image pull secret ([1a65c6c](https://bitbucket.org/digitopvn/di/commits/1a65c6c5618cf6e88d7f55c9f0b2ffd8e942c9a1))
-   **dev goon branch:** create dev goon branch ([3ddca49](https://bitbucket.org/digitopvn/di/commits/3ddca499ba4b067a1f3d575d4d586311d5e6e3c0))
-   **domains:** domain can be optional ([741a86f](https://bitbucket.org/digitopvn/di/commits/741a86f188311e82707cb5b4bf9e0b2c4b7d3cf4))
-   **git pull request username:** fixed git pull request username disapear ([9a22cda](https://bitbucket.org/digitopvn/di/commits/9a22cda91ef7d83d2fa4020034e6b8124ed34a24))
-   **git pull request:** fix create pull request on bitbucket ([0f731c7](https://bitbucket.org/digitopvn/di/commits/0f731c7e17d83a3b78589aa11885d9820eba9e1e))
-   **image pull secret:** fix connect to container registry and create image pull secret ([58b7acc](https://bitbucket.org/digitopvn/di/commits/58b7acc030ddd86b397acf9321980eade263edf5))
-   **log to string:** git pr log to string ([5966581](https://bitbucket.org/digitopvn/di/commits/59665812c658ff8f328d6aecd0d9c3f760ff2cd2))
-   **lot of bugs and apis:** rollout, release, preview, build, run, fetch deployment ([140b983](https://bitbucket.org/digitopvn/di/commits/140b983ce814c119ebbc02e8bcbe11fbe8ab99e9))
-   **pr log:** log instead of error ([f45560d](https://bitbucket.org/digitopvn/di/commits/f45560d0c6cea2ec8a0744b95853cea9902e704f))
-   **readme gitignore:** clear gitignore cache ([35e2fec](https://bitbucket.org/digitopvn/di/commits/35e2fec2358ffec2bdf7ccd19ca113ccec84821c))
-   **registry secret:** fix incorrect registry secret generated ([570b715](https://bitbucket.org/digitopvn/di/commits/570b715930046efe5bae21cef4f61618588272aa))
-   **rollout:** improve rollout command ([193e7aa](https://bitbucket.org/digitopvn/di/commits/193e7aaf64249b1d6c241d083cc65153c3a27d19))
-   **semantic release:** install dev deps ([364315f](https://bitbucket.org/digitopvn/di/commits/364315fd230250c035e5b132c090bd51960228b0))
-   **username:** username is equal to user slug ([6d7342c](https://bitbucket.org/digitopvn/di/commits/6d7342cf3384afa819a8f102ee279332573a4271))

### Features

-   **app:** init app ([6ec901d](https://bitbucket.org/digitopvn/di/commits/6ec901db429d0c3fc8c2b428460044df39ff99ab))
-   **build, release and roll out:** make build, release and roll out work properly ([7110659](https://bitbucket.org/digitopvn/di/commits/7110659456aaeeff1d8dabb95730b46c53b69403))
-   **domain:** create domain command ([725faf6](https://bitbucket.org/digitopvn/di/commits/725faf62f8bed5f889dd5c4f9feb81a01b0d8a11))
-   **first commit:** v1 beta version ([a01dfd7](https://bitbucket.org/digitopvn/di/commits/a01dfd70600f55bb88dd91b5967b819b5c7a1ae9))
-   **readme:** add image ([cb11a02](https://bitbucket.org/digitopvn/di/commits/cb11a0221bd88429dfbc05139bfe73cfe8ed4988))
-   **resolve todos:** git, k8s, account, framework, providers, fetch api ([828ac99](https://bitbucket.org/digitopvn/di/commits/828ac998d7c7ef3ad5124c1007e61e81bee999c8))
-   **sort and order:** add sort feature to base service and base controller ([b760d8b](https://bitbucket.org/digitopvn/di/commits/b760d8bf99a47eaa3bc45c3a04dd653c8f782652))

# 1.0.0 (2023-01-01)

### Bug Fixes

-   **authentication:** fix access token and populate workspace in user api ([2154dd3](https://bitbucket.org/digitopvn/di/commits/2154dd378888de26bf7fa3b915e09297ea84fb0f))
-   **command deploy and run:** fix image pull secret not working when deploying ([4b327fe](https://bitbucket.org/digitopvn/di/commits/4b327fe045ec5e02d40c9137ea3d2026e534e72e))
-   **deploy and build:** correct the registry and image pull secret ([1a65c6c](https://bitbucket.org/digitopvn/di/commits/1a65c6c5618cf6e88d7f55c9f0b2ffd8e942c9a1))
-   **dev goon branch:** create dev goon branch ([3ddca49](https://bitbucket.org/digitopvn/di/commits/3ddca499ba4b067a1f3d575d4d586311d5e6e3c0))
-   **domains:** domain can be optional ([741a86f](https://bitbucket.org/digitopvn/di/commits/741a86f188311e82707cb5b4bf9e0b2c4b7d3cf4))
-   **git pull request username:** fixed git pull request username disapear ([9a22cda](https://bitbucket.org/digitopvn/di/commits/9a22cda91ef7d83d2fa4020034e6b8124ed34a24))
-   **git pull request:** fix create pull request on bitbucket ([0f731c7](https://bitbucket.org/digitopvn/di/commits/0f731c7e17d83a3b78589aa11885d9820eba9e1e))
-   **image pull secret:** fix connect to container registry and create image pull secret ([58b7acc](https://bitbucket.org/digitopvn/di/commits/58b7acc030ddd86b397acf9321980eade263edf5))
-   **log to string:** git pr log to string ([5966581](https://bitbucket.org/digitopvn/di/commits/59665812c658ff8f328d6aecd0d9c3f760ff2cd2))
-   **pr log:** log instead of error ([f45560d](https://bitbucket.org/digitopvn/di/commits/f45560d0c6cea2ec8a0744b95853cea9902e704f))
-   **readme gitignore:** clear gitignore cache ([35e2fec](https://bitbucket.org/digitopvn/di/commits/35e2fec2358ffec2bdf7ccd19ca113ccec84821c))
-   **registry secret:** fix incorrect registry secret generated ([570b715](https://bitbucket.org/digitopvn/di/commits/570b715930046efe5bae21cef4f61618588272aa))
-   **rollout:** improve rollout command ([193e7aa](https://bitbucket.org/digitopvn/di/commits/193e7aaf64249b1d6c241d083cc65153c3a27d19))
-   **semantic release:** install dev deps ([364315f](https://bitbucket.org/digitopvn/di/commits/364315fd230250c035e5b132c090bd51960228b0))
-   **username:** username is equal to user slug ([6d7342c](https://bitbucket.org/digitopvn/di/commits/6d7342cf3384afa819a8f102ee279332573a4271))

### Features

-   **app:** init app ([6ec901d](https://bitbucket.org/digitopvn/di/commits/6ec901db429d0c3fc8c2b428460044df39ff99ab))
-   **build, release and roll out:** make build, release and roll out work properly ([7110659](https://bitbucket.org/digitopvn/di/commits/7110659456aaeeff1d8dabb95730b46c53b69403))
-   **domain:** create domain command ([725faf6](https://bitbucket.org/digitopvn/di/commits/725faf62f8bed5f889dd5c4f9feb81a01b0d8a11))
-   **first commit:** v1 beta version ([a01dfd7](https://bitbucket.org/digitopvn/di/commits/a01dfd70600f55bb88dd91b5967b819b5c7a1ae9))
-   **readme:** add image ([cb11a02](https://bitbucket.org/digitopvn/di/commits/cb11a0221bd88429dfbc05139bfe73cfe8ed4988))
-   **resolve todos:** git, k8s, account, framework, providers, fetch api ([828ac99](https://bitbucket.org/digitopvn/di/commits/828ac998d7c7ef3ad5124c1007e61e81bee999c8))
-   **sort and order:** add sort feature to base service and base controller ([b760d8b](https://bitbucket.org/digitopvn/di/commits/b760d8bf99a47eaa3bc45c3a04dd653c8f782652))
</file>

<file path="package.json">
{
	"name": "@topgroup/diginext",
	"version": "3.43.2",
	"description": "A BUILD SERVER & CLI to deploy apps to any Kubernetes clusters.",
	"exports": "./index.js",
	"bin": {
		"di": "./dist/index.js",
		"dx": "./dist/index.js"
	},
	"files": [
		"dist/**",
		"CHANGELOG.md",
		"di-banner.png",
		"public/**",
		"templates/**"
	],
	"keywords": [
		"topgroup",
		"dx",
		"digitop",
		"dig-cli",
		"deploy k8s",
		"diginext-cli",
		"diginext",
		"di",
		"di-cli",
		"build-server",
		"cli-deploy",
		"k8s",
		"kubernetes",
		"kubectl",
		"build container",
		"build docker",
		"deploy docker",
		"run k8s"
	],
	"repository": {
		"type": "git",
		"url": "https://github.com/digitopvn/diginext.git"
	},
	"bugs": {
		"url": "https://github.com/digitopvn/diginext/issues"
	},
	"homepage": "https://github.com/digitopvn/diginext",
	"author": {
		"name": "TOP GROUP (a.k.a Digitop)",
		"email": "dev@wearetopgroup.com",
		"url": "https://github.com/digitopvn/diginext"
	},
	"license": "GPL-3.0",
	"engines": {
		"npm": ">=8.0.0",
		"node": ">=16.0.0"
	},
	"scripts": {
		"build": "rimraf dist && tsc -p tsconfig.json && tsc-alias -p tsconfig.json && npm run restruct && rimraf dist/__tests__ && chmod -R +x dist && npm link && pnpm swagger",
		"build:deploy": "git merge origin/main && pnpm build && skaffold run --platform=linux/amd64,linux/arm64",
		"build:run": "pnpm build && skaffold run --platform=linux/amd64,linux/arm64",
		"build:deploy-release": "pnpm build && skaffold run --platform=linux/amd64,linux/arm64 && pnpm release:nobuild",
		"deploy": "skaffold run --tail",
		"startup": "pm2 startup",
		"unstartup": "pm2 unstartup",
		"serve": "CLI_MODE=server pm2 start dist/server.js --name diginext-build-server && pm2 save",
		"stop": "pm2 stop diginext-build-server",
		"restruct": "ncp dist/src dist && rimraf dist/src dist/package.json",
		"dx": "CLI_MODE=client ts-node src/index.ts",
		"dev": "pnpm dev:server",
		"dev:server": "run-script-os",
		"dev:server:win32": "set CLI_MODE=server && rimraf dist && concurrently \"tsup src/**/*.ts src/**/*.tsx --format esm,cjs --legacy-output --watch\"",
		"dev:server:darwin:linux": "CLI_MODE=server ts-node-dev --poll -r tsconfig-paths/register src/server.ts --debug --respawn --exit-child --watch src",
		"dev:server:default": "CLI_MODE=server ts-node-dev --poll -r tsconfig-paths/register src/server.ts --debug --respawn --exit-child --watch src",
		"dev:nodemon": "CLI_MODE=server nodemon --legacy-watch \"src/**/*.ts\" --ext \"ts,json\" --exec \"pnpm swagger && CLI_MODE=server ts-node -r tsconfig-paths/register src/server.ts\"",
		"dev:swagger": "concurrently \"pnpm dev:spec\" \"pnpm dev:server\"",
		"dev:spec": "ts-node-dev --respawn --transpile-only -- node_modules/tsoa/dist/cli.js spec",
		"start:ts": "NODE_ENV=production CLI_MODE=server ts-node -r tsconfig-paths/register src/server.ts",
		"start:js": "NODE_ENV=production CLI_MODE=server node dist/server.js",
		"check-types": "tsc --noEmit --pretty -p tsconfig.json",
		"lint": "eslint \"src/**/*.ts\" --fix && pnpm check-types",
		"clean": "rimraf .yarn/cache node_modules yarn.lock pnpm-lock.yaml dist",
		"test": "run-script-os",
		"test:win32": "set CLI_MODE=server && set NODE_ENV=test && jest --runInBand --detectOpenHandles --watchAll=false --forceExit",
		"test:darwin:linux": "CLI_MODE=server NODE_ENV=test jest --runInBand --detectOpenHandles --watchAll=false --forceExit",
		"test:default": "CLI_MODE=server NODE_ENV=test jest --runInBand --detectOpenHandles --watchAll=false --forceExit",
		"test:build": "pnpm build && CLI_MODE=server NODE_ENV=test jest --runInBand --detectOpenHandles --watchAll=false --forceExit",
		"coverage": "pnpm lint && pnpm build && jest --coverage",
		"format": "prettier 'src/**/*.{js,ts,tsx,json,yaml}' --write && pnpm lint",
		"commit": "git add . && cz && git merge origin/prerelease -m \"chore(PR): Merged from origin/prerelease\" --no-ff && git merge origin/main -m \"chore(PR): Merged from origin/main\" --no-ff && git push origin && exit 0",
		"commit-build": "git add . && git commit --allow-empty -m 'chore(changelog.md): generate changelog [skip ci]' && git push -u origin || true",
		"commit-pkgver": "git add . && git commit --allow-empty -m 'chore(package.json): update version [skip ci]' && git push -u origin || true",
		"pkg-version": "npm pkg set version=$(echo $(git describe --tags $(git rev-list --tags --max-count=1)) | cut -c2-)",
		"npm-publish": "npm publish --access=public",
		"release": "npm run release:nobuild",
		"release:build": "npm run format && npm run build && npm run release:nobuild",
		"release:nobuild": "npm run prerelease && npm run npm-publish",
		"release:deploy": "npm run release && skaffold run --platform=linux/amd64,linux/arm64",
		"release:docker": "npm run release && npm run docker-build",
		"release:all": "npm run release && npm run docker-build && skaffold run --tail",
		"prerelease": "npx semantic-release --no-ci",
		"ci:release": "open-cli https://github.com/digitopvn/diginext/compare/main...$(echo $(git rev-parse --abbrev-ref HEAD))",
		"ci:prerelease": "open-cli https://github.com/digitopvn/diginext/compare/prerelease...$(echo $(git rev-parse --abbrev-ref HEAD))",
		"pull-request": "open-cli https://github.com/digitopvn/diginext/compare/main...$(echo $(git rev-parse --abbrev-ref HEAD))",
		"pr": "pnpm pull-request",
		"husky-hide": "npm pkg delete scripts.prepare && npm pkg delete scripts.postinstall",
		"husky-show": "npm pkg set scripts.prepare='husky install' && npm pkg set scripts.postinstall='husky install'",
		"docker-driver": "docker buildx create --driver docker-container --name diginext-cli-builder",
		"podman-build-beta": "podman build -f Dockerfile -t digitop/diginext:beta --cache-from digitop/diginext .",
		"docker-build-beta": "docker buildx build --platform=linux/amd64,linux/arm64 -f Dockerfile --push -t digitop/diginext:$(echo $(git describe --tags $(git rev-list --tags --max-count=1)) | cut -c2-) -t digitop/diginext:beta --cache-from type=registry,ref=digitop/diginext .",
		"docker-build-beta-amd": "docker buildx build -o docker-cache --platform=linux/amd64 -f Dockerfile -t digitop/diginext:beta --builder=diginext-cli-beta-builder --cache-from type=local,ref=docker-cache .",
		"docker-build-beta-arm": "docker buildx build --platform=linux/amd64 -f Dockerfile --push -t digitop/diginext:beta --builder=diginext-cli-beta-builder --cache-from type=registry,ref=digitop/diginext:beta .",
		"docker-build": "docker buildx build --platform=linux/amd64,linux/arm64 -f Dockerfile --push -t digitop/diginext:$(echo $(git describe --tags $(git rev-list --tags --max-count=1)) | cut -c2-) -t digitop/diginext:latest --cache-from type=registry,ref=digitop/diginext .",
		"docker-build-arm": "docker buildx build -f Dockerfile --load -t digitop/diginext:latest --builder=diginext-cli-builder --cache-from type=registry,ref=digitop/diginext:latest .",
		"docker-release": "pnpm build && pnpm docker-build",
		"swagger": "tsoa spec",
		"prepare": "husky install || true",
		"postinstall": "husky install || true"
	},
	"config": {
		"commitizen": {
			"path": "@commitlint/cz-commitlint"
		}
	},
	"release": {
		"branches": [
			"main",
			{
				"name": "prerelease",
				"prerelease": true
			},
			{
				"name": "beta",
				"prerelease": true
			}
		],
		"plugins": [
			[
				"@semantic-release/commit-analyzer",
				{
					"preset": "angular",
					"releaseRules": [
						{
							"type": "docs",
							"scope": "README",
							"release": "patch"
						},
						{
							"type": "refactor",
							"release": "minor"
						},
						{
							"type": "style",
							"release": "patch"
						}
					],
					"parserOpts": {
						"noteKeywords": [
							"BREAKING CHANGE",
							"BREAKING CHANGES"
						]
					}
				}
			],
			"@semantic-release/release-notes-generator",
			"@semantic-release/changelog",
			"@semantic-release/git",
			[
				"@semantic-release/github",
				{
					"successComment": false,
					"failTitle": false
				}
			],
			"@semantic-release/npm"
		]
	},
	"dependencies": {
		"@aws-sdk/client-s3": "^3.188.0",
		"@aws-sdk/lib-storage": "^3.675.0",
		"@aws-sdk/types": "^3.188.0",
		"@babel/runtime": "^7.15.4",
		"@google-analytics/admin": "^1.2.3",
		"@google-cloud/storage": "^5.5.0",
		"@kubernetes/client-node": "^0.20.0",
		"@socket.io/redis-adapter": "^8.3.0",
		"@supercharge/strings": "^1.16.0",
		"@tsoa/runtime": "^5.0.0",
		"@types/jest": "^26.0.22",
		"agentkeepalive": "^4.2.1",
		"app-root-path": "^3.1.0",
		"axios": "1.4.0",
		"bcrypt": "^5.1.0",
		"bitbucket": "^2.7.0",
		"body-parser": "^1.20.1",
		"chalk": "4.1.2",
		"class-validator": "^0.13.2",
		"cli-highlight": "^2.1.11",
		"cli-html": "^3.0.6",
		"cli-markdown": "^3.0.2",
		"cli-progress": "^3.8.2",
		"cli-table": "^0.3.11",
		"clui": "^0.3.6",
		"compare-versions": "^5.0.1",
		"configstore": "^5.0.1",
		"cookie-parser": "^1.4.6",
		"cookie-session": "^2.0.0",
		"cors": "^2.8.5",
		"cron": "^2.1.0",
		"date-fns": "^2.29.3",
		"dayjs": "^1.10.4",
		"debug": "^4.3.4",
		"diginext-utils": "3.0.6",
		"dotenv": "^8.2.0",
		"envfile": "6.14.0",
		"esm": "^3.2.18",
		"execa": "npm:@esm2cjs/execa@6.1.1-cjs.1",
		"express": "^4.17.1",
		"express-list-endpoints": "^6.0.0",
		"express-query-parser": "^1.3.3",
		"express-session": "^1.17.3",
		"extract-zip": "^2.0.0",
		"form-data": "^4.0.0",
		"generate-password": "^1.7.0",
		"gitignore": "^0.6.0",
		"glob": "^8.1.0",
		"globby": "11.1.0",
		"google-auth-library": "^9.7.0",
		"humanize-duration": "^3.25.1",
		"husky": "^8.0.0",
		"image-size": "^1.0.2",
		"inquirer": "8.2.5",
		"install": "0.13.0",
		"ioredis": "^5.4.1",
		"jest": "^29.5.0",
		"js-yaml": "^4.1.0",
		"json-diff": "^0.5.4",
		"jsonwebtoken": "8.5.1",
		"listr": "^0.14.3",
		"lodash": "^4.17.21",
		"marked": "^4.2.3",
		"marked-terminal": "^5.1.1",
		"mkdirp": "^2.1.3",
		"module-alias": "2.2.2",
		"mongodb": "^4.17.2",
		"mongoose": "^7.0.3",
		"morgan": "^1.10.0",
		"ncp": "^2.0.0",
		"node-cron": "3.0.0",
		"node-emoji": "^1.11.0",
		"node-fetch": "^2.6.0",
		"open": "8.4.0",
		"ora": "^5.1.0",
		"p-queue": "6.6.2",
		"passport": "^0.6.0",
		"passport-google-oauth2": "^0.2.0",
		"passport-http-bearer": "^1.0.1",
		"passport-jwt": "4.0.0",
		"pkg-install": "^0.2.0",
		"pm2": "^5.3.0",
		"puppeteer": "^22.15.0",
		"rate-limiter-flexible": "^2.4.1",
		"recursive-copy": "^2.0.14",
		"redis": "^4.3.1",
		"reflect-metadata": "^0.1.13",
		"remove-markdown": "^0.5.0",
		"sha.js": "^2.4.11",
		"simple-git": "^3.15.0",
		"socket.io": "4.1.3",
		"socket.io-client": "4.1.3",
		"spdx-license-list": "^5.0.0",
		"strip-ansi": "^6.0.1",
		"swagger-ui-express": "^4.6.1",
		"tree-node-cli": "^1.6.0",
		"tslib": "^2.5.0",
		"tsoa": "^5.1.1",
		"tsup": "^7.2.0",
		"uuid": "^9.0.0",
		"xml2js": "^0.4.23",
		"yargs": "^17.6.2",
		"zod": "^3.23.8"
	},
	"devDependencies": {
		"@babel/cli": "^7.19.3",
		"@babel/core": "^7.20.2",
		"@babel/plugin-transform-runtime": "^7.15.8",
		"@babel/preset-env": "^7.23.3",
		"@babel/register": "^7.18.9",
		"@commitlint/cli": "^17.3.0",
		"@commitlint/config-conventional": "^17.3.0",
		"@commitlint/cz-commitlint": "^17.3.0",
		"@jest/globals": "^29.5.0",
		"@jest/types": "^29.5.0",
		"@semantic-release/changelog": "^6.0.2",
		"@semantic-release/commit-analyzer": "^9.0.2",
		"@semantic-release/git": "^10.0.1",
		"@semantic-release/npm": "^9.0.1",
		"@semantic-release/release-notes-generator": "^10.0.3",
		"@types/bcrypt": "^5.0.0",
		"@types/cli-table": "^0.3.1",
		"@types/cookie-session": "^2.0.44",
		"@types/cors": "^2.8.14",
		"@types/express": "^4.17.17",
		"@types/express-list-endpoints": "^6.0.0",
		"@types/express-serve-static-core": "^4.17.33",
		"@types/inquirer": "^9.0.3",
		"@types/jsonwebtoken": "8.5.1",
		"@types/lodash": "^4.14.191",
		"@types/marked": "^4.0.7",
		"@types/mocha": "^10.0.0",
		"@types/morgan": "^1.9.4",
		"@types/node": "^18.8.5",
		"@types/node-cron": "^3.0.7",
		"@types/qs": "^6.9.7",
		"@types/supertest": "^2.0.12",
		"@types/swagger-ui-express": "^4.1.3",
		"@types/yargs": "^17.0.22",
		"@typescript-eslint/eslint-plugin": "^5.45.0",
		"@typescript-eslint/parser": "^5.45.0",
		"babel-core": "^6.26.3",
		"babel-jest": "^29.5.0",
		"babel-loader": "^9.1.3",
		"babel-plugin-module-resolver": "^4.1.0",
		"babel-polyfill": "^6.26.0",
		"chai": "^4.3.7",
		"commitizen": "^4.2.5",
		"concurrently": "^7.6.0",
		"del": "6.1.1",
		"del-cli": "^5.0.0",
		"dependency-cruiser": "^13.1.1",
		"esbuild": "^0.15.15",
		"eslint": "^8.28.0",
		"eslint-config-airbnb-base": "^15.0.0",
		"eslint-config-airbnb-typescript": "^17.0.0",
		"eslint-config-prettier": "^8.5.0",
		"eslint-plugin-import": "^2.29.0",
		"eslint-plugin-prettier": "^5.0.0",
		"eslint-plugin-simple-import-sort": "^8.0.0",
		"eslint-plugin-unused-imports": "^2.0.0",
		"lint-staged": "^13.0.4",
		"mocha": "^10.1.0",
		"nodemon": "^2.0.20",
		"npm-run-all": "^4.1.5",
		"open-cli": "^7.1.0",
		"prettier": "^3.0.0",
		"rimraf": "^6.0.1",
		"run-script-os": "^1.1.6",
		"semantic-release": "^19.0.5",
		"supertest": "^6.3.3",
		"trash-cli": "^5.0.0",
		"ts-jest": "^29.1.1",
		"ts-mocha": "^10.0.0",
		"ts-node": "^10.9.1",
		"ts-node-dev": "^2.0.0",
		"tsc-alias": "^1.7.1",
		"tsconfig-paths": "4.1.0",
		"typescript": "^4.9.5"
	}
}
</file>

</files>
