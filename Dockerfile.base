# Use Debian as the base image
FROM debian:latest

# Switch to "root" user
USER root

# Install build dependencies
RUN apt-get update && apt-get install -y curl wget git sed jq openssh-client

# Upgrade Node.js to version 16.x
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
RUN apt-get install -y nodejs

# Install GCLOUD CLI / SDK
RUN apt-get install -y apt-transport-https ca-certificates gnupg lsb-release && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && \
    apt-get update && apt-get install -y google-cloud-sdk

# Install Kubernetes Gcloud Authentication plugin
RUN apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

# Install "chromium" for Puppeteer
ENV CHROMIUM_PATH /usr/bin/chromium
RUN apt-get update && \
    apt-get install -y chromium && \
    rm -rf /var/lib/apt/lists/*

# Install KUBECTL
RUN curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" && \
    chmod +x kubectl && \
    mv ./kubectl /usr/bin/kubectl

# Install Helm
RUN curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh

# Install Docker
RUN apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose

# Install Podman
RUN apt-get install -y podman iptables

# Install Digital Ocean CLI
RUN cd ~ && \
    wget https://github.com/digitalocean/doctl/releases/download/v1.78.0/doctl-1.78.0-linux-amd64.tar.gz && \
    tar xf doctl-1.78.0-linux-amd64.tar.gz && \
    mv ~/doctl /usr/local/bin/doctl

# Install MongoDB client tools
RUN apt-get update \
    && apt-get install -y gnupg \
    && apt-get install -y wget \
    && wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | apt-key add - \
    && echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/debian buster/mongodb-org/4.4 main" | tee /etc/apt/sources.list.d/mongodb-org-4.4.list \
    && apt-get update \
    && apt-get install -y mongodb-org-tools

# Install MySQL client tools
RUN apt-get update && apt-get install -y default-mysql-client

# Install PostgreSQL client tools
RUN apt-get update && apt-get install -y postgresql-client

# Set working directory
WORKDIR /usr/app

# Install dependencies
RUN npm install -g pnpm

# Copy docker buildx
COPY --from=docker/buildx-bin /buildx /usr/local/bin/docker-buildx
# Set permissions for the binary
RUN chmod +x /usr/local/bin/docker-buildx

# plugin to set environment variable
COPY ./scripts/set_env /usr/bin/set_env
RUN chmod +x /usr/bin/set_env

# podman storage directory 
RUN mkdir -p /run/user/1000 && chmod 700 /run/user/1000 
RUN chown -R ${uid}:${gid} /run/user/1000 
RUN chmod -R ug+rwx /run/user/1000

# Configuration files for PODMAN to resolve "docker.io" registry shortname alias
COPY ./podman/containers/registries.conf /etc/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/share/containers/registries.conf
COPY ./podman/containers/registries.conf /home/${user}/.config/containers/registries.conf

# PODMAN's image storage
COPY ./podman/containers/storage.conf /home/${user}/share/containers/storage.conf
COPY ./podman/containers/storage.conf /home/${user}/.config/containers/storage.conf
COPY ./podman/containers/storage.conf /root/.config/containers/storage.conf

# PODMAN's container conf
COPY ./podman/containers/containers.conf /etc/containers/containers.conf

RUN chmod -R ug+rwx /home/${user}/.config/containers/storage.conf
RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage
RUN chmod -R ug+rwx /var/tmp/${user}/containers/storage

RUN mkdir -p /var/tmp/${user}/containers/storage
RUN chown -R ${uid}:${gid} /var/tmp/${user}/containers/storage

RUN touch /etc/sub{u,g}id
RUN chmod 755 /etc/subuid
RUN chmod 755 /etc/subgid

# end