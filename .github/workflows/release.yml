name: Release All Workflow

# TRIGGERS
on:
  push:
    branches:
      - main
      - prerelease
      - beta

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  BRANCH_NAME: ${{ github.head_ref || github.ref }} 

# CI/CD STEPS
jobs:
  release:
    name: Release Github & NPM
    runs-on: ubuntu-latest
    steps:
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"

      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Release GITHUB & NPM
        run: npx semantic-release
      
      - name: Update "package.json" version
        run: pnpm pkg-version

      - name: Commit and push latest "package.json" file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(package.json): update version [skip ci]"
          commit_options: '--allow-empty --no-verify --signoff'

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - uses: actions/upload-artifact@v4
        with:
          name: swagger-artifact
          path: public/swagger.json

      - uses: actions/upload-artifact@v4
        with:
          name: packagejson-artifact
          path: package.json
      
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"
      - name: Show current ref
        run: echo "${{ github.ref }}"

  docker-base:
    name: Build Diginext Docker Base Image
    runs-on: ubuntu-latest
    # needs: release
    if: contains(github.event.head_commit.message, 'docker base')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Build Docker & push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: digitop/diginext-base:latest,digitop/diginext-base:6
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext-base:cache
          cache-to: type=registry,ref=digitop/diginext-base:cache,mode=max

  docker-release-main:
    name: Release Docker Image (MAIN)
    runs-on: ubuntu-latest
    needs: [release,docker-base]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Show current branch
        run: echo "${{ env.BRANCH_NAME }}"
      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - name: Download swagger.json
        uses: actions/download-artifact@v4
        with:
          name: swagger-artifact
          path: public

      - name: Download package.json
        uses: actions/download-artifact@v4
        with:
          name: packagejson-artifact

      # - name: Display structure of downloaded files
      #   run: ls -R

      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo $LATEST_TAG
      - run: echo ${{env.LATEST_TAG}}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (main)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: digitop/diginext:${{env.LATEST_TAG}},digitop/diginext:latest
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext:cache
          cache-to: type=registry,ref=digitop/diginext:cache,mode=max
  
  docker-release-beta:
    name: Release Docker Image (BETA)
    runs-on: ubuntu-latest
    needs: [release,docker-base]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'prerelease')
    steps:
      - name: Show current ref
        run: echo "${{ github.ref }}"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo ${LATEST_TAG}
      - run: echo ${{env.LATEST_TAG}}
          
      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-artifact
          path: dist

      - name: Download swagger.json
        uses: actions/download-artifact@v4
        with:
          name: swagger-artifact
          path: public

      - name: Download package.json
        uses: actions/download-artifact@v4
        with:
          name: packagejson-artifact

      - name: Display structure of downloaded files
        run: ls -R

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (BETA)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.prerelease
          push: true
          tags: digitop/diginext:${{env.LATEST_TAG}},digitop/diginext:prerelease
          # platforms: |
          #   linux/amd64
          #   linux/arm64
          cache-from: type=registry,ref=digitop/diginext:cache-beta
          cache-to: type=registry,ref=digitop/diginext:cache-beta,mode=max

  deploy-topgroup:
    name: Deploy to [app.dxup.dev]
    runs-on: ubuntu-latest
    needs: [docker-release-main]
    if: always() && !cancelled() && !failure() && contains(github.ref, 'main')
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}
      
      - name: Get a latest release tag
        run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
      - run: echo $LATEST_TAG
      - name: Get list of commits
        run: |
          COMMIT_TITLES=$(git log --format=%s ${GITHUB_BASE_REF}..${GITHUB_SHA})
          echo "$COMMIT_TITLES" >> $GITHUB_ENV

      - run: echo "${{ github.ref }}"
      - run: echo "${{ github.ref_name }}"
      - run: mkdir ~/.kube
      - run: echo "${{ secrets.KUBE_CONFIG }}" >> ~/.kube/config

      - name: Setup Kubernetes Tools
        uses: yokawasa/action-setup-kube-tools@v0.9.3
        with:
          kubectl: '1.24.10'

      - run: kubectl version --client
      - run: kubectl config get-contexts
      - run: kubectl config current-context
      # - run: kubectl config use-context topgroup-dev

      # Deploy to TOPGROUP DEV cluster (APP.DIGINEXT.SITE - DEPRECATED)
      # - name: Set image to [app.diginext.site / OLD] deployment
      #   continue-on-error: true
      #   run: kubectl --context=topgroup-dev -n diginext-cli set image deployment/diginext-cli diginext-cli=digitop/diginext:$LATEST_TAG

      # Deploy to TOPGROUP DEV cluster (APP.DXUP.DEV)
      - name: Set image to [app.dxup.dev / TOP Group Local] deployment
        continue-on-error: true
        run: kubectl --context=topgroup-dev -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG
        
      # Deploy to LONGVAN PROD cluster (DEPRECATED)
      # - name: Set image to [app.dxup.dev / Long Van PROD] deployment
      #   continue-on-error: true
      #   run: kubectl --context=longvan-cluster -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # Deploy to DXUP FPT cluster
      # - name: Set image to [app.dxup.dev / DXUP FPT] deployment
      #   continue-on-error: true
      #   run: kubectl --context=dxup-vn -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # Deploy to DXUP OVH cluster
      - name: Set image to [app.dxup.dev / DXUP OVH] deployment
        run: kubectl --context=dxupprod -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG
        
      # Deploy to LONGVAN STAGING cluster (DEPRECATED)
      # - name: Set image to [app.dxup.dev / Long Van STAGING] deployment
      #   run: kubectl --context=topgroup-staging -n dxup-dev set image deployment/deploy dxup-dev=digitop/diginext:$LATEST_TAG

      # DEPRECATED
      # - name: Set image to [hobby.dxup.dev] deployment
      #   run: kubectl --context=topgroup-k3s -n diginext-hobby set image deployment/diginext-hobby diginext-hobby=digitop/diginext:$LATEST_TAG

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "[APP.DXUP.DEV] Deploy version ${{ env.LATEST_TAG }}"
          description: ${{ env.COMMIT_TITLES }}

  # deploy-diginext-staging:
  #   name: Deploy to [staging.app.dxup.dev]
  #   runs-on: ubuntu-latest
  #   needs: [docker-release-beta]
  #   if: always() && !cancelled() && !failure() && contains(github.ref, 'prerelease')
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #         token: ${{ secrets.CI_GITHUB_TOKEN }}
      
  #     - name: Checkout latest release tag
  #       run: echo LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`) >> $GITHUB_ENV
  #     - run: echo $LATEST_TAG

  #     - run: echo "${{ github.ref }}"
  #     - run: echo "${{ github.ref_name }}"
  #     - run: mkdir ~/.kube
  #     - run: echo "${{ secrets.KUBE_CONFIG }}" >> ~/.kube/config

  #     - name: Setup Kubernetes Tools
  #       uses: yokawasa/action-setup-kube-tools@v0.9.3
  #       with:
  #         kubectl: '1.24.10'
      
  #     - run: kubectl version --client
  #     - run: kubectl config get-contexts
  #     - run: kubectl config current-context

  #     - run: kubectl config use-context topgroup-k3s
  #     - name: Set image to K8S deployment
  #       run: kubectl -n diginext-staging set image deployment/diginext diginext=digitop/diginext:$LATEST_TAG
