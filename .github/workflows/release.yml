name: Release All Workflow

# TRIGGERS
on:
  push:
    branches:
      - main
      - prerelease
      - beta

# ENVIRONMENT VARIABLES
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

# CI/CD STEPS
jobs:
  release:
    name: Release Github & NPM
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Release GITHUB & NPM
        run: npx semantic-release

      - name: Restore "husky" hook
        run: pnpm husky-show
      
      - name: Update "package.json" version
        run: pnpm pkg-version

      - name: Commit and push latest "package.json" file
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore(package.json): update version [skip ci]"
          commit_options: '--allow-empty --no-verify --signoff'

  docker-base:
    name: Build Diginext Docker Base Image
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Build Docker & push image to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.base
          push: true
          tags: digitop/diginext-base:1,digitop/diginext-base:latest
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-release:
    name: Release Docker Image
    runs-on: ubuntu-latest
    needs: [release, docker-base]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.CI_GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install package dependencies
      #   run: npm ci
        run: pnpm install --no-frozen-lockfile

      - name: Build source code
        run: pnpm build

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        id: buildx
          
      - name: Build & push to Docker Hub (main)
        uses: docker/build-push-action@v4
        if: contains(github.ref, 'main') || contains(github.ref, 'release')
        with:
          context: .
          file: Dockerfile
          push: true
          tags: digitop/diginext:${{github.ref_name}},digitop/diginext:latest
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & push to Docker Hub (prerelease)
        uses: docker/build-push-action@v4
        if: contains(github.ref, 'beta') || contains(github.ref, 'prerelease')
        with:
          context: .
          file: Dockerfile
          push: true
          tags: digitop/diginext:${{github.ref_name}},digitop/diginext:latest
          platforms: |
            linux/amd64
            linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max