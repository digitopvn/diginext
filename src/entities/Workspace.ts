import { IsNotEmpty } from "class-validator";

import type { ObjectID } from "@/libs/typeorm";
import { Column, Entity, ObjectIdColumn } from "@/libs/typeorm";

import type { IBase } from "./Base";
import Base from "./Base";
import type { User } from "./User";

export interface IWorkspace extends IBase {
	name: string;
	image?: string;
	owner?: ObjectID | User;
}

@Entity({ name: "workspaces" })
export default class Workspace extends Base<Workspace> {
	/**
	 * Workspace name
	 */
	@Column({ length: 250 })
	@IsNotEmpty({ message: `Workspace name is required.` })
	name?: string;

	/**
	 * Workspace slug: auto-generated by "name" column
	 * @readonly
	 */
	@Column({ length: 250 })
	@IsNotEmpty({ message: `Workspace slug is required.` })
	slug?: string;

	/**
	 * Workspace profile picture
	 */
	@Column()
	image?: string;

	/**
	 * Workspace domain name
	 */
	@Column()
	domain?: string;

	/**
	 * User ID of the owner
	 *
	 * @remarks This can be populated to {User} data
	 */
	@ObjectIdColumn({ name: "users" })
	owner?: ObjectID | User | string;

	constructor(data?: Workspace) {
		super();
		return Object.assign(this, data);
	}
}

export { Workspace };
