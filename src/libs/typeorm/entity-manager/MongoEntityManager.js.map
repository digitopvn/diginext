{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":";;;AACA,mDAA+C;AAyC/C,0GAAsG;AACtG,uEAAmE;AACnE,6DAAyD;AAEzD,uEAAmE;AACnE,uEAAmE;AACnE,uEAAmE;AAUnE,qDAAiD;AACjD,mDAAoD;AAEpD;;;;;GAKG;AACH,MAAa,kBAAmB,SAAQ,6BAAa;IAQjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB;QAC9B,KAAK,CAAC,UAAU,CAAC,CAAA;QAZZ,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;IAazD,CAAC;IAXD,IAAI,gBAAgB;QAChB,OAAQ,IAAI,CAAC,UAAU,CAAC,MAAsB;aACzC,WAA+B,CAAA;IACxC,CAAC;IAUD,4EAA4E;IAC5E,qBAAqB;IACrB,4EAA4E;IAE5E;;OAEG;IACH,KAAK,CAAC,IAAI,CACN,iBAAuC,EACvC,OAAsC;QAEtC,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA;IACvD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CACR,iBAAuC,EACvC,KAAU;QAEV,OAAO,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CACd,iBAAuC,EACvC,OAAsC;QAEtC,OAAO,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAA;IAC/D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAChB,iBAAuC,EACvC,KAAU;QAEV,OAAO,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAC7D,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,SAAS,CACX,iBAAuC,EACvC,GAAU,EACV,mBAAyB;QAEzB,OAAO,CAAC,GAAG,CAAC,wDAAwD,CAAC,CAAA;QACrE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,MAAM,KAAK,GACP,IAAI,CAAC,gDAAgD,CACjD,mBAAmB,CACtB,IAAI,EAAE,CAAA;QAEX,MAAM,gBAAgB,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAA;QAC/D,KAAK,CAAC,KAAK,CAAC,GAAG;YACX,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;gBAChB,IAAI,OAAO,EAAE,KAAK,QAAQ,EAAE;oBACxB,OAAO,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAA;iBAClC;gBAED,IAAI,yBAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE;oBAC1B,IAAI,EAAE,YAAY,gBAAgB,EAAE;wBAChC,OAAO,EAAE,CAAA;qBACZ;oBAED,MAAM,YAAY,GAAG,QAAQ,CAAC,cAAe,CAAC,YAAY,CAAA;oBAE1D,IAAK,EAAU,CAAC,YAAY,CAAC,YAAY,gBAAgB,EAAE;wBACvD,OAAQ,EAAU,CAAC,YAAY,CAAC,CAAA;qBACnC;iBACJ;YACL,CAAC,CAAC;SACL,CAAA;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;YACtD,GAAG,mBAAmB;YACtB,KAAK,EAAE,KAAK;SACf,CAAC,CAAA;QAEF,OAAO,OAAO,CAAA;QAEd,yEAAyE;QACzE,2BAA2B;QAC3B,sEAAsE;QACtE,iEAAiE;QACjE,sCAAsC;QACtC,0BAA0B;QAC1B,8DAA8D;QAC9D,8CAA8C;QAC9C,iBAAiB;QACjB,YAAY;QACZ,0EAA0E;QAC1E,2EAA2E;QAC3E,qCAAqC;QACrC,uBAAuB;QACvB,2DAA2D;QAC3D,6CAA6C;QAC7C,iBAAiB;QACjB,YAAY;QACZ,kEAAkE;QAClE,kEAAkE;QAClE,QAAQ;QACR,iCAAiC;QACjC,8DAA8D;QAC9D,IAAI;QACJ,gCAAgC;IACpC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO,CACT,iBAAuC,EACvC,OAAoC;QAEpC,yDAAyD;QACzD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;YACtD,GAAG,OAAO;YACV,IAAI,EAAE,CAAC;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IACjD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,iBAAuC,EACvC,KAAU;QAEV,uDAAuD;QAEvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;YACtD,KAAK,EAAE,OAAO,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK;YAC9D,IAAI,EAAE,CAAC;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IACjD,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,WAAW,CACb,iBAAuC,EACvC,EAQgB;QAEhB,oDAAoD;QACpD,OAAO,CAAC,GAAG,CAAC,6CAA6C,CAAC,CAAA;QAE1D,MAAM,gBAAgB,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAA;QAE/D,IAAI,GAAG,CAAA;QACP,IAAI,EAAE,YAAY,gBAAgB;YAAE,GAAG,GAAG,EAAE,CAAA;QAC5C,IAAI,OAAO,EAAE,KAAK,QAAQ,IAAI,IAAA,4BAAe,EAAC,EAAE,CAAC;YAC7C,GAAG,GAAG,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAA;QAElC,IAAI,OAAO,GAAG,IAAI,WAAW,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;YAC9B,OAAO,IAAI,CAAA;SACd;QAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE;YACtD,KAAK,EAAE,EAAE,GAAG,EAAE;YACd,IAAI,EAAE,CAAC;SACV,CAAC,CAAA;QACF,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IACjD,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,MAAM,CACR,MAA4B,EAC5B,MAEsC;QAEtC,4CAA4C;QAC5C,MAAM,MAAM,GAAG,IAAI,2BAAY,EAAE,CAAA;QACjC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,MAAM,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAClD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;gBACrD,IAAI,UAAU,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;gBAC5C,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,kBAAkB,CACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EACnC,UAAU,CACZ,CACL,CAAA;gBACD,MAAM,CAAC,WAAW,CAAC,IAAI,CACnB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,kBAAkB,CACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EACnC,UAAU,CACZ,CACL,CAAA;YACL,CAAC,CAAC,CAAA;SACL;aAAM;YACH,MAAM,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YACjD,MAAM,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,kBAAkB,CACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EACnC,MAAM,CAAC,GAAG,CAAC,UAAU,CACvB,CACL,CAAA;YACD,MAAM,CAAC,WAAW,CAAC,IAAI,CACnB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,kBAAkB,CACrC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EACnC,MAAM,CAAC,GAAG,CAAC,UAAU,CACvB,CACL,CAAA;SACJ;QAED,OAAO,MAAM,CAAA;IACjB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACR,MAA4B,EAC5B,QAS8B,EAC9B,aAA6C;QAE7C,MAAM,MAAM,GAAG,IAAI,2BAAY,EAAE,CAAA;QAEjC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAClC,QAAkB,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;gBACrC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,CAAC,CAAA;YAC3D,CAAC,CAAC,CACL,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAC5C,MAAM,CAAC,QAAQ,GAAG,aAAa;iBAC1B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;iBAC3B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/B,MAAM,CAAC,aAAa,GAAG,aAAa,CAAC,MAAM,CACvC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,EACnC,EAAqB,CACxB,CAAA;SACJ;aAAM;YACH,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;YACpD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,UAAU,CACrC,MAAM,EACN,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAC7C,EAAE,IAAI,EAAE,aAAa,EAAE,CAC1B,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,WAAW,CAAA;YACxB,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAA;SAC9C;QAED,OAAO,MAAM,CAAA;IACjB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,MAAM,CACR,MAA4B,EAC5B,QAS8B;QAE9B,MAAM,MAAM,GAAG,IAAI,2BAAY,EAAE,CAAA;QAEjC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,GAAG,CAClC,QAAkB,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;gBACrC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;YAC5C,CAAC,CAAC,CACL,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;YAC5C,MAAM,CAAC,QAAQ,GAAG,aAAa;iBAC1B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC;iBAC3B,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;SAClC;aAAM;YACH,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,UAAU,CACrC,MAAM,EACN,IAAI,CAAC,oBAAoB,CACrB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EACnC,QAAQ,CACX,CACJ,CAAA;YAED,MAAM,CAAC,GAAG,GAAG,WAAW,CAAA;YACxB,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,YAAY,CAAA;SAC7C;QAED,OAAO,MAAM,CAAA;IACjB,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,YAAY,CACR,iBAAuC,EACvC,KAAqB;QAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,CAAC,CAAA;IAClE,CAAC;IAED;;;OAGG;IACH,kBAAkB,CACd,iBAAuC,EACvC,KAAqB;QAErB,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;QAC1D,IAAI,CAAC,iCAAiC,CAClC,QAAQ,EACR,MAAM,EACN,iBAAiB,CACpB,CAAA;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,QAAyB,EACzB,OAAsC;QAEtC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAClC,QAAQ,CAAC,SAAS,EAClB,QAAQ,EACR,OAAO,CACV,CAAA;IACL,CAAC;IAED;;;OAGG;IACH,eAAe,CACX,iBAAuC,EACvC,QAAyB,EACzB,OAAsC;QAEtC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAC1C,QAAQ,CAAC,SAAS,EAClB,QAAQ,EACR,OAAO,CACV,CAAA;QAED,IAAI,CAAC,iCAAiC,CAClC,QAAQ,EACR,MAAM,EACN,iBAAiB,CACpB,CAAA;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,UAA2B,EAC3B,OAAoC;QAEpC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAClC,QAAQ,CAAC,SAAS,EAClB,UAAU,EACV,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CACD,iBAAuC,EACvC,KAAqB,EACrB,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAA;IAC1E,CAAC;IAED;;OAEG;IACH,OAAO,CACH,iBAAuC,EACvC,KAAqB,EACrB,OAA+B;QAE/B,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,KAAK,EAAE,OAAO,CAAC,CAAA;IACxD,CAAC;IAED;;OAEG;IACH,qBAAqB,CACjB,iBAAuC,EACvC,WAAyB,EACzB,OAA6B;QAE7B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAC9C,QAAQ,CAAC,SAAS,EAClB,WAAW,EACX,OAAO,CACV,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,uBAAuB,CACnB,iBAAuC,EACvC,UAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAChD,QAAQ,CAAC,SAAS,EAClB,UAAU,CACb,CAAA;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CACN,iBAAuC,EACvC,KAAoB,EACpB,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CACnC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,KAAoB,EACpB,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAClC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,QAAQ,CACJ,iBAAuC,EACvC,GAAW,EACX,KAAoB,EACpB,OAAsD;QAEtD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CACjC,QAAQ,CAAC,SAAS,EAClB,GAAG,EACH,KAAK,EACL,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,mBAAmB,CACf,iBAAuC,EACvC,SAAiB,EACjB,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAC5C,QAAQ,CAAC,SAAS,EAClB,SAAS,EACT,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,qBAAqB,CACjB,iBAAuC;QAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAC1E,CAAC;IAED;;OAEG;IACH,gBAAgB,CACZ,iBAAuC,EACvC,KAAoB,EACpB,OAAoE;QAEpE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CACzC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,iBAAiB,CACb,iBAAuC,EACvC,KAAoB,EACpB,WAAmB,EACnB,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAC1C,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,WAAW,EACX,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,gBAAgB,CACZ,iBAAuC,EACvC,KAAoB,EACpB,MAAc,EACd,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CACzC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,MAAM,EACN,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,iBAAiB,CACb,iBAAuC,EACvC,CAAS,EACT,CAAS,EACT,OAAkC;QAElC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAC1C,QAAQ,CAAC,SAAS,EAClB,CAAC,EACD,CAAC,EACD,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,OAAO,CACH,iBAAuC,EACvC,CAAS,EACT,CAAS,EACT,OAAwB;QAExB,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC3E,CAAC;IAED;;OAEG;IACH,KAAK,CACD,iBAAuC,EACvC,IAA2C,EAC3C,SAAiB,EACjB,OAAe,EACf,MAAuB,EACvB,QAAyB,EACzB,OAAgB,EAChB,OAAsD;QAEtD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAC9B,QAAQ,CAAC,SAAS,EAClB,IAAI,EACJ,SAAS,EACT,OAAO,EACP,MAAM,EACN,QAAQ,EACR,OAAO,EACP,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,iBAAiB,CACb,iBAAuC;QAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IACtE,CAAC;IAED;;OAEG;IACH,qBAAqB,CACjB,iBAAuC,EACvC,OAA0B;QAE1B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAC9C,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,0BAA0B,CACtB,iBAAuC,EACvC,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,CACnD,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,uBAAuB,CACnB,iBAAuC,EACvC,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,CAChD,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,yBAAyB,CACrB,iBAAuC,EACvC,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,yBAAyB,CAClD,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CACN,iBAAuC,EACvC,IAAqB,EACrB,OAAqC;QAErC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CACnC,QAAQ,CAAC,SAAS,EAClB,IAAI,EACJ,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,GAAkB,EAClB,OAAoC;QAEpC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAA;IAC5E,CAAC;IAED;;OAEG;IACH,QAAQ,CAAS,iBAAuC;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAC7D,CAAC;IAED;;OAEG;IACH,qBAAqB,CACjB,iBAAuC,EACvC,OAGC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,CAC9C,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,GAAsB,EACtB,MAAyB,EACzB,OAA0B;QAE1B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAClC,QAAQ,CAAC,SAAS,EAClB,GAAG,EACH,MAAM,EACN,OAAO,CACV,CAAA;IACL,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAClB,iBAAuC,EACvC,OAAuC;QAEvC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAC/C,QAAQ,CAAC,SAAS,EAClB,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,OAAO,CAAS,iBAAuC;QACnD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;IAC5D,CAAC;IAED;;OAEG;IACH,MAAM,CACF,iBAAuC,EACvC,OAAe,EACf,OAAkC;QAElC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAC/B,QAAQ,CAAC,SAAS,EAClB,OAAO,EACP,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CACN,iBAAuC,EACvC,KAAoB,EACpB,GAAkB,EAClB,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CACnC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,GAAG,EACH,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CACD,iBAAuC,EACvC,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;IACnE,CAAC;IAED,KAAK,CACD,iBAAuC,EACvC,QAAmB,EACnB,OAA6B;QAE7B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAC9B,QAAQ,CAAC,SAAS,EAClB,QAAQ,EACR,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,UAAU,CACN,iBAAuC,EACvC,KAAoB,EACpB,MAAqB,EACrB,OAAuE;QAEvE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,UAAU,CACnC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,MAAM,EACN,OAAO,CACV,CAAA;IACL,CAAC;IAED;;OAEG;IACH,SAAS,CACL,iBAAuC,EACvC,KAAoB,EACpB,MAAqB,EACrB,OAA2B;QAE3B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAC/D,OAAO,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAClC,QAAQ,CAAC,SAAS,EAClB,KAAK,EACL,MAAM,EACN,OAAO,CACV,CAAA;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,gDAAgD,CACtD,mBAIe;QAEf,IAAI,CAAC,mBAAmB;YAAE,OAAO,SAAS,CAAA;QAE1C,IAAI,mCAAgB,CAAC,iBAAiB,CAAS,mBAAmB,CAAC;YAC/D,gFAAgF;YAChF,iCAAiC;YACjC,OAAO,OAAO,mBAAmB,CAAC,KAAK,KAAK,QAAQ;gBAChD,CAAC,CAAC,EAAE;gBACJ,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAA;QAEnC,OAAO,mBAAmB,CAAA;IAC9B,CAAC;IAED;;OAEG;IACO,+CAA+C,CACrD,mBAGe;QAEf,IAAI,CAAC,mBAAmB;YAAE,OAAO,SAAS,CAAA;QAE1C,IAAI,mCAAgB,CAAC,gBAAgB,CAAS,mBAAmB,CAAC;YAC9D,gFAAgF;YAChF,iCAAiC;YACjC,OAAO,OAAO,mBAAmB,CAAC,KAAK,KAAK,QAAQ;gBAChD,CAAC,CAAC,EAAE;gBACJ,CAAC,CAAC,mBAAmB,CAAC,KAAK,CAAA;QAEnC,OAAO,mBAAmB,CAAA;IAC9B,CAAC;IAED;;OAEG;IACO,sCAAsC,CAAC,KAAoB;QACjE,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,GAAG,EAAE,EAAE;YACpD,QAAQ,KAAK,CAAC,GAAG,CAAC,EAAE;gBAChB,KAAK,MAAM;oBACP,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;oBACvB,MAAK;gBACT,KAAK,KAAK;oBACN,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;oBACtB,MAAK;gBACT;oBACI,aAAa,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;aACtC;YACD,OAAO,aAAa,CAAA;QACxB,CAAC,EAAE,EAAmB,CAAC,CAAA;IAC3B,CAAC;IAED;;OAEG;IACO,yCAAyC,CAC/C,OAAgE;QAEhE,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACxB,MAAM,OAAO,GAAgD,EAAE,CAAA;YAC/D,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC9C,OAAO,OAAO,CAAA;YAEd,oDAAoD;YACpD,+BAA+B;YAC/B,6BAA6B;YAC7B,gBAAgB;SACnB;aAAM;YACH,kBAAkB;YAClB,OAAO,OAAO,CAAA;SACjB;IACL,CAAC;IAED;;OAEG;IACO,oBAAoB,CAC1B,QAAwB,EACxB,KAAU;QAEV,MAAM,gBAAgB,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAA;QAE/D,2CAA2C;QAC3C,oDAAoD;QACpD,IAAI,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACjC,OAAO;gBACH,GAAG,EAAE,IAAI,gBAAgB,CAAC,KAAK,CAAC;aACnC,CAAA;SACJ;QAED,mEAAmE;QACnE,uGAAuG;QACvG,IAAI,yBAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YAC7B,OAAO,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;gBAC7C,MAAM,WAAW,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;gBAChD,IAAI,WAAW,KAAK,SAAS;oBACzB,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,WAAW,CAAA;gBAC5C,OAAO,KAAK,CAAA;YAChB,CAAC,EAAE,EAAS,CAAC,CAAA;SAChB;QAED,uDAAuD;QACvD,oGAAoG;QACpG,wCAAwC;QACxC,OAAO;YACH,GAAG,EAAE,IAAI,gBAAgB,CAAC,KAAK,CAAC;SACnC,CAAA;IACL,CAAC;IAED;;OAEG;IACO,iCAAiC,CACvC,QAAwB,EACxB,MAAkD,EAClD,iBAAuC;QAEvC,uFAAuF;QACvF,MAAM,YAAY,GACd,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM;YACpC,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,UAAU,CAAA;QAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAA;QACzC,MAAM,CAAC,OAAO,GAAG,UAAU,QAAkC;YACzD,IAAI,QAAQ,EAAE;gBACV,YAAY,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAC/B,IAAI,EACJ,CAAC,KAAiB,EAAE,OAAiB,EAAQ,EAAE;oBAC3C,IAAI,KAAK,EAAE;wBACP,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAA;wBACxB,OAAM;qBACT;oBAED,MAAM,WAAW,GAAG,IAAI,yDAA2B,CAC/C,iBAAiB,CACpB,CAAA;oBACD,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CACrC,OAAO,EACP,QAAQ,CACX,CAAA;oBAED,0BAA0B;oBAC1B,WAAW,CAAC,WAAW;yBAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;yBACrC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAC9C,CAAC,CACJ,CAAA;aACJ;iBAAM;gBACH,OAAO,YAAY,CAAC,SAAS,CAAC,OAAO;qBAChC,IAAI,CAAC,IAAI,CAAC;qBACV,IAAI,CAAC,CAAC,OAAiB,EAAE,EAAE;oBACxB,MAAM,WAAW,GAAG,IAAI,yDAA2B,CAC/C,iBAAiB,CACpB,CAAA;oBACD,MAAM,QAAQ,GAAG,WAAW,CAAC,YAAY,CACrC,OAAO,EACP,QAAQ,CACX,CAAA;oBAED,0BAA0B;oBAC1B,OAAO,WAAW,CAAC,WAAW;yBACzB,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,QAAQ,CAAC;yBACrC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAA;gBAC7B,CAAC,CAAC,CAAA;aACT;QACL,CAAC,CAAA;QACD,MAAM,CAAC,IAAI,GAAG,UAAU,QAAsC;YAC1D,IAAI,QAAQ,EAAE;gBACV,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAC5B,IAAI,EACJ,CAAC,KAAiB,EAAE,MAAoB,EAAQ,EAAE;oBAC9C,IAAI,KAAK,IAAI,CAAC,MAAM,EAAE;wBAClB,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;wBACvB,OAAM;qBACT;oBAED,MAAM,WAAW,GAAG,IAAI,yDAA2B,CAC/C,iBAAiB,CACpB,CAAA;oBACD,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;oBAEtD,0BAA0B;oBAE1B,WAAW,CAAC,WAAW;yBAClB,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC;yBACrC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;gBAC5C,CAAC,CACJ,CAAA;aACJ;iBAAM;gBACH,OAAO,YAAY,CAAC,SAAS,CAAC,IAAI;qBAC7B,IAAI,CAAC,IAAI,CAAC;qBACV,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE;oBACrB,IAAI,CAAC,MAAM;wBAAE,OAAO,MAAM,CAAA;oBAE1B,MAAM,WAAW,GAAG,IAAI,yDAA2B,CAC/C,iBAAiB,CACpB,CAAA;oBACD,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;oBAEtD,0BAA0B;oBAC1B,OAAO,WAAW,CAAC,WAAW;yBACzB,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC;yBACrC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;gBAC3B,CAAC,CAAC,CAAA;aACT;QACL,CAAC,CAAA;IACL,CAAC;IAES,iBAAiB,CACvB,MAAsB,EACtB,gBAAgC,EAChC,KAAqB;QAErB,MAAM,EAAE,GAAG,EAAE,GAAG,SAAS,EAAE,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,EAAE,CAAA;QACzC,MAAM,CAAC,MAAM,CAAC;YACV,GAAG,EAAE;gBACD,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;gBAClD,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;aACrC;YACD,GAAG,SAAS;SACf,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,cAAc,CAC1B,iBAAuC,EACvC,mBAAyB,EACzB,YAA0C;QAE1C,MAAM,gBAAgB,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAA;QAC/D,MAAM,EAAE,GACJ,mBAAmB,YAAY,gBAAgB;YAC/C,OAAO,mBAAmB,KAAK,QAAQ;YACnC,CAAC,CAAC,mBAAmB;YACrB,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,0BAA0B,GAAG,CAC/B,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,mBAAmB,CACnC,CAAA;QACR,MAAM,KAAK,GACP,IAAI,CAAC,+CAA+C,CAChD,0BAA0B,CAC7B,IAAI,EAAE,CAAA;QACX,IAAI,EAAE,EAAE;YACJ,KAAK,CAAC,KAAK,CAAC;gBACR,EAAE,YAAY,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAA;SACrE;QACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;QACtE,MAAM,gBAAgB,GAClB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,CAAA;QACnE,IAAI,mCAAgB,CAAC,gBAAgB,CAAC,0BAA0B,CAAC,EAAE;YAC/D,IAAI,0BAA0B,CAAC,MAAM;gBACjC,MAAM,CAAC,OAAO,CACV,IAAI,CAAC,yCAAyC,CAC1C,0BAA0B,CAAC,MAAM,CACpC,CACJ,CAAA;YACL,IAAI,0BAA0B,CAAC,KAAK;gBAChC,MAAM,CAAC,IAAI,CACP,IAAI,CAAC,sCAAsC,CACvC,0BAA0B,CAAC,KAAK,CACnC,CACJ,CAAA;YACL,IAAI,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE;gBAC7D,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAA;aAC1D;SACJ;aAAM,IAAI,gBAAgB,EAAE;YACzB,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAA;SAC1D;QAED,+CAA+C;QAC/C,MAAM,MAAM,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;QAC9C,OAAO,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;IAC/C,CAAC;IAES,KAAK,CAAC,WAAW,CACvB,iBAAuC,EACvC,mBAGW;QAEX,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAA;QAE/D,MAAM,gBAAgB,GAClB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,CAAA;QAEnE,MAAM,KAAK,GACP,IAAI,CAAC,gDAAgD,CACjD,mBAAmB,CACtB,CAAA;QAEL,MAAM,gBAAgB,GAAG,6BAAa,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAA;QAE/D,IAAI,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,EAAE;YACX,KAAK,CAAC,KAAK,CAAC;gBACR,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,aAAY,gBAAgB;oBACjC,CAAC,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE;oBACX,CAAC,CAAC,IAAI,gBAAgB,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,EAAE,CAAC,CAAA;YAClC,KAAK,aAAL,KAAK,4BAAL,KAAK,CAAE,EAAE,CAAA;SACnB;QAED,MAAM,QAAQ,GAAoB,EAAE,CAAA;QACpC,IAAI,QAAQ,GAAa,EAAE,CAAA;QAC3B,IAAI,OAAY,CAAA;QAChB,IAAI,aAAkB,CAAA;QAEtB,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAA;QACxD,oDAAoD;QACpD,MAAM,cAAc,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QACtE,MAAM,SAAS,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;YAC3C,OAAO;gBACH,CAAC,GAAG,GAAG,CAAC,YAAY,EAAE,CAAC,EAAE;oBACrB,IAAI,EAAE,GAAG,CAAC,YAAY;oBACtB,OAAO,EAAE,GAAG,CAAC,OAAO;iBACvB;aACJ,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,IAAI,mCAAgB,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,EAAE;YACzD,IAAI,KAAK,EAAE;gBACP,aAAa,GAAG,EAAE,MAAM,EAAE,KAAY,EAAE,CAAA;gBACxC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;aAC/B;YAED,uBAAuB;YACvB,IAAI,mBAAmB,CAAC,SAAS,EAAE;gBAC/B,IAAI,OAAO,GAAG,EAAE,CAAA;gBAChB,KAAK,MAAM,KAAK,IAAI,mBAAmB,CAAC,SAAS,EAAE;oBAC/C,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBAEpB,MAAM,UAAU,GAAG,cAAc,CAAC,SAAS,CACvC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,KAAK,CAC1B,CAAA;oBACD,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE;wBACjB,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAA;wBAClD,MAAM,cAAc,GAAG;4BACnB,OAAO,EAAE;gCACL,IAAI,EAAE,QAAQ;gCACd,UAAU,EAAE,KAAK;gCACjB,YAAY,EAAE,KAAK;gCACnB,EAAE,EAAE,KAAK;6BACZ;yBACJ,CAAA;wBACD,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;qBAC/B;yBAAM;wBACH,OAAO,CAAC,GAAG,CAAC,oBAAoB,KAAK,iBAAiB,CAAC,CAAA;qBAC1D;iBACJ;gBACD,OAAO,GAAG,OAAO,CAAC,MAAM,CACpB,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,IAAI,SAAS,IAAI,MAAM,IAAI,IAAI,CACpD,CAAA;gBACD,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAA;gBACzB,4DAA4D;aAC/D;YAED,IAAI,mBAAmB,CAAC,MAAM,EAAE;gBAC5B,MAAM,yBAAyB,GAAG;oBAC9B,QAAQ,EAAE,IAAI,CAAC,yCAAyC,CACpD,mBAAmB,CAAC,MAAM,CAC7B;iBACJ,CAAA;gBACD,QAAQ,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAA;gBACxC,yCAAyC;aAC5C;YAED,IAAI,mBAAmB,CAAC,IAAI;gBACxB,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAA;YAEtD,IAAI,mBAAmB,CAAC,IAAI;gBACxB,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,mBAAmB,CAAC,IAAI,EAAE,CAAC,CAAA;YAEvD,IAAI,mBAAmB,CAAC,KAAK,EAAE;gBAC3B,QAAQ,CAAC,IAAI,CAAC;oBACV,KAAK,EAAE,IAAI,CAAC,sCAAsC,CAC9C,mBAAmB,CAAC,KAAK,CAC5B;iBACJ,CAAC,CAAA;aACL;YAED,IAAI,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE;gBACtD,IAAI,aAAa,EAAE;oBACf,IAAI,aAAa,CAAC,MAAM,EAAE;wBACtB,MAAM,GAAG,GAAG,aAAa,CAAC,MAAM,CAAC,GAAG,IAAI,EAAE,CAAA;wBAC1C,aAAa,CAAC,MAAM,CAAC,GAAG,GAAG;4BACvB,EAAE,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;4BAClD,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;yBACrC,CAAA;qBACJ;yBAAM;wBACH,QAAQ,CAAC,OAAO,CAAC;4BACb,MAAM,EAAE;gCACJ,GAAG,EAAE;oCACD;wCACI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE;4CAC7B,GAAG,EAAE,IAAI;yCACZ;qCACJ;iCACJ;6BACJ;yBACJ,CAAC,CAAA;qBACL;iBACJ;qBAAM;oBACH,QAAQ,CAAC,IAAI,CAAC;wBACV,MAAM,EAAE;4BACJ,GAAG,EAAE;gCACD;oCACI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE;wCAC7B,GAAG,EAAE,IAAI;qCACZ;iCACJ;6BACJ;yBACJ;qBACJ,CAAC,CAAA;iBACL;aACJ;SACJ;aAAM,IAAI,gBAAgB,EAAE;YACzB,QAAQ,CAAC,IAAI,CAAC;gBACV,MAAM,EAAE;oBACJ,GAAG,EAAE;wBACD;4BACI,CAAC,gBAAgB,CAAC,YAAY,CAAC,EAAE;gCAC7B,GAAG,EAAE,IAAI;6BACZ;yBACJ;qBACJ;iBACJ;aACJ,CAAC,CAAA;SACL;QAED,8BAA8B;QAC9B,yCAAyC;QAEzC,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAChC,iBAAiB,EACjB,QAAQ,CACX,CAAC,OAAO,EAAE,CAAA;QAEX,wCAAwC;QACxC,+CAA+C;QAC/C,iBAAiB;QAEjB,mCAAmC;QACnC,kEAAkE;QAElE,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE;YAClC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC1B,IAAI,SAAS,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,KAAK;oBACxC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YACxC,CAAC,CAAC,CAAA;YACF,OAAO,MAAM,CAAA;QACjB,CAAC,CAAC,CAAA;QACF,wCAAwC;QAExC,+BAA+B;QAE/B,OAAO,OAAO,CAAA;QAEd,gBAAgB;QAChB,6DAA6D;QAC7D,+BAA+B;QAC/B,QAAQ;QACR,yEAAyE;QACzE,2BAA2B;QAC3B,sEAAsE;QAEtE,iEAAiE;QACjE,sCAAsC;QACtC,0BAA0B;QAC1B,8DAA8D;QAC9D,8CAA8C;QAC9C,iBAAiB;QACjB,YAAY;QACZ,0EAA0E;QAC1E,2EAA2E;QAC3E,qCAAqC;QACrC,uBAAuB;QACvB,2DAA2D;QAC3D,6CAA6C;QAC7C,iBAAiB;QACjB,YAAY;QACZ,kEAAkE;QAClE,kEAAkE;QAClE,QAAQ;QACR,iCAAiC;QACjC,8DAA8D;QAC9D,IAAI;QACJ,0BAA0B;IAC9B,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,QAAwB;QACjC,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CACjC,CAAC,EACG,UAAU,EACV,OAAO,EACP,SAAS,EACT,IAAI,EACJ,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,iBAAiB,EACjB,YAAY,GACf,EAAE,EAAE;YACD,OAAO;gBACH,IAAI;gBACJ,UAAU;gBACV,OAAO;gBACP,SAAS;gBACT,YAAY;gBACZ,YAAY;gBACZ,YAAY;gBACZ,YAAY;gBACZ,iBAAiB;aACpB,CAAA;QACL,CAAC,CACJ,CAAA;QAED,MAAM,aAAa,GAAG,QAAQ,CAAC,MAAM,CACjC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,YAAY,IAAI,KAAK,CACjD,CAAA;QACD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CACpC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,UAAU,IAAI,GAAG,CAAC,YAAY,IAAI,KAAK,CACvD,CAAA;QACD,MAAM,OAAO,GAAG,CAAC,GAAG,aAAa,EAAE,GAAG,gBAAgB,CAAC,CAAA;QAEvD,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,gBAAgB,EAAE,CAAA;IACvD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CACrB,iBAAuC,EACvC,mBAAoE;QAEpE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAM;YAC5C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC;YACjD,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;SAChC,CAAC,CAAA;QAEF,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;IACrC,CAAC;CACJ;AA39CD,gDA29CC","file":"MongoEntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    ChangeStream,\n    ChangeStreamOptions,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBulkWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    CursorResult,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCallback,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    MongoError,\n    ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult,\n} from \"../driver/mongodb/typings\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { isValidObjectId } from \"../util/MongoUtils\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        return this.executeFind(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    async findBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity[]> {\n        return this.executeFind(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: any,\n    ): Promise<Entity[]> {\n        console.log(`[DEPRECATED] \"findByIds\" > use \"findBy\" method instead`)\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (ObjectUtils.isObject(id)) {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if ((id as any)[propertyName] instanceof objectIdInstance) {\n                        return (id as any)[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const results = await this.executeFind(entityClassOrName, {\n            ...optionsOrConditions,\n            where: query,\n        })\n\n        return results\n\n        // const cursor = await this.createEntityCursor(entityClassOrName, query)\n        // const deleteDateColumn =\n        //     this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        // if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n        //     if (optionsOrConditions.select)\n        //         cursor.project(\n        //             this.convertFindOptionsSelectToProjectCriteria(\n        //                 optionsOrConditions.select,\n        //             ),\n        //         )\n        //     if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n        //     if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n        //     if (optionsOrConditions.order)\n        //         cursor.sort(\n        //             this.convertFindOptionsOrderToOrderCriteria(\n        //                 optionsOrConditions.order,\n        //             ),\n        //         )\n        //     if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n        //         this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        //     }\n        // } else if (deleteDateColumn) {\n        //     this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        // }\n        // return await cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        // return this.executeFindOne(entityClassOrName, options)\n        const results = await this.executeFind(entityClassOrName, {\n            ...options,\n            take: 1,\n        })\n        return results.length > 0 ? results[0] : null\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        // return this.executeFindOne(entityClassOrName, where)\n\n        const results = await this.executeFind(entityClassOrName, {\n            where: typeof where.where != \"undefined\" ? where.where : where,\n            take: 1,\n        })\n        return results.length > 0 ? results[0] : null\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[],\n    ): Promise<Entity | null> {\n        // return this.executeFindOne(entityClassOrName, id)\n        console.log(`[DEPRECATED] use \"findOneBy\" method instead`)\n\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\n\n        let _id\n        if (id instanceof objectIdInstance) _id = id\n        if (typeof id === \"string\" && isValidObjectId(id))\n            _id = new objectIdInstance(id)\n\n        if (typeof _id == \"undefined\") {\n            console.log(`_id is invalid.`)\n            return null\n        }\n\n        const results = await this.executeFind(entityClassOrName, {\n            where: { _id },\n            take: 1,\n        })\n        return results.length > 0 ? results[0] : null\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindOptionsWhere<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectID\n            | ObjectID[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n    ): Cursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n    ): Cursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(\n            metadata,\n            cursor,\n            entityClassOrName,\n        )\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: ObjectLiteral[],\n        options?: CollectionAggregationOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: ObjectLiteral[],\n        options?: CollectionAggregationOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n\n        this.applyEntityTransformationToCursor(\n            metadata,\n            cursor,\n            entityClassOrName,\n        )\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: ObjectLiteral[],\n        options?: CollectionBulkWriteOptions,\n    ): Promise<BulkWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: MongoCountPreferences,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: MongoCountPreferences,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: string | any,\n        options?: MongodbIndexOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: ObjectLiteral[],\n    ): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: CollectionOptions,\n    ): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: CollectionOptions,\n    ): Promise<DeleteWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: ObjectLiteral,\n        options?: { readPreference?: ReadPreference | string },\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CollectionOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: { projection?: Object; sort?: Object; maxTimeMS?: number },\n    ): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOption,\n    ): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndReplaceOption,\n    ): Promise<FindAndModifyWriteOpResultObject> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Execute a geo search using a geo haystack index on a collection.\n     */\n    geoHaystackSearch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        x: number,\n        y: number,\n        options?: GeoHaystackSearchOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.geoHaystackSearch(\n            metadata.tableName,\n            x,\n            y,\n            options,\n        )\n    }\n\n    /**\n     * Execute the geoNear command to search for items in the collection.\n     */\n    geoNear<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        x: number,\n        y: number,\n        options?: GeoNearOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.geoNear(metadata.tableName, x, y, options)\n    }\n\n    /**\n     * Run a group command across a collection.\n     */\n    group<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        keys: Object | Array<any> | Function | Code,\n        condition: Object,\n        initial: Object,\n        reduce: Function | Code,\n        finalize: Function | Code,\n        command: boolean,\n        options?: { readPreference?: ReadPreference | string },\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.group(\n            metadata.tableName,\n            keys,\n            condition,\n            initial,\n            reduce,\n            finalize,\n            command,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: { full: boolean },\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollectionOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollectionOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: ObjectLiteral[],\n        options?: CollectionInsertManyOptions,\n    ): Promise<InsertWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: ObjectLiteral,\n        options?: CollectionInsertOneOptions,\n    ): Promise<InsertOneWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: {\n            batchSize?: number\n            readPreference?: ReadPreference | string\n        },\n    ): CommandCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n     */\n    mapReduce<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        map: Function | string,\n        reduce: Function | string,\n        options?: MapReduceOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.mapReduce(\n            metadata.tableName,\n            map,\n            reduce,\n            options,\n        )\n    }\n\n    /**\n     * Return N number of parallel cursors for a collection allowing parallel reading of entire collection.\n     * There are no ordering guarantees for returned results.\n     */\n    parallelCollectionScan<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ParallelCollectionScanOptions,\n    ): Promise<Cursor<Entity>[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.parallelCollectionScan(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    reIndex<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.reIndex(metadata.tableName)\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<any>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOneOptions,\n    ): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: { scale: number },\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Object[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        update: ObjectLiteral,\n        options?: { upsert?: boolean; w?: any; wtimeout?: number; j?: boolean },\n    ): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        update: ObjectLiteral,\n        options?: ReplaceOneOptions,\n    ): Promise<UpdateWriteOpResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            const options: { [key: string | number | symbol]: number } = {}\n            selects.map((select) => (options[select] = 1))\n            return options\n\n            // return selects.reduce((projectCriteria, key) => {\n            //     projectCriteria[key] = 1\n            //     return projectCriteria\n            // }, {} as any)\n        } else {\n            // todo: implement\n            return selects\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectID anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: Cursor<Entity> | AggregationCursor<Entity>,\n        entityClassOrName: EntityTarget<Entity>,\n    ) {\n        // mongdb-3.7 exports Cursor, mongodb-4.2 exports FindCursor, provide support for both.\n        const ParentCursor =\n            PlatformTools.load(\"mongodb\").Cursor ||\n            PlatformTools.load(\"mongodb\").FindCursor\n        const queryRunner = this.mongoQueryRunner\n        cursor.toArray = function (callback?: MongoCallback<Entity[]>) {\n            if (callback) {\n                ParentCursor.prototype.toArray.call(\n                    this,\n                    (error: MongoError, results: Entity[]): void => {\n                        if (error) {\n                            callback(error, results)\n                            return\n                        }\n\n                        const transformer = new DocumentToEntityTransformer(\n                            entityClassOrName,\n                        )\n                        const entities = transformer.transformAll(\n                            results,\n                            metadata,\n                        )\n\n                        // broadcast \"load\" events\n                        queryRunner.broadcaster\n                            .broadcast(\"Load\", metadata, entities)\n                            .then(() => callback(error, entities))\n                    },\n                )\n            } else {\n                return ParentCursor.prototype.toArray\n                    .call(this)\n                    .then((results: Entity[]) => {\n                        const transformer = new DocumentToEntityTransformer(\n                            entityClassOrName,\n                        )\n                        const entities = transformer.transformAll(\n                            results,\n                            metadata,\n                        )\n\n                        // broadcast \"load\" events\n                        return queryRunner.broadcaster\n                            .broadcast(\"Load\", metadata, entities)\n                            .then(() => entities)\n                    })\n            }\n        }\n        cursor.next = function (callback?: MongoCallback<CursorResult>) {\n            if (callback) {\n                ParentCursor.prototype.next.call(\n                    this,\n                    (error: MongoError, result: CursorResult): void => {\n                        if (error || !result) {\n                            callback(error, result)\n                            return\n                        }\n\n                        const transformer = new DocumentToEntityTransformer(\n                            entityClassOrName,\n                        )\n                        const entity = transformer.transform(result, metadata)\n\n                        // broadcast \"load\" events\n\n                        queryRunner.broadcaster\n                            .broadcast(\"Load\", metadata, [entity])\n                            .then(() => callback(error, entity))\n                    },\n                )\n            } else {\n                return ParentCursor.prototype.next\n                    .call(this)\n                    .then((result: Entity) => {\n                        if (!result) return result\n\n                        const transformer = new DocumentToEntityTransformer(\n                            entityClassOrName,\n                        )\n                        const entity = transformer.transform(result, metadata)\n\n                        // broadcast \"load\" events\n                        return queryRunner.broadcaster\n                            .broadcast(\"Load\", metadata, [entity])\n                            .then(() => entity)\n                    })\n            }\n        }\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: Cursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new objectIdInstance(id)\n        }\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectID\n\n        if (query?.id) {\n            query[\"_id\"] =\n                query?.id instanceof objectIdInstance\n                    ? query?.id\n                    : new objectIdInstance(query?.id)\n            delete query?.id\n        }\n\n        const pipeline: ObjectLiteral[] = []\n        let populate: string[] = []\n        let results: any\n        let firstPipeline: any\n\n        const { referenceColumns } = this.parseColumns(metadata)\n        // console.log(\"referenceColumns\", referenceColumns)\n        const refColumnNames = referenceColumns.map((col) => col.propertyName)\n        const refTables = referenceColumns.map((col) => {\n            return {\n                [`${col.propertyName}`]: {\n                    name: col.databaseName,\n                    isArray: col.isArray,\n                },\n            }\n        })\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (query) {\n                firstPipeline = { $match: query as any }\n                pipeline.push(firstPipeline)\n            }\n\n            // relations / populate\n            if (optionsOrConditions.relations) {\n                let lookups = []\n                for (const field in optionsOrConditions.relations) {\n                    populate.push(field)\n\n                    const fieldIndex = refColumnNames.findIndex(\n                        (name) => name == field,\n                    )\n                    if (fieldIndex > -1) {\n                        const refTable = refTables[fieldIndex][field].name\n                        const populateLookup = {\n                            $lookup: {\n                                from: refTable,\n                                localField: field,\n                                foreignField: \"_id\",\n                                as: field,\n                            },\n                        }\n                        lookups.push(populateLookup)\n                    } else {\n                        console.log(`Populated field \"${field}\" is not valid.`)\n                    }\n                }\n                lookups = lookups.filter(\n                    (lookup) => lookup != undefined && lookup != null,\n                )\n                pipeline.push(...lookups)\n                // TODO: populate and select specific fields to display only\n            }\n\n            if (optionsOrConditions.select) {\n                const selectWithProjectPipeline = {\n                    $project: this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                }\n                pipeline.push(selectWithProjectPipeline)\n                // console.log(selectWithProjectPipeline)\n            }\n\n            if (optionsOrConditions.skip)\n                pipeline.push({ $skip: optionsOrConditions.skip })\n\n            if (optionsOrConditions.take)\n                pipeline.push({ $limit: optionsOrConditions.take })\n\n            if (optionsOrConditions.order) {\n                pipeline.push({\n                    $sort: this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                })\n            }\n\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                if (firstPipeline) {\n                    if (firstPipeline.$match) {\n                        const $or = firstPipeline.$match.$or || []\n                        firstPipeline.$match.$or = [\n                            { [deleteDateColumn.propertyName]: { $eq: null } },\n                            ...(Array.isArray($or) ? $or : []),\n                        ]\n                    } else {\n                        pipeline.unshift({\n                            $match: {\n                                $or: [\n                                    {\n                                        [deleteDateColumn.propertyName]: {\n                                            $eq: null,\n                                        },\n                                    },\n                                ],\n                            },\n                        })\n                    }\n                } else {\n                    pipeline.push({\n                        $match: {\n                            $or: [\n                                {\n                                    [deleteDateColumn.propertyName]: {\n                                        $eq: null,\n                                    },\n                                },\n                            ],\n                        },\n                    })\n                }\n            }\n        } else if (deleteDateColumn) {\n            pipeline.push({\n                $match: {\n                    $or: [\n                        {\n                            [deleteDateColumn.propertyName]: {\n                                $eq: null,\n                            },\n                        },\n                    ],\n                },\n            })\n        }\n\n        // console.log(`pipeline >>>`)\n        // console.dir(pipeline, { depth: null })\n\n        results = await this.aggregateEntity(\n            entityClassOrName,\n            pipeline,\n        ).toArray()\n\n        // results = await this.mongoQueryRunner\n        //     .aggregate(metadata.tableName, pipeline)\n        //     .toArray()\n\n        // \"aggregate\" always returns array\n        // if the relation column is not an array, should return an object\n\n        results = results.map((result: any) => {\n            populate.map((field, index) => {\n                if (refTables[index][field].isArray == false)\n                    result[field] = result[field][0]\n            })\n            return result\n        })\n        // console.dir(results, { depth: null })\n\n        // transform document to entity\n\n        return results\n\n        // const query =\n        //     this.convertFindManyOptionsOrConditionsToMongodbQuery(\n        //         optionsOrConditions,\n        //     )\n        // const cursor = await this.createEntityCursor(entityClassOrName, query)\n        // const deleteDateColumn =\n        //     this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        // if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n        //     if (optionsOrConditions.select)\n        //         cursor.project(\n        //             this.convertFindOptionsSelectToProjectCriteria(\n        //                 optionsOrConditions.select,\n        //             ),\n        //         )\n        //     if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n        //     if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n        //     if (optionsOrConditions.order)\n        //         cursor.sort(\n        //             this.convertFindOptionsOrderToOrderCriteria(\n        //                 optionsOrConditions.order,\n        //             ),\n        //         )\n        //     if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n        //         this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        //     }\n        // } else if (deleteDateColumn) {\n        //     this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        // }\n        // return cursor.toArray()\n    }\n\n    /**\n     * Read entity's metadata to parse columns that references to other table (collection)\n     */\n    parseColumns(metadata: EntityMetadata) {\n        const _columns = metadata.columns.map(\n            ({\n                isObjectId,\n                isArray,\n                isVirtual,\n                type,\n                databaseName,\n                databasePath,\n                propertyName,\n                propertyAliasName,\n                propertyPath,\n            }) => {\n                return {\n                    type,\n                    isObjectId,\n                    isArray,\n                    isVirtual,\n                    databaseName,\n                    databasePath,\n                    propertyName,\n                    propertyPath,\n                    propertyAliasName,\n                }\n            },\n        )\n\n        const normalColumns = _columns.filter(\n            (col) => col.type || col.databaseName == \"_id\",\n        )\n        const referenceColumns = _columns.filter(\n            (col) => col.isObjectId && col.databaseName != \"_id\",\n        )\n        const columns = [...normalColumns, ...referenceColumns]\n\n        return { columns, normalColumns, referenceColumns }\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const [results, count] = await Promise.all<any>([\n            this.find(entityClassOrName, optionsOrConditions),\n            this.count(entityClassOrName),\n        ])\n\n        return [results, parseInt(count)]\n    }\n}\n"],"sourceRoot":".."}