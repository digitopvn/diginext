{"version":3,"sources":["../browser/src/logger/SimpleConsoleLogger.ts"],"names":[],"mappings":"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","file":"SimpleConsoleLogger.js","sourcesContent":["import { LoggerOptions } from \"./LoggerOptions\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { Logger } from \"./Logger\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and does not use syntax highlighting.\n */\nexport class SimpleConsoleLogger implements Logger {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"query\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            console.log(\"query\" + \": \" + sql)\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(\n        error: string,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        if (\n            this.options === \"all\" ||\n            this.options === true ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"error\") !== -1)\n        ) {\n            const sql =\n                query +\n                (parameters && parameters.length\n                    ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                    : \"\")\n            console.log(`query failed: ` + sql)\n            console.log(`error:`, error)\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(\n        time: number,\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ) {\n        const sql =\n            query +\n            (parameters && parameters.length\n                ? \" -- PARAMETERS: \" + this.stringifyParams(parameters)\n                : \"\")\n        console.log(`query is slow: ` + sql)\n        console.log(`execution time: ` + time)\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (\n            this.options === \"all\" ||\n            (Array.isArray(this.options) &&\n                this.options.indexOf(\"schema\") !== -1)\n        ) {\n            console.log(message)\n        }\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        console.log(message)\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(\n        level: \"log\" | \"info\" | \"warn\",\n        message: any,\n        queryRunner?: QueryRunner,\n    ) {\n        switch (level) {\n            case \"log\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"log\") !== -1)\n                )\n                    console.log(message)\n                break\n            case \"info\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"info\") !== -1)\n                )\n                    console.info(message)\n                break\n            case \"warn\":\n                if (\n                    this.options === \"all\" ||\n                    (Array.isArray(this.options) &&\n                        this.options.indexOf(\"warn\") !== -1)\n                )\n                    console.warn(message)\n                break\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters)\n        } catch (error) {\n            // most probably circular objects in parameters\n            return parameters\n        }\n    }\n}\n"],"sourceRoot":".."}