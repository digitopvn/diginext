import authCluster from "./cluster-auth";
import { createImagePullSecretsInNamespace } from "./image-pull-secret";
import { currentCluster, currentContext, getKubeConfig, getKubeContextByCluster, getKubeContextByClusterShortName } from "./kube-config";
import { previewPrerelease, rollout } from "./kube-deploy";
import {
	createNamespace,
	deleteDeploy,
	deleteDeploymentsByFilter,
	deleteEnvVar,
	deleteEnvVarByFilter,
	deleteIngress,
	deleteIngressByFilter,
	deleteNamespace,
	deleteNamespaceByCluster,
	deleteSecret,
	deleteSecretsByFilter,
	deleteService,
	deleteServiceByFilter,
	getAllDeploys,
	getAllIngresses,
	getAllNamespaces,
	getAllPods,
	getAllSecrets,
	getAllServices,
	getDeploy,
	getDeployByFilter,
	getIngress,
	getPod,
	getPodsByFilter,
	getService,
	isNamespaceExisted,
	isSecretExisted,
	kubectlApply,
	kubectlApplyContent,
	setDeployImage,
	setDeployImageByFilter,
	setDeployImagePullSecretByFilter,
	setEnvVar,
	setEnvVarByFilter,
} from "./kubectl";

const ClusterManager = {
	authCluster,
	createImagePullSecretsInNamespace,
	currentContext,
	currentCluster,
	createNamespace,
	deleteNamespace,
	deleteNamespaceByCluster,
	deleteSecret,
	deleteDeploy,
	deleteDeploymentsByFilter,
	deleteEnvVar,
	deleteEnvVarByFilter,
	deleteIngressByFilter,
	deleteIngress,
	deleteSecretsByFilter,
	deleteService,
	deleteServiceByFilter,
	getKubeConfig,
	getKubeContextByClusterShortName,
	getKubeContextByCluster,
	getAllDeploys,
	getAllServices,
	getAllIngresses,
	getAllPods,
	getAllSecrets,
	getAllNamespaces,
	getService,
	getPod,
	getPodsByFilter,
	getDeployByFilter,
	getIngress,
	getDeploy,
	isNamespaceExisted,
	isSecretExisted,
	setEnvVar,
	setEnvVarByFilter,
	setDeployImage,
	setDeployImageByFilter,
	setDeployImagePullSecretByFilter,
	previewPrerelease,
	rollout,
	kubectlApply,
	kubectlApplyContent,
};

export default ClusterManager;
